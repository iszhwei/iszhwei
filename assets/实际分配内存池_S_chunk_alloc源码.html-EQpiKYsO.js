import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as l,a}from"./app-2pke9_a8.js";const e="/assets/watermark_type_ZHJvaWRzYW5zZmFsbGJhY2s_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-ClnWf8zR.png",p="/assets/watermark_type_ZHJvaWRzYW5zZmFsbGJhY2s_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-17144080689283-Y922rivh.png",o="/assets/watermark_type_ZHJvaWRzYW5zZmFsbGJhY2s_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-17144080884316-am5wEC6E.png",t="/assets/image-20240430223530859-KMXBZclx.png",c={},i=a('<h1 id="实际分配内存池-s-chunk-alloc源码" tabindex="-1"><a class="header-anchor" href="#实际分配内存池-s-chunk-alloc源码" aria-hidden="true">#</a> 实际分配内存池_S_chunk_alloc源码</h1><p><code>_S_chunk_alloc(size_t __size, int&amp; __nobjs)</code>作用：到备用内存中拿<code>__nobjs</code>个<code>__size</code>字节的chunk块分配</p><p>如果备用内存足够，就从备用内存中拿，然后将<code>_S_start_free</code>指向分配后，空闲备用空间的首地址</p><p>如果备用内存不够了，就malloc申请，并让<code>_S_start_free</code> 指向malloc的首地址，让<code>_S_end_free</code>指向为malloc空间的尾地址，然后递归调用<code>_S_chunk_alloc</code>重新在备用内存中拿__nobjs个__size字节的chunk块分配</p><blockquote><p>有一个疑问：为什么其他申请的16B的内存可以在_S_free_list 的8B的内存池申请 后来我懂了，源码中用 static char* _S_end_free、_S_start_free变量，标识备用内存池的范围。也就是不管分配多少字节的内存，都是在_S_start_free和_S_end_free区间内给用户分配。_S_free_list的每个元素都是一个指针，保存的是专门为分配对应字节的一大块内存空闲位置的起始地址</p></blockquote><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><mark>再到备用内存给用户分配size字节的时候：</mark></p><ol><li><p><mark>若二级空间配置器应用管理的剩余内存还<strong>够</strong><code>20*size</code>个字节，则<strong>直接分出去</strong><code>20*size</code>专门用来分配20个size字节的chunk，然后需要在<code>_S_refill</code>函数中<strong>填写next域</strong></mark></p></li><li><p><mark>若不够分配<code>20*size</code>个字节</mark></p><ol><li><mark>但是<strong>够分配size个字节</strong>，那将备用的内存<strong>尽可能多的分割出完整的size内存块</strong>（修改了__nobjs大小）。此时也需要在<code>_S_refill</code>函数中<strong>填写next域</strong>，</mark></li><li><mark>然而当备用内存<strong>只能分割出一个size内存块时，就不用再填写地址域了</strong>。其实也没有办法再填写了，因为没内存了。</mark></li></ol></li><li><p><mark>若实在太小，<strong>连一个size内存块也分配不出来。剩余的备用内存就会根据自身的大小被挂在<code>_S_free_list</code> 的对应位置</strong>，然后需要<strong>重新找OS申请新的内存</strong>（malloc）</mark></p><ol><li><mark>向OS申请成功，则分配一个大块的空闲内存，并返回<code>__size*__nobjs</code>大小的内存用于分配</mark></li><li><mark>向OS申请失败则</mark><ol><li><mark>在<code>_S_free_list</code>中查找一个比<code>__size</code>大的空闲chunk分配出去，然后再回到之前的分配流程分配出去。</mark></li><li><mark>如果在<code>_S_free_list</code>中不存在比<code>__size</code>大的空闲chunk，则再次尝试正常申请内存（malloc）</mark><ol><li><mark>申请成功，则返回正常分配</mark></li><li><mark>申请失败，先检查时候设置用于释放某些可以释放的资源的回调函数，</mark><ol><li><mark>如果没有设置，则抛出异常</mark></li><li><mark>若有设置则调用回调函数释放资源，然后再次malloc分配</mark><ol><li><mark>若分配成功则返回正常分配</mark></li><li><mark>若失败则循环调用回调函数释放资源然后malloc分配，直至分配成功</mark></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol><p><strong>进入if中:</strong></p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>进入else中：</strong></p><figure><img src="'+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">__threads</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">__inst</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">char</span><span style="color:#56B6C2;">*</span></span>
<span class="line"><span style="color:#E5C07B;">__default_alloc_template</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">__threads</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">__inst</span><span style="color:#ABB2BF;">&gt;::</span><span style="color:#61AFEF;">_S_chunk_alloc</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> __size, </span></span>
<span class="line"><span style="color:#ABB2BF;">                                                            </span><span style="color:#C678DD;">int</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;"> __nobjs)</span><span style="color:#7F848E;font-style:italic;">  // 按引用接收__nobjs，如果不够__nobjs会改变该值的大小</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">char</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> __result;</span><span style="color:#7F848E;font-style:italic;">//指向待分配的内存首地址</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 实际分配的字节数，8 * 20</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> __total_bytes </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> __size </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> __nobjs;</span><span style="color:#7F848E;font-style:italic;">  //需要返回的内存大小</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //_S_end_free、_S_start_free都是static char*变量，标识备用内存池的范围，初始值为0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // _S_start_free、_S_end_free分别记录内存池（__size * __nobjs）可用的起始和末尾地址</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> __bytes_left </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _S_end_free </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> _S_start_free;</span><span style="color:#7F848E;font-style:italic;">//备用内存中可用内存大小</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (__bytes_left </span><span style="color:#C678DD;">&gt;=</span><span style="color:#ABB2BF;"> __total_bytes) {</span><span style="color:#7F848E;font-style:italic;">//完全足够，直接分配</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    	// 正常的__size在对应的内存池分配，备用的内存池还可以继续分配__size * __nobjs</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    	// 可以分配出去一个小的内存池</span></span>
<span class="line"><span style="color:#ABB2BF;">        __result </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _S_start_free;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 修改_S_start_free，分配__total_bytes空间出去</span></span>
<span class="line"><span style="color:#ABB2BF;">        _S_start_free </span><span style="color:#C678DD;">+=</span><span style="color:#ABB2BF;"> __total_bytes;</span><span style="color:#7F848E;font-style:italic;">//_S_start_free指向剩余可以内存首地址</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">(__result);</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (__bytes_left </span><span style="color:#C678DD;">&gt;=</span><span style="color:#ABB2BF;"> __size) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    	// 注意这里为什么是大于等于一个chunk块的大小__size，因为容器申请只是申请一个内存块</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    	// 而是空间配置器程序调用_S_chunk_alloc希望能够分配20个chunk块的内存，可以不满足分配20个块的要求，但必须满足容器申请1个内存块的要求，所以可以修改__nobjs的值</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   		// 假设我们向内存池申请16字节的时候，我们在_S_free_list向OS申请8字节时备用的内存池进行申请</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   		// 此时会进入else if</span></span>
<span class="line"><span style="color:#ABB2BF;">   		</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   		// 剩余的字节数还能分配出__nobjs个完整的__size的__chunk块</span></span>
<span class="line"><span style="color:#ABB2BF;">        __nobjs </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">)(__bytes_left</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">__size);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 现在的__total_bytes 肯定不大于 _S_end_free - _S_start_free</span></span>
<span class="line"><span style="color:#ABB2BF;">        __total_bytes </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> __size </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> __nobjs;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // __result 指向空闲内存池的首地址，也就是即将被分配出去的首地址</span></span>
<span class="line"><span style="color:#ABB2BF;">        __result </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _S_start_free;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 更新空闲内存池的首地址</span></span>
<span class="line"><span style="color:#ABB2BF;">        _S_start_free </span><span style="color:#C678DD;">+=</span><span style="color:#ABB2BF;"> __total_bytes;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">(__result);</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    	// 没有足够的空间分配了 或者_S_free_list还没有申请过内存池 ，需要申请内存 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    	// _S_heap_size初始值为0，第一次向OS申请的话__bytes_to_get = 2 * 8 * 20 = 320</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    	// _S_heap_size记录了已经向OS申请的所有空间</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> __bytes_to_get </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> __total_bytes </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">_S_round_up</span><span style="color:#ABB2BF;">(_S_heap_size </span><span style="color:#C678DD;">&gt;&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//所以，新申请的内存只会越来越大</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Try to make use of the left-over piece.</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (__bytes_left </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) {</span><span style="color:#7F848E;font-style:italic;">//原来备用内存有剩余，但是不足size的情况</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        	// 由于之前申请的备用内存太小，甚至无法分出一个size</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        	// 这里剩余的内存必然为8的整数倍，且在区间[8,128)内。因为从OS申请空间的时候就是按照8的整数申请的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        	// 之前申请的备用内存，会被挂在__my_free_list后，专门用于分配指定大小的内存</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        	// 而且只能分配 &lt;指定大小的内存&gt; 一次</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        	//找到__bytes_left大小的空间在自由链表的位置，因为元素为指针，所以遍历用二级指针</span></span>
<span class="line"><span style="color:#ABB2BF;">             _Obj</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> __STL_VOLATILE</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> __my_free_list </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">            		_S_free_list </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">_S_freelist_index</span><span style="color:#ABB2BF;">(__bytes_left);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 剩余内存连接到_S_freelists上</span></span>
<span class="line"><span style="color:#ABB2BF;">            ((_Obj</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)_S_start_free)</span><span style="color:#E5C07B;"> </span><span style="color:#ABB2BF;">-&gt; </span><span style="color:#E06C75;">_M_free_list_link</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">__my_free_list;</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">__my_free_list </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (_Obj</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)_S_start_free;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 用malloc申请__bytes_to_get个字节，也就是一个小的内存池了，_S_start_free 指向小内存池的首地址</span></span>
<span class="line"><span style="color:#ABB2BF;">        _S_start_free </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">char</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;">malloc</span><span style="color:#ABB2BF;">(__bytes_to_get);</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> _S_start_free) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        	// 向OS申请内存失败</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> __i;</span></span>
<span class="line"><span style="color:#ABB2BF;">            _Obj</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> __STL_VOLATILE</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> __my_free_list;</span></span>
<span class="line"><span style="color:#ABB2BF;">	    	_Obj</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> __p;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // Try to make do with what we have.  That can&#39;t</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // hurt.  We do not try smaller requests, since that tends</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // to result in disaster on multi-process machines.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 1. 剩余的备用内存连一个__size的空间都不够，2. 向OS申请__bytes_to_get字节内存失败</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // __i从__size开始到128(_MAX_BYTES)在_S_free_list中从前往后找挂载的空闲内存块</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (__i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> __size; __i </span><span style="color:#C678DD;">&lt;=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;">) _MAX_BYTES; __i </span><span style="color:#C678DD;">+=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;">) _ALIGN) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                //当前__i大小的chunk应该在_S_free_list挂载的位置</span></span>
<span class="line"><span style="color:#ABB2BF;">                __my_free_list </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _S_free_list </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">_S_freelist_index</span><span style="color:#ABB2BF;">(__i);</span></span>
<span class="line"><span style="color:#ABB2BF;">                __p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">__my_free_list;</span><span style="color:#7F848E;font-style:italic;">//表示挂载第一个chunk的地址</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> __p) {</span><span style="color:#7F848E;font-style:italic;">//如果当前位置存在挂载的chunk的情况</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                	// 找到_S_free_list中已经分配内存池的位置</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                	// 修改_S_free_list的对应位置的地址，准备分配出一整个__i块出去</span></span>
<span class="line"><span style="color:#ABB2BF;">                    </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">__my_free_list </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">__p </span><span style="color:#ABB2BF;">-&gt; </span><span style="color:#E06C75;">_M_free_list_link</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//指向第二个chunk地址</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // 在_S_free_list别的地方拿到未分配的内存块后，修改_S_start_free、_S_end_free</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // 得到新的备用内存，重新给用户分配__nobjs个__size的空间</span></span>
<span class="line"><span style="color:#ABB2BF;">                    _S_start_free </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">char</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)__p;</span></span>
<span class="line"><span style="color:#ABB2BF;">                    _S_end_free </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _S_start_free </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> __i;</span></span>
<span class="line"><span style="color:#ABB2BF;">                    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">_S_chunk_alloc</span><span style="color:#ABB2BF;">(__size, __nobjs));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // Any leftover piece will eventually make it to the right free list.</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 若for循环完成，依然找不到空闲的内存块</span></span>
<span class="line"><span style="color:#ABB2BF;">	        _S_end_free </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">	// In case of exception.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	        // 重新再次申请__bytes_to_get字节</span></span>
<span class="line"><span style="color:#ABB2BF;">            _S_start_free </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">char</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)</span><span style="color:#E5C07B;">malloc_alloc</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">allocate</span><span style="color:#ABB2BF;">(__bytes_to_get);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // This should either throw an exception or remedy the situation. </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // Thus we assume it succeeded.</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //分配成功之后：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // _S_heap_size 记录所有申请的堆空间大小</span></span>
<span class="line"><span style="color:#ABB2BF;">        _S_heap_size </span><span style="color:#C678DD;">+=</span><span style="color:#ABB2BF;"> __bytes_to_get;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // _S_end_free 指向空闲小内存池的尾地址</span></span>
<span class="line"><span style="color:#ABB2BF;">        _S_end_free </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _S_start_free </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> __bytes_to_get;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // </span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">_S_chunk_alloc</span><span style="color:#ABB2BF;">(__size, __nobjs));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>malloc_alloc::allocate源码</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 可以设置一个回调函数，当OS开辟内存失败的时候，调用此函数。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 此函数可能用于释放某些可以释放的资源</span></span>
<span class="line"><span style="color:#C678DD;">#ifndef</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">__STL_STATIC_TEMPLATE_MEMBER_BUG</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> (* </span><span style="color:#E06C75;">__malloc_alloc_oom_handler</span><span style="color:#ABB2BF;">)();</span></span>
<span class="line"><span style="color:#C678DD;">#endif</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">void*</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">malloc_alloc</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">allocate</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">__n</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 再次尝试一下正常向OS申请空间</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">void</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> __result </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">malloc</span><span style="color:#ABB2BF;">(__n);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 正常向OS申请空间失败，调用_S_oom_malloc</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> __result) __result </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">_S_oom_malloc</span><span style="color:#ABB2BF;">(__n);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> __result;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">__inst</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">void*</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">__malloc_alloc_template</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">__inst</span><span style="color:#ABB2BF;">&gt;::</span><span style="color:#61AFEF;">_S_oom_malloc</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">__n</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> (* </span><span style="color:#E06C75;">__my_malloc_handler</span><span style="color:#ABB2BF;">)();</span><span style="color:#7F848E;font-style:italic;"> // 函数指针</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">void</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> __result;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 死循环，如果一直分配不成功，则会不停的调用回调函数</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (;;) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        __my_malloc_handler </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> __malloc_alloc_oom_handler;</span><span style="color:#7F848E;font-style:italic;"> // 设置回调函数</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> __my_malloc_handler) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        	// 用户也没有设置任何回调函数，释放内存，那直接抛出异常</span></span>
<span class="line"><span style="color:#ABB2BF;">        	 __THROW_BAD_ALLOC;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 用户设置了回调函数，先调用函数进行资源释放</span></span>
<span class="line"><span style="color:#ABB2BF;">        (</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">__my_malloc_handler)();</span></span>
<span class="line"><span style="color:#ABB2BF;">        __result </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">malloc</span><span style="color:#ABB2BF;">(__n);</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (__result) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">(__result);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',16),r=[i];function B(_,y){return n(),l("div",null,r)}const v=s(c,[["render",B],["__file","实际分配内存池_S_chunk_alloc源码.html.vue"]]);export{v as default};
