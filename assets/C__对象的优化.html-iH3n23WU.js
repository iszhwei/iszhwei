const s=JSON.parse('{"key":"v-7c0c7a84","path":"/ccpp/15%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BC%98%E5%8C%96/C__%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BC%98%E5%8C%96.html","title":"C++对象的优化","lang":"zh-CN","frontmatter":{"title":"C++对象的优化","icon":"file","order":1,"headerDepth":4,"category":["c/c++"],"tag":["对象优化"],"description":"C++对象的优化 1、对象使用过程中背后调用了哪些方法？ 了解构造和析构的调用，以及调用顺序 用临时对象生成新对象 class Test { public: \\tTest(int a = 10) :ma(a) \\t{ cout &lt;&lt; \\"Test(int)\\" &lt;&lt; endl; } \\t \\t~Test() \\t{ cout &lt;&lt; \\"~Test()\\" &lt;&lt; endl; } \\t \\tTest(const Test &amp;t) :ma(t.ma) \\t{ cout &lt;&lt; \\"Test(const Test&amp;)\\" &lt;&lt; endl; } \\t \\tTest&amp; operator=(const Test &amp;t) \\t{ \\t\\tcout &lt;&lt; \\"operator=\\" &lt;&lt; endl; \\t\\tma = t.ma; \\t\\treturn *this; \\t} private: \\tint ma; }; int main() { \\tTest t1;//调用构造函数 \\tTest t2(t1);//调用拷贝构造函数 \\tTest t3 = t1;//调用拷贝构造函数，因为t3还没有生成 \\t \\t//Test(20) 显示生成临时对象，是没有名字的，所以其生存周期：所在的语句 \\t//语句结束，临时对象就析构了 \\t/* \\tC++编译器对于对象构造的优化：用临时对象生成新对象的时候，临时对象 \\t就不产生了，直接构造新对象就可以了 \\t*/ \\tTest t4 = Test(20);//和Test t4(20);没有区别的！ \\tcout &lt;&lt; \\"--------------\\" &lt;&lt; endl; \\treturn 0; }","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/15%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BC%98%E5%8C%96/C__%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BC%98%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"C++对象的优化"}],["meta",{"property":"og:description","content":"C++对象的优化 1、对象使用过程中背后调用了哪些方法？ 了解构造和析构的调用，以及调用顺序 用临时对象生成新对象 class Test { public: \\tTest(int a = 10) :ma(a) \\t{ cout &lt;&lt; \\"Test(int)\\" &lt;&lt; endl; } \\t \\t~Test() \\t{ cout &lt;&lt; \\"~Test()\\" &lt;&lt; endl; } \\t \\tTest(const Test &amp;t) :ma(t.ma) \\t{ cout &lt;&lt; \\"Test(const Test&amp;)\\" &lt;&lt; endl; } \\t \\tTest&amp; operator=(const Test &amp;t) \\t{ \\t\\tcout &lt;&lt; \\"operator=\\" &lt;&lt; endl; \\t\\tma = t.ma; \\t\\treturn *this; \\t} private: \\tint ma; }; int main() { \\tTest t1;//调用构造函数 \\tTest t2(t1);//调用拷贝构造函数 \\tTest t3 = t1;//调用拷贝构造函数，因为t3还没有生成 \\t \\t//Test(20) 显示生成临时对象，是没有名字的，所以其生存周期：所在的语句 \\t//语句结束，临时对象就析构了 \\t/* \\tC++编译器对于对象构造的优化：用临时对象生成新对象的时候，临时对象 \\t就不产生了，直接构造新对象就可以了 \\t*/ \\tTest t4 = Test(20);//和Test t4(20);没有区别的！ \\tcout &lt;&lt; \\"--------------\\" &lt;&lt; endl; \\treturn 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"对象优化"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++对象的优化\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[{"level":2,"title":"1、对象使用过程中背后调用了哪些方法？","slug":"_1、对象使用过程中背后调用了哪些方法","link":"#_1、对象使用过程中背后调用了哪些方法","children":[{"level":3,"title":"用临时对象生成新对象","slug":"用临时对象生成新对象","link":"#用临时对象生成新对象","children":[]},{"level":3,"title":"用临时对象给已存在对象赋值","slug":"用临时对象给已存在对象赋值","link":"#用临时对象给已存在对象赋值","children":[]},{"level":3,"title":"显示生成临时对象和隐式生成临时对象","slug":"显示生成临时对象和隐式生成临时对象","link":"#显示生成临时对象和隐式生成临时对象","children":[]},{"level":3,"title":"临时对象的指针和引用","slug":"临时对象的指针和引用","link":"#临时对象的指针和引用","children":[]},{"level":3,"title":"示例二","slug":"示例二","link":"#示例二","children":[]}]},{"level":2,"title":"2、函数调用过程中对象被后续调用的方法太多","slug":"_2、函数调用过程中对象被后续调用的方法太多","link":"#_2、函数调用过程中对象被后续调用的方法太多","children":[]},{"level":2,"title":"3、总结三条对象优化原则","slug":"_3、总结三条对象优化原则","link":"#_3、总结三条对象优化原则","children":[]}],"git":{},"readingTime":{"minutes":8.04,"words":2412},"filePathRelative":"ccpp/15 对象的优化/C++对象的优化.md","excerpt":"<h1> C++对象的优化</h1>\\n<h2> 1、对象<strong>使用过程中</strong>背后调用了哪些方法？</h2>\\n<p>了解构造和析构的调用，以及调用顺序</p>\\n<h3> 用临时对象生成新对象</h3>\\n<div class=\\"language-c++ line-numbers-mode\\" data-ext=\\"c++\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Test</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">public:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #61AFEF\\">Test</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">a</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">10</span><span style=\\"color: #ABB2BF\\">) :</span><span style=\\"color: #61AFEF\\">ma</span><span style=\\"color: #ABB2BF\\">(a) </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{ cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"Test(int)\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl; }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #61AFEF\\">~Test</span><span style=\\"color: #ABB2BF\\">() </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{ cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"~Test()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl; }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #61AFEF\\">Test</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Test</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #E06C75; font-style: italic\\">t</span><span style=\\"color: #ABB2BF\\">) :</span><span style=\\"color: #61AFEF\\">ma</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">t</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">ma</span><span style=\\"color: #ABB2BF\\">) </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{ cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"Test(const Test&amp;)\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl; }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #E5C07B\\">Test</span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">operator</span><span style=\\"color: #ABB2BF\\">=(</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Test</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #E06C75; font-style: italic\\">t</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\tcout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"operator=\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\tma </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">t</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">ma</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #E5C07B\\">this</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">private:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> ma;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">main</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tTest t1;</span><span style=\\"color: #7F848E; font-style: italic\\">//调用构造函数 </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tTest </span><span style=\\"color: #61AFEF\\">t2</span><span style=\\"color: #ABB2BF\\">(t1);</span><span style=\\"color: #7F848E; font-style: italic\\">//调用拷贝构造函数 </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tTest t3 </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> t1;</span><span style=\\"color: #7F848E; font-style: italic\\">//调用拷贝构造函数，因为t3还没有生成 </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t//Test(20) 显示生成临时对象，是没有名字的，所以其生存周期：所在的语句</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t//语句结束，临时对象就析构了 </span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t/*</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\tC++编译器对于对象构造的优化：用临时对象生成新对象的时候，临时对象</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t就不产生了，直接构造新对象就可以了</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t*/</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tTest t4 </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">Test</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #D19A66\\">20</span><span style=\\"color: #ABB2BF\\">);</span><span style=\\"color: #7F848E; font-style: italic\\">//和Test t4(20);没有区别的！</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tcout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"--------------\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{s as data};
