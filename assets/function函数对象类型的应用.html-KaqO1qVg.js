import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as c,c as i,d as n,e as s,f as a,w as o,a as p}from"./app-2pke9_a8.js";const r="/assets/84de85029ca44d0fb2e02fc432b65942-f2aAz2mW.png",B="/assets/02254b528fa64c0f86e397c70b128cfd-XrSApmbw.png",d="/assets/484a8362794c4358af2ded6682150857-QO96t8hL.png",y={},u=p('<h1 id="function函数对象类型的应用" tabindex="-1"><a class="header-anchor" href="#function函数对象类型的应用" aria-hidden="true">#</a> function函数对象类型的应用</h1><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>function：函数对象类；</strong></p><ul><li>绑定器、函数对象、lambda表达式实际上都是函数对象。</li></ul><p>如果我们<u>最终得到的绑定器、函数对象、lambda表达式，这些函数对象，想在多条语句中应用 ，怎么办？</u><strong>如何将这些函数对象的类型留下来？</strong></p><p>源码中希望你用一个<strong>函数类型</strong>来<strong>实例化function模板</strong>。</p><h2 id="区别函数类型和函数指针类型" tabindex="-1"><a class="header-anchor" href="#区别函数类型和函数指针类型" aria-hidden="true">#</a> 区别函数类型和函数指针类型：</h2><p><strong>函数指针类型：</strong></p>',8),F=n("strong",null,"返回值",-1),v=n("strong",null,"不带形参",-1),A=p(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;">(*)()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>函数类型：</strong></p><ul><li>我们需要用<strong>函数类型来实例化function。</strong></li><li>只给出<strong>返回值和参数列表</strong>即可</li></ul><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><h3 id="无参函数类型" tabindex="-1"><a class="header-anchor" href="#无参函数类型" aria-hidden="true">#</a> 无参函数类型</h3><p>用函数对象类型func1将hello1函数类型保留下来了，然后就可以使用func1()调用了</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">hello1</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;hello world&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//从function的类模板定义处，看到希望用一个函数类型实例化function</span></span>
<span class="line"><span style="color:#ABB2BF;">function</span><span style="color:#C678DD;">&lt;void</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> func1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> hello1;</span></span>
<span class="line"><span style="color:#61AFEF;">func1</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;">	//func1.operator()()=&gt;hello1()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#结果</span></span>
<span class="line"><span style="color:#61AFEF;">hello</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">world</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="有参函数类型" tabindex="-1"><a class="header-anchor" href="#有参函数类型" aria-hidden="true">#</a> 有参函数类型</h3><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">hello2</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;"> //void (*pfunc)(string)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> str </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">function</span><span style="color:#C678DD;">&lt;void</span><span style="color:#ABB2BF;">(string)</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> func2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> hello2;</span></span>
<span class="line"><span style="color:#61AFEF;">func2</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello world2!&quot;</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//func2.operator()(string str)=&gt;hello2(str)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#结果</span></span>
<span class="line"><span style="color:#61AFEF;">hello</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">world2!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> a </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> b;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">function</span><span style="color:#C678DD;">&lt;int</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> func3 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> sum;</span></span>
<span class="line"><span style="color:#ABB2BF;">cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">func3</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span><span style="color:#7F848E;font-style:italic;">	//50</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),D=p(`<h3 id="function是对一个函数-函数对象的包装" tabindex="-1"><a class="header-anchor" href="#function是对一个函数-函数对象的包装" aria-hidden="true">#</a> function是对一个函数/函数对象的包装</h3><p>也可以说<strong>function是对一个函数/函数对象的包装</strong>。</p><p><code>[](int a, int b)-&gt;int {return a + b;}</code>是函数对象</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">function</span><span style="color:#C678DD;">&lt;int</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> func4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> [](</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">)-&gt;</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> {</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> a </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> b;}</span></span>
<span class="line"><span style="color:#ABB2BF;">cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">func4</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span><span style="color:#7F848E;font-style:italic;"> //300</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是对function作用于全局函数，将其函数类型留下来。</p><p>当然，<strong>function也可以将类的成员方法留下来！</strong></p><h3 id="function也可以将类的成员方法留下来" tabindex="-1"><a class="header-anchor" href="#function也可以将类的成员方法留下来" aria-hidden="true">#</a> function也可以将类的成员方法留下来</h3><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Test</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">public:</span><span style="color:#7F848E;font-style:italic;">	//必须依赖一个对象void (Test::*pfunc)(string)</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">hello</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> str </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//成员方法的调用必须依赖一个对象</span></span>
<span class="line"><span style="color:#ABB2BF;">function</span><span style="color:#C678DD;">&lt;void</span><span style="color:#ABB2BF;">(Test</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">, string)</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> func5 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">Test::hello;</span></span>
<span class="line"><span style="color:#61AFEF;">func5</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">&amp;</span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(), </span><span style="color:#98C379;">&quot;call Test::hello!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Test*</code> 传给了 <code>this指针</code></li></ul><figure><img src="`+B+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="function使用举例" tabindex="-1"><a class="header-anchor" href="#function使用举例" aria-hidden="true">#</a> function使用举例</h2><p><strong>funtion的作用：</strong></p>',12),b=n("strong",null,"保留",-1),m=n("strong",null,"全局函数",-1),C=n("strong",null,"成员函数",-1),f=n("strong",null,"其他函数对象",-1),g=n("strong",null,"类型",-1),h=p('<figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>我们使用function，将函数的类型保存下来使用</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;vector&gt;</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;map&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;functional&gt;</span><span style="color:#7F848E;font-style:italic;">//使用function函数对象类型</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;algorithm&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;ctime&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;string&gt;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">doShowAllBooks</span><span style="color:#ABB2BF;">() { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;查看所有书籍信息&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">doBorrow</span><span style="color:#ABB2BF;">() { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;借书&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">doBack</span><span style="color:#ABB2BF;">() { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;还书&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">doQueryBooks</span><span style="color:#ABB2BF;">() { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;查询书籍&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">doLoginOut</span><span style="color:#ABB2BF;">() { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;注销&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> choice </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	map</span><span style="color:#C678DD;">&lt;int</span><span style="color:#ABB2BF;">, function</span><span style="color:#C678DD;">&lt;void</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">&gt;&gt;</span><span style="color:#ABB2BF;"> actionMap;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">actionMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">({ </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, doShowAllBooks });</span><span style="color:#7F848E;font-style:italic;">//老版本：insert(make_pair(xx,xx));</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">actionMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">({ </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, doBorrow });</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">actionMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">({ </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, doBack });</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">actionMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">({ </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, doQueryBooks });</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">actionMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">({ </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, doLoginOut });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (;;)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;-----------------&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;1.查看所有书籍信息&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;2.借书&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;3.还书&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;4.查询书籍&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;5.注销&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;-----------------&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;请选择:&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		cin </span><span style="color:#C678DD;">&gt;&gt;</span><span style="color:#ABB2BF;"> choice;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">auto</span><span style="color:#ABB2BF;"> it </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">actionMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">find</span><span style="color:#ABB2BF;">(choice);</span><span style="color:#7F848E;font-style:italic;">//map  pair  first second</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (it </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">actionMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;输入数字无效，重新选择!&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">else</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#E5C07B;">it</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">second</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//不好，因为这块代码无法闭合  无法做到“开-闭原则”</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*switch (choice)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		case 1:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			break;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		case 2:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			break;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		case 3:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			break;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		case 4:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			break;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		case 5:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			break;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		default:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			break;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		}*/</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function E(_,k){const l=t("font");return c(),i("div",null,[u,n("ul",null,[n("li",null,[s("是一个"),a(l,{color:"red"},{default:o(()=>[s("指针类型")]),_:1}),s("，指向"),F,s("是void，"),v,s("的函数。")])]),A,n("p",null,[s("function不仅仅可以留下"),a(l,{color:"green"},{default:o(()=>[s("函数类型")]),_:1}),s("，也可以"),n("strong",null,[s("留下"),a(l,{color:"green"},{default:o(()=>[s("函数对象类型")]),_:1})]),s("。（"),a(l,{color:"red"},{default:o(()=>[s("函数对象的本质是（）重载函数")]),_:1}),s("）")]),D,n("ul",null,[n("li",null,[b,s(),a(l,{color:"green"},{default:o(()=>[m,s("、"),C,s("、"),f]),_:1}),s("的"),g,s("，然后再各处都可以使用。")])]),h])}const w=e(y,[["render",E],["__file","function函数对象类型的应用.html.vue"]]);export{w as default};
