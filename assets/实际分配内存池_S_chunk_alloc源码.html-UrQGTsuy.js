const e=JSON.parse('{"key":"v-9ab5c6e8","path":"/ccpp/19%20SGI%20STL%E4%BA%8C%E7%BA%A7%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8%E5%86%85%E5%AD%98%E6%B1%A0%E6%BA%90%E7%A0%81/%E5%AE%9E%E9%99%85%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98%E6%B1%A0_S_chunk_alloc%E6%BA%90%E7%A0%81.html","title":"实际分配内存池_S_chunk_alloc源码","lang":"zh-CN","frontmatter":{"title":"实际分配内存池_S_chunk_alloc源码","icon":"file","order":6,"headerDepth":4,"category":["c/c++"],"tag":["SGI STL源码"],"description":"实际分配内存池_S_chunk_alloc源码 _S_chunk_alloc(size_t __size, int&amp; __nobjs)作用：到备用内存中拿__nobjs个__size字节的chunk块分配 如果备用内存足够，就从备用内存中拿，然后将_S_start_free指向分配后，空闲备用空间的首地址 如果备用内存不够了，就malloc申请，并让_S_start_free 指向malloc的首地址，让_S_end_free指向为malloc空间的尾地址，然后递归调用_S_chunk_alloc重新在备用内存中拿__nobjs个__size字节的chunk块分配","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/19%20SGI%20STL%E4%BA%8C%E7%BA%A7%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8%E5%86%85%E5%AD%98%E6%B1%A0%E6%BA%90%E7%A0%81/%E5%AE%9E%E9%99%85%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98%E6%B1%A0_S_chunk_alloc%E6%BA%90%E7%A0%81.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"实际分配内存池_S_chunk_alloc源码"}],["meta",{"property":"og:description","content":"实际分配内存池_S_chunk_alloc源码 _S_chunk_alloc(size_t __size, int&amp; __nobjs)作用：到备用内存中拿__nobjs个__size字节的chunk块分配 如果备用内存足够，就从备用内存中拿，然后将_S_start_free指向分配后，空闲备用空间的首地址 如果备用内存不够了，就malloc申请，并让_S_start_free 指向malloc的首地址，让_S_end_free指向为malloc空间的尾地址，然后递归调用_S_chunk_alloc重新在备用内存中拿__nobjs个__size字节的chunk块分配"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"SGI STL源码"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"实际分配内存池_S_chunk_alloc源码\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":7.51,"words":2254},"filePathRelative":"ccpp/19 SGI STL二级空间配置器内存池源码/实际分配内存池_S_chunk_alloc源码.md","excerpt":"<h1> 实际分配内存池_S_chunk_alloc源码</h1>\\n<p><code>_S_chunk_alloc(size_t __size, int&amp; __nobjs)</code>作用：到备用内存中拿<code>__nobjs</code>个<code>__size</code>字节的chunk块分配</p>\\n<p>如果备用内存足够，就从备用内存中拿，然后将<code>_S_start_free</code>指向分配后，空闲备用空间的首地址</p>\\n<p>如果备用内存不够了，就malloc申请，并让<code>_S_start_free</code> 指向malloc的首地址，让<code>_S_end_free</code>指向为malloc空间的尾地址，然后递归调用<code>_S_chunk_alloc</code>重新在备用内存中拿__nobjs个__size字节的chunk块分配</p>","autoDesc":true}');export{e as data};
