import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as B,c as i,d as n,e as s,f as a,w as p,a as e}from"./app-rY1SOIco.js";const r="/assets/20200314204013425-D3LJRqZ_.png",t={},y=n("h1",{id:"纯虚函数和抽象类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#纯虚函数和抽象类","aria-hidden":"true"},"#"),s(" 纯虚函数和抽象类")],-1),d=n("h2",{id:"纯虚函数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#纯虚函数","aria-hidden":"true"},"#"),s(" 纯虚函数")],-1),F=n("strong",null,"特殊的虚函数",-1),v=n("strong",null,"在许多情况下，在基类中不能对虚函数给出有意义的实现，而把它声明为纯虚函数，它的实现留给该基类的派生类去做",-1),A=e(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> 类名</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">virtual</span><span style="color:#ABB2BF;"> 返回类型 函数名(参数包) </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),u=n("u",null,"所有的",-1),b=n("u",null,"派生类对象）都可以执行纯虚函数的动作，但类无法为纯虚函数提供一个合理的缺省实现",-1),D=e(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">class Base</span></span>
<span class="line"><span style="color:#abb2bf;">{</span></span>
<span class="line"><span style="color:#abb2bf;">public:</span></span>
<span class="line"><span style="color:#abb2bf;">    virtual void display() = 0;</span></span>
<span class="line"><span style="color:#abb2bf;">};</span></span>
<span class="line"><span style="color:#abb2bf;">class Derived</span></span>
<span class="line"><span style="color:#abb2bf;">: public Base </span></span>
<span class="line"><span style="color:#abb2bf;">{</span></span>
<span class="line"><span style="color:#abb2bf;">public:</span></span>
<span class="line"><span style="color:#abb2bf;">    virtual void display()</span></span>
<span class="line"><span style="color:#abb2bf;">    {</span></span>
<span class="line"><span style="color:#abb2bf;">        cout &lt;&lt; &quot;Derived::display()&quot; &lt;&lt; endl;</span></span>
<span class="line"><span style="color:#abb2bf;">    }</span></span>
<span class="line"><span style="color:#abb2bf;">};</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),m=e(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Figure</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">virtual</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">display</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">virtual</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">area</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Circle</span></span>
<span class="line"><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Figure</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">explicit</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Circle</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">radius</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    : </span><span style="color:#61AFEF;">_radius</span><span style="color:#ABB2BF;">(radius) </span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">display</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">const</span></span>
<span class="line"><span style="color:#ABB2BF;">    {   </span></span>
<span class="line"><span style="color:#ABB2BF;">        cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Circle&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">area</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">    {   </span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3.14159</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> _radius </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> _radius;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> _radius;</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Rectangle</span></span>
<span class="line"><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Figure</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">Rectangle</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">length</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">width</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    : </span><span style="color:#61AFEF;">_length</span><span style="color:#ABB2BF;">(length)</span></span>
<span class="line"><span style="color:#ABB2BF;">    , </span><span style="color:#61AFEF;">_width</span><span style="color:#ABB2BF;">(width)</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">display</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">const</span></span>
<span class="line"><span style="color:#ABB2BF;">    {   </span></span>
<span class="line"><span style="color:#ABB2BF;">        cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Rectangle&quot;</span><span style="color:#ABB2BF;">;    </span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">area</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">const</span></span>
<span class="line"><span style="color:#ABB2BF;">    {   </span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> _length </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> _width;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> _length;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> _width;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Triangle</span></span>
<span class="line"><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Figure</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">Triangle</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">c</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    : </span><span style="color:#61AFEF;">_a</span><span style="color:#ABB2BF;">(a)</span></span>
<span class="line"><span style="color:#ABB2BF;">    , </span><span style="color:#61AFEF;">_b</span><span style="color:#ABB2BF;">(b)</span></span>
<span class="line"><span style="color:#ABB2BF;">    , </span><span style="color:#61AFEF;">_c</span><span style="color:#ABB2BF;">(c)</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">display</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">    {   </span></span>
<span class="line"><span style="color:#ABB2BF;">        cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Triangle&quot;</span><span style="color:#ABB2BF;">; </span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //海伦公式计算三角形的面积</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">area</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">    {   </span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (_a </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> _b </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> _c) </span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">sqrt</span><span style="color:#ABB2BF;">(p </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> (p </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> _a) </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> (p </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> _b) </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> (p </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> _c));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }    </span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> _a;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> _b;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> _c;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="抽象类" tabindex="-1"><a class="header-anchor" href="#抽象类" aria-hidden="true">#</a> 抽象类</h2><h3 id="抽象类的形式" tabindex="-1"><a class="header-anchor" href="#抽象类的形式" aria-hidden="true">#</a> 抽象类的形式</h3><ol><li><mark>类中包含纯虚函数</mark></li></ol>`,4),C=n("strong",null,"只要类中含有一个纯虚函数，该类便为抽象类",-1),E=e(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//汽车的基类,抽象类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Car</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Car</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">oil</span><span style="color:#ABB2BF;">):</span><span style="color:#61AFEF;">_name</span><span style="color:#ABB2BF;">(name),</span><span style="color:#61AFEF;">_oil</span><span style="color:#ABB2BF;">(oil){}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//获取汽车剩余油量还能跑的公里数</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getLeftMiles</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//不同汽车1L油跑的公里不一样</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> _oil </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">getMilesPerGallon</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;">//动态绑定，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//基类指针指向不同派生类对象访问不同派生类重写的getMilesPerGallon()</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">const</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> _name;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">protected:</span></span>
<span class="line"><span style="color:#ABB2BF;">	string _name;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> _oil;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">virtual</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getMilesPerGallon</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//纯虚函数，根据具体的汽车而定1L油跑的公里数</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Bnze</span><span style="color:#ABB2BF;"> : </span><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Car</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Bnze</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">oil</span><span style="color:#ABB2BF;">):</span><span style="color:#61AFEF;">Car</span><span style="color:#ABB2BF;">(name, oil){}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getMilesPerGallon</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20.0</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//具体的车跑到公里不一样</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Audi</span><span style="color:#ABB2BF;"> : </span><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Car</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Audi</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">oil</span><span style="color:#ABB2BF;">):</span><span style="color:#61AFEF;">Car</span><span style="color:#ABB2BF;">(name, oil){}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getMilesPerGallon</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">18.0</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//具体的车跑到公里不一样</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">BMW</span><span style="color:#ABB2BF;"> : </span><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Car</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">BMW</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">oil</span><span style="color:#ABB2BF;">):</span><span style="color:#61AFEF;">Car</span><span style="color:#ABB2BF;">(name, oil){}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getMilesPerGallon</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">19.0</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//具体的车跑到公里不一样</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//给外部提供一个统一的获取汽车剩余路程数的API</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">showCarleftMiles</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Car</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">car</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">car</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;left miles:&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">car</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLeftMiles</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;公里&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	Bnze </span><span style="color:#61AFEF;">b1</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;奔驰&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">20.0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	Audi </span><span style="color:#61AFEF;">a</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;奥迪&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">20.0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	BMW </span><span style="color:#61AFEF;">b2</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;宝马&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">20.0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">showCarleftMiles</span><span style="color:#ABB2BF;">(b1);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">showCarleftMiles</span><span style="color:#ABB2BF;">(a);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">showCarleftMiles</span><span style="color:#ABB2BF;">(b2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li><mark>继承纯虚函数，但没有重写</mark></li></ol>',3),_=n("strong",null,"如果该派生类没有对所有的纯虚函数进行重定义，则该派生类也会成为抽象类",-1),f=n("strong",null,"只有在派生类中给出了基类中所有纯虚函数的实现时，该派生类才不再是抽象类",-1),h=n("ol",{start:"3"},[n("li",null,[n("mark",null,"只有protect构造没有public构造的类")])],-1),g=n("strong",null,"只定义了protected型的构造函数而没有提供public构造函数",-1),q=n("strong",null,"外部",-1),x=n("strong",null,"派生类中",-1),k=n("strong",null,"能派生新类，却不能创建自己对象的类是另一种形式的抽象类",-1),M=e(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Base</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">protected:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">Base</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">base</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    : </span><span style="color:#61AFEF;">_base</span><span style="color:#ABB2BF;">(base)</span></span>
<span class="line"><span style="color:#ABB2BF;">    {   </span></span>
<span class="line"><span style="color:#ABB2BF;">        cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Base()&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }  </span></span>
<span class="line"><span style="color:#C678DD;">protected:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;"> _base;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Derived</span></span>
<span class="line"><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Base</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">Derived</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">base</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">derived</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    : </span><span style="color:#61AFEF;">Base</span><span style="color:#ABB2BF;">(base)</span></span>
<span class="line"><span style="color:#ABB2BF;">    , </span><span style="color:#61AFEF;">_derived</span><span style="color:#ABB2BF;">(derived)</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Derived(long, long)&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;  </span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;_base:&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> _base</span></span>
<span class="line"><span style="color:#ABB2BF;">             </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;, _derived:&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> _derived </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;"> _derived;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    Base </span><span style="color:#61AFEF;">base</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//error</span></span>
<span class="line"><span style="color:#ABB2BF;">    Derived </span><span style="color:#61AFEF;">derived</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为什么定义抽象类-抽象类和普通类的区别" tabindex="-1"><a class="header-anchor" href="#为什么定义抽象类-抽象类和普通类的区别" aria-hidden="true">#</a> 为什么定义抽象类？抽象类和普通类的区别</h3><ol><li><p>抽象类的目的不是为了抽象一个实体的类型，主要目的：</p><ol><li>让所有的派生类类通过继承基类直接<u>复用该属性</u>。（猫具有动物属性）</li><li>给所有的派生类保留<u>统一的</u>覆盖/重写<u>接口</u>；</li></ol></li><li><p>语法上</p><ol><li>拥有纯虚函数的类称为抽象类</li><li>抽象类<u>不能实例化对象</u>，但是可以定义指针和引用变量（指向派生类对象）</li></ol></li></ol><p>普通类定义指针，引用变量都可以，实例化对象也可以</p>`,4);function w(P,G){const l=c("font");return B(),i("div",null,[y,d,n("p",null,[s("纯虚函数是一种"),F,s("，"),a(l,{color:"green"},{default:p(()=>[v]),_:1}),s("。这就是纯虚函数的作用。纯虚函数的格式如下：")]),A,n("p",null,[s("设置纯虚函数的意义，就是让"),u,s("类对象（主要是"),b,s("。所以类纯虚函数的声明就是在"),n("strong",null,[s("告诉子类的设计者，“你"),a(l,{color:"red"},{default:p(()=>[s("必须")]),_:1}),s("提供一个纯虚函数的实现，但我不知道你会怎样实现它”")]),s("。")]),D,n("p",null,[s("声明纯虚函数的"),n("strong",null,[s("目的在于，提供一个与派生类"),a(l,{color:"green"},{default:p(()=>[s("一致的接口")]),_:1})]),s("。")]),m,n("p",null,[s("一个类可以包含"),a(l,{color:"red"},{default:p(()=>[s("多个")]),_:1}),s("纯虚函数。"),C,s("。"),a(l,{color:"red"},{default:p(()=>[s("一个抽象类只能作为基类来派生新类，不能创建抽象类的对象")]),_:1}),s("。")]),E,n("p",null,[s("和普通的虚函数不同，在派生类中一般要对基类中纯虚函数进行重定义。"),_,s("。这说明"),a(l,{color:"green"},{default:p(()=>[f,s("。")]),_:1})]),h,n("p",null,[s("除此以外，还有另外一种形式的抽象类。对一个类来说，如果"),g,s("，无论是在"),n("u",null,[q,s("还是在"),x,s("作为其对象成员"),a(l,{color:"red"},{default:p(()=>[s("都不能创建该类的对象")]),_:1}),s("，但可以由其派生出新的类，这种"),k]),s("。")]),M])}const z=o(t,[["render",w],["__file","纯虚函数和抽象类.html.vue"]]);export{z as default};
