import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as e,a as n}from"./app-2pke9_a8.js";const l="/assets/b20eab35dfef46b48816351033ba8a89-aptj2Rya.png",i="/assets/d99d7bbcae734d07a622d2438532926b-CkXX0t6P.png",o="/assets/9551a3547ade4053bd247d9b880747fa-rAUv3xqm.png",r="/assets/3dc098805ca846d08111b2c4d8028ba8-Lcgv6Rb9.png",t="/assets/4e1d8d361fdb4934a703d069e0ab3011-XlQW6LyB.png",p="/assets/db56ba3672c44ef4a647183d8812a331-UAbpTpGs.png",c="/assets/0a05694f25274927b422c4ae06b1d61c-yMa2WKZO.png",d="/assets/fd1efb7019c44e4a8d4b302da122c2d0-V-NeinFg.png",g="/assets/c080cc9dac054dbda1e3ea52cf3a29d6-T3ily75c.png",u="/assets/a575fa0aaced4f2e96ccb1be87a1e25d-5LtOlOzt.png",b="/assets/99d7757c344d407695215f45bbdbefa8-B6aDCHFf.png",y="/assets/359db712aafd49c4bdb871d0bf837c62-A2lC_VPZ.png",m="/assets/350618be22fd486e9b36bd6bf9e644fa-iuDMlfUR.png",B="/assets/5c9b287f21ee41bdaf6d5e67379008fa-nV5HbZ7S.png",f="/assets/c25dfbaddf3141c4a0d5b7dae3990830-d53x8_sw.png",v={},h=n('<h1 id="高级数据类型bitmaps、hyperloglog、geo" tabindex="-1"><a class="header-anchor" href="#高级数据类型bitmaps、hyperloglog、geo" aria-hidden="true">#</a> 高级数据类型Bitmaps、HyperLogLog、GEO</h1><h2 id="一、bitmaps" tabindex="-1"><a class="header-anchor" href="#一、bitmaps" aria-hidden="true">#</a> 一、Bitmaps</h2><figure><img src="'+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对于bitmap，我们取值的时候，需要知道bit的位置，改值的时候，需要知道位置和修改结果。取值和修改的操作变得复杂了一些，但是节省了存储空间，<strong>属于时间换空间</strong>。<strong>其实redis并没有提供bitmap这种数据类型，只是提供了对string类型操作bit的接口</strong></p><h3 id="_1-bitmaps基本操作" tabindex="-1"><a class="header-anchor" href="#_1-bitmaps基本操作" aria-hidden="true">#</a> 1. Bitmaps基本操作</h3><p>设置指定key对应偏移量上的bit值，value只能是1或0</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">setbit </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> offset </span><span style="color:#C678DD;">value</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取指定key对应偏移量上的bit值</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">getbit </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> offset</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果我们在一个比较大的位设置的时候，这是比较耗时的，同时也耗费空间</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>所以当我们设置的位都很大的时候，我们统一减去一个offset后，再进行setbit</p><h3 id="_2-bitmaps扩展操作" tabindex="-1"><a class="header-anchor" href="#_2-bitmaps扩展操作" aria-hidden="true">#</a> 2. Bitmaps扩展操作</h3><p><strong>电影网站业务场景</strong></p><ul><li>统计每天某一部电影是否被点播</li><li>统计每天有多少部电影被点播</li><li>统计每周/月/年有多少部电影被点播</li><li>统计年度哪部电影没有被点播</li></ul><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对指定key按位进行交、并、非、异或操作，并将结果保存到destKey中</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">bitop op dstKey key1 </span><span style="color:#E06C75;">[key2…]</span><span style="color:#ABB2BF;">  # op是位操作符，</span><span style="color:#C678DD;">and</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">or</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">not</span><span style="color:#ABB2BF;"> xor，key1、key2是运算数，dstKey用于存放运算结果</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>统计指定key中1的数量</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">bitcount </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">[start end]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>分别查看8月8日和8月9日被看过电影的数量（哪些bit为1）</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>统计8号和9号有哪些电影被看了（8号和9号被看得bit置为1，用逻辑或即可得到被看的所有电影）</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="二、hyperloglog" tabindex="-1"><a class="header-anchor" href="#二、hyperloglog" aria-hidden="true">#</a> 二、HyperLogLog</h2><p><strong>统计独立UV的方法有如下几种：</strong></p><p>原始方案 set：存储每个用户的id（字符串） 改进方案Bitmaps：存储每个用户状态（bit) 全新的基数统计方案：Hyperloglog。<strong>应用场景单一，只做基数统计</strong></p><p>基数就是数据集去重后元素的个数，HyoerLogLog运用了LogLog的算法，做基数统计</p><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>HyperLogLog类型的基本操作</strong></p><ul><li>添加数据</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">pfadd </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> element </span><span style="color:#E06C75;">[element …]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>统计数据</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">pfcount </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">[key …]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>合并数据</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">pfmerge destkey sourcekey </span><span style="color:#E06C75;">[sourcekey …]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>相关注意事项</strong></p><ul><li>HyperLogLog用于基数统计，不是集合，<strong>不保存数据，只记录数量而不是具体数据</strong></li><li>核心是计数估算算法，最终<strong>数值存在一定误差</strong>，误差范围大概是0.81%</li><li><strong>消耗空间极小</strong>，每个hyperloglog key占用了12k的内存用于标记基数</li><li>pfadd命令不是一次性使用12k内存，会随着基数的增加内存逐渐增大，<strong>12k是上限</strong></li><li><strong>pfmerge命令合并后占用的内存空间为12k</strong>（涉及到分桶，默认用最大的空间12K），无论合并之前数据量多少</li></ul><h2 id="三、geo" tabindex="-1"><a class="header-anchor" href="#三、geo" aria-hidden="true">#</a> 三、GEO</h2><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>GEO类型的基本操作</strong></p><ul><li>添加坐标点</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;"># </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;">：容器名   </span></span>
<span class="line"><span style="color:#ABB2BF;"># longitude latitude：横纵坐标</span></span>
<span class="line"><span style="color:#ABB2BF;"># member：地点名称</span></span>
<span class="line"><span style="color:#ABB2BF;">geoadd </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> longitude latitude member </span><span style="color:#E06C75;">[longitude latitude member]</span><span style="color:#ABB2BF;">  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>获取坐标点</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">geopos </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> member</span><span style="color:#E06C75;">[member …]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>计算坐标点距离</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">geodist </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> member1 member2 </span><span style="color:#E06C75;">[unit]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+b+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>根据坐标求范围内的数据</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">georadius </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> longitude latitude radius m|km|ft|mi </span><span style="color:#E06C75;">[withcoord]</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">[withdist]</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">[withhash]</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">[count count]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>根据点求范围内的数据</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">georadiusbymember </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> member radius m|km|ft|mi </span><span style="color:#E06C75;">[withcoord]</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">[withdist]</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">[withhash]</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">[count count]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>获取指定点对应的坐标的hash值</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">geohash </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> member </span><span style="color:#E06C75;">[member ...]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+B+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',61),k=[h];function _(x,A){return a(),e("div",null,k)}const D=s(v,[["render",_],["__file","高级数据类型Bitmaps、HyperLogLog、GEO.html.vue"]]);export{D as default};
