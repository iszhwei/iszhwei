import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o as t,c,d as n,e as s,f as a,w as p,a as B}from"./app-m9pC5KT-.js";const r={},i=n("h1",{id:"sgi-stl二级空间配置器重要成员解读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sgi-stl二级空间配置器重要成员解读","aria-hidden":"true"},"#"),s(" SGI STL二级空间配置器重要成员解读")],-1),y=B(`<p>SGI STL提供了一级空间配置器和二级空间配置器，而SGI STL一级空间配置器也和STL标准模板库的实现是一样的（都是malloc/free）</p><p>其中<strong>一级空间配置器allocator采用malloc和free来管理内存</strong>，和C++标准库中提供的allocator是一样的，如果我们频繁对内存进行申请和释放，每次都使用malloc和free，效率就很低了 但其<strong>二级空间配置器allocator采用了基于freelist自由链表原理的 内存池机制</strong> 实现内存管理，只管理不大于128字节的小块内存分配</p><p>vector的声明</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_Tp</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_Alloc</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">__STL_DEFAULT_ALLOCATOR</span><span style="color:#ABB2BF;">(_Tp) &gt;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">vector</span><span style="color:#ABB2BF;"> : </span><span style="color:#C678DD;">protected</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_Vector_base</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">_Tp</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">_Alloc</span><span style="color:#ABB2BF;">&gt; </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，容器的默认空间配置器是<code>__STL_DEFAULT_ALLOCATOR( _Tp)</code>，它是一个宏定义，如下：</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;"># ifndef</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">__STL_DEFAULT_ALLOCATOR</span></span>
<span class="line"><span style="color:#C678DD;">#   ifdef</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">__STL_USE_STD_ALLOCATORS</span></span>
<span class="line"><span style="color:#C678DD;">#     define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">__STL_DEFAULT_ALLOCATOR</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">T</span><span style="color:#ABB2BF;">) allocator&lt; T &gt;</span></span>
<span class="line"><span style="color:#C678DD;">#   else</span></span>
<span class="line"><span style="color:#C678DD;">#     define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">__STL_DEFAULT_ALLOCATOR</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">T</span><span style="color:#ABB2BF;">) alloc</span></span>
<span class="line"><span style="color:#C678DD;">#   endif</span></span>
<span class="line"><span style="color:#C678DD;"># endif</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面可以看到<code>__STL_DEFAULT_ALLOCATOR</code>通过宏控制有两种实现，一种是<code>allocator&lt; T &gt;</code>，另一种是<code>alloc</code>，这两种分别就是SGI STL的一级空间配置器和二级空间配置器的实现。</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">__inst</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">__malloc_alloc_template</span><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 一级空间配置器内存管理类 -- 通过malloc和free管理内</span></span>
<span class="line"><span style="color:#ABB2BF;">存</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">threads</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">inst</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">__default_alloc_template</span><span style="color:#ABB2BF;"> {</span><span style="color:#7F848E;font-style:italic;">  // 二级空间配置器内存管理类 -- 通过自定义内存池实现内</span></span>
<span class="line"><span style="color:#ABB2BF;">存管理</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="一级空间配置器" tabindex="-1"><a class="header-anchor" href="#一级空间配置器" aria-hidden="true">#</a> 一级空间配置器</h2><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//stl_alloc.h</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//一级空间配置器的实现，类似与c++ STL的空间配置器</span></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">__inst</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">__malloc_alloc_template</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //...</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">void*</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">allocate</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">__n</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;"> 	{</span></span>
<span class="line"><span style="color:#ABB2BF;">    	</span><span style="color:#C678DD;">void</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> __result </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">malloc</span><span style="color:#ABB2BF;">(__n);</span><span style="color:#7F848E;font-style:italic;">	//底层通过malloc分配内存</span></span>
<span class="line"><span style="color:#ABB2BF;">    	</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> __result) __result </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">_S_oom_malloc</span><span style="color:#ABB2BF;">(__n);</span></span>
<span class="line"><span style="color:#ABB2BF;">    	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> __result;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">deallocate</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void*</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">__p</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">size_t</span><span style="color:#7F848E;font-style:italic;"> /* __n */</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">free</span><span style="color:#ABB2BF;">(__p);</span><span style="color:#7F848E;font-style:italic;">	//使用free释放内存</span></span>
<span class="line"><span style="color:#ABB2BF;">  	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#ABB2BF;"> __malloc_alloc_template</span><span style="color:#C678DD;">&lt;</span><span style="color:#D19A66;">0</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> malloc_alloc;</span></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#ABB2BF;"> malloc_alloc alloc;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#ifdef</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">__STL_USE_STD_ALLOCATORS</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_Tp</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">allocator</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">typedef</span><span style="color:#ABB2BF;"> alloc _Alloc;</span><span style="color:#7F848E;font-style:italic;">          // The underlying allocator.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//...</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">_Tp</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">allocate</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">size_type</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">__n</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">void*</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> __n </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> static_cast</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">_Tp</span><span style="color:#56B6C2;">*</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">_Alloc</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">allocate</span><span style="color:#ABB2BF;">(__n </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(_Tp))) </span></span>
<span class="line"><span style="color:#ABB2BF;">                    </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// __p is not permitted to be a null pointer.</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">deallocate</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">pointer</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">__p</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">size_type</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">__n</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    { _Alloc::</span><span style="color:#61AFEF;">deallocate</span><span style="color:#ABB2BF;">(__p, __n </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(_Tp)); }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">construct</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">pointer</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">__p</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_Tp</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">__val</span><span style="color:#ABB2BF;">) { </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;">(__p) </span><span style="color:#61AFEF;">_Tp</span><span style="color:#ABB2BF;">(__val); }</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">destroy</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">pointer</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">__p</span><span style="color:#ABB2BF;">) { </span><span style="color:#E5C07B;">__p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">~_Tp</span><span style="color:#ABB2BF;">(); }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//C++ STL空间配置器</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//容器的空间配置器</span></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Allocator</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">allocate</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">size</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//只负责内存开辟</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> (T</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;">malloc</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(T) </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> size);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">deallocate</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//只负责内存释放</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#61AFEF;">free</span><span style="color:#ABB2BF;">(p);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">construct</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//已经开辟好的内存上，负责对象构造</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> (p) </span><span style="color:#61AFEF;">T</span><span style="color:#ABB2BF;">(val);</span><span style="color:#7F848E;font-style:italic;">//定位new，指定内存上构造val，T(val)拷贝构造</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">destroy</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//只负责对象析构</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">~T</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;">//~T()代表了T类型的析构函数</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二级空间配置器" tabindex="-1"><a class="header-anchor" href="#二级空间配置器" aria-hidden="true">#</a> 二级空间配置器</h2><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//stl_alloc.h</span></span>
<span class="line"><span style="color:#C678DD;"># define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">__NODE_ALLOCATOR_THREADS</span><span style="color:#ABB2BF;"> true</span></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">threads</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">inst</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">__default_alloc_template</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//通过内存池的实现管理内存</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#ABB2BF;"> __default_alloc_template</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">__NODE_ALLOCATOR_THREADS, </span><span style="color:#D19A66;">0</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> alloc;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>__NODE_ALLOCATOR_THREADS</code> 表示节点是否支持线程安全</li></ul><h2 id="二级空间配置器重要成员解读" tabindex="-1"><a class="header-anchor" href="#二级空间配置器重要成员解读" aria-hidden="true">#</a> 二级空间配置器重要成员解读</h2><p>![](SGI STL二级空间配置器重要成员解读.assets/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQnVnTWFrZXItc2hlbg==,size_20,color_FFFFFF,t_70,g_se,x_16.png)</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">threads</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">inst</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">__default_alloc_template</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">enum</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">_ALIGN</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">};</span><span style="color:#7F848E;font-style:italic;">	//对齐8字节		  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 数组对应位置挂的内存池最大的__chunk块的的大小为128B，即freelist有16个元素，如果大于128字节就相当于是大块内存，不通过内存池管理，还是用malloc、free管理</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">enum</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">_MAX_BYTES</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">128</span><span style="color:#ABB2BF;">};</span><span style="color:#7F848E;font-style:italic;">	//最大字节数128字节	  </span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">enum</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">_NFREELISTS</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">16</span><span style="color:#ABB2BF;">};</span><span style="color:#7F848E;font-style:italic;">   // _MAX_BYTES/_ALIGN	自由链表的个数   </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">     </span><span style="color:#C678DD;">union</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_Obj</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">union</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_Obj</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_M_free_list_link</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//这个可以看成节点的next域，指向下一个空闲chunk块的起始地址</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_M_client_data</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span><span style="color:#7F848E;font-style:italic;">    /* The client sees this. */</span></span>
<span class="line"><span style="color:#ABB2BF;">     };</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //多线程对于堆上和数据段上的数据一般都加volatile修饰，防止线程对数据缓存，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//不能及时看到其他线程对共享数据的修改</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //自由链表大小_NFREELISTS = 16，存储类型为_Obj*</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> _Obj</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> __STL_VOLATILE </span><span style="color:#E5C07B;">_S_free_list</span><span style="color:#ABB2BF;">[_NFREELISTS]; </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 记录内存块的分配状态，Chunk allocation state.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 全部会初始化为0</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> _S_start_free;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> _S_end_free;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> _S_heap_size;</span><span style="color:#7F848E;font-style:italic;">    // 向OS申请的所有内存大小</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //...</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">__threads</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">__inst</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">char</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> __default_alloc_template&lt;</span><span style="color:#E5C07B;">__threads</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">__inst</span><span style="color:#ABB2BF;">&gt;::_S_start_free </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//nullptr</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">__threads</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">__inst</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">char</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> __default_alloc_template&lt;</span><span style="color:#E5C07B;">__threads</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">__inst</span><span style="color:#ABB2BF;">&gt;::_S_end_free </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//nullptr</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">__threads</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">__inst</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> __default_alloc_template&lt;</span><span style="color:#E5C07B;">__threads</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">__inst</span><span style="color:#ABB2BF;">&gt;::_S_heap_size </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//静态成员类外初始化，初始化自由链表</span></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">__threads</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">__inst</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> __default_alloc_template&lt;</span><span style="color:#E5C07B;">__threads</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">__inst</span><span style="color:#ABB2BF;">&gt;::</span><span style="color:#E5C07B;">_Obj</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> __STL_VOLATILE</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//free-list的16个元素初始化为0（nullptr）</span></span>
<span class="line"><span style="color:#ABB2BF;">__default_alloc_template&lt;</span><span style="color:#E5C07B;">__threads</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">__inst</span><span style="color:#ABB2BF;">&gt; ::</span><span style="color:#E5C07B;">_S_free_list</span><span style="color:#ABB2BF;">[</span></span>
<span class="line"><span style="color:#C678DD;"># if</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">defined</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">__SUNPRO_CC</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">defined</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">__GNUC__</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">defined</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">__HP_aCC</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    _NFREELISTS</span></span>
<span class="line"><span style="color:#C678DD;"># else</span></span>
<span class="line"><span style="color:#ABB2BF;">    __default_alloc_template&lt;</span><span style="color:#E5C07B;">__threads</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">__inst</span><span style="color:#ABB2BF;">&gt;::_NFREELISTS</span></span>
<span class="line"><span style="color:#C678DD;"># endif</span></span>
<span class="line"><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// The 16 zeros are necessary to make version 4.1 of the SunPro</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// compiler happy.  Otherwise it appears to allocate too little</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// space for the array.</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>chunk 块</p></li><li><p>如果<code>_S_start_free</code>和<code>_S_end_free</code>相等，则需要像OS申请内存</p></li><li><p><code>_Obj</code> 的结构，每个chunk块的<strong>头信息</strong>，会指向下一个<strong>空闲</strong>chunk块的起始地址 chunk块：就是_S_free_list每个元素下面挂的8、16、24字节的内存块</p></li></ul>`,19);function d(F,A){const l=e("font");return t(),c("div",null,[i,n("p",null,[s("为了"),a(l,{color:"red"},{default:p(()=>[s("防止小块内存频繁分配、释放，造成系统内很多内存碎片，没有更多的连续大内存块")]),_:1}),s("。所以对于"),a(l,{color:"green"},{default:p(()=>[s("小块内存的分配回收通常使用内存池")]),_:1}),s("进行管理。")]),y])}const D=o(r,[["render",d],["__file","SGI STL二级空间配置器重要成员解读.html.vue"]]);export{D as default};
