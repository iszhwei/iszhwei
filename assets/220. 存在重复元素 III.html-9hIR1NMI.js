import{_ as c}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o as B,c as r,d as s,e as n,f as l,b as i,w as o,a as p}from"./app-mYdPlPhZ.js";const y={},d={href:"https://leetcode.cn/problems/contains-duplicate-iii/",target:"_blank",rel:"noopener noreferrer"},u=p("<p>给你一个整数数组 <code>nums</code> 和两个整数 <code>indexDiff</code> 和 <code>valueDiff</code> 。</p><p>找出满足下述条件的下标对 <code>(i, j)</code>：</p><ul><li><code>i != j</code>,</li><li><code>abs(i - j) &lt;= indexDiff</code></li><li><code>abs(nums[i] - nums[j]) &lt;= valueDiff</code></li></ul><p>如果存在，返回 <code>true</code> *；*否则，返回 <code>false</code> 。</p>",4),F=p(`<p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 105</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>1 &lt;= indexDiff &lt;= nums.length</code></li><li><code>0 &lt;= valueDiff &lt;= 109</code></li></ul><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>由题意知，在区域下标内查找是否存在两个值，该两个值的差小于某一阈值</p><p>遇到绝对值先化简</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">abs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">nums[i]</span><span style="color:#C678DD;">-</span><span style="color:#E06C75;">nums[j]</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">&lt;=</span><span style="color:#ABB2BF;"> valueDiff</span></span>
<span class="line"><span style="color:#C678DD;">-</span><span style="color:#ABB2BF;">valueDiff </span><span style="color:#C678DD;">&lt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">nums</span><span style="color:#ABB2BF;">[i] </span><span style="color:#C678DD;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">nums</span><span style="color:#ABB2BF;">[j] </span><span style="color:#C678DD;">&lt;=</span><span style="color:#ABB2BF;"> valueDiff</span></span>
<span class="line"><span style="color:#C678DD;">-</span><span style="color:#ABB2BF;">valueDiff </span><span style="color:#C678DD;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">nums</span><span style="color:#ABB2BF;">[i] </span><span style="color:#C678DD;">&lt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">-</span><span style="color:#E06C75;">nums</span><span style="color:#ABB2BF;">[j] </span><span style="color:#C678DD;">&lt;=</span><span style="color:#ABB2BF;"> valueDiff </span><span style="color:#C678DD;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">nums</span><span style="color:#ABB2BF;">[i]</span></span>
<span class="line"><span style="color:#C678DD;">-</span><span style="color:#ABB2BF;">valueDiff </span><span style="color:#C678DD;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">nums</span><span style="color:#ABB2BF;">[i] </span><span style="color:#C678DD;">&lt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">nums</span><span style="color:#ABB2BF;">[j] </span><span style="color:#C678DD;">&lt;=</span><span style="color:#ABB2BF;"> valueDiff </span><span style="color:#C678DD;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">nums</span><span style="color:#ABB2BF;">[i]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转变为查找在区域内是否存在一个值属于<code>[-valueDiff + nums[i],valueDiff + nums[i]]</code></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Solution</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">containsNearbyAlmostDuplicate</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">vector</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">nums</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">indexDiff</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">valueDiff</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        multiset</span><span style="color:#C678DD;">&lt;long</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">long&gt;</span><span style="color:#ABB2BF;"> set;  </span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; i </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">nums</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">size</span><span style="color:#ABB2BF;">(); </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">i) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(i </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> indexDiff) {</span><span style="color:#7F848E;font-style:italic;"> //维持窗口大小为k(indexDiff)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                //set.erase(nums[i-indexDiff-1])//multiset指定元素删除，会删掉所有这个值的元素</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E5C07B;">set</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">erase</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">set</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">find</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">nums</span><span style="color:#ABB2BF;">[i</span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;">indexDiff</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]));</span><span style="color:#7F848E;font-style:italic;">//find()返回的是查找到的第一个元素位置的迭代器</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            遇到绝对值先化简</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            abs(nums[i]-nums[j]) &lt;= valueDiff</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            -valueDiff &lt;= nums[i] - nums[j] &lt;= valueDiff</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            -valueDiff - nums[i] &lt;= -nums[j] &lt;= valueDiff - nums[i]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            -valueDiff + nums[i] &lt;= nums[j] &lt;= valueDiff + nums[i]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            */</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">auto</span><span style="color:#ABB2BF;"> leftBound </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">set</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lower_bound</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">nums</span><span style="color:#ABB2BF;">[i] </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;">)valueDiff);</span><span style="color:#7F848E;font-style:italic;">// multiset是有序的，可以使用二分查找查询边界</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">auto</span><span style="color:#ABB2BF;"> rightBound </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">set</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">upper_bound</span><span style="color:#ABB2BF;">(valueDiff </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;">)</span><span style="color:#E5C07B;">nums</span><span style="color:#ABB2BF;">[i]);</span><span style="color:#7F848E;font-style:italic;">//实际上返回的是第1个大于valueDiff + (long long)nums[i]的元素的位置</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(leftBound </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> rightBound) {</span><span style="color:#7F848E;font-style:italic;">	//若存在则至少有一个，所以</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">set</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">nums</span><span style="color:#ABB2BF;">[i]);</span><span style="color:#7F848E;font-style:italic;">//前面的元素不满足条件，那么察看下一个位置的元素</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lower-bound-和upper-bound" tabindex="-1"><a class="header-anchor" href="#lower-bound-和upper-bound" aria-hidden="true">#</a> lower_bound( )和upper_bound( )</h2>`,9),D=s("p",null,[n("lower_bound( )和upper_bound( )都是利用"),s("strong",null,"二分查找"),n("的方法"),s("u",null,"在一个排好序的数组"),n("中进行查找的。")],-1),A=s("code",null,"lower_bound( begin,end,num)",-1),m=s("u",null,"begin位置到end-1位置",-1),C=s("u",null,"找到返回该数字的地址，不存在则返回end",-1),v=s("code",null,"upper_bound( begin,end,num)",-1),f=s("code",null,"lower_bound()",-1),b=s("code",null,"upper_bound()",-1),E=s("code",null,"lower_bound( begin,end,num,greater<type>() )",-1),_=s("code",null,"upper_bound( begin,end,num,greater<type>() )",-1),g=p(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;">&lt;bits/stdc++.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> maxn</span><span style="color:#C678DD;">=</span><span style="color:#D19A66;">100000</span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> INF</span><span style="color:#C678DD;">=</span><span style="color:#D19A66;">2</span><span style="color:#56B6C2;">*</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#E06C75;">e</span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">)</span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">LL</span><span style="color:#ABB2BF;"> long long</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">cmd</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> a</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;">b;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">num</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;">{</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">15</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">34</span><span style="color:#ABB2BF;">}; </span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">sort</span><span style="color:#ABB2BF;">(num,num</span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">                           //按从小到大排序 </span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> pos1</span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;">lower_bound</span><span style="color:#ABB2BF;">(num,num</span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">)</span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;">num;</span><span style="color:#7F848E;font-style:italic;">    //返回数组中第一个大于或等于被查数的值 </span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> pos2</span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;">upper_bound</span><span style="color:#ABB2BF;">(num,num</span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">)</span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;">num;</span><span style="color:#7F848E;font-style:italic;">    //返回数组中第一个大于被查数的值</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;">pos1</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#98C379;">&quot; &quot;</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#E5C07B;">num</span><span style="color:#ABB2BF;">[pos1]</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;">endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;">pos2</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#98C379;">&quot; &quot;</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#E5C07B;">num</span><span style="color:#ABB2BF;">[pos2]</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;">endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">sort</span><span style="color:#ABB2BF;">(num,num</span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">,cmd);</span><span style="color:#7F848E;font-style:italic;">                      //按从大到小排序</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> pos3</span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;">lower_bound</span><span style="color:#ABB2BF;">(num,num</span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">,</span><span style="color:#61AFEF;">greater</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">&gt;())</span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;">num;</span><span style="color:#7F848E;font-style:italic;">  //返回数组中第一个小于或等于被查数的值 </span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> pos4</span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;">upper_bound</span><span style="color:#ABB2BF;">(num,num</span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">,</span><span style="color:#61AFEF;">greater</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">&gt;())</span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;">num;</span><span style="color:#7F848E;font-style:italic;">  //返回数组中第一个小于被查数的值 </span></span>
<span class="line"><span style="color:#ABB2BF;">	cout</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;">pos3</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#98C379;">&quot; &quot;</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#E5C07B;">num</span><span style="color:#ABB2BF;">[pos3]</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;">endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;">pos4</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#98C379;">&quot; &quot;</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#E5C07B;">num</span><span style="color:#ABB2BF;">[pos4]</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;">endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;	</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function h(x,k){const t=e("ExternalLinkIcon"),a=e("font");return B(),r("div",null,[s("p",null,[s("a",d,[n("leetcode 220. 存在重复元素 III"),l(t)])]),u,i("more"),F,s("blockquote",null,[D,s("p",null,[n("在"),l(a,{color:"red"},{default:o(()=>[n("从小到大的排序数组")]),_:1}),n("中，")]),s("ul",null,[s("li",null,[s("p",null,[A,n("：从数组的"),m,n("二分查找第一个"),l(a,{color:"red"},{default:o(()=>[n("大于或等于")]),_:1}),n("num的数字，"),C,n("。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。")])]),s("li",null,[s("p",null,[v,n("：从数组的begin位置到end-1位置二分查找"),l(a,{color:"red"},{default:o(()=>[n("第一个大于")]),_:1}),n("num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。")])])]),s("p",null,[n("在"),l(a,{color:"red"},{default:o(()=>[n("从大到小的排序数组中")]),_:1}),n("，重载"),f,n("和"),b]),s("ul",null,[s("li",null,[s("p",null,[E,n(":从数组的begin位置到end-1位置二分查找第一个"),l(a,{color:"red"},{default:o(()=>[n("小于或等于")]),_:1}),n("num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。")])]),s("li",null,[s("p",null,[_,n(":从数组的begin位置到end-1位置二分查找"),l(a,{color:"red"},{default:o(()=>[n("第一个小于")]),_:1}),n("num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。")]),g])])])])}const I=c(y,[["render",h],["__file","220. 存在重复元素 III.html.vue"]]);export{I as default};
