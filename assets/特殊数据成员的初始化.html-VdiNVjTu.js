const s=JSON.parse('{"key":"v-451c83e2","path":"/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E6%88%90%E5%91%98%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96.html","title":"特殊数据成员的初始化","lang":"zh-CN","frontmatter":{"title":"特殊数据成员的初始化","icon":"file","order":7,"headerDepth":4,"category":["c/c++"],"tag":["类和对象"],"description":"特殊数据成员的初始化 在C++的类中，有4种比较特殊的数据成员，他们分别是常量成员、引用成员、类对象成员和静态成员，他们的初始化与普通数据成员有所不同。 常量数据成员 当数据成员用const关键字进行修饰以后，就成为常量成员。一经初始化，该数据成员便具有“只读属 性”，在程序中无法对其值修改。事实上，在构造函数体内初始化const数据成员是非法的，它们只能在 构造函数初始化列表中进行初始化。如： class Point { public: &nbsp; &nbsp;//错误写法 &nbsp; &nbsp;Point(int ix = 0, int iy = 0) &nbsp; { &nbsp; &nbsp; &nbsp; &nbsp;_ix = ix;//error, 这是赋值语句，const成员不能修改 &nbsp; &nbsp; &nbsp; &nbsp;_iy = iy;//error &nbsp; &nbsp; &nbsp; &nbsp;_iz = _ix; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;//正确写法 &nbsp; &nbsp;Point(int ix = 0, int iy = 0) &nbsp; : _ix(ix) &nbsp; , _iy(iy) &nbsp; , _iz(_ix) &nbsp; { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; private: &nbsp; &nbsp;const int _ix;\\t//常量数据成员,必须在初始化列表中进行 &nbsp; &nbsp;const int _iy; &nbsp; &nbsp;int &amp; _iz; };","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E6%88%90%E5%91%98%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"特殊数据成员的初始化"}],["meta",{"property":"og:description","content":"特殊数据成员的初始化 在C++的类中，有4种比较特殊的数据成员，他们分别是常量成员、引用成员、类对象成员和静态成员，他们的初始化与普通数据成员有所不同。 常量数据成员 当数据成员用const关键字进行修饰以后，就成为常量成员。一经初始化，该数据成员便具有“只读属 性”，在程序中无法对其值修改。事实上，在构造函数体内初始化const数据成员是非法的，它们只能在 构造函数初始化列表中进行初始化。如： class Point { public: &nbsp; &nbsp;//错误写法 &nbsp; &nbsp;Point(int ix = 0, int iy = 0) &nbsp; { &nbsp; &nbsp; &nbsp; &nbsp;_ix = ix;//error, 这是赋值语句，const成员不能修改 &nbsp; &nbsp; &nbsp; &nbsp;_iy = iy;//error &nbsp; &nbsp; &nbsp; &nbsp;_iz = _ix; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;//正确写法 &nbsp; &nbsp;Point(int ix = 0, int iy = 0) &nbsp; : _ix(ix) &nbsp; , _iy(iy) &nbsp; , _iz(_ix) &nbsp; { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; private: &nbsp; &nbsp;const int _ix;\\t//常量数据成员,必须在初始化列表中进行 &nbsp; &nbsp;const int _iy; &nbsp; &nbsp;int &amp; _iz; };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"类和对象"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"特殊数据成员的初始化\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[{"level":2,"title":"常量数据成员","slug":"常量数据成员","link":"#常量数据成员","children":[]},{"level":2,"title":"引用数据成员","slug":"引用数据成员","link":"#引用数据成员","children":[]},{"level":2,"title":"类对象成员","slug":"类对象成员","link":"#类对象成员","children":[]},{"level":2,"title":"静态数据成员","slug":"静态数据成员","link":"#静态数据成员","children":[]}],"git":{},"readingTime":{"minutes":4.33,"words":1300},"filePathRelative":"ccpp/03 类和对象/特殊数据成员的初始化.md","excerpt":"<h1> 特殊数据成员的初始化</h1>\\n<p>在C++的类中，有4种比较特殊的数据成员，他们分别是<strong>常量成员、引用成员、类对象成员和静态成员</strong>，他们的初始化与普通数据成员有所不同。</p>\\n<h2> 常量数据成员</h2>\\n<p>当数据成员用const关键字进行修饰以后，就成为常量成员。一经初始化，该数据成员便具有“只读属\\n性”，在程序中无法对其值修改。事实上，在构造函数体内初始化const数据成员是非法的，它们<strong>只能在</strong>\\n<strong>构造函数初始化列表中进行初始化</strong>。如：</p>\\n<div class=\\"language-c++ line-numbers-mode\\" data-ext=\\"c++\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Point</span><span style=\\"color: #ABB2BF\\"> </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">public:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> &nbsp; &nbsp;//错误写法</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\"> &nbsp; &nbsp;</span><span style=\\"color: #61AFEF\\">Point</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">ix</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">iy</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\"> &nbsp;  {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\"> &nbsp; &nbsp; &nbsp; &nbsp;_ix </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> ix;</span><span style=\\"color: #7F848E; font-style: italic\\">//error, 这是赋值语句，const成员不能修改</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\"> &nbsp; &nbsp; &nbsp; &nbsp;_iy </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> iy;</span><span style=\\"color: #7F848E; font-style: italic\\">//error</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\"> &nbsp; &nbsp; &nbsp; &nbsp;_iz </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> _ix;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\"> &nbsp;  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\"> &nbsp; &nbsp;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> &nbsp; &nbsp;//正确写法</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\"> &nbsp; &nbsp;</span><span style=\\"color: #61AFEF\\">Point</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">ix</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">iy</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\"> &nbsp;  : </span><span style=\\"color: #61AFEF\\">_ix</span><span style=\\"color: #ABB2BF\\">(ix)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\"> &nbsp;  , </span><span style=\\"color: #61AFEF\\">_iy</span><span style=\\"color: #ABB2BF\\">(iy)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\"> &nbsp;  , </span><span style=\\"color: #61AFEF\\">_iz</span><span style=\\"color: #ABB2BF\\">(_ix)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\"> &nbsp;  {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\"> &nbsp; &nbsp; &nbsp; &nbsp;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\"> &nbsp;  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\"> &nbsp; &nbsp;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">private:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\"> &nbsp; &nbsp;</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> _ix;</span><span style=\\"color: #7F848E; font-style: italic\\">\\t//常量数据成员,必须在初始化列表中进行</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\"> &nbsp; &nbsp;</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> _iy;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\"> &nbsp; &nbsp;</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\"> _iz;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{s as data};
