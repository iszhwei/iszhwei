import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as B,d as n,e as s,f as a,w as e,a as r}from"./app-m9pC5KT-.js";const t="/assets/image-20240414114736980-eMtODZxB.png",i={},y=n("h1",{id:"继承中的类型转换",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#继承中的类型转换","aria-hidden":"true"},"#"),s(" 继承中的类型转换")],-1),d=n("figure",null,[n("img",{src:t,alt:"image-20240414114736980",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20240414114736980")],-1),F=n("p",null,"派生类适应于基类，派生类的对象适应于基类对象，派生类对象的指针和引用也适应于基类对象的指针和引用",-1),v=r(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Base</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">Base</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">base</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    {   </span></span>
<span class="line"><span style="color:#ABB2BF;">        cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Base(long)&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;   </span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;"> _base;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Derived</span></span>
<span class="line"><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Base</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">Derived</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">base</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">derived</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    : </span><span style="color:#61AFEF;">Base</span><span style="color:#ABB2BF;">(base)</span></span>
<span class="line"><span style="color:#ABB2BF;">    , </span><span style="color:#61AFEF;">_derived</span><span style="color:#ABB2BF;">(derived)</span></span>
<span class="line"><span style="color:#ABB2BF;">    {   </span></span>
<span class="line"><span style="color:#ABB2BF;">        cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Derived(long,long)&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;   </span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;"> _derived;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">() </span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    Base </span><span style="color:#61AFEF;">base</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    Derived </span><span style="color:#61AFEF;">derived</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    base </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> derived;</span><span style="color:#7F848E;font-style:italic;">//ok</span></span>
<span class="line"><span style="color:#ABB2BF;">    Base </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">refBase </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> derived;</span><span style="color:#7F848E;font-style:italic;">//ok</span></span>
<span class="line"><span style="color:#ABB2BF;">    Base </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pBase </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">derived;</span><span style="color:#7F848E;font-style:italic;">//ok</span></span>
<span class="line"><span style="color:#ABB2BF;">    derived </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> base;</span><span style="color:#7F848E;font-style:italic;">//error</span></span>
<span class="line"><span style="color:#ABB2BF;">    Derived </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">refDerived </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> base;</span><span style="color:#7F848E;font-style:italic;">//error</span></span>
<span class="line"><span style="color:#ABB2BF;">    Derived </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pDerived </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">base;</span><span style="color:#7F848E;font-style:italic;">//error</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    Base </span><span style="color:#61AFEF;">base2</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    Derived </span><span style="color:#61AFEF;">derived2</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    Derived </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pderived2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> static_cast</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">Derived </span><span style="color:#56B6C2;">*</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">base2);</span><span style="color:#7F848E;font-style:italic;">//不安全的向下转型</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">pderived2</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    Base </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pbase3 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">derived2;</span></span>
<span class="line"><span style="color:#ABB2BF;">    Derived </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pderived3 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> static_cast</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">Derived </span><span style="color:#56B6C2;">*</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;">(pbase3);</span><span style="color:#7F848E;font-style:italic;">//安全的向下转型</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">pderived3</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),A=n("p",null,"[类型转换函数 | 张威的编程学习笔记 (gitee.io)](https://iszhwei.gitee.io/ccpp/02 c__基础/强制转换.html#static-cast)",-1);function u(D,m){const l=o("font");return c(),B("div",null,[y,d,F,n("ul",null,[n("li",null,[n("strong",null,[s("可以把"),a(l,{color:"red"},{default:e(()=>[s("派生类的对象")]),_:1}),a(l,{color:"green"},{default:e(()=>[s("赋值")]),_:1}),s("给基类的对象")])]),n("li",null,[n("strong",null,[s("可以把"),a(l,{color:"red"},{default:e(()=>[s("基类的引用")]),_:1}),s("绑定到派生类的对象")]),s("（只能访问基类的部分）")]),n("li",null,[n("strong",null,[s("可以声明"),a(l,{color:"red"},{default:e(()=>[s("基类的指针")]),_:1}),s("指向派生类的对象 (向上转型)")]),s("（解引用只能访问基类的部分）")])]),n("p",null,[s("也就是说"),n("strong",null,[s("如果函数的"),a(l,{color:"green"},{default:e(()=>[s("形参是基类")]),_:1}),s("对象或者基类对象的引用或者基类对象的指针类型，在进行函数调用时，相应的"),a(l,{color:"green"},{default:e(()=>[s("实参可以是派生类对象")]),_:1})]),s("。")]),v,n("p",null,[n("strong",null,[s("在继承结构中进行上下的类型转换，默认只支持从下到上的类型的转换。除非进行强转，但强转"),a(l,{color:"red"},{default:e(()=>[s("不安全")]),_:1}),s("会涉及内存的"),a(l,{color:"red"},{default:e(()=>[s("非法访问")]),_:1}),s("。")])]),A])}const _=p(i,[["render",u],["__file","继承中的类型转换.html.vue"]]);export{_ as default};
