import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as c,c as i,d as n,e as s,f as a,w as o,a as p}from"./app-9OmaxHRC.js";const r="/assets/32cc2c3cc746461a9b0f02fcda5996e2-y9PfO-K5.png",B={},y=n("h1",{id:"c-11绑定器介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#c-11绑定器介绍","aria-hidden":"true"},"#"),s(" C++11绑定器介绍")],-1),d=n("p",null,"C++ STL的bind只能用于二元的绑定器",-1),u=p(`<p><strong>C++11的bind和function比较：</strong></p><ul><li><strong>function可以直接将函数类型留下来</strong>。</li><li><strong>bind绑定器可以给函数绑定固定的参数。</strong></li></ul><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;typeinfo&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;string&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;memory&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;vector&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;functional&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;thread&gt;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">C++11 bind绑定器 =&gt; 返回的结果还是一个函数对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">hello</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">) { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> str </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) { </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> a </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> b; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Test</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) { </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> a </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> b; }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//bind是函数模板 可以自动推演模板类型参数 </span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(hello, </span><span style="color:#98C379;">&quot;hello bind!&quot;</span><span style="color:#ABB2BF;">)();</span><span style="color:#7F848E;font-style:italic;">//bind绑定了一个&quot;hello bind!&quot;参数，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//返回的结果是绑定器，也就是函数对象, 需要调用它的()重载符号</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(sum, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">)() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">Test::sum, </span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(), </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">)() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),F=p('<p><strong>绑定器问题：</strong></p><ul><li>只能使用在语句中，出了语句就不能使用了；</li></ul><p><strong>如何将绑定器的类型留下来？</strong></p><ul><li>综合运用function和bind。 <ul><li><strong>定义funtion，返回值是void，有一个string形参变量的函数类型，用来记录bind绑定器绑定的结果。</strong></li><li><strong>可以通过function函数对象类型，把绑定器的类型留下来，可以重复的去使用。</strong></li></ul></li></ul><h2 id="参数占位符" tabindex="-1"><a class="header-anchor" href="#参数占位符" aria-hidden="true">#</a> 参数占位符</h2><blockquote><p><strong>调用的时候，用户自己传入参数！！！</strong></p></blockquote><p><strong>参数占位符<code>placeholders::_1</code>：</strong> 参数具体是什么，不知道，等待用户传递；(最多有20个占位参数)</p><ul><li>因此在调用时，必须在（）中传入参数；</li></ul><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">placeholders</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//参数占位符  绑定器出了语句，无法继续使用</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//只是占位的作用，调用的时候就要传递参数了 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//书写的时候使用多少个占位符，就是意味着用户调用的时候要传入几个参数</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(hello, _1)(</span><span style="color:#98C379;">&quot;hello bind 2!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(sum, _1, _2)(</span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">300</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//此处把bind返回的绑定器binder就复用起来了</span></span>
<span class="line"><span style="color:#ABB2BF;">	function</span><span style="color:#C678DD;">&lt;void</span><span style="color:#ABB2BF;">(string)</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> func1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(hello, _1);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">func1</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello china!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">func1</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;liu feng ni hao&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10);function A(v,b){const l=t("font");return c(),i("div",null,[y,d,n("p",null,[n("strong",null,[s("C++11 bind绑定器 => 返回的结果还是一个"),a(l,{color:"green"},{default:o(()=>[s("函数对象")]),_:1})]),s("，可以"),a(l,{color:"red"},{default:o(()=>[s("调用（）重载函数")]),_:1}),n("strong",null,[a(l,{color:"red"},{default:o(()=>[s("bind占位符最多有20个参数")]),_:1}),s("。")])]),u,n("ul",null,[n("li",null,[s("bind是函数模板 "),a(l,{color:"red"},{default:o(()=>[s("可以自动推演模板类型参数 ")]),_:1})]),n("li",null,[s("返回的结果是绑定器，也就是函数对象, "),a(l,{color:"red"},{default:o(()=>[s("需要调用它的()重载符号")]),_:1})])]),F])}const C=e(B,[["render",A],["__file","C__11绑定器介绍.html.vue"]]);export{C as default};
