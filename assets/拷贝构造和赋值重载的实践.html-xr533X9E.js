import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as a,a as l}from"./app-m9pC5KT-.js";const p="/assets/image-20240411091801938-uzZhLA_G.png",o={},e=l(`<h1 id="拷贝构造和赋值重载的实践" tabindex="-1"><a class="header-anchor" href="#拷贝构造和赋值重载的实践" aria-hidden="true">#</a> 拷贝构造和赋值重载的实践</h1><p><strong>这个类的对象的成员变量有占用外部资源，所以我们要重写它的拷贝构造函数和赋值函数。</strong></p><h2 id="实现string类型" tabindex="-1"><a class="header-anchor" href="#实现string类型" aria-hidden="true">#</a> 实现String类型</h2><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">String</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char*</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//普通构造函数</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (str </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			m_data </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;">[</span><span style="color:#61AFEF;">strlen</span><span style="color:#ABB2BF;">(str) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span><span style="color:#7F848E;font-style:italic;">//&#39;\\0&#39;要算上 </span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#61AFEF;">strcpy</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">m_data</span><span style="color:#ABB2BF;">, str);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">else</span><span style="color:#7F848E;font-style:italic;">//用户传进来的字符串是空的话 ，为了让其他方法不用判空 </span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			m_data </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span><span style="color:#7F848E;font-style:italic;">//new char;开辟1个字节大小的空间 </span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">m_data </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;</span><span style="color:#56B6C2;">\\0</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//0</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">String</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">other</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//拷贝构造函数，深拷贝 </span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		m_data </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;">[</span><span style="color:#61AFEF;">strlen</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">other</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">m_data</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#61AFEF;">strcpy</span><span style="color:#ABB2BF;">(m_data, </span><span style="color:#E5C07B;">other</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">m_data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">~String</span><span style="color:#ABB2BF;">(void)</span><span style="color:#7F848E;font-style:italic;">//析构函数</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;">[]m_data;</span></span>
<span class="line"><span style="color:#ABB2BF;">		m_data </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//防止野指针的出现 </span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//使用String&amp;是为了支持连续的operator=赋值操作</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">String</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">=(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">other</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//赋值重载函数，深拷贝 </span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">other)</span><span style="color:#7F848E;font-style:italic;">//防止自赋值 </span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//str1</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;">[]m_data;</span><span style="color:#7F848E;font-style:italic;">//释放当前的外部资源 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		m_data </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;">[</span><span style="color:#61AFEF;">strlen</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">other</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">m_data</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#61AFEF;">strcpy</span><span style="color:#ABB2BF;">(m_data, </span><span style="color:#E5C07B;">other</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">m_data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//str1</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">char</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> m_data;</span><span style="color:#7F848E;font-style:italic;">//用于保存字符串</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//用带const char*参数的构造函数</span></span>
<span class="line"><span style="color:#ABB2BF;">	String str1;</span><span style="color:#7F848E;font-style:italic;">//调用默认的构造，形参是nullptr </span></span>
<span class="line"><span style="color:#ABB2BF;">	String </span><span style="color:#61AFEF;">str2</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	String str3 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;world&quot;</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//str2 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//调用拷贝构造函数</span></span>
<span class="line"><span style="color:#ABB2BF;">	String str4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> str3;</span></span>
<span class="line"><span style="color:#ABB2BF;">	String </span><span style="color:#61AFEF;">str5</span><span style="color:#ABB2BF;">(str3);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//调用赋值重载函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	str1 = str2</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	str1.operator=(str2) =&gt; str1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	str3 = str1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	*/</span></span>
<span class="line"><span style="color:#ABB2BF;">	str3 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> str1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> str2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现循环队列queue" tabindex="-1"><a class="header-anchor" href="#实现循环队列queue" aria-hidden="true">#</a> 实现循环队列queue</h2><figure><img src="`+p+`" alt="image-20240411091801938" tabindex="0" loading="lazy"><figcaption>image-20240411091801938</figcaption></figure><ul><li>如果是用顺序表实现队列，那么现在，不能入队了，因为已经满了，前面有元素出队，但是没办法放。</li><li>rear++的时候，我们不要让他加到末尾，让他加到前面去；</li><li>包括front也一样，把78出队后，回到队前面</li></ul><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//循环队列  memcpy  realloc</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Queue</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Queue</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">size</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//构造函数 </span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		_pQue </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">[size];</span></span>
<span class="line"><span style="color:#ABB2BF;">		_front </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _rear </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		_size </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> size;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//Queue(const Queue&amp;) = delete;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//Queue&amp; operator=(const Queue&amp;) = delete;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Queue</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Queue</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//拷贝构造函数 </span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		_size </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_size</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		_front </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_front</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		_rear </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_rear</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		_pQue </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">[_size];</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _front;</span></span>
<span class="line"><span style="color:#ABB2BF;">			i </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> _rear;</span></span>
<span class="line"><span style="color:#ABB2BF;">			i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (i </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">%</span><span style="color:#ABB2BF;"> _size)</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#E5C07B;">_pQue</span><span style="color:#ABB2BF;">[i] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_pQue</span><span style="color:#ABB2BF;">[i];</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">Queue</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">=(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Queue</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//赋值函数 </span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//防止自赋值</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">src)</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;">[]_pQue;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		_size </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_size</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		_front </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_front</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		_rear </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_rear</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		_pQue </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">[_size];</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _front;</span></span>
<span class="line"><span style="color:#ABB2BF;">			i </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> _rear;</span></span>
<span class="line"><span style="color:#ABB2BF;">			i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (i </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">%</span><span style="color:#ABB2BF;"> _size)</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#E5C07B;">_pQue</span><span style="color:#ABB2BF;">[i] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_pQue</span><span style="color:#ABB2BF;">[i];</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//析构函数 </span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">~Queue</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;">[]_pQue;</span></span>
<span class="line"><span style="color:#ABB2BF;">		_pQue </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//入队操作，队尾入 </span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">full</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#61AFEF;">resize</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">_pQue</span><span style="color:#ABB2BF;">[_rear] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> val;</span><span style="color:#7F848E;font-style:italic;">//队尾赋值 </span></span>
<span class="line"><span style="color:#ABB2BF;">		_rear </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (_rear </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">%</span><span style="color:#ABB2BF;"> _size;</span><span style="color:#7F848E;font-style:italic;">//因为是循环队列 </span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//出队操作</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		_front </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (_front </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">%</span><span style="color:#ABB2BF;"> _size;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//获取队头元素</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">front</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_pQue</span><span style="color:#ABB2BF;">[_front];</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">full</span><span style="color:#ABB2BF;">() { </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> (_rear </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">%</span><span style="color:#ABB2BF;"> _size </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> _front; }</span><span style="color:#7F848E;font-style:italic;">//判满 </span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">() { </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> _front </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> _rear; }</span><span style="color:#7F848E;font-style:italic;">//判空 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">resize</span><span style="color:#ABB2BF;">()</span><span style="color:#7F848E;font-style:italic;">//扩容操作 </span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">int</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> ptmp </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> _size];</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> index </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _front; i </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> _rear; i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (i </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">%</span><span style="color:#ABB2BF;"> _size)</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#E5C07B;">ptmp</span><span style="color:#ABB2BF;">[index</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_pQue</span><span style="color:#ABB2BF;">[i];</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;">[]_pQue;</span></span>
<span class="line"><span style="color:#ABB2BF;">		_pQue </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> ptmp;</span></span>
<span class="line"><span style="color:#ABB2BF;">		_front </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		_rear </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> index;</span></span>
<span class="line"><span style="color:#ABB2BF;">		_size </span><span style="color:#C678DD;">*=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> _pQue;</span><span style="color:#7F848E;font-style:italic;">//申请队列的数组空间，方便扩容 </span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> _front;</span><span style="color:#7F848E;font-style:italic;">//指示队头的位置</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> _rear;</span><span style="color:#7F848E;font-style:italic;">//指示队尾的位置</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> _size;</span><span style="color:#7F848E;font-style:italic;">//队列扩容的总大小</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	Queue queue;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; i </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">; </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">i)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">queue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">rand</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">%</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">queue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">queue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">front</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot; &quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">queue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	Queue queue1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> queue;</span></span>
<span class="line"><span style="color:#ABB2BF;">	queue1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> queue;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),t=[e];function B(c,r){return n(),a("div",null,t)}const F=s(o,[["render",B],["__file","拷贝构造和赋值重载的实践.html.vue"]]);export{F as default};
