const e=JSON.parse('{"key":"v-5f0f0675","path":"/ccpp/10%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85Observer%E6%A8%A1%E5%BC%8F.html","title":"观察者Observer模式","lang":"zh-CN","frontmatter":{"title":"观察者Observer模式","icon":"file","order":6,"headerDepth":4,"category":["c/c++"],"tag":["设计模式"],"description":"观察者Observer模式 观察者模式是行为型模式； 行为型模式： 主要关注的是对象之间的通信 观察者模式又叫做观察者(Observer)监听者(Listener)模式，也叫发布(Publish)订阅(Subscribe)模式 主要关注的是对象的一对多的关系，也就是多个对象都依赖一个对象，当该对象的状态发生改变时，其它对象都能够接收到相应的通知","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/10%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85Observer%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"观察者Observer模式"}],["meta",{"property":"og:description","content":"观察者Observer模式 观察者模式是行为型模式； 行为型模式： 主要关注的是对象之间的通信 观察者模式又叫做观察者(Observer)监听者(Listener)模式，也叫发布(Publish)订阅(Subscribe)模式 主要关注的是对象的一对多的关系，也就是多个对象都依赖一个对象，当该对象的状态发生改变时，其它对象都能够接收到相应的通知"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"设计模式"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"观察者Observer模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":2.45,"words":734},"filePathRelative":"ccpp/10 设计模式/观察者Observer模式.md","excerpt":"<h1> 观察者Observer模式</h1>\\n<ul>\\n<li>观察者模式是<strong>行为型模式</strong>；</li>\\n<li>行为型模式： 主要关注的是<strong>对象之间的通信</strong></li>\\n<li><strong>观察者模式</strong>又叫做<strong>观察者(Observer)监听者(Listener)模式</strong>，也叫<strong>发布(Publish)订阅(Subscribe)模式</strong></li>\\n<li><strong>主要关注的是对象的一对多的关系，也就是多个对象都依赖一个对象，当该对象的状态发生改变时，其它对象都能够接收到相应的通知</strong></li>\\n</ul>","autoDesc":true}');export{e as data};
