function ko(s,n){const l=new Set(s.split(","));return n?a=>l.has(a.toLowerCase()):a=>l.has(a)}const gs={},Ll=[],pn=()=>{},$B=()=>!1,Fa=s=>s.charCodeAt(0)===111&&s.charCodeAt(1)===110&&(s.charCodeAt(2)>122||s.charCodeAt(2)<97),wo=s=>s.startsWith("onUpdate:"),Ps=Object.assign,So=(s,n)=>{const l=s.indexOf(n);l>-1&&s.splice(l,1)},zB=Object.prototype.hasOwnProperty,vs=(s,n)=>zB.call(s,n),ss=Array.isArray,Jl=s=>ye(s)==="[object Map]",QB=s=>ye(s)==="[object Set]",es=s=>typeof s=="function",cs=s=>typeof s=="string",de=s=>typeof s=="symbol",Is=s=>s!==null&&typeof s=="object",cc=s=>(Is(s)||es(s))&&es(s.then)&&es(s.catch),HB=Object.prototype.toString,ye=s=>HB.call(s),jB=s=>ye(s).slice(8,-1),GB=s=>ye(s)==="[object Object]",Po=s=>cs(s)&&s!=="NaN"&&s[0]!=="-"&&""+parseInt(s,10)===s,sa=ko(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),ve=s=>{const n=Object.create(null);return l=>n[l]||(n[l]=s(l))},UB=/-(\w)/g,yn=ve(s=>s.replace(UB,(n,l)=>l?l.toUpperCase():"")),WB=/\B([A-Z])/g,zl=ve(s=>s.replace(WB,"-$1").toLowerCase()),Ea=ve(s=>s.charAt(0).toUpperCase()+s.slice(1)),Ie=ve(s=>s?`on${Ea(s)}`:""),Zn=(s,n)=>!Object.is(s,n),Oe=(s,n)=>{for(let l=0;l<s.length;l++)s[l](n)},se=(s,n,l)=>{Object.defineProperty(s,n,{configurable:!0,enumerable:!1,value:l})},KB=s=>{const n=parseFloat(s);return isNaN(n)?s:n},YB=s=>{const n=cs(s)?Number(s):NaN;return isNaN(n)?s:n};let Pp;const rc=()=>Pp||(Pp=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function xo(s){if(ss(s)){const n={};for(let l=0;l<s.length;l++){const a=s[l],e=cs(a)?sd(a):xo(a);if(e)for(const o in e)n[o]=e[o]}return n}else if(cs(s)||Is(s))return s}const XB=/;(?![^(]*\))/g,ZB=/:([^]+)/,JB=/\/\*[^]*?\*\//g;function sd(s){const n={};return s.replace(JB,"").split(XB).forEach(l=>{if(l){const a=l.split(ZB);a.length>1&&(n[a[0].trim()]=a[1].trim())}}),n}function Ro(s){let n="";if(cs(s))n=s;else if(ss(s))for(let l=0;l<s.length;l++){const a=Ro(s[l]);a&&(n+=a+" ")}else if(Is(s))for(const l in s)s[l]&&(n+=l+" ");return n.trim()}const nd="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",ld=ko(nd);function ic(s){return!!s||s===""}let Xs;class ad{constructor(n=!1){this.detached=n,this._active=!0,this.effects=[],this.cleanups=[],this.parent=Xs,!n&&Xs&&(this.index=(Xs.scopes||(Xs.scopes=[])).push(this)-1)}get active(){return this._active}run(n){if(this._active){const l=Xs;try{return Xs=this,n()}finally{Xs=l}}}on(){Xs=this}off(){Xs=this.parent}stop(n){if(this._active){let l,a;for(l=0,a=this.effects.length;l<a;l++)this.effects[l].stop();for(l=0,a=this.cleanups.length;l<a;l++)this.cleanups[l]();if(this.scopes)for(l=0,a=this.scopes.length;l<a;l++)this.scopes[l].stop(!0);if(!this.detached&&this.parent&&!n){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.parent=void 0,this._active=!1}}}function ed(s,n=Xs){n&&n.active&&n.effects.push(s)}function Bc(){return Xs}function od(s){Xs&&Xs.cleanups.push(s)}let il;class Vo{constructor(n,l,a,e){this.fn=n,this.trigger=l,this.scheduler=a,this.active=!0,this.deps=[],this._dirtyLevel=3,this._trackId=0,this._runnings=0,this._queryings=0,this._depsLength=0,ed(this,e)}get dirty(){if(this._dirtyLevel===1){this._dirtyLevel=0,this._queryings++,vl();for(const n of this.deps)if(n.computed&&(pd(n.computed),this._dirtyLevel>=2))break;ul(),this._queryings--}return this._dirtyLevel>=2}set dirty(n){this._dirtyLevel=n?3:0}run(){if(this._dirtyLevel=0,!this.active)return this.fn();let n=Yn,l=il;try{return Yn=!0,il=this,this._runnings++,xp(this),this.fn()}finally{Rp(this),this._runnings--,il=l,Yn=n}}stop(){var n;this.active&&(xp(this),Rp(this),(n=this.onStop)==null||n.call(this),this.active=!1)}}function pd(s){return s.value}function xp(s){s._trackId++,s._depsLength=0}function Rp(s){if(s.deps&&s.deps.length>s._depsLength){for(let n=s._depsLength;n<s.deps.length;n++)dc(s.deps[n],s);s.deps.length=s._depsLength}}function dc(s,n){const l=s.get(n);l!==void 0&&n._trackId!==l&&(s.delete(n),s.size===0&&s.cleanup())}let Yn=!0,ao=0;const yc=[];function vl(){yc.push(Yn),Yn=!1}function ul(){const s=yc.pop();Yn=s===void 0?!0:s}function Mo(){ao++}function qo(){for(ao--;!ao&&eo.length;)eo.shift()()}function vc(s,n,l){if(n.get(s)!==s._trackId){n.set(s,s._trackId);const a=s.deps[s._depsLength];a!==n?(a&&dc(a,s),s.deps[s._depsLength++]=n):s._depsLength++}}const eo=[];function uc(s,n,l){Mo();for(const a of s.keys())if(!(!a.allowRecurse&&a._runnings)&&a._dirtyLevel<n&&(!a._runnings||n!==2)){const e=a._dirtyLevel;a._dirtyLevel=n,e===0&&(!a._queryings||n!==2)&&(a.trigger(),a.scheduler&&eo.push(a.scheduler))}qo()}const Ac=(s,n)=>{const l=new Map;return l.cleanup=s,l.computed=n,l},ne=new WeakMap,Bl=Symbol(""),oo=Symbol("");function Ws(s,n,l){if(Yn&&il){let a=ne.get(s);a||ne.set(s,a=new Map);let e=a.get(l);e||a.set(l,e=Ac(()=>a.delete(l))),vc(il,e)}}function Pn(s,n,l,a,e,o){const t=ne.get(s);if(!t)return;let r=[];if(n==="clear")r=[...t.values()];else if(l==="length"&&ss(s)){const B=Number(a);t.forEach((i,d)=>{(d==="length"||!de(d)&&d>=B)&&r.push(i)})}else switch(l!==void 0&&r.push(t.get(l)),n){case"add":ss(s)?Po(l)&&r.push(t.get("length")):(r.push(t.get(Bl)),Jl(s)&&r.push(t.get(oo)));break;case"delete":ss(s)||(r.push(t.get(Bl)),Jl(s)&&r.push(t.get(oo)));break;case"set":Jl(s)&&r.push(t.get(Bl));break}Mo();for(const B of r)B&&uc(B,3);qo()}function td(s,n){var l;return(l=ne.get(s))==null?void 0:l.get(n)}const cd=ko("__proto__,__v_isRef,__isVue"),mc=new Set(Object.getOwnPropertyNames(Symbol).filter(s=>s!=="arguments"&&s!=="caller").map(s=>Symbol[s]).filter(de)),Vp=rd();function rd(){const s={};return["includes","indexOf","lastIndexOf"].forEach(n=>{s[n]=function(...l){const a=is(this);for(let o=0,t=this.length;o<t;o++)Ws(a,"get",o+"");const e=a[n](...l);return e===-1||e===!1?a[n](...l.map(is)):e}}),["push","pop","shift","unshift","splice"].forEach(n=>{s[n]=function(...l){vl(),Mo();const a=is(this)[n].apply(this,l);return qo(),ul(),a}}),s}function id(s){const n=is(this);return Ws(n,"has",s),n.hasOwnProperty(s)}class Fc{constructor(n=!1,l=!1){this._isReadonly=n,this._shallow=l}get(n,l,a){const e=this._isReadonly,o=this._shallow;if(l==="__v_isReactive")return!e;if(l==="__v_isReadonly")return e;if(l==="__v_isShallow")return o;if(l==="__v_raw")return a===(e?o?_d:bc:o?fc:Dc).get(n)||Object.getPrototypeOf(n)===Object.getPrototypeOf(a)?n:void 0;const t=ss(n);if(!e){if(t&&vs(Vp,l))return Reflect.get(Vp,l,a);if(l==="hasOwnProperty")return id}const r=Reflect.get(n,l,a);return(de(l)?mc.has(l):cd(l))||(e||Ws(n,"get",l),o)?r:qs(r)?t&&Po(l)?r:r.value:Is(r)?e?ll(r):Da(r):r}}class Ec extends Fc{constructor(n=!1){super(!1,n)}set(n,l,a,e){let o=n[l];if(!this._shallow){const B=Pl(o);if(!le(a)&&!Pl(a)&&(o=is(o),a=is(a)),!ss(n)&&qs(o)&&!qs(a))return B?!1:(o.value=a,!0)}const t=ss(n)&&Po(l)?Number(l)<n.length:vs(n,l),r=Reflect.set(n,l,a,e);return n===is(e)&&(t?Zn(a,o)&&Pn(n,"set",l,a):Pn(n,"add",l,a)),r}deleteProperty(n,l){const a=vs(n,l);n[l];const e=Reflect.deleteProperty(n,l);return e&&a&&Pn(n,"delete",l,void 0),e}has(n,l){const a=Reflect.has(n,l);return(!de(l)||!mc.has(l))&&Ws(n,"has",l),a}ownKeys(n){return Ws(n,"iterate",ss(n)?"length":Bl),Reflect.ownKeys(n)}}class Bd extends Fc{constructor(n=!1){super(!0,n)}set(n,l){return!0}deleteProperty(n,l){return!0}}const dd=new Ec,yd=new Bd,vd=new Ec(!0),No=s=>s,ue=s=>Reflect.getPrototypeOf(s);function Ra(s,n,l=!1,a=!1){s=s.__v_raw;const e=is(s),o=is(n);l||(Zn(n,o)&&Ws(e,"get",n),Ws(e,"get",o));const{has:t}=ue(e),r=a?No:l?Qo:ca;if(t.call(e,n))return r(s.get(n));if(t.call(e,o))return r(s.get(o));s!==e&&s.get(n)}function Va(s,n=!1){const l=this.__v_raw,a=is(l),e=is(s);return n||(Zn(s,e)&&Ws(a,"has",s),Ws(a,"has",e)),s===e?l.has(s):l.has(s)||l.has(e)}function Ma(s,n=!1){return s=s.__v_raw,!n&&Ws(is(s),"iterate",Bl),Reflect.get(s,"size",s)}function Mp(s){s=is(s);const n=is(this);return ue(n).has.call(n,s)||(n.add(s),Pn(n,"add",s,s)),this}function qp(s,n){n=is(n);const l=is(this),{has:a,get:e}=ue(l);let o=a.call(l,s);o||(s=is(s),o=a.call(l,s));const t=e.call(l,s);return l.set(s,n),o?Zn(n,t)&&Pn(l,"set",s,n):Pn(l,"add",s,n),this}function Np(s){const n=is(this),{has:l,get:a}=ue(n);let e=l.call(n,s);e||(s=is(s),e=l.call(n,s)),a&&a.call(n,s);const o=n.delete(s);return e&&Pn(n,"delete",s,void 0),o}function $p(){const s=is(this),n=s.size!==0,l=s.clear();return n&&Pn(s,"clear",void 0,void 0),l}function qa(s,n){return function(a,e){const o=this,t=o.__v_raw,r=is(t),B=n?No:s?Qo:ca;return!s&&Ws(r,"iterate",Bl),t.forEach((i,d)=>a.call(e,B(i),B(d),o))}}function Na(s,n,l){return function(...a){const e=this.__v_raw,o=is(e),t=Jl(o),r=s==="entries"||s===Symbol.iterator&&t,B=s==="keys"&&t,i=e[s](...a),d=l?No:n?Qo:ca;return!n&&Ws(o,"iterate",B?oo:Bl),{next(){const{value:y,done:u}=i.next();return u?{value:y,done:u}:{value:r?[d(y[0]),d(y[1])]:d(y),done:u}},[Symbol.iterator](){return this}}}}function Nn(s){return function(...n){return s==="delete"?!1:s==="clear"?void 0:this}}function ud(){const s={get(o){return Ra(this,o)},get size(){return Ma(this)},has:Va,add:Mp,set:qp,delete:Np,clear:$p,forEach:qa(!1,!1)},n={get(o){return Ra(this,o,!1,!0)},get size(){return Ma(this)},has:Va,add:Mp,set:qp,delete:Np,clear:$p,forEach:qa(!1,!0)},l={get(o){return Ra(this,o,!0)},get size(){return Ma(this,!0)},has(o){return Va.call(this,o,!0)},add:Nn("add"),set:Nn("set"),delete:Nn("delete"),clear:Nn("clear"),forEach:qa(!0,!1)},a={get(o){return Ra(this,o,!0,!0)},get size(){return Ma(this,!0)},has(o){return Va.call(this,o,!0)},add:Nn("add"),set:Nn("set"),delete:Nn("delete"),clear:Nn("clear"),forEach:qa(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(o=>{s[o]=Na(o,!1,!1),l[o]=Na(o,!0,!1),n[o]=Na(o,!1,!0),a[o]=Na(o,!0,!0)}),[s,l,n,a]}const[Ad,md,Fd,Ed]=ud();function $o(s,n){const l=n?s?Ed:Fd:s?md:Ad;return(a,e,o)=>e==="__v_isReactive"?!s:e==="__v_isReadonly"?s:e==="__v_raw"?a:Reflect.get(vs(l,e)&&e in a?l:a,e,o)}const Dd={get:$o(!1,!1)},fd={get:$o(!1,!0)},bd={get:$o(!0,!1)},Dc=new WeakMap,fc=new WeakMap,bc=new WeakMap,_d=new WeakMap;function hd(s){switch(s){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function Cd(s){return s.__v_skip||!Object.isExtensible(s)?0:hd(jB(s))}function Da(s){return Pl(s)?s:zo(s,!1,dd,Dd,Dc)}function _c(s){return zo(s,!1,vd,fd,fc)}function ll(s){return zo(s,!0,yd,bd,bc)}function zo(s,n,l,a,e){if(!Is(s)||s.__v_raw&&!(n&&s.__v_isReactive))return s;const o=e.get(s);if(o)return o;const t=Cd(s);if(t===0)return s;const r=new Proxy(s,t===2?a:l);return e.set(s,r),r}function Tl(s){return Pl(s)?Tl(s.__v_raw):!!(s&&s.__v_isReactive)}function Pl(s){return!!(s&&s.__v_isReadonly)}function le(s){return!!(s&&s.__v_isShallow)}function hc(s){return Tl(s)||Pl(s)}function is(s){const n=s&&s.__v_raw;return n?is(n):s}function Cc(s){return se(s,"__v_skip",!0),s}const ca=s=>Is(s)?Da(s):s,Qo=s=>Is(s)?ll(s):s;class gc{constructor(n,l,a,e){this._setter=l,this.dep=void 0,this.__v_isRef=!0,this.__v_isReadonly=!1,this.effect=new Vo(()=>n(this._value),()=>ae(this,1)),this.effect.computed=this,this.effect.active=this._cacheable=!e,this.__v_isReadonly=a}get value(){const n=is(this);return Ho(n),(!n._cacheable||n.effect.dirty)&&Zn(n._value,n._value=n.effect.run())&&ae(n,2),n._value}set value(n){this._setter(n)}get _dirty(){return this.effect.dirty}set _dirty(n){this.effect.dirty=n}}function gd(s,n,l=!1){let a,e;const o=es(s);return o?(a=s,e=pn):(a=s.get,e=s.set),new gc(a,e,o||!e,l)}function Ho(s){Yn&&il&&(s=is(s),vc(il,s.dep||(s.dep=Ac(()=>s.dep=void 0,s instanceof gc?s:void 0))))}function ae(s,n=3,l){s=is(s);const a=s.dep;a&&uc(a,n)}function qs(s){return!!(s&&s.__v_isRef===!0)}function G(s){return Lc(s,!1)}function Ms(s){return Lc(s,!0)}function Lc(s,n){return qs(s)?s:new Ld(s,n)}class Ld{constructor(n,l){this.__v_isShallow=l,this.dep=void 0,this.__v_isRef=!0,this._rawValue=l?n:is(n),this._value=l?n:ca(n)}get value(){return Ho(this),this._value}set value(n){const l=this.__v_isShallow||le(n)||Pl(n);n=l?n:is(n),Zn(n,this._rawValue)&&(this._rawValue=n,this._value=l?n:ca(n),ae(this,3))}}function dl(s){return qs(s)?s.value:s}const Td={get:(s,n,l)=>dl(Reflect.get(s,n,l)),set:(s,n,l,a)=>{const e=s[n];return qs(e)&&!qs(l)?(e.value=l,!0):Reflect.set(s,n,l,a)}};function Tc(s){return Tl(s)?s:new Proxy(s,Td)}class Id{constructor(n){this.dep=void 0,this.__v_isRef=!0;const{get:l,set:a}=n(()=>Ho(this),()=>ae(this));this._get=l,this._set=a}get value(){return this._get()}set value(n){this._set(n)}}function Ic(s){return new Id(s)}class Od{constructor(n,l,a){this._object=n,this._key=l,this._defaultValue=a,this.__v_isRef=!0}get value(){const n=this._object[this._key];return n===void 0?this._defaultValue:n}set value(n){this._object[this._key]=n}get dep(){return td(is(this._object),this._key)}}class kd{constructor(n){this._getter=n,this.__v_isRef=!0,this.__v_isReadonly=!0}get value(){return this._getter()}}function Ql(s,n,l){return qs(s)?s:es(s)?new kd(s):Is(s)&&arguments.length>1?wd(s,n,l):G(s)}function wd(s,n,l){const a=s[n];return qs(a)?a:new Od(s,n,l)}function Xn(s,n,l,a){let e;try{e=a?s(...a):s()}catch(o){fa(o,n,l)}return e}function cn(s,n,l,a){if(es(s)){const o=Xn(s,n,l,a);return o&&cc(o)&&o.catch(t=>{fa(t,n,l)}),o}const e=[];for(let o=0;o<s.length;o++)e.push(cn(s[o],n,l,a));return e}function fa(s,n,l,a=!0){const e=n?n.vnode:null;if(n){let o=n.parent;const t=n.proxy,r=`https://vuejs.org/errors/#runtime-${l}`;for(;o;){const i=o.ec;if(i){for(let d=0;d<i.length;d++)if(i[d](s,t,r)===!1)return}o=o.parent}const B=n.appContext.config.errorHandler;if(B){Xn(B,null,10,[s,t,r]);return}}Sd(s,l,e,a)}function Sd(s,n,l,a=!0){console.error(s)}let ra=!1,po=!1;const Ns=[];let Cn=0;const Il=[];let Sn=null,tl=0;const Oc=Promise.resolve();let jo=null;function Vn(s){const n=jo||Oc;return s?n.then(this?s.bind(this):s):n}function Pd(s){let n=Cn+1,l=Ns.length;for(;n<l;){const a=n+l>>>1,e=Ns[a],o=ia(e);o<s||o===s&&e.pre?n=a+1:l=a}return n}function Ae(s){(!Ns.length||!Ns.includes(s,ra&&s.allowRecurse?Cn+1:Cn))&&(s.id==null?Ns.push(s):Ns.splice(Pd(s.id),0,s),kc())}function kc(){!ra&&!po&&(po=!0,jo=Oc.then(wc))}function xd(s){const n=Ns.indexOf(s);n>Cn&&Ns.splice(n,1)}function Rd(s){ss(s)?Il.push(...s):(!Sn||!Sn.includes(s,s.allowRecurse?tl+1:tl))&&Il.push(s),kc()}function zp(s,n,l=ra?Cn+1:0){for(;l<Ns.length;l++){const a=Ns[l];if(a&&a.pre){if(s&&a.id!==s.uid)continue;Ns.splice(l,1),l--,a()}}}function ee(s){if(Il.length){const n=[...new Set(Il)];if(Il.length=0,Sn){Sn.push(...n);return}for(Sn=n,Sn.sort((l,a)=>ia(l)-ia(a)),tl=0;tl<Sn.length;tl++)Sn[tl]();Sn=null,tl=0}}const ia=s=>s.id==null?1/0:s.id,Vd=(s,n)=>{const l=ia(s)-ia(n);if(l===0){if(s.pre&&!n.pre)return-1;if(n.pre&&!s.pre)return 1}return l};function wc(s){po=!1,ra=!0,Ns.sort(Vd);try{for(Cn=0;Cn<Ns.length;Cn++){const n=Ns[Cn];n&&n.active!==!1&&Xn(n,null,14)}}finally{Cn=0,Ns.length=0,ee(),ra=!1,jo=null,(Ns.length||Il.length)&&wc()}}function Md(s,n,...l){if(s.isUnmounted)return;const a=s.vnode.props||gs;let e=l;const o=n.startsWith("update:"),t=o&&n.slice(7);if(t&&t in a){const d=`${t==="modelValue"?"model":t}Modifiers`,{number:y,trim:u}=a[d]||gs;u&&(e=l.map(A=>cs(A)?A.trim():A)),y&&(e=l.map(KB))}let r,B=a[r=Ie(n)]||a[r=Ie(yn(n))];!B&&o&&(B=a[r=Ie(zl(n))]),B&&cn(B,s,6,e);const i=a[r+"Once"];if(i){if(!s.emitted)s.emitted={};else if(s.emitted[r])return;s.emitted[r]=!0,cn(i,s,6,e)}}function Sc(s,n,l=!1){const a=n.emitsCache,e=a.get(s);if(e!==void 0)return e;const o=s.emits;let t={},r=!1;if(!es(s)){const B=i=>{const d=Sc(i,n,!0);d&&(r=!0,Ps(t,d))};!l&&n.mixins.length&&n.mixins.forEach(B),s.extends&&B(s.extends),s.mixins&&s.mixins.forEach(B)}return!o&&!r?(Is(s)&&a.set(s,null),null):(ss(o)?o.forEach(B=>t[B]=null):Ps(t,o),Is(s)&&a.set(s,t),t)}function me(s,n){return!s||!Fa(n)?!1:(n=n.slice(2).replace(/Once$/,""),vs(s,n[0].toLowerCase()+n.slice(1))||vs(s,zl(n))||vs(s,n))}let tn=null,Pc=null;function oe(s){const n=tn;return tn=s,Pc=s&&s.type.__scopeId||null,n}function qd(s,n=tn,l){if(!n||s._n)return s;const a=(...e)=>{a._d&&st(-1);const o=oe(n);let t;try{t=s(...e)}finally{oe(o),a._d&&st(1)}return t};return a._n=!0,a._c=!0,a._d=!0,a}function ke(s){const{type:n,vnode:l,proxy:a,withProxy:e,props:o,propsOptions:[t],slots:r,attrs:B,emit:i,render:d,renderCache:y,data:u,setupState:A,ctx:F,inheritAttrs:_}=s;let C,D;const I=oe(s);try{if(l.shapeFlag&4){const T=e||a,V=T;C=An(d.call(V,T,y,o,A,u,F)),D=B}else{const T=n;C=An(T.length>1?T(o,{attrs:B,slots:r,emit:i}):T(o,null)),D=n.props?B:Nd(B)}}catch(T){ea.length=0,fa(T,s,1),C=Os(Bn)}let f=C;if(D&&_!==!1){const T=Object.keys(D),{shapeFlag:V}=f;T.length&&V&7&&(t&&T.some(wo)&&(D=$d(D,t)),f=Jn(f,D))}return l.dirs&&(f=Jn(f),f.dirs=f.dirs?f.dirs.concat(l.dirs):l.dirs),l.transition&&(f.transition=l.transition),C=f,oe(I),C}const Nd=s=>{let n;for(const l in s)(l==="class"||l==="style"||Fa(l))&&((n||(n={}))[l]=s[l]);return n},$d=(s,n)=>{const l={};for(const a in s)(!wo(a)||!(a.slice(9)in n))&&(l[a]=s[a]);return l};function zd(s,n,l){const{props:a,children:e,component:o}=s,{props:t,children:r,patchFlag:B}=n,i=o.emitsOptions;if(n.dirs||n.transition)return!0;if(l&&B>=0){if(B&1024)return!0;if(B&16)return a?Qp(a,t,i):!!t;if(B&8){const d=n.dynamicProps;for(let y=0;y<d.length;y++){const u=d[y];if(t[u]!==a[u]&&!me(i,u))return!0}}}else return(e||r)&&(!r||!r.$stable)?!0:a===t?!1:a?t?Qp(a,t,i):!0:!!t;return!1}function Qp(s,n,l){const a=Object.keys(n);if(a.length!==Object.keys(s).length)return!0;for(let e=0;e<a.length;e++){const o=a[e];if(n[o]!==s[o]&&!me(l,o))return!0}return!1}function Qd({vnode:s,parent:n},l){if(l)for(;n;){const a=n.subTree;if(a.suspense&&a.suspense.activeBranch===s&&(a.el=s.el),a===s)(s=n.vnode).el=l,n=n.parent;else break}}const xc="components";function sn(s,n){return jd(xc,s,!0,n)||s}const Hd=Symbol.for("v-ndc");function jd(s,n,l=!0,a=!1){const e=tn||Vs;if(e){const o=e.type;if(s===xc){const r=Ny(o,!1);if(r&&(r===n||r===yn(n)||r===Ea(yn(n))))return o}const t=Hp(e[s]||o[s],n)||Hp(e.appContext[s],n);return!t&&a?o:t}}function Hp(s,n){return s&&(s[n]||s[yn(n)]||s[Ea(yn(n))])}const Gd=s=>s.__isSuspense;function Rc(s,n){n&&n.pendingBranch?ss(s)?n.effects.push(...s):n.effects.push(s):Rd(s)}const Ud=Symbol.for("v-scx"),Wd=()=>us(Ud);function Vc(s,n){return Go(s,null,n)}const $a={};function rs(s,n,l){return Go(s,n,l)}function Go(s,n,{immediate:l,deep:a,flush:e,once:o,onTrack:t,onTrigger:r}=gs){if(n&&o){const g=n;n=(...W)=>{g(...W),V()}}const B=Vs,i=g=>a===!0?g:hl(g,a===!1?1:void 0);let d,y=!1,u=!1;if(qs(s)?(d=()=>s.value,y=le(s)):Tl(s)?(d=()=>i(s),y=!0):ss(s)?(u=!0,y=s.some(g=>Tl(g)||le(g)),d=()=>s.map(g=>{if(qs(g))return g.value;if(Tl(g))return i(g);if(es(g))return Xn(g,B,2)})):es(s)?n?d=()=>Xn(s,B,2):d=()=>(A&&A(),cn(s,B,3,[F])):d=pn,n&&a){const g=d;d=()=>hl(g())}let A,F=g=>{A=f.onStop=()=>{Xn(g,B,4),A=f.onStop=void 0}},_;if(_a)if(F=pn,n?l&&cn(n,B,3,[d(),u?[]:void 0,F]):d(),e==="sync"){const g=Wd();_=g.__watcherHandles||(g.__watcherHandles=[])}else return pn;let C=u?new Array(s.length).fill($a):$a;const D=()=>{if(!(!f.active||!f.dirty))if(n){const g=f.run();(a||y||(u?g.some((W,N)=>Zn(W,C[N])):Zn(g,C)))&&(A&&A(),cn(n,B,3,[g,C===$a?void 0:u&&C[0]===$a?[]:C,F]),C=g)}else f.run()};D.allowRecurse=!!n;let I;e==="sync"?I=D:e==="post"?I=()=>js(D,B&&B.suspense):(D.pre=!0,B&&(D.id=B.uid),I=()=>Ae(D));const f=new Vo(d,pn,I),T=Bc(),V=()=>{f.stop(),T&&So(T.effects,f)};return n?l?D():C=f.run():e==="post"?js(f.run.bind(f),B&&B.suspense):f.run(),_&&_.push(V),V}function Kd(s,n,l){const a=this.proxy,e=cs(s)?s.includes(".")?Mc(a,s):()=>a[s]:s.bind(a,a);let o;es(n)?o=n:(o=n.handler,l=n);const t=Vs;Rl(this);const r=Go(e,o.bind(a),l);return t?Rl(t):yl(),r}function Mc(s,n){const l=n.split(".");return()=>{let a=s;for(let e=0;e<l.length&&a;e++)a=a[l[e]];return a}}function hl(s,n,l=0,a){if(!Is(s)||s.__v_skip)return s;if(n&&n>0){if(l>=n)return s;l++}if(a=a||new Set,a.has(s))return s;if(a.add(s),qs(s))hl(s.value,n,l,a);else if(ss(s))for(let e=0;e<s.length;e++)hl(s[e],n,l,a);else if(QB(s)||Jl(s))s.forEach(e=>{hl(e,n,l,a)});else if(GB(s))for(const e in s)hl(s[e],n,l,a);return s}function hn(s,n,l,a){const e=s.dirs,o=n&&n.dirs;for(let t=0;t<e.length;t++){const r=e[t];o&&(r.oldValue=o[t].value);let B=r.dir[a];B&&(vl(),cn(B,l,8,[s.el,r,s,n]),ul())}}const Gn=Symbol("_leaveCb"),za=Symbol("_enterCb");function qc(){const s={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return ms(()=>{s.isMounted=!0}),Wo(()=>{s.isUnmounting=!0}),s}const an=[Function,Array],Nc={mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:an,onEnter:an,onAfterEnter:an,onEnterCancelled:an,onBeforeLeave:an,onLeave:an,onAfterLeave:an,onLeaveCancelled:an,onBeforeAppear:an,onAppear:an,onAfterAppear:an,onAppearCancelled:an},Yd={name:"BaseTransition",props:Nc,setup(s,{slots:n}){const l=jl(),a=qc();let e;return()=>{const o=n.default&&Uo(n.default(),!0);if(!o||!o.length)return;let t=o[0];if(o.length>1){for(const _ of o)if(_.type!==Bn){t=_;break}}const r=is(s),{mode:B}=r;if(a.isLeaving)return we(t);const i=jp(t);if(!i)return we(t);const d=Ba(i,r,a,l);da(i,d);const y=l.subTree,u=y&&jp(y);let A=!1;const{getTransitionKey:F}=i.type;if(F){const _=F();e===void 0?e=_:_!==e&&(e=_,A=!0)}if(u&&u.type!==Bn&&(!cl(i,u)||A)){const _=Ba(u,r,a,l);if(da(u,_),B==="out-in")return a.isLeaving=!0,_.afterLeave=()=>{a.isLeaving=!1,l.update.active!==!1&&(l.effect.dirty=!0,l.update())},we(t);B==="in-out"&&i.type!==Bn&&(_.delayLeave=(C,D,I)=>{const f=$c(a,u);f[String(u.key)]=u,C[Gn]=()=>{D(),C[Gn]=void 0,delete d.delayedLeave},d.delayedLeave=I})}return t}}},Xd=Yd;function $c(s,n){const{leavingVNodes:l}=s;let a=l.get(n.type);return a||(a=Object.create(null),l.set(n.type,a)),a}function Ba(s,n,l,a){const{appear:e,mode:o,persisted:t=!1,onBeforeEnter:r,onEnter:B,onAfterEnter:i,onEnterCancelled:d,onBeforeLeave:y,onLeave:u,onAfterLeave:A,onLeaveCancelled:F,onBeforeAppear:_,onAppear:C,onAfterAppear:D,onAppearCancelled:I}=n,f=String(s.key),T=$c(l,s),V=(N,P)=>{N&&cn(N,a,9,P)},g=(N,P)=>{const $=P[1];V(N,P),ss(N)?N.every(X=>X.length<=1)&&$():N.length<=1&&$()},W={mode:o,persisted:t,beforeEnter(N){let P=r;if(!l.isMounted)if(e)P=_||r;else return;N[Gn]&&N[Gn](!0);const $=T[f];$&&cl(s,$)&&$.el[Gn]&&$.el[Gn](),V(P,[N])},enter(N){let P=B,$=i,X=d;if(!l.isMounted)if(e)P=C||B,$=D||i,X=I||d;else return;let z=!1;const ns=N[za]=Ls=>{z||(z=!0,Ls?V(X,[N]):V($,[N]),W.delayedLeave&&W.delayedLeave(),N[za]=void 0)};P?g(P,[N,ns]):ns()},leave(N,P){const $=String(s.key);if(N[za]&&N[za](!0),l.isUnmounting)return P();V(y,[N]);let X=!1;const z=N[Gn]=ns=>{X||(X=!0,P(),ns?V(F,[N]):V(A,[N]),N[Gn]=void 0,T[$]===s&&delete T[$])};T[$]=s,u?g(u,[N,z]):z()},clone(N){return Ba(N,n,l,a)}};return W}function we(s){if(ba(s))return s=Jn(s),s.children=null,s}function jp(s){return ba(s)?s.children?s.children[0]:void 0:s}function da(s,n){s.shapeFlag&6&&s.component?da(s.component.subTree,n):s.shapeFlag&128?(s.ssContent.transition=n.clone(s.ssContent),s.ssFallback.transition=n.clone(s.ssFallback)):s.transition=n}function Uo(s,n=!1,l){let a=[],e=0;for(let o=0;o<s.length;o++){let t=s[o];const r=l==null?t.key:String(l)+String(t.key!=null?t.key:o);t.type===Zs?(t.patchFlag&128&&e++,a=a.concat(Uo(t.children,n,r))):(n||t.type!==Bn)&&a.push(r!=null?Jn(t,{key:r}):t)}if(e>1)for(let o=0;o<a.length;o++)a[o].patchFlag=-2;return a}/*! #__NO_SIDE_EFFECTS__ */function R(s,n){return es(s)?Ps({name:s.name},n,{setup:s}):s}const na=s=>!!s.type.__asyncLoader;/*! #__NO_SIDE_EFFECTS__ */function v(s){es(s)&&(s={loader:s});const{loader:n,loadingComponent:l,errorComponent:a,delay:e=200,timeout:o,suspensible:t=!0,onError:r}=s;let B=null,i,d=0;const y=()=>(d++,B=null,u()),u=()=>{let A;return B||(A=B=n().catch(F=>{if(F=F instanceof Error?F:new Error(String(F)),r)return new Promise((_,C)=>{r(F,()=>_(y()),()=>C(F),d+1)});throw F}).then(F=>A!==B&&B?B:(F&&(F.__esModule||F[Symbol.toStringTag]==="Module")&&(F=F.default),i=F,F)))};return R({name:"AsyncComponentWrapper",__asyncLoader:u,get __asyncResolved(){return i},setup(){const A=Vs;if(i)return()=>Se(i,A);const F=I=>{B=null,fa(I,A,13,!a)};if(t&&A.suspense||_a)return u().then(I=>()=>Se(I,A)).catch(I=>(F(I),()=>a?Os(a,{error:I}):null));const _=G(!1),C=G(),D=G(!!e);return e&&setTimeout(()=>{D.value=!1},e),o!=null&&setTimeout(()=>{if(!_.value&&!C.value){const I=new Error(`Async component timed out after ${o}ms.`);F(I),C.value=I}},o),u().then(()=>{_.value=!0,A.parent&&ba(A.parent.vnode)&&(A.parent.effect.dirty=!0,Ae(A.parent.update))}).catch(I=>{F(I),C.value=I}),()=>{if(_.value&&i)return Se(i,A);if(C.value&&a)return Os(a,{error:C.value});if(l&&!D.value)return Os(l)}}})}function Se(s,n){const{ref:l,props:a,children:e,ce:o}=n.vnode,t=Os(s,a,e);return t.ref=l,t.ce=o,delete n.vnode.ce,t}const ba=s=>s.type.__isKeepAlive;function Zd(s,n){zc(s,"a",n)}function Jd(s,n){zc(s,"da",n)}function zc(s,n,l=Vs){const a=s.__wdc||(s.__wdc=()=>{let e=l;for(;e;){if(e.isDeactivated)return;e=e.parent}return s()});if(Fe(n,a,l),l){let e=l.parent;for(;e&&e.parent;)ba(e.parent.vnode)&&sy(a,n,l,e),e=e.parent}}function sy(s,n,l,a){const e=Fe(n,s,a,!0);Hl(()=>{So(a[n],e)},l)}function Fe(s,n,l=Vs,a=!1){if(l){const e=l[s]||(l[s]=[]),o=n.__weh||(n.__weh=(...t)=>{if(l.isUnmounted)return;vl(),Rl(l);const r=cn(n,l,s,t);return yl(),ul(),r});return a?e.unshift(o):e.push(o),o}}const Mn=s=>(n,l=Vs)=>(!_a||s==="sp")&&Fe(s,(...a)=>n(...a),l),ny=Mn("bm"),ms=Mn("m"),ly=Mn("bu"),Qc=Mn("u"),Wo=Mn("bum"),Hl=Mn("um"),ay=Mn("sp"),ey=Mn("rtg"),oy=Mn("rtc");function py(s,n=Vs){Fe("ec",s,n)}const to=s=>s?er(s)?Jo(s)||s.proxy:to(s.parent):null,la=Ps(Object.create(null),{$:s=>s,$el:s=>s.vnode.el,$data:s=>s.data,$props:s=>s.props,$attrs:s=>s.attrs,$slots:s=>s.slots,$refs:s=>s.refs,$parent:s=>to(s.parent),$root:s=>to(s.root),$emit:s=>s.emit,$options:s=>Ko(s),$forceUpdate:s=>s.f||(s.f=()=>{s.effect.dirty=!0,Ae(s.update)}),$nextTick:s=>s.n||(s.n=Vn.bind(s.proxy)),$watch:s=>Kd.bind(s)}),Pe=(s,n)=>s!==gs&&!s.__isScriptSetup&&vs(s,n),ty={get({_:s},n){const{ctx:l,setupState:a,data:e,props:o,accessCache:t,type:r,appContext:B}=s;let i;if(n[0]!=="$"){const A=t[n];if(A!==void 0)switch(A){case 1:return a[n];case 2:return e[n];case 4:return l[n];case 3:return o[n]}else{if(Pe(a,n))return t[n]=1,a[n];if(e!==gs&&vs(e,n))return t[n]=2,e[n];if((i=s.propsOptions[0])&&vs(i,n))return t[n]=3,o[n];if(l!==gs&&vs(l,n))return t[n]=4,l[n];co&&(t[n]=0)}}const d=la[n];let y,u;if(d)return n==="$attrs"&&Ws(s,"get",n),d(s);if((y=r.__cssModules)&&(y=y[n]))return y;if(l!==gs&&vs(l,n))return t[n]=4,l[n];if(u=B.config.globalProperties,vs(u,n))return u[n]},set({_:s},n,l){const{data:a,setupState:e,ctx:o}=s;return Pe(e,n)?(e[n]=l,!0):a!==gs&&vs(a,n)?(a[n]=l,!0):vs(s.props,n)||n[0]==="$"&&n.slice(1)in s?!1:(o[n]=l,!0)},has({_:{data:s,setupState:n,accessCache:l,ctx:a,appContext:e,propsOptions:o}},t){let r;return!!l[t]||s!==gs&&vs(s,t)||Pe(n,t)||(r=o[0])&&vs(r,t)||vs(a,t)||vs(la,t)||vs(e.config.globalProperties,t)},defineProperty(s,n,l){return l.get!=null?s._.accessCache[n]=0:vs(l,"value")&&this.set(s,n,l.value,null),Reflect.defineProperty(s,n,l)}};function Gp(s){return ss(s)?s.reduce((n,l)=>(n[l]=null,n),{}):s}let co=!0;function cy(s){const n=Ko(s),l=s.proxy,a=s.ctx;co=!1,n.beforeCreate&&Up(n.beforeCreate,s,"bc");const{data:e,computed:o,methods:t,watch:r,provide:B,inject:i,created:d,beforeMount:y,mounted:u,beforeUpdate:A,updated:F,activated:_,deactivated:C,beforeDestroy:D,beforeUnmount:I,destroyed:f,unmounted:T,render:V,renderTracked:g,renderTriggered:W,errorCaptured:N,serverPrefetch:P,expose:$,inheritAttrs:X,components:z,directives:ns,filters:Ls}=n;if(i&&ry(i,a,null),t)for(const ls in t){const K=t[ls];es(K)&&(a[ls]=K.bind(l))}if(e){const ls=e.call(l,l);Is(ls)&&(s.data=Da(ls))}if(co=!0,o)for(const ls in o){const K=o[ls],ws=es(K)?K.bind(l,l):es(K.get)?K.get.bind(l,l):pn,fn=!es(K)&&es(K.set)?K.set.bind(l):pn,ln=h({get:ws,set:fn});Object.defineProperty(a,ls,{enumerable:!0,configurable:!0,get:()=>ln.value,set:xs=>ln.value=xs})}if(r)for(const ls in r)Hc(r[ls],a,l,ls);if(B){const ls=es(B)?B.call(l):B;Reflect.ownKeys(ls).forEach(K=>{rn(K,ls[K])})}d&&Up(d,s,"c");function U(ls,K){ss(K)?K.forEach(ws=>ls(ws.bind(l))):K&&ls(K.bind(l))}if(U(ny,y),U(ms,u),U(ly,A),U(Qc,F),U(Zd,_),U(Jd,C),U(py,N),U(oy,g),U(ey,W),U(Wo,I),U(Hl,T),U(ay,P),ss($))if($.length){const ls=s.exposed||(s.exposed={});$.forEach(K=>{Object.defineProperty(ls,K,{get:()=>l[K],set:ws=>l[K]=ws})})}else s.exposed||(s.exposed={});V&&s.render===pn&&(s.render=V),X!=null&&(s.inheritAttrs=X),z&&(s.components=z),ns&&(s.directives=ns)}function ry(s,n,l=pn){ss(s)&&(s=ro(s));for(const a in s){const e=s[a];let o;Is(e)?"default"in e?o=us(e.from||a,e.default,!0):o=us(e.from||a):o=us(e),qs(o)?Object.defineProperty(n,a,{enumerable:!0,configurable:!0,get:()=>o.value,set:t=>o.value=t}):n[a]=o}}function Up(s,n,l){cn(ss(s)?s.map(a=>a.bind(n.proxy)):s.bind(n.proxy),n,l)}function Hc(s,n,l,a){const e=a.includes(".")?Mc(l,a):()=>l[a];if(cs(s)){const o=n[s];es(o)&&rs(e,o)}else if(es(s))rs(e,s.bind(l));else if(Is(s))if(ss(s))s.forEach(o=>Hc(o,n,l,a));else{const o=es(s.handler)?s.handler.bind(l):n[s.handler];es(o)&&rs(e,o,s)}}function Ko(s){const n=s.type,{mixins:l,extends:a}=n,{mixins:e,optionsCache:o,config:{optionMergeStrategies:t}}=s.appContext,r=o.get(n);let B;return r?B=r:!e.length&&!l&&!a?B=n:(B={},e.length&&e.forEach(i=>pe(B,i,t,!0)),pe(B,n,t)),Is(n)&&o.set(n,B),B}function pe(s,n,l,a=!1){const{mixins:e,extends:o}=n;o&&pe(s,o,l,!0),e&&e.forEach(t=>pe(s,t,l,!0));for(const t in n)if(!(a&&t==="expose")){const r=iy[t]||l&&l[t];s[t]=r?r(s[t],n[t]):n[t]}return s}const iy={data:Wp,props:Kp,emits:Kp,methods:Zl,computed:Zl,beforeCreate:$s,created:$s,beforeMount:$s,mounted:$s,beforeUpdate:$s,updated:$s,beforeDestroy:$s,beforeUnmount:$s,destroyed:$s,unmounted:$s,activated:$s,deactivated:$s,errorCaptured:$s,serverPrefetch:$s,components:Zl,directives:Zl,watch:dy,provide:Wp,inject:By};function Wp(s,n){return n?s?function(){return Ps(es(s)?s.call(this,this):s,es(n)?n.call(this,this):n)}:n:s}function By(s,n){return Zl(ro(s),ro(n))}function ro(s){if(ss(s)){const n={};for(let l=0;l<s.length;l++)n[s[l]]=s[l];return n}return s}function $s(s,n){return s?[...new Set([].concat(s,n))]:n}function Zl(s,n){return s?Ps(Object.create(null),s,n):n}function Kp(s,n){return s?ss(s)&&ss(n)?[...new Set([...s,...n])]:Ps(Object.create(null),Gp(s),Gp(n??{})):n}function dy(s,n){if(!s)return n;if(!n)return s;const l=Ps(Object.create(null),s);for(const a in n)l[a]=$s(s[a],n[a]);return l}function jc(){return{app:null,config:{isNativeTag:$B,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let yy=0;function vy(s,n){return function(a,e=null){es(a)||(a=Ps({},a)),e!=null&&!Is(e)&&(e=null);const o=jc(),t=new WeakSet;let r=!1;const B=o.app={_uid:yy++,_component:a,_props:e,_container:null,_context:o,_instance:null,version:zy,get config(){return o.config},set config(i){},use(i,...d){return t.has(i)||(i&&es(i.install)?(t.add(i),i.install(B,...d)):es(i)&&(t.add(i),i(B,...d))),B},mixin(i){return o.mixins.includes(i)||o.mixins.push(i),B},component(i,d){return d?(o.components[i]=d,B):o.components[i]},directive(i,d){return d?(o.directives[i]=d,B):o.directives[i]},mount(i,d,y){if(!r){const u=Os(a,e);return u.appContext=o,y===!0?y="svg":y===!1&&(y=void 0),d&&n?n(u,i):s(u,i,y),r=!0,B._container=i,i.__vue_app__=B,Jo(u.component)||u.component.proxy}},unmount(){r&&(s(null,B._container),delete B._container.__vue_app__)},provide(i,d){return o.provides[i]=d,B},runWithContext(i){te=B;try{return i()}finally{te=null}}};return B}}let te=null;function rn(s,n){if(Vs){let l=Vs.provides;const a=Vs.parent&&Vs.parent.provides;a===l&&(l=Vs.provides=Object.create(a)),l[s]=n}}function us(s,n,l=!1){const a=Vs||tn;if(a||te){const e=a?a.parent==null?a.vnode.appContext&&a.vnode.appContext.provides:a.parent.provides:te._context.provides;if(e&&s in e)return e[s];if(arguments.length>1)return l&&es(n)?n.call(a&&a.proxy):n}}function uy(s,n,l,a=!1){const e={},o={};se(o,Ee,1),s.propsDefaults=Object.create(null),Gc(s,n,e,o);for(const t in s.propsOptions[0])t in e||(e[t]=void 0);l?s.props=a?e:_c(e):s.type.props?s.props=e:s.props=o,s.attrs=o}function Ay(s,n,l,a){const{props:e,attrs:o,vnode:{patchFlag:t}}=s,r=is(e),[B]=s.propsOptions;let i=!1;if((a||t>0)&&!(t&16)){if(t&8){const d=s.vnode.dynamicProps;for(let y=0;y<d.length;y++){let u=d[y];if(me(s.emitsOptions,u))continue;const A=n[u];if(B)if(vs(o,u))A!==o[u]&&(o[u]=A,i=!0);else{const F=yn(u);e[F]=io(B,r,F,A,s,!1)}else A!==o[u]&&(o[u]=A,i=!0)}}}else{Gc(s,n,e,o)&&(i=!0);let d;for(const y in r)(!n||!vs(n,y)&&((d=zl(y))===y||!vs(n,d)))&&(B?l&&(l[y]!==void 0||l[d]!==void 0)&&(e[y]=io(B,r,y,void 0,s,!0)):delete e[y]);if(o!==r)for(const y in o)(!n||!vs(n,y))&&(delete o[y],i=!0)}i&&Pn(s,"set","$attrs")}function Gc(s,n,l,a){const[e,o]=s.propsOptions;let t=!1,r;if(n)for(let B in n){if(sa(B))continue;const i=n[B];let d;e&&vs(e,d=yn(B))?!o||!o.includes(d)?l[d]=i:(r||(r={}))[d]=i:me(s.emitsOptions,B)||(!(B in a)||i!==a[B])&&(a[B]=i,t=!0)}if(o){const B=is(l),i=r||gs;for(let d=0;d<o.length;d++){const y=o[d];l[y]=io(e,B,y,i[y],s,!vs(i,y))}}return t}function io(s,n,l,a,e,o){const t=s[l];if(t!=null){const r=vs(t,"default");if(r&&a===void 0){const B=t.default;if(t.type!==Function&&!t.skipFactory&&es(B)){const{propsDefaults:i}=e;l in i?a=i[l]:(Rl(e),a=i[l]=B.call(null,n),yl())}else a=B}t[0]&&(o&&!r?a=!1:t[1]&&(a===""||a===zl(l))&&(a=!0))}return a}function Uc(s,n,l=!1){const a=n.propsCache,e=a.get(s);if(e)return e;const o=s.props,t={},r=[];let B=!1;if(!es(s)){const d=y=>{B=!0;const[u,A]=Uc(y,n,!0);Ps(t,u),A&&r.push(...A)};!l&&n.mixins.length&&n.mixins.forEach(d),s.extends&&d(s.extends),s.mixins&&s.mixins.forEach(d)}if(!o&&!B)return Is(s)&&a.set(s,Ll),Ll;if(ss(o))for(let d=0;d<o.length;d++){const y=yn(o[d]);Yp(y)&&(t[y]=gs)}else if(o)for(const d in o){const y=yn(d);if(Yp(y)){const u=o[d],A=t[y]=ss(u)||es(u)?{type:u}:Ps({},u);if(A){const F=Jp(Boolean,A.type),_=Jp(String,A.type);A[0]=F>-1,A[1]=_<0||F<_,(F>-1||vs(A,"default"))&&r.push(y)}}}const i=[t,r];return Is(s)&&a.set(s,i),i}function Yp(s){return s[0]!=="$"}function Xp(s){const n=s&&s.toString().match(/^\s*(function|class) (\w+)/);return n?n[2]:s===null?"null":""}function Zp(s,n){return Xp(s)===Xp(n)}function Jp(s,n){return ss(n)?n.findIndex(l=>Zp(l,s)):es(n)&&Zp(n,s)?0:-1}const Wc=s=>s[0]==="_"||s==="$stable",Yo=s=>ss(s)?s.map(An):[An(s)],my=(s,n,l)=>{if(n._n)return n;const a=qd((...e)=>Yo(n(...e)),l);return a._c=!1,a},Kc=(s,n,l)=>{const a=s._ctx;for(const e in s){if(Wc(e))continue;const o=s[e];if(es(o))n[e]=my(e,o,a);else if(o!=null){const t=Yo(o);n[e]=()=>t}}},Yc=(s,n)=>{const l=Yo(n);s.slots.default=()=>l},Fy=(s,n)=>{if(s.vnode.shapeFlag&32){const l=n._;l?(s.slots=is(n),se(n,"_",l)):Kc(n,s.slots={})}else s.slots={},n&&Yc(s,n);se(s.slots,Ee,1)},Ey=(s,n,l)=>{const{vnode:a,slots:e}=s;let o=!0,t=gs;if(a.shapeFlag&32){const r=n._;r?l&&r===1?o=!1:(Ps(e,n),!l&&r===1&&delete e._):(o=!n.$stable,Kc(n,e)),t=n}else n&&(Yc(s,n),t={default:1});if(o)for(const r in e)!Wc(r)&&t[r]==null&&delete e[r]};function ce(s,n,l,a,e=!1){if(ss(s)){s.forEach((u,A)=>ce(u,n&&(ss(n)?n[A]:n),l,a,e));return}if(na(a)&&!e)return;const o=a.shapeFlag&4?Jo(a.component)||a.component.proxy:a.el,t=e?null:o,{i:r,r:B}=s,i=n&&n.r,d=r.refs===gs?r.refs={}:r.refs,y=r.setupState;if(i!=null&&i!==B&&(cs(i)?(d[i]=null,vs(y,i)&&(y[i]=null)):qs(i)&&(i.value=null)),es(B))Xn(B,r,12,[t,d]);else{const u=cs(B),A=qs(B);if(u||A){const F=()=>{if(s.f){const _=u?vs(y,B)?y[B]:d[B]:B.value;e?ss(_)&&So(_,o):ss(_)?_.includes(o)||_.push(o):u?(d[B]=[o],vs(y,B)&&(y[B]=d[B])):(B.value=[o],s.k&&(d[s.k]=B.value))}else u?(d[B]=t,vs(y,B)&&(y[B]=t)):A&&(B.value=t,s.k&&(d[s.k]=t))};t?(F.id=-1,js(F,l)):F()}}}let $n=!1;const Dy=s=>s.namespaceURI.includes("svg")&&s.tagName!=="foreignObject",fy=s=>s.namespaceURI.includes("MathML"),Qa=s=>{if(Dy(s))return"svg";if(fy(s))return"mathml"},Ha=s=>s.nodeType===8;function by(s){const{mt:n,p:l,o:{patchProp:a,createText:e,nextSibling:o,parentNode:t,remove:r,insert:B,createComment:i}}=s,d=(f,T)=>{if(!T.hasChildNodes()){l(null,f,T),ee(),T._vnode=f;return}$n=!1,y(T.firstChild,f,null,null,null),ee(),T._vnode=f,$n&&console.error("Hydration completed but contains mismatches.")},y=(f,T,V,g,W,N=!1)=>{const P=Ha(f)&&f.data==="[",$=()=>_(f,T,V,g,W,P),{type:X,ref:z,shapeFlag:ns,patchFlag:Ls}=T;let hs=f.nodeType;T.el=f,Ls===-2&&(N=!1,T.dynamicChildren=null);let U=null;switch(X){case xl:hs!==3?T.children===""?(B(T.el=e(""),t(f),f),U=f):U=$():(f.data!==T.children&&($n=!0,f.data=T.children),U=o(f));break;case Bn:I(f)?(U=o(f),D(T.el=f.content.firstChild,f,V)):hs!==8||P?U=$():U=o(f);break;case aa:if(P&&(f=o(f),hs=f.nodeType),hs===1||hs===3){U=f;const ls=!T.children.length;for(let K=0;K<T.staticCount;K++)ls&&(T.children+=U.nodeType===1?U.outerHTML:U.data),K===T.staticCount-1&&(T.anchor=U),U=o(U);return P?o(U):U}else $();break;case Zs:P?U=F(f,T,V,g,W,N):U=$();break;default:if(ns&1)(hs!==1||T.type.toLowerCase()!==f.tagName.toLowerCase())&&!I(f)?U=$():U=u(f,T,V,g,W,N);else if(ns&6){T.slotScopeIds=W;const ls=t(f);if(P?U=C(f):Ha(f)&&f.data==="teleport start"?U=C(f,f.data,"teleport end"):U=o(f),n(T,ls,null,V,g,Qa(ls),N),na(T)){let K;P?(K=Os(Zs),K.anchor=U?U.previousSibling:ls.lastChild):K=f.nodeType===3?ar(""):Os("div"),K.el=f,T.component.subTree=K}}else ns&64?hs!==8?U=$():U=T.type.hydrate(f,T,V,g,W,N,s,A):ns&128&&(U=T.type.hydrate(f,T,V,g,Qa(t(f)),W,N,s,y))}return z!=null&&ce(z,null,g,T),U},u=(f,T,V,g,W,N)=>{N=N||!!T.dynamicChildren;const{type:P,props:$,patchFlag:X,shapeFlag:z,dirs:ns,transition:Ls}=T,hs=P==="input"||P==="option";if(hs||X!==-1){ns&&hn(T,null,V,"created");let U=!1;if(I(f)){U=Xc(g,Ls)&&V&&V.vnode.props&&V.vnode.props.appear;const K=f.content.firstChild;U&&Ls.beforeEnter(K),D(K,f,V),T.el=f=K}if(z&16&&!($&&($.innerHTML||$.textContent))){let K=A(f.firstChild,T,f,V,g,W,N);for(;K;){$n=!0;const ws=K;K=K.nextSibling,r(ws)}}else z&8&&f.textContent!==T.children&&($n=!0,f.textContent=T.children);if($)if(hs||!N||X&48)for(const K in $)(hs&&(K.endsWith("value")||K==="indeterminate")||Fa(K)&&!sa(K)||K[0]===".")&&a(f,K,null,$[K],void 0,void 0,V);else $.onClick&&a(f,"onClick",null,$.onClick,void 0,void 0,V);let ls;(ls=$&&$.onVnodeBeforeMount)&&en(ls,V,T),ns&&hn(T,null,V,"beforeMount"),((ls=$&&$.onVnodeMounted)||ns||U)&&Rc(()=>{ls&&en(ls,V,T),U&&Ls.enter(f),ns&&hn(T,null,V,"mounted")},g)}return f.nextSibling},A=(f,T,V,g,W,N,P)=>{P=P||!!T.dynamicChildren;const $=T.children,X=$.length;for(let z=0;z<X;z++){const ns=P?$[z]:$[z]=An($[z]);if(f)f=y(f,ns,g,W,N,P);else{if(ns.type===xl&&!ns.children)continue;$n=!0,l(null,ns,V,null,g,W,Qa(V),N)}}return f},F=(f,T,V,g,W,N)=>{const{slotScopeIds:P}=T;P&&(W=W?W.concat(P):P);const $=t(f),X=A(o(f),T,$,V,g,W,N);return X&&Ha(X)&&X.data==="]"?o(T.anchor=X):($n=!0,B(T.anchor=i("]"),$,X),X)},_=(f,T,V,g,W,N)=>{if($n=!0,T.el=null,N){const X=C(f);for(;;){const z=o(f);if(z&&z!==X)r(z);else break}}const P=o(f),$=t(f);return r(f),l(null,T,$,P,V,g,Qa($),W),P},C=(f,T="[",V="]")=>{let g=0;for(;f;)if(f=o(f),f&&Ha(f)&&(f.data===T&&g++,f.data===V)){if(g===0)return o(f);g--}return f},D=(f,T,V)=>{const g=T.parentNode;g&&g.replaceChild(f,T);let W=V;for(;W;)W.vnode.el===T&&(W.vnode.el=W.subTree.el=f),W=W.parent},I=f=>f.nodeType===1&&f.tagName.toLowerCase()==="template";return[d,y]}const js=Rc;function _y(s){return hy(s,by)}function hy(s,n){const l=rc();l.__VUE__=!0;const{insert:a,remove:e,patchProp:o,createElement:t,createText:r,createComment:B,setText:i,setElementText:d,parentNode:y,nextSibling:u,setScopeId:A=pn,insertStaticContent:F}=s,_=(m,E,b,L=null,k=null,w=null,Q=void 0,x=null,q=!!E.dynamicChildren)=>{if(m===E)return;m&&!cl(m,E)&&(L=O(m),xs(m,k,w,!0),m=null),E.patchFlag===-2&&(q=!1,E.dynamicChildren=null);const{type:S,ref:j,shapeFlag:J}=E;switch(S){case xl:C(m,E,b,L);break;case Bn:D(m,E,b,L);break;case aa:m==null&&I(E,b,L,Q);break;case Zs:z(m,E,b,L,k,w,Q,x,q);break;default:J&1?V(m,E,b,L,k,w,Q,x,q):J&6?ns(m,E,b,L,k,w,Q,x,q):(J&64||J&128)&&S.process(m,E,b,L,k,w,Q,x,q,M)}j!=null&&k&&ce(j,m&&m.ref,w,E||m,!E)},C=(m,E,b,L)=>{if(m==null)a(E.el=r(E.children),b,L);else{const k=E.el=m.el;E.children!==m.children&&i(k,E.children)}},D=(m,E,b,L)=>{m==null?a(E.el=B(E.children||""),b,L):E.el=m.el},I=(m,E,b,L)=>{[m.el,m.anchor]=F(m.children,E,b,L,m.el,m.anchor)},f=({el:m,anchor:E},b,L)=>{let k;for(;m&&m!==E;)k=u(m),a(m,b,L),m=k;a(E,b,L)},T=({el:m,anchor:E})=>{let b;for(;m&&m!==E;)b=u(m),e(m),m=b;e(E)},V=(m,E,b,L,k,w,Q,x,q)=>{E.type==="svg"?Q="svg":E.type==="math"&&(Q="mathml"),m==null?g(E,b,L,k,w,Q,x,q):P(m,E,k,w,Q,x,q)},g=(m,E,b,L,k,w,Q,x)=>{let q,S;const{props:j,shapeFlag:J,transition:Z,dirs:as}=m;if(q=m.el=t(m.type,w,j&&j.is,j),J&8?d(q,m.children):J&16&&N(m.children,q,null,L,k,xe(m,w),Q,x),as&&hn(m,null,L,"created"),W(q,m,m.scopeId,Q,L),j){for(const Es in j)Es!=="value"&&!sa(Es)&&o(q,Es,null,j[Es],w,m.children,L,k,Ss);"value"in j&&o(q,"value",null,j.value,w),(S=j.onVnodeBeforeMount)&&en(S,L,m)}as&&hn(m,null,L,"beforeMount");const ps=Xc(k,Z);ps&&Z.beforeEnter(q),a(q,E,b),((S=j&&j.onVnodeMounted)||ps||as)&&js(()=>{S&&en(S,L,m),ps&&Z.enter(q),as&&hn(m,null,L,"mounted")},k)},W=(m,E,b,L,k)=>{if(b&&A(m,b),L)for(let w=0;w<L.length;w++)A(m,L[w]);if(k){let w=k.subTree;if(E===w){const Q=k.vnode;W(m,Q,Q.scopeId,Q.slotScopeIds,k.parent)}}},N=(m,E,b,L,k,w,Q,x,q=0)=>{for(let S=q;S<m.length;S++){const j=m[S]=x?Un(m[S]):An(m[S]);_(null,j,E,b,L,k,w,Q,x)}},P=(m,E,b,L,k,w,Q)=>{const x=E.el=m.el;let{patchFlag:q,dynamicChildren:S,dirs:j}=E;q|=m.patchFlag&16;const J=m.props||gs,Z=E.props||gs;let as;if(b&&ol(b,!1),(as=Z.onVnodeBeforeUpdate)&&en(as,b,E,m),j&&hn(E,m,b,"beforeUpdate"),b&&ol(b,!0),S?$(m.dynamicChildren,S,x,b,L,xe(E,k),w):Q||K(m,E,x,null,b,L,xe(E,k),w,!1),q>0){if(q&16)X(x,E,J,Z,b,L,k);else if(q&2&&J.class!==Z.class&&o(x,"class",null,Z.class,k),q&4&&o(x,"style",J.style,Z.style,k),q&8){const ps=E.dynamicProps;for(let Es=0;Es<ps.length;Es++){const Cs=ps[Es],Rs=J[Cs],vn=Z[Cs];(vn!==Rs||Cs==="value")&&o(x,Cs,Rs,vn,k,m.children,b,L,Ss)}}q&1&&m.children!==E.children&&d(x,E.children)}else!Q&&S==null&&X(x,E,J,Z,b,L,k);((as=Z.onVnodeUpdated)||j)&&js(()=>{as&&en(as,b,E,m),j&&hn(E,m,b,"updated")},L)},$=(m,E,b,L,k,w,Q)=>{for(let x=0;x<E.length;x++){const q=m[x],S=E[x],j=q.el&&(q.type===Zs||!cl(q,S)||q.shapeFlag&70)?y(q.el):b;_(q,S,j,null,L,k,w,Q,!0)}},X=(m,E,b,L,k,w,Q)=>{if(b!==L){if(b!==gs)for(const x in b)!sa(x)&&!(x in L)&&o(m,x,b[x],null,Q,E.children,k,w,Ss);for(const x in L){if(sa(x))continue;const q=L[x],S=b[x];q!==S&&x!=="value"&&o(m,x,S,q,Q,E.children,k,w,Ss)}"value"in L&&o(m,"value",b.value,L.value,Q)}},z=(m,E,b,L,k,w,Q,x,q)=>{const S=E.el=m?m.el:r(""),j=E.anchor=m?m.anchor:r("");let{patchFlag:J,dynamicChildren:Z,slotScopeIds:as}=E;as&&(x=x?x.concat(as):as),m==null?(a(S,b,L),a(j,b,L),N(E.children,b,j,k,w,Q,x,q)):J>0&&J&64&&Z&&m.dynamicChildren?($(m.dynamicChildren,Z,b,k,w,Q,x),(E.key!=null||k&&E===k.subTree)&&Zc(m,E,!0)):K(m,E,b,j,k,w,Q,x,q)},ns=(m,E,b,L,k,w,Q,x,q)=>{E.slotScopeIds=x,m==null?E.shapeFlag&512?k.ctx.activate(E,b,L,Q,q):Ls(E,b,L,k,w,Q,q):hs(m,E,q)},Ls=(m,E,b,L,k,w,Q)=>{const x=m.component=xy(m,L,k);if(ba(m)&&(x.ctx.renderer=M),Ry(x),x.asyncDep){if(k&&k.registerDep(x,U),!m.el){const q=x.subTree=Os(Bn);D(null,q,E,b)}}else U(x,m,E,b,k,w,Q)},hs=(m,E,b)=>{const L=E.component=m.component;if(zd(m,E,b))if(L.asyncDep&&!L.asyncResolved){ls(L,E,b);return}else L.next=E,xd(L.update),L.effect.dirty=!0,L.update();else E.el=m.el,L.vnode=E},U=(m,E,b,L,k,w,Q)=>{const x=()=>{if(m.isMounted){let{next:j,bu:J,u:Z,parent:as,vnode:ps}=m;{const Dl=Jc(m);if(Dl){j&&(j.el=ps.el,ls(m,j,Q)),Dl.asyncDep.then(()=>{m.isUnmounted||x()});return}}let Es=j,Cs;ol(m,!1),j?(j.el=ps.el,ls(m,j,Q)):j=ps,J&&Oe(J),(Cs=j.props&&j.props.onVnodeBeforeUpdate)&&en(Cs,as,j,ps),ol(m,!0);const Rs=ke(m),vn=m.subTree;m.subTree=Rs,_(vn,Rs,y(vn.el),O(vn),m,k,w),j.el=Rs.el,Es===null&&Qd(m,Rs.el),Z&&js(Z,k),(Cs=j.props&&j.props.onVnodeUpdated)&&js(()=>en(Cs,as,j,ps),k)}else{let j;const{el:J,props:Z}=E,{bm:as,m:ps,parent:Es}=m,Cs=na(E);if(ol(m,!1),as&&Oe(as),!Cs&&(j=Z&&Z.onVnodeBeforeMount)&&en(j,Es,E),ol(m,!0),J&&ds){const Rs=()=>{m.subTree=ke(m),ds(J,m.subTree,m,k,null)};Cs?E.type.__asyncLoader().then(()=>!m.isUnmounted&&Rs()):Rs()}else{const Rs=m.subTree=ke(m);_(null,Rs,b,L,m,k,w),E.el=Rs.el}if(ps&&js(ps,k),!Cs&&(j=Z&&Z.onVnodeMounted)){const Rs=E;js(()=>en(j,Es,Rs),k)}(E.shapeFlag&256||Es&&na(Es.vnode)&&Es.vnode.shapeFlag&256)&&m.a&&js(m.a,k),m.isMounted=!0,E=b=L=null}},q=m.effect=new Vo(x,pn,()=>Ae(S),m.scope),S=m.update=()=>{q.dirty&&q.run()};S.id=m.uid,ol(m,!0),S()},ls=(m,E,b)=>{E.component=m;const L=m.vnode.props;m.vnode=E,m.next=null,Ay(m,E.props,L,b),Ey(m,E.children,b),vl(),zp(m),ul()},K=(m,E,b,L,k,w,Q,x,q=!1)=>{const S=m&&m.children,j=m?m.shapeFlag:0,J=E.children,{patchFlag:Z,shapeFlag:as}=E;if(Z>0){if(Z&128){fn(S,J,b,L,k,w,Q,x,q);return}else if(Z&256){ws(S,J,b,L,k,w,Q,x,q);return}}as&8?(j&16&&Ss(S,k,w),J!==S&&d(b,J)):j&16?as&16?fn(S,J,b,L,k,w,Q,x,q):Ss(S,k,w,!0):(j&8&&d(b,""),as&16&&N(J,b,L,k,w,Q,x,q))},ws=(m,E,b,L,k,w,Q,x,q)=>{m=m||Ll,E=E||Ll;const S=m.length,j=E.length,J=Math.min(S,j);let Z;for(Z=0;Z<J;Z++){const as=E[Z]=q?Un(E[Z]):An(E[Z]);_(m[Z],as,b,null,k,w,Q,x,q)}S>j?Ss(m,k,w,!0,!1,J):N(E,b,L,k,w,Q,x,q,J)},fn=(m,E,b,L,k,w,Q,x,q)=>{let S=0;const j=E.length;let J=m.length-1,Z=j-1;for(;S<=J&&S<=Z;){const as=m[S],ps=E[S]=q?Un(E[S]):An(E[S]);if(cl(as,ps))_(as,ps,b,null,k,w,Q,x,q);else break;S++}for(;S<=J&&S<=Z;){const as=m[J],ps=E[Z]=q?Un(E[Z]):An(E[Z]);if(cl(as,ps))_(as,ps,b,null,k,w,Q,x,q);else break;J--,Z--}if(S>J){if(S<=Z){const as=Z+1,ps=as<j?E[as].el:L;for(;S<=Z;)_(null,E[S]=q?Un(E[S]):An(E[S]),b,ps,k,w,Q,x,q),S++}}else if(S>Z)for(;S<=J;)xs(m[S],k,w,!0),S++;else{const as=S,ps=S,Es=new Map;for(S=ps;S<=Z;S++){const Ys=E[S]=q?Un(E[S]):An(E[S]);Ys.key!=null&&Es.set(Ys.key,S)}let Cs,Rs=0;const vn=Z-ps+1;let Dl=!1,kp=0;const Wl=new Array(vn);for(S=0;S<vn;S++)Wl[S]=0;for(S=as;S<=J;S++){const Ys=m[S];if(Rs>=vn){xs(Ys,k,w,!0);continue}let _n;if(Ys.key!=null)_n=Es.get(Ys.key);else for(Cs=ps;Cs<=Z;Cs++)if(Wl[Cs-ps]===0&&cl(Ys,E[Cs])){_n=Cs;break}_n===void 0?xs(Ys,k,w,!0):(Wl[_n-ps]=S+1,_n>=kp?kp=_n:Dl=!0,_(Ys,E[_n],b,null,k,w,Q,x,q),Rs++)}const wp=Dl?Cy(Wl):Ll;for(Cs=wp.length-1,S=vn-1;S>=0;S--){const Ys=ps+S,_n=E[Ys],Sp=Ys+1<j?E[Ys+1].el:L;Wl[S]===0?_(null,_n,b,Sp,k,w,Q,x,q):Dl&&(Cs<0||S!==wp[Cs]?ln(_n,b,Sp,2):Cs--)}}},ln=(m,E,b,L,k=null)=>{const{el:w,type:Q,transition:x,children:q,shapeFlag:S}=m;if(S&6){ln(m.component.subTree,E,b,L);return}if(S&128){m.suspense.move(E,b,L);return}if(S&64){Q.move(m,E,b,M);return}if(Q===Zs){a(w,E,b);for(let J=0;J<q.length;J++)ln(q[J],E,b,L);a(m.anchor,E,b);return}if(Q===aa){f(m,E,b);return}if(L!==2&&S&1&&x)if(L===0)x.beforeEnter(w),a(w,E,b),js(()=>x.enter(w),k);else{const{leave:J,delayLeave:Z,afterLeave:as}=x,ps=()=>a(w,E,b),Es=()=>{J(w,()=>{ps(),as&&as()})};Z?Z(w,ps,Es):Es()}else a(w,E,b)},xs=(m,E,b,L=!1,k=!1)=>{const{type:w,props:Q,ref:x,children:q,dynamicChildren:S,shapeFlag:j,patchFlag:J,dirs:Z}=m;if(x!=null&&ce(x,null,b,m,!0),j&256){E.ctx.deactivate(m);return}const as=j&1&&Z,ps=!na(m);let Es;if(ps&&(Es=Q&&Q.onVnodeBeforeUnmount)&&en(Es,E,m),j&6)bn(m.component,b,L);else{if(j&128){m.suspense.unmount(b,L);return}as&&hn(m,null,E,"beforeUnmount"),j&64?m.type.remove(m,E,b,k,M,L):S&&(w!==Zs||J>0&&J&64)?Ss(S,E,b,!1,!0):(w===Zs&&J&384||!k&&j&16)&&Ss(q,E,b),L&&Ks(m)}(ps&&(Es=Q&&Q.onVnodeUnmounted)||as)&&js(()=>{Es&&en(Es,E,m),as&&hn(m,null,E,"unmounted")},b)},Ks=m=>{const{type:E,el:b,anchor:L,transition:k}=m;if(E===Zs){Tn(b,L);return}if(E===aa){T(m);return}const w=()=>{e(b),k&&!k.persisted&&k.afterLeave&&k.afterLeave()};if(m.shapeFlag&1&&k&&!k.persisted){const{leave:Q,delayLeave:x}=k,q=()=>Q(b,w);x?x(m.el,w,q):q()}else w()},Tn=(m,E)=>{let b;for(;m!==E;)b=u(m),e(m),m=b;e(E)},bn=(m,E,b)=>{const{bum:L,scope:k,update:w,subTree:Q,um:x}=m;L&&Oe(L),k.stop(),w&&(w.active=!1,xs(Q,m,E,b)),x&&js(x,E),js(()=>{m.isUnmounted=!0},E),E&&E.pendingBranch&&!E.isUnmounted&&m.asyncDep&&!m.asyncResolved&&m.suspenseId===E.pendingId&&(E.deps--,E.deps===0&&E.resolve())},Ss=(m,E,b,L=!1,k=!1,w=0)=>{for(let Q=w;Q<m.length;Q++)xs(m[Q],E,b,L,k)},O=m=>m.shapeFlag&6?O(m.component.subTree):m.shapeFlag&128?m.suspense.next():u(m.anchor||m.el),H=(m,E,b)=>{m==null?E._vnode&&xs(E._vnode,null,null,!0):_(E._vnode||null,m,E,null,null,null,b),zp(),ee(),E._vnode=m},M={p:_,um:xs,m:ln,r:Ks,mt:Ls,mc:N,pc:K,pbc:$,n:O,o:s};let Y,ds;return n&&([Y,ds]=n(M)),{render:H,hydrate:Y,createApp:vy(H,Y)}}function xe({type:s,props:n},l){return l==="svg"&&s==="foreignObject"||l==="mathml"&&s==="annotation-xml"&&n&&n.encoding&&n.encoding.includes("html")?void 0:l}function ol({effect:s,update:n},l){s.allowRecurse=n.allowRecurse=l}function Xc(s,n){return(!s||s&&!s.pendingBranch)&&n&&!n.persisted}function Zc(s,n,l=!1){const a=s.children,e=n.children;if(ss(a)&&ss(e))for(let o=0;o<a.length;o++){const t=a[o];let r=e[o];r.shapeFlag&1&&!r.dynamicChildren&&((r.patchFlag<=0||r.patchFlag===32)&&(r=e[o]=Un(e[o]),r.el=t.el),l||Zc(t,r)),r.type===xl&&(r.el=t.el)}}function Cy(s){const n=s.slice(),l=[0];let a,e,o,t,r;const B=s.length;for(a=0;a<B;a++){const i=s[a];if(i!==0){if(e=l[l.length-1],s[e]<i){n[a]=e,l.push(a);continue}for(o=0,t=l.length-1;o<t;)r=o+t>>1,s[l[r]]<i?o=r+1:t=r;i<s[l[o]]&&(o>0&&(n[a]=l[o-1]),l[o]=a)}}for(o=l.length,t=l[o-1];o-- >0;)l[o]=t,t=n[t];return l}function Jc(s){const n=s.subTree.component;if(n)return n.asyncDep&&!n.asyncResolved?n:Jc(n)}const gy=s=>s.__isTeleport,Zs=Symbol.for("v-fgt"),xl=Symbol.for("v-txt"),Bn=Symbol.for("v-cmt"),aa=Symbol.for("v-stc"),ea=[];let mn=null;function Ly(s=!1){ea.push(mn=s?null:[])}function Ty(){ea.pop(),mn=ea[ea.length-1]||null}let ya=1;function st(s){ya+=s}function sr(s){return s.dynamicChildren=ya>0?mn||Ll:null,Ty(),ya>0&&mn&&mn.push(s),s}function o7(s,n,l,a,e,o){return sr(lr(s,n,l,a,e,o,!0))}function Iy(s,n,l,a,e){return sr(Os(s,n,l,a,e,!0))}function Bo(s){return s?s.__v_isVNode===!0:!1}function cl(s,n){return s.type===n.type&&s.key===n.key}const Ee="__vInternal",nr=({key:s})=>s??null,Ja=({ref:s,ref_key:n,ref_for:l})=>(typeof s=="number"&&(s=""+s),s!=null?cs(s)||qs(s)||es(s)?{i:tn,r:s,k:n,f:!!l}:s:null);function lr(s,n=null,l=null,a=0,e=null,o=s===Zs?0:1,t=!1,r=!1){const B={__v_isVNode:!0,__v_skip:!0,type:s,props:n,key:n&&nr(n),ref:n&&Ja(n),scopeId:Pc,slotScopeIds:null,children:l,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:o,patchFlag:a,dynamicProps:e,dynamicChildren:null,appContext:null,ctx:tn};return r?(Xo(B,l),o&128&&s.normalize(B)):l&&(B.shapeFlag|=cs(l)?8:16),ya>0&&!t&&mn&&(B.patchFlag>0||o&6)&&B.patchFlag!==32&&mn.push(B),B}const Os=Oy;function Oy(s,n=null,l=null,a=0,e=null,o=!1){if((!s||s===Hd)&&(s=Bn),Bo(s)){const r=Jn(s,n,!0);return l&&Xo(r,l),ya>0&&!o&&mn&&(r.shapeFlag&6?mn[mn.indexOf(s)]=r:mn.push(r)),r.patchFlag|=-2,r}if($y(s)&&(s=s.__vccOpts),n){n=ky(n);let{class:r,style:B}=n;r&&!cs(r)&&(n.class=Ro(r)),Is(B)&&(hc(B)&&!ss(B)&&(B=Ps({},B)),n.style=xo(B))}const t=cs(s)?1:Gd(s)?128:gy(s)?64:Is(s)?4:es(s)?2:0;return lr(s,n,l,a,e,t,o,!0)}function ky(s){return s?hc(s)||Ee in s?Ps({},s):s:null}function Jn(s,n,l=!1){const{props:a,ref:e,patchFlag:o,children:t}=s,r=n?wy(a||{},n):a;return{__v_isVNode:!0,__v_skip:!0,type:s.type,props:r,key:r&&nr(r),ref:n&&n.ref?l&&e?ss(e)?e.concat(Ja(n)):[e,Ja(n)]:Ja(n):e,scopeId:s.scopeId,slotScopeIds:s.slotScopeIds,children:t,target:s.target,targetAnchor:s.targetAnchor,staticCount:s.staticCount,shapeFlag:s.shapeFlag,patchFlag:n&&s.type!==Zs?o===-1?16:o|16:o,dynamicProps:s.dynamicProps,dynamicChildren:s.dynamicChildren,appContext:s.appContext,dirs:s.dirs,transition:s.transition,component:s.component,suspense:s.suspense,ssContent:s.ssContent&&Jn(s.ssContent),ssFallback:s.ssFallback&&Jn(s.ssFallback),el:s.el,anchor:s.anchor,ctx:s.ctx,ce:s.ce}}function ar(s=" ",n=0){return Os(xl,null,s,n)}function p7(s,n){const l=Os(aa,null,s);return l.staticCount=n,l}function t7(s="",n=!1){return n?(Ly(),Iy(Bn,null,s)):Os(Bn,null,s)}function An(s){return s==null||typeof s=="boolean"?Os(Bn):ss(s)?Os(Zs,null,s.slice()):typeof s=="object"?Un(s):Os(xl,null,String(s))}function Un(s){return s.el===null&&s.patchFlag!==-1||s.memo?s:Jn(s)}function Xo(s,n){let l=0;const{shapeFlag:a}=s;if(n==null)n=null;else if(ss(n))l=16;else if(typeof n=="object")if(a&65){const e=n.default;e&&(e._c&&(e._d=!1),Xo(s,e()),e._c&&(e._d=!0));return}else{l=32;const e=n._;!e&&!(Ee in n)?n._ctx=tn:e===3&&tn&&(tn.slots._===1?n._=1:(n._=2,s.patchFlag|=1024))}else es(n)?(n={default:n,_ctx:tn},l=32):(n=String(n),a&64?(l=16,n=[ar(n)]):l=8);s.children=n,s.shapeFlag|=l}function wy(...s){const n={};for(let l=0;l<s.length;l++){const a=s[l];for(const e in a)if(e==="class")n.class!==a.class&&(n.class=Ro([n.class,a.class]));else if(e==="style")n.style=xo([n.style,a.style]);else if(Fa(e)){const o=n[e],t=a[e];t&&o!==t&&!(ss(o)&&o.includes(t))&&(n[e]=o?[].concat(o,t):t)}else e!==""&&(n[e]=a[e])}return n}function en(s,n,l,a=null){cn(s,n,7,[l,a])}const Sy=jc();let Py=0;function xy(s,n,l){const a=s.type,e=(n?n.appContext:s.appContext)||Sy,o={uid:Py++,vnode:s,type:a,parent:n,appContext:e,root:null,next:null,subTree:null,effect:null,update:null,scope:new ad(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:n?n.provides:Object.create(e.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Uc(a,e),emitsOptions:Sc(a,e),emit:null,emitted:null,propsDefaults:gs,inheritAttrs:a.inheritAttrs,ctx:gs,data:gs,props:gs,attrs:gs,slots:gs,refs:gs,setupState:gs,setupContext:null,attrsProxy:null,slotsProxy:null,suspense:l,suspenseId:l?l.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return o.ctx={_:o},o.root=n?n.root:o,o.emit=Md.bind(null,o),s.ce&&s.ce(o),o}let Vs=null;const jl=()=>Vs||tn;let Zo,yo;{const s=rc(),n=(l,a)=>{let e;return(e=s[l])||(e=s[l]=[]),e.push(a),o=>{e.length>1?e.forEach(t=>t(o)):e[0](o)}};Zo=n("__VUE_INSTANCE_SETTERS__",l=>Vs=l),yo=n("__VUE_SSR_SETTERS__",l=>_a=l)}const Rl=s=>{Zo(s),s.scope.on()},yl=()=>{Vs&&Vs.scope.off(),Zo(null)};function er(s){return s.vnode.shapeFlag&4}let _a=!1;function Ry(s,n=!1){n&&yo(n);const{props:l,children:a}=s.vnode,e=er(s);uy(s,l,e,n),Fy(s,a);const o=e?Vy(s,n):void 0;return n&&yo(!1),o}function Vy(s,n){const l=s.type;s.accessCache=Object.create(null),s.proxy=Cc(new Proxy(s.ctx,ty));const{setup:a}=l;if(a){const e=s.setupContext=a.length>1?qy(s):null;Rl(s),vl();const o=Xn(a,s,0,[s.props,e]);if(ul(),yl(),cc(o)){if(o.then(yl,yl),n)return o.then(t=>{nt(s,t,n)}).catch(t=>{fa(t,s,0)});s.asyncDep=o}else nt(s,o,n)}else or(s,n)}function nt(s,n,l){es(n)?s.type.__ssrInlineRender?s.ssrRender=n:s.render=n:Is(n)&&(s.setupState=Tc(n)),or(s,l)}let lt;function or(s,n,l){const a=s.type;if(!s.render){if(!n&&lt&&!a.render){const e=a.template||Ko(s).template;if(e){const{isCustomElement:o,compilerOptions:t}=s.appContext.config,{delimiters:r,compilerOptions:B}=a,i=Ps(Ps({isCustomElement:o,delimiters:r},t),B);a.render=lt(e,i)}}s.render=a.render||pn}{Rl(s),vl();try{cy(s)}finally{ul(),yl()}}}function My(s){return s.attrsProxy||(s.attrsProxy=new Proxy(s.attrs,{get(n,l){return Ws(s,"get","$attrs"),n[l]}}))}function qy(s){const n=l=>{s.exposed=l||{}};return{get attrs(){return My(s)},slots:s.slots,emit:s.emit,expose:n}}function Jo(s){if(s.exposed)return s.exposeProxy||(s.exposeProxy=new Proxy(Tc(Cc(s.exposed)),{get(n,l){if(l in n)return n[l];if(l in la)return la[l](s)},has(n,l){return l in n||l in la}}))}function Ny(s,n=!0){return es(s)?s.displayName||s.name:s.name||n&&s.__name}function $y(s){return es(s)&&"__vccOpts"in s}const h=(s,n)=>gd(s,n,_a);function c(s,n,l){const a=arguments.length;return a===2?Is(n)&&!ss(n)?Bo(n)?Os(s,null,[n]):Os(s,n):Os(s,null,n):(a>3?l=Array.prototype.slice.call(arguments,2):a===3&&Bo(l)&&(l=[l]),Os(s,n,l))}const zy="3.4.5",Qy="http://www.w3.org/2000/svg",Hy="http://www.w3.org/1998/Math/MathML",Wn=typeof document<"u"?document:null,at=Wn&&Wn.createElement("template"),jy={insert:(s,n,l)=>{n.insertBefore(s,l||null)},remove:s=>{const n=s.parentNode;n&&n.removeChild(s)},createElement:(s,n,l,a)=>{const e=n==="svg"?Wn.createElementNS(Qy,s):n==="mathml"?Wn.createElementNS(Hy,s):Wn.createElement(s,l?{is:l}:void 0);return s==="select"&&a&&a.multiple!=null&&e.setAttribute("multiple",a.multiple),e},createText:s=>Wn.createTextNode(s),createComment:s=>Wn.createComment(s),setText:(s,n)=>{s.nodeValue=n},setElementText:(s,n)=>{s.textContent=n},parentNode:s=>s.parentNode,nextSibling:s=>s.nextSibling,querySelector:s=>Wn.querySelector(s),setScopeId(s,n){s.setAttribute(n,"")},insertStaticContent(s,n,l,a,e,o){const t=l?l.previousSibling:n.lastChild;if(e&&(e===o||e.nextSibling))for(;n.insertBefore(e.cloneNode(!0),l),!(e===o||!(e=e.nextSibling)););else{at.innerHTML=a==="svg"?`<svg>${s}</svg>`:a==="mathml"?`<math>${s}</math>`:s;const r=at.content;if(a==="svg"||a==="mathml"){const B=r.firstChild;for(;B.firstChild;)r.appendChild(B.firstChild);r.removeChild(B)}n.insertBefore(r,l)}return[t?t.nextSibling:n.firstChild,l?l.previousSibling:n.lastChild]}},zn="transition",Kl="animation",Vl=Symbol("_vtc"),sl=(s,{slots:n})=>c(Xd,tr(s),n);sl.displayName="Transition";const pr={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},Gy=sl.props=Ps({},Nc,pr),pl=(s,n=[])=>{ss(s)?s.forEach(l=>l(...n)):s&&s(...n)},et=s=>s?ss(s)?s.some(n=>n.length>1):s.length>1:!1;function tr(s){const n={};for(const z in s)z in pr||(n[z]=s[z]);if(s.css===!1)return n;const{name:l="v",type:a,duration:e,enterFromClass:o=`${l}-enter-from`,enterActiveClass:t=`${l}-enter-active`,enterToClass:r=`${l}-enter-to`,appearFromClass:B=o,appearActiveClass:i=t,appearToClass:d=r,leaveFromClass:y=`${l}-leave-from`,leaveActiveClass:u=`${l}-leave-active`,leaveToClass:A=`${l}-leave-to`}=s,F=Uy(e),_=F&&F[0],C=F&&F[1],{onBeforeEnter:D,onEnter:I,onEnterCancelled:f,onLeave:T,onLeaveCancelled:V,onBeforeAppear:g=D,onAppear:W=I,onAppearCancelled:N=f}=n,P=(z,ns,Ls)=>{jn(z,ns?d:r),jn(z,ns?i:t),Ls&&Ls()},$=(z,ns)=>{z._isLeaving=!1,jn(z,y),jn(z,A),jn(z,u),ns&&ns()},X=z=>(ns,Ls)=>{const hs=z?W:I,U=()=>P(ns,z,Ls);pl(hs,[ns,U]),ot(()=>{jn(ns,z?B:o),On(ns,z?d:r),et(hs)||pt(ns,a,_,U)})};return Ps(n,{onBeforeEnter(z){pl(D,[z]),On(z,o),On(z,t)},onBeforeAppear(z){pl(g,[z]),On(z,B),On(z,i)},onEnter:X(!1),onAppear:X(!0),onLeave(z,ns){z._isLeaving=!0;const Ls=()=>$(z,ns);On(z,y),rr(),On(z,u),ot(()=>{z._isLeaving&&(jn(z,y),On(z,A),et(T)||pt(z,a,C,Ls))}),pl(T,[z,Ls])},onEnterCancelled(z){P(z,!1),pl(f,[z])},onAppearCancelled(z){P(z,!0),pl(N,[z])},onLeaveCancelled(z){$(z),pl(V,[z])}})}function Uy(s){if(s==null)return null;if(Is(s))return[Re(s.enter),Re(s.leave)];{const n=Re(s);return[n,n]}}function Re(s){return YB(s)}function On(s,n){n.split(/\s+/).forEach(l=>l&&s.classList.add(l)),(s[Vl]||(s[Vl]=new Set)).add(n)}function jn(s,n){n.split(/\s+/).forEach(a=>a&&s.classList.remove(a));const l=s[Vl];l&&(l.delete(n),l.size||(s[Vl]=void 0))}function ot(s){requestAnimationFrame(()=>{requestAnimationFrame(s)})}let Wy=0;function pt(s,n,l,a){const e=s._endId=++Wy,o=()=>{e===s._endId&&a()};if(l)return setTimeout(o,l);const{type:t,timeout:r,propCount:B}=cr(s,n);if(!t)return a();const i=t+"end";let d=0;const y=()=>{s.removeEventListener(i,u),o()},u=A=>{A.target===s&&++d>=B&&y()};setTimeout(()=>{d<B&&y()},r+1),s.addEventListener(i,u)}function cr(s,n){const l=window.getComputedStyle(s),a=F=>(l[F]||"").split(", "),e=a(`${zn}Delay`),o=a(`${zn}Duration`),t=tt(e,o),r=a(`${Kl}Delay`),B=a(`${Kl}Duration`),i=tt(r,B);let d=null,y=0,u=0;n===zn?t>0&&(d=zn,y=t,u=o.length):n===Kl?i>0&&(d=Kl,y=i,u=B.length):(y=Math.max(t,i),d=y>0?t>i?zn:Kl:null,u=d?d===zn?o.length:B.length:0);const A=d===zn&&/\b(transform|all)(,|$)/.test(a(`${zn}Property`).toString());return{type:d,timeout:y,propCount:u,hasTransform:A}}function tt(s,n){for(;s.length<n.length;)s=s.concat(s);return Math.max(...n.map((l,a)=>ct(l)+ct(s[a])))}function ct(s){return s==="auto"?0:Number(s.slice(0,-1).replace(",","."))*1e3}function rr(){return document.body.offsetHeight}function Ky(s,n,l){const a=s[Vl];a&&(n=(n?[n,...a]:[...a]).join(" ")),n==null?s.removeAttribute("class"):l?s.setAttribute("class",n):s.className=n}const Yy=Symbol("_vod"),Xy=Symbol("");function Zy(s,n,l){const a=s.style,e=cs(l);if(l&&!e){if(n&&!cs(n))for(const o in n)l[o]==null&&vo(a,o,"");for(const o in l)vo(a,o,l[o])}else{const o=a.display;if(e){if(n!==l){const t=a[Xy];t&&(l+=";"+t),a.cssText=l}}else n&&s.removeAttribute("style");Yy in s&&(a.display=o)}}const rt=/\s*!important$/;function vo(s,n,l){if(ss(l))l.forEach(a=>vo(s,n,a));else if(l==null&&(l=""),n.startsWith("--"))s.setProperty(n,l);else{const a=Jy(s,n);rt.test(l)?s.setProperty(zl(a),l.replace(rt,""),"important"):s[a]=l}}const it=["Webkit","Moz","ms"],Ve={};function Jy(s,n){const l=Ve[n];if(l)return l;let a=yn(n);if(a!=="filter"&&a in s)return Ve[n]=a;a=Ea(a);for(let e=0;e<it.length;e++){const o=it[e]+a;if(o in s)return Ve[n]=o}return n}const Bt="http://www.w3.org/1999/xlink";function s2(s,n,l,a,e){if(a&&n.startsWith("xlink:"))l==null?s.removeAttributeNS(Bt,n.slice(6,n.length)):s.setAttributeNS(Bt,n,l);else{const o=ld(n);l==null||o&&!ic(l)?s.removeAttribute(n):s.setAttribute(n,o?"":l)}}function n2(s,n,l,a,e,o,t){if(n==="innerHTML"||n==="textContent"){a&&t(a,e,o),s[n]=l??"";return}const r=s.tagName;if(n==="value"&&r!=="PROGRESS"&&!r.includes("-")){s._value=l;const i=r==="OPTION"?s.getAttribute("value"):s.value,d=l??"";i!==d&&(s.value=d),l==null&&s.removeAttribute(n);return}let B=!1;if(l===""||l==null){const i=typeof s[n];i==="boolean"?l=ic(l):l==null&&i==="string"?(l="",B=!0):i==="number"&&(l=0,B=!0)}try{s[n]=l}catch{}B&&s.removeAttribute(n)}function l2(s,n,l,a){s.addEventListener(n,l,a)}function a2(s,n,l,a){s.removeEventListener(n,l,a)}const dt=Symbol("_vei");function e2(s,n,l,a,e=null){const o=s[dt]||(s[dt]={}),t=o[n];if(a&&t)t.value=a;else{const[r,B]=o2(n);if(a){const i=o[n]=c2(a,e);l2(s,r,i,B)}else t&&(a2(s,r,t,B),o[n]=void 0)}}const yt=/(?:Once|Passive|Capture)$/;function o2(s){let n;if(yt.test(s)){n={};let a;for(;a=s.match(yt);)s=s.slice(0,s.length-a[0].length),n[a[0].toLowerCase()]=!0}return[s[2]===":"?s.slice(3):zl(s.slice(2)),n]}let Me=0;const p2=Promise.resolve(),t2=()=>Me||(p2.then(()=>Me=0),Me=Date.now());function c2(s,n){const l=a=>{if(!a._vts)a._vts=Date.now();else if(a._vts<=l.attached)return;cn(r2(a,l.value),n,5,[a])};return l.value=s,l.attached=t2(),l}function r2(s,n){if(ss(n)){const l=s.stopImmediatePropagation;return s.stopImmediatePropagation=()=>{l.call(s),s._stopped=!0},n.map(a=>e=>!e._stopped&&a&&a(e))}else return n}const vt=s=>s.charCodeAt(0)===111&&s.charCodeAt(1)===110&&s.charCodeAt(2)>96&&s.charCodeAt(2)<123,i2=(s,n,l,a,e,o,t,r,B)=>{const i=e==="svg";n==="class"?Ky(s,a,i):n==="style"?Zy(s,l,a):Fa(n)?wo(n)||e2(s,n,l,a,t):(n[0]==="."?(n=n.slice(1),!0):n[0]==="^"?(n=n.slice(1),!1):B2(s,n,a,i))?n2(s,n,a,o,t,r,B):(n==="true-value"?s._trueValue=a:n==="false-value"&&(s._falseValue=a),s2(s,n,a,i))};function B2(s,n,l,a){if(a)return!!(n==="innerHTML"||n==="textContent"||n in s&&vt(n)&&es(l));if(n==="spellcheck"||n==="draggable"||n==="translate"||n==="form"||n==="list"&&s.tagName==="INPUT"||n==="type"&&s.tagName==="TEXTAREA")return!1;if(n==="width"||n==="height"){const e=s.tagName;if(e==="IMG"||e==="VIDEO"||e==="CANVAS"||e==="SOURCE")return!1}return vt(n)&&cs(l)?!1:n in s}const ir=new WeakMap,Br=new WeakMap,re=Symbol("_moveCb"),ut=Symbol("_enterCb"),dr={name:"TransitionGroup",props:Ps({},Gy,{tag:String,moveClass:String}),setup(s,{slots:n}){const l=jl(),a=qc();let e,o;return Qc(()=>{if(!e.length)return;const t=s.moveClass||`${s.name||"v"}-move`;if(!m2(e[0].el,l.vnode.el,t))return;e.forEach(v2),e.forEach(u2);const r=e.filter(A2);rr(),r.forEach(B=>{const i=B.el,d=i.style;On(i,t),d.transform=d.webkitTransform=d.transitionDuration="";const y=i[re]=u=>{u&&u.target!==i||(!u||/transform$/.test(u.propertyName))&&(i.removeEventListener("transitionend",y),i[re]=null,jn(i,t))};i.addEventListener("transitionend",y)})}),()=>{const t=is(s),r=tr(t);let B=t.tag||Zs;e=o,o=n.default?Uo(n.default()):[];for(let i=0;i<o.length;i++){const d=o[i];d.key!=null&&da(d,Ba(d,r,a,l))}if(e)for(let i=0;i<e.length;i++){const d=e[i];da(d,Ba(d,r,a,l)),ir.set(d,d.el.getBoundingClientRect())}return Os(B,null,o)}}},d2=s=>delete s.mode;dr.props;const y2=dr;function v2(s){const n=s.el;n[re]&&n[re](),n[ut]&&n[ut]()}function u2(s){Br.set(s,s.el.getBoundingClientRect())}function A2(s){const n=ir.get(s),l=Br.get(s),a=n.left-l.left,e=n.top-l.top;if(a||e){const o=s.el.style;return o.transform=o.webkitTransform=`translate(${a}px,${e}px)`,o.transitionDuration="0s",s}}function m2(s,n,l){const a=s.cloneNode(),e=s[Vl];e&&e.forEach(r=>{r.split(/\s+/).forEach(B=>B&&a.classList.remove(B))}),l.split(/\s+/).forEach(r=>r&&a.classList.add(r)),a.style.display="none";const o=n.nodeType===1?n:n.parentNode;o.appendChild(a);const{hasTransform:t}=cr(a);return o.removeChild(a),t}const F2=Ps({patchProp:i2},jy);let qe,At=!1;function E2(){return qe=At?qe:_y(F2),At=!0,qe}const D2=(...s)=>{const n=E2().createApp(...s),{mount:l}=n;return n.mount=a=>{const e=b2(a);if(e)return l(e,!0,f2(e))},n};function f2(s){if(s instanceof SVGElement)return"svg";if(typeof MathMLElement=="function"&&s instanceof MathMLElement)return"mathml"}function b2(s){return cs(s)?document.querySelector(s):s}const _2="modulepreload",h2=function(s){return"/"+s},mt={},p=function(n,l,a){let e=Promise.resolve();if(l&&l.length>0){const o=document.getElementsByTagName("link");e=Promise.all(l.map(t=>{if(t=h2(t),t in mt)return;mt[t]=!0;const r=t.endsWith(".css"),B=r?'[rel="stylesheet"]':"";if(!!a)for(let y=o.length-1;y>=0;y--){const u=o[y];if(u.href===t&&(!r||u.rel==="stylesheet"))return}else if(document.querySelector(`link[href="${t}"]${B}`))return;const d=document.createElement("link");if(d.rel=r?"stylesheet":_2,r||(d.as="script",d.crossOrigin=""),d.href=t,document.head.appendChild(d),r)return new Promise((y,u)=>{d.addEventListener("load",y),d.addEventListener("error",()=>u(new Error(`Unable to preload CSS for ${t}`)))})}))}return e.then(()=>n()).catch(o=>{const t=new Event("vite:preloadError",{cancelable:!0});if(t.payload=o,window.dispatchEvent(t),!t.defaultPrevented)throw o})},C2={"v-184f4da6":()=>p(()=>import("./intro.html-mdCJ7wui.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-8daa1a0e":()=>p(()=>import("./index.html-KWtvpG4S.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-3a1d2930":()=>p(()=>import("./tool.html-ZBX_McYn.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-eb072ff4":()=>p(()=>import("./index.html-hjjoe0KZ.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-144c90e3":()=>p(()=>import("./index.html--HxlZB4F.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-08062d61":()=>p(()=>import("./统计单词的个数.html-MmFE5UxX.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1a144c13":()=>p(()=>import("./统计字母、数组、空格的个数.html-zCbGAzIs.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4628d8d3":()=>p(()=>import("./autohotkey笔记.html-_GYyfuZx.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-25b47c13":()=>p(()=>import("./index.html-lUL7sYyc.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7945696f":()=>p(()=>import("./SourceInsight.html--35Fs5Z2.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5095ca42":()=>p(()=>import("./typora配置.html-NDdRFNfj.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5cb072b3":()=>p(()=>import("./AOF持久化.html-mxo621-H.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-e451d600":()=>p(()=>import("./key通用指令.html-EWKOBUVX.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-44295686":()=>p(()=>import("./list数据类型.html-5SHLy0Mt.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-cd4e5daa":()=>p(()=>import("./RDB持久化.html-MKfj_PAR.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-dc384366":()=>p(()=>import("./index.html-_b5B0PZo.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-9ee97fea":()=>p(()=>import("./Redis的安装.html-A6NLKWcS.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-2877cc16":()=>p(()=>import("./set和sorted_set数据类型.html-vaNIoQMt.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-62cf8211":()=>p(()=>import("./string和hash数据类型.html-_OXBrKKr.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-c5721e08":()=>p(()=>import("./事务和事务锁.html-vnLYbV6J.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-20189b06":()=>p(()=>import("./删除策略.html-yhvsrVRq.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0f67a82d":()=>p(()=>import("./数据类型实践案例.html-hKFpIbNk.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7ccef86f":()=>p(()=>import("./认识NoSQL和Redis.html-c0mMKMa0.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-501b8055":()=>p(()=>import("./高级数据类型Bitmaps、HyperLogLog、GEO.html-YNXDQShz.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1464ca76":()=>p(()=>import("./index.html-KrGjA_8N.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-47deb978":()=>p(()=>import("./CRUD.html-KpixsxOF.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-68cfc132":()=>p(()=>import("./DCL小结.html-0VIxY7j8.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1509bd1e":()=>p(()=>import("./DML小结.html-hsceM7gv.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5312ebd6":()=>p(()=>import("./mysql的库操作.html-riG1_kbj.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-cb572402":()=>p(()=>import("./select查询.html-8W6hF-YJ.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-a056d220":()=>p(()=>import("./多表select-连接查询.html-Ozkq0pex.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-eedfc64a":()=>p(()=>import("./概述.html-MSEWmhAy.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0c1daf9d":()=>p(()=>import("./表操作.html-zSXKNyNS.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-f0383c18":()=>p(()=>import("./index.html-6zrJYJ6j.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-40bd95c1":()=>p(()=>import("./文件操作.html-IE57bth6.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-15be756c":()=>p(()=>import("./MySQL存储引擎.html-jkCQZnrb.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-18f8cde9":()=>p(()=>import("./c语言连接MySQL.html-fFgT6xNA.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-17cb7aa4":()=>p(()=>import("./mysql的安装.html-JNBsdY3b.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0dd7df9c":()=>p(()=>import("./关系型数据库表设计.html-ONNOeWwG.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-067342a0":()=>p(()=>import("./基本数据类型.html-et7S_phS.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-c8a2e14a":()=>p(()=>import("./完整性约束.html-8PX3jL2n.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-a87f8e4c":()=>p(()=>import("./常用函数.html-BX1nXPZm.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1df5d4d6":()=>p(()=>import("./用户管理与授权.html-3ZtiQuwN.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-2648a679":()=>p(()=>import("./知识拓展.html-AoAqbZGE.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-cc05253e":()=>p(()=>import("./范式设计.html-j6h4GuJu.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-84ceb2f4":()=>p(()=>import("./运算符.html-YYcQmOVt.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-32ca78ec":()=>p(()=>import("./InnoDB的主键和二级索引树.html-YgEHvAAJ.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-f2fadc9e":()=>p(()=>import("./InnoDB自适应哈希索引.html-iJpKLI1c.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-08c9d541":()=>p(()=>import("./MySQL优化之慢日志查询.html-0VZyC1Ya.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-976bf48a":()=>p(()=>import("./MySQL索引常见问题.html-B-cMTQwP.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-19f8f8e4":()=>p(()=>import("./哈希索引.html-acbHAqaG.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4b2179bb":()=>p(()=>import("./索引基础.html-PF8nlQ9Z.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4d1339f4":()=>p(()=>import("./索引的使用和分析.html-FA6Bby-x.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-b30276bc":()=>p(()=>import("./索引的底层实现原理.html-_y1YH4rR.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1776ebf2":()=>p(()=>import("./MySQL事务的隔离级别.html-gjz4ZPK1.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-51f2dcf6":()=>p(()=>import("./事务并发存在的问题(脏读、不可重复读和幻读).html-jkP8v8D2.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0359a68f":()=>p(()=>import("./事务的ACID特性.html-FPNgfD_3.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-558f976c":()=>p(()=>import("./事务的概念.html-0xnQrScJ.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-167ae4a4":()=>p(()=>import("./sql优化.html-V6XJ17pA.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-fb0c9a20":()=>p(()=>import("./SQL和索引优化总结.html-iKnYAnI5.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-403714d4":()=>p(()=>import("./MySQL重做日志redo log.html-6-GlGUb4.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-f10dc5a4":()=>p(()=>import("./Server 层四个日志.html-7SZLeFJD.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4dda2b40":()=>p(()=>import("./主从复制原理.html-cjUJ5q6x.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1015e72b":()=>p(()=>import("./读写分离原理.html-aGSkRGFD.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-afe3b5ec":()=>p(()=>import("./读写分离配置实践.html-X7pcDG1P.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-ab0fa402":()=>p(()=>import("./配置主从复制实践.html-1aulsGZa.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-3ef06b8b":()=>p(()=>import("./MySQL MVCC多版本并发控制（脏读和不可重复读解决原理）.html-B2Ohanj8.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-a01dbb18":()=>p(()=>import("./MySQL 意向共享锁、意向排他锁.html-CC0g7cgc.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-329074fa":()=>p(()=>import("./MySQL回滚日志undo log.html-wlaKC74E.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1029a01f":()=>p(()=>import("./MySQL间隙锁（幻读解决原理）.html-6_fBwm0Y.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-664794b6":()=>p(()=>import("./排它锁和共享锁.html-kNhCFX2y.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1743001b":()=>p(()=>import("./死锁.html-Cf6L1kLV.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-25bb8896":()=>p(()=>import("./表级锁和行级锁.html-idLbvXtQ.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5dfb342e":()=>p(()=>import("./记录锁_间隙锁可以防止删除操作而导致的幻读吗.html-3t7ccDLm.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-416fc51c":()=>p(()=>import("./锁的优化建议.html-hhXfC1nC.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-125a45f0":()=>p(()=>import("./SQL的完整处理流程.html-AtGuyvXV.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-73d634fe":()=>p(()=>import("./分库分表实践.html-TXoysQg9.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-fb24ca0e":()=>p(()=>import("./加载配置项.html-sgqEYT2L.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-379adba2":()=>p(()=>import("./压力测试.html-7sZqRrqL.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-2247d511":()=>p(()=>import("./数据库编程部分实现.html-drsxwj_b.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-874c376e":()=>p(()=>import("./最大空闲时间回收连接扫描线程的实现.html-tO0VE0U5.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5e84d900":()=>p(()=>import("./概述.html-y31jQIwG.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-51fa1311":()=>p(()=>import("./消费者线程的实现.html-Qz2Amtds.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-47e7636c":()=>p(()=>import("./生产者线程的实现.html-oJGSWXJl.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-f00ce0e0":()=>p(()=>import("./连接池单例模式实践.html-FJkyH0Ad.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-18b96408":()=>p(()=>import("./mysqldump数据备份.html-s5gtRShk.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0072b68a":()=>p(()=>import("./344.反转字符串.html-yPX5Pzld.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4a6b903e":()=>p(()=>import("./905. 按奇偶排序数组.html-AH_7YIky.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-92d2378e":()=>p(()=>import("./LeetCode 209.长度最小的子数组.html-VSNT_z5x.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-3945022c":()=>p(()=>import("./LeetCode 27. 移除元素.html-g6Pd8cOv.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0edaacb7":()=>p(()=>import("./LeetCode 59.螺旋矩阵Ⅱ.html-eLILZ7Qq.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-8fe9fd22":()=>p(()=>import("./LeetCode 704.二分查找.html-_lzlkMXE.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-69d65be6":()=>p(()=>import("./LeetCode 977.有序数组的平方.html-PPDsxrKf.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-a277331a":()=>p(()=>import("./二分查找总结.html-K8jaYhBs.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-2e7fb111":()=>p(()=>import("./数组基础.html-KeHWwKoH.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-75ce370a":()=>p(()=>import("./查找N个数组的公共元素.html-C8z7_4bz.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1f0c41ec":()=>p(()=>import("./查找三个数组的公共元素.html-nTR6mygT.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-98398990":()=>p(()=>import("./查找两个数组的公共元素.html-uxAPq3JN.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-752e9b82":()=>p(()=>import("./查找出现次数超过一半的元素.html-maApeD5U.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-c01690d8":()=>p(()=>import("./查找最大和次大的元素.html-_pI7psJc.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-152dfd8d":()=>p(()=>import("./234.回文链表.html-XnBkZVZW.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-735dfe06":()=>p(()=>import("./LeetCode 203.移除链表元素.html-ntIHtQdo.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-d977ced4":()=>p(()=>import("./leetcode 21. 合并两个有序链表.html-Q83GMYm3.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-64506cc7":()=>p(()=>import("./leetcode141.环形链表(判断链表是否有环).html-2kCxxVcE.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-13ade0aa":()=>p(()=>import("./Leetcode142.环形链表II(查找环的入口地址).html-SMZhKrTf.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-641d44d2":()=>p(()=>import("./leetcode160.相交链表(判断链表是否相交).html-FBkaCtIs.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-8a944abe":()=>p(()=>import("./Leetcode19. 删除链表的倒数第N个结点.html-0uTnDUgK.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-703548b8":()=>p(()=>import("./leetcode206.反转链表.html-_YLAYIq_.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-711b4cec":()=>p(()=>import("./Leetcode23. 合并 K 个升序链表.html-FsT1PWxJ.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-fb458a48":()=>p(()=>import("./leetcode61.旋转链表.html-SntMqFx-.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-67248f78":()=>p(()=>import("./LeetCode707.html-2q4ZqFS0.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-db839be2":()=>p(()=>import("./leetcode86. 分隔链表（链表的分解）.html-K2K-SjuL.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-16787a3c":()=>p(()=>import("./Leetcode876.链表的中间结点.html-VHK55RDS.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-a323322a":()=>p(()=>import("./leetcode92.反转链表II.html-H01RE6kj.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4e6f8416":()=>p(()=>import("./查找链表中倒数第N个结点.html-D-6z6QH7.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-ebfa549c":()=>p(()=>import("./约瑟夫环问题.html-pUX7aySZ.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-08a1ce30":()=>p(()=>import("./链表基础.html-i9odf3Uy.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-24f2d5ba":()=>p(()=>import("./index.html-QGB_jZcb.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-450e8862":()=>p(()=>import("./TCP和UDP的区别.html-tai94ixS.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-74d93789":()=>p(()=>import("./上滤.html-zna2f1Eb.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-155542a2":()=>p(()=>import("./1. 两数之和.html-4Re9RmdH.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-6e9dbc4c":()=>p(()=>import("./128. 最长连续序列.html-4MZmqJj8.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-cdbdf9f8":()=>p(()=>import("./15. 三数之和.html-KlhqYDdW.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-21edb74e":()=>p(()=>import("./167. 两数之和 II - 输入有序数组.html-tnefbmWa.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-525b6569":()=>p(()=>import("./202. 快乐数.html-56tUrTO7.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-30fc6476":()=>p(()=>import("./217.存在重复元素.html-37iXO5J6.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-30a803f7":()=>p(()=>import("./219.存在重复元素 II.html-1tR1_cNP.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-115ac7e7":()=>p(()=>import("./220. 存在重复元素 III.html-oI1JafGT.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-534e82f8":()=>p(()=>import("./242.有效的字母异位词.html-YhLytQfj.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-e58201ee":()=>p(()=>import("./349.两个数组的交集.html-dEjgwJBj.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-21b182ee":()=>p(()=>import("./383. 赎金信.html-q1tmDv5N.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-deb0c8ec":()=>p(()=>import("./594. 最长和谐子序列.html-BrDHORTf.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-aa555d4e":()=>p(()=>import("./各阶段代码修改回退撤销操作.html-E4HiFHVE.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-971795b6":()=>p(()=>import("./基本概念和环境搭建.html-P8awqy7s.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-093d475d":()=>p(()=>import("./常用命令以及原理.html-vD7PERe0.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-6d1b8ec2":()=>p(()=>import("./推送代码冲突解决.html-6BjCJVZq.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-2a84a2a1":()=>p(()=>import("./本地分支管理.html-9K_oOPuU.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-17abcac0":()=>p(()=>import("./远程分支管理.html-w0JMaJxG.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1a50115e":()=>p(()=>import("./冒泡排序.html-5KIcOG6L.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-53acd735":()=>p(()=>import("./基数排序.html-QPzuPeHt.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-00fc7494":()=>p(()=>import("./堆排序.html-NI5dtFhR.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-380a6c84":()=>p(()=>import("./希尔排序.html-PzvGZ2In.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4b65c060":()=>p(()=>import("./归并排序.html-8m_hsPXS.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0cc447aa":()=>p(()=>import("./插入排序.html-1Icz2GTK.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-64dd32fe":()=>p(()=>import("./桶排序.html-AxiSVY20.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-85d8c71c":()=>p(()=>import("./计数排序.html-F-wDVniz.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-64c90a94":()=>p(()=>import("./选择排序.html-1OX06OWC.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-155d00d3":()=>p(()=>import("./（简单）快速排序.html-0bttV6fx.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-f1165cc2":()=>p(()=>import("./新建 Markdown.html-fHwzirx_.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-eeb8a63a":()=>p(()=>import("./两个栈实现队列.html-BlXRM2x-.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-c84ce682":()=>p(()=>import("./新建 Markdown.html-ntjaGQ_A.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-038e0b34":()=>p(()=>import("./反汇编小结.html-qOFDR6-x.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-403c82cd":()=>p(()=>import("./指令角度堆栈调用过程.html-j2vMD--2.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5aef7a82":()=>p(()=>import("./编译器角度理解c__代码的编译和链接.html-S8_9hY8c.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4d611284":()=>p(()=>import("./进程虚拟地址空间.html-ZLCAToEz.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-66aab0b0":()=>p(()=>import("./bool.html-NUUNZdli.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1073124a":()=>p(()=>import("./c__初探.html-PnJ7QTmI.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-3cc85216":()=>p(()=>import("./const.html-YmFb6LOz.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-ba4c1c2a":()=>p(()=>import("./inline内联函数.html-auk9w7Lr.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-c97d844a":()=>p(()=>import("./new、delete.html-x03gfqpY.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-6ef0e0ae":()=>p(()=>import("./string.html-7RIysJAi.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-f8fc3194":()=>p(()=>import("./内存对齐.html-UGgX527b.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-14c9e918":()=>p(()=>import("./函数重载.html-ztt7lJkw.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1155c5a0":()=>p(()=>import("./命名空间.html-0ed21-MT.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-636256d6":()=>p(()=>import("./异常安全.html-ic0ddKyn.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-51ee3d17":()=>p(()=>import("./引用.html-ImOXEHpf.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-132402e1":()=>p(()=>import("./强制转换.html-c_0WUelB.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-01408bc4":()=>p(()=>import("./默认参数.html-c44GzVzL.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-f103c4b8":()=>p(()=>import("./do-while(0).html--Y2IWmiF.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-fd4b7500":()=>p(()=>import("./malloc、free的底层实现.html-aszJX3MJ.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-332dfae6":()=>p(()=>import("./scanf.html-hDXbaF-T.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-062c257f":()=>p(()=>import("./关键字.html-K7eEgiRW.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-70779923":()=>p(()=>import("./前言.html-sIwWIylu.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-198bd17a":()=>p(()=>import("./变量.html-Lw_mlrEU.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-a688fcfc":()=>p(()=>import("./字符.html-plchyXVR.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-505a1229":()=>p(()=>import("./常量.html-8i8Egeof.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1c610f8b":()=>p(()=>import("./数据类型.html-yJCXhpiv.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-573fd3b5":()=>p(()=>import("./整型.html-X2sllIux.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-63c16f9b":()=>p(()=>import("./浮点数.html-WynEhVVW.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-a253b292":()=>p(()=>import("./补码.html-r8o0DoEV.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-35cd92ed":()=>p(()=>import("./进制转换.html-N5WebTC1.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-2a2097b4":()=>p(()=>import("./STL向量容器vector简单实现.html-1FhbI-9e.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4ee2bd74":()=>p(()=>import("./函数模板与模板函数.html-04b1m1SY.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-93ba2c5c":()=>p(()=>import("./可变模板参数.html-hyMd3twP.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-97506104":()=>p(()=>import("./容器空间适配器allocator的简单实现.html-IhMDPDXE.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-ca1f584c":()=>p(()=>import("./类模板与模板类.html-8uk8ykJU.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-733883fe":()=>p(()=>import("./string迭代器的实现.html-hdHI3qLR.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0aad1b8c":()=>p(()=>import("./vector迭代器的实现.html-vEHuFPyx.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-6a78bf1e":()=>p(()=>import("./剖析new和delete实习原理.html-mIm3au7G.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7d06c0d6":()=>p(()=>import("./友元.html-08-KyL3a.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-f0f10ec2":()=>p(()=>import("./复数类CComplex.html-z9gi9Aho.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-253e305c":()=>p(()=>import("./运算符重载实现string类.html-fm5LcTNh.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-62b6f00d":()=>p(()=>import("./迭代器失效的底层核心原理.html-0JXFviJl.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-02dd1ab7":()=>p(()=>import("./重载new和delete运算符实现一个对象池.html-Kuo4sFVd.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5e6716c0":()=>p(()=>import("./哪些函数不能被设置为虚函数.html-7ljQptz-.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-72de4250":()=>p(()=>import("./多态的定义和原理.html-2yv_XvmY.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-e3980572":()=>p(()=>import("./带虚函数的多基派生.html-yn0n3OXP.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-54b6e5ba":()=>p(()=>import("./测试虚表的存在.html-TgkhggY_.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5ed5a75a":()=>p(()=>import("./纯虚函数和抽象类.html-3VnZOtaX.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7c62f63c":()=>p(()=>import("./继承多态与虚函数案例分析.html-yOVdrV2O.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7ef7d845":()=>p(()=>import("./虚函数.html-7fd0vOSY.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-68c3f3ca":()=>p(()=>import("./虚函数的访问.html-wl_h_RSo.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-849483e2":()=>p(()=>import("./虚基类和虚继承.html-F1YtYEAa.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0e539496":()=>p(()=>import("./虚拟继承时派生类对象的构造和析构.html-aInOoLtz.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-600c7550":()=>p(()=>import("./虚析构.html-_LLbQjRJ.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-f51389fa":()=>p(()=>import("./静态绑定和动态绑定.html-k8_53rY4.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5f9477f2":()=>p(()=>import("./this.html-xLU-gYc_.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-31530dfb":()=>p(()=>import("./拷贝构造函数.html-QxvTy-6r.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-3bc3bfaf":()=>p(()=>import("./拷贝构造和赋值重载的实践.html-m1ituSFH.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-3a9cf65c":()=>p(()=>import("./指向类型成员的指针.html-Yr-5gvEl.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-10e1c6eb":()=>p(()=>import("./构造函数和析构函数.html-jF00ZcUp.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-451c83e2":()=>p(()=>import("./特殊数据成员的初始化.html-VdiNVjTu.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-6577db5e":()=>p(()=>import("./特殊的成员函数.html-UJI6ECVb.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-e41f0618":()=>p(()=>import("./类和对象.html-2iiklq5X.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-3eca3d30":()=>p(()=>import("./组织对象.html-Ew10ZbPm.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1da04370":()=>p(()=>import("./赋值运算符函数.html-5jHJcMTx.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0cf00a94":()=>p(()=>import("./多基继承.html-M34FG8Sz.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-2f0a2344":()=>p(()=>import("./派生方式对基类成员的访问权限.html-8bW3uAwT.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7eb7ea5a":()=>p(()=>import("./派生类对象间的复制控制.html-Chp-yooB.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-11fe42b7":()=>p(()=>import("./派生类的构造过程.html-MTyLTfs1.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-103be5d9":()=>p(()=>import("./继承中的类型转换.html-4lV1noqG.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7e0a1cbb":()=>p(()=>import("./继承的本质和原理.html-C9N7YKfa.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-210e34fe":()=>p(()=>import("./菱形继承问题.html-Fe9B1Z6A.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-eb58d93a":()=>p(()=>import("./重载，隐藏，重写（覆盖）.html-W5kuQraf.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7c6a87cc":()=>p(()=>import("./valgrind.html-AUX3ZbIh.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-43124686":()=>p(()=>import("./log4cpp.html-gGnoZRCw.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-55ae1b9a":()=>p(()=>import("./STL顺序容器：vector、deque、list.html-gUWVnYhQ.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-8365f3e8":()=>p(()=>import("./函数对象与函数指针.html-FKrVEqHG.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-62b566a8":()=>p(()=>import("./容器适配器：栈、队列、优先级队列.html-mF-NRKf1.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4b15d926":()=>p(()=>import("./无序关联容器、有序关联容器.html-XlHu5mpT.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-2c413a2b":()=>p(()=>import("./泛型算法与绑定器.html-g8aS2Svg.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7c5d97b0":()=>p(()=>import("./迭代器iterator.html-Cu3Fk2iP.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0d61d626":()=>p(()=>import("./不带引用计数的智能指针.html-PIM2WEAV.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-778f0618":()=>p(()=>import("./多线程访问共享对象的线程安全问题.html-vwBRefea.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-29824dbc":()=>p(()=>import("./带引用计数的智能指针.html-_sEyhbTY.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-6c9710e8":()=>p(()=>import("./自定义删除器.html-dkGXtu4s.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-16792cec":()=>p(()=>import("./Pimpl.html-rhk_5RvD.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-73dfb9d4":()=>p(()=>import("./代理模式、适配器模式、装饰器模式.html-FPvpOv9n.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-ef005662":()=>p(()=>import("./单例模式.html-1PknsK57.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-44042d12":()=>p(()=>import("./简单工厂、工厂方法、抽象工厂.html-m6GoLv5E.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5f0f0675":()=>p(()=>import("./观察者Observer模式.html-DWyTqE3-.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7c0c7a84":()=>p(()=>import("./C__对象的优化.html-iH3n23WU.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5b3d8584":()=>p(()=>import("./C__的右值引用.html-u3eyq0Vp.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-45747b0a":()=>p(()=>import("./move移动语义和forward完美转发.html-K_Ip_cbo.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-25665f14":()=>p(()=>import("./C__11内容总结.html-eGJfmdcL.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-6ce1e1a6":()=>p(()=>import("./C__11多线程编程.html-WW4pusAZ.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7cc2160e":()=>p(()=>import("./C__11线程间的同步通信(生产者-消费者模型).html-vMNysDbX.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-6c9ca25c":()=>p(()=>import("./再谈mtx和lock_guard和unique_lock.html-mJ3eUSFA.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-2483becb":()=>p(()=>import("./基于CAS操作的atomic原子类型.html-wfYOl_Ol.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0ccdd78f":()=>p(()=>import("./bind1st和bind2d使用.html-D3A4fzFP.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0413f5c0":()=>p(()=>import("./bind和function实现muduo中的线程池.html-dQrX901T.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-cf2f50ee":()=>p(()=>import("./C__11绑定器介绍.html-frALAFxg.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-474433e4":()=>p(()=>import("./function函数对象类型实现原理.html-peBTAaWm.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-2a36819d":()=>p(()=>import("./function函数对象类型的应用.html-50ajTbIb.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-2c027fc3":()=>p(()=>import("./lambda表达式.html-qPL2Rdg6.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-08fdb026":()=>p(()=>import("./模板的完全特例化和非完全特例化.html-AQvCodIb.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-48c23000":()=>p(()=>import("./reallocate.html-1CG6cOOa.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-30a2e42b":()=>p(()=>import("./SGI STL二级空间配置器重要成员解读.html-C6eBM3wQ.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-02ca19a9":()=>p(()=>import("./SGI STL的verctor是怎么管理对象的.html-23nF_ixa.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7e13dfea":()=>p(()=>import("./两个重要的函数.html-R-yoRz3A.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4e6c7a0a":()=>p(()=>import("./内存归还dealloacte.html-FVWzKDU1.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-a2d2b900":()=>p(()=>import("./内存池allocate分配过程.html-IMSyOjDt.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0d093800":()=>p(()=>import("./分配内存池_S_refill源码.html-37uOcDx_.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-9ab5c6e8":()=>p(()=>import("./实际分配内存池_S_chunk_alloc源码.html-UrQGTsuy.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-a8d7b886":()=>p(()=>import("./总结.html-vJSwSmS2.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5d0a9dce":()=>p(()=>import("./vim的配置和使用.html-aOEkyOZz.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-739b4ffd":()=>p(()=>import("./centos7配置.html-LmBZQeon.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-dd2c326a":()=>p(()=>import("./netstat使用.html-rRKWZUfR.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5481f6b5":()=>p(()=>import("./tree常用命令.html-Pbo7WZ4O.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-70781306":()=>p(()=>import("./wget使用.html-y74jcx9w.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-fae24824":()=>p(()=>import("./打包和压缩.html-8cuvui2x.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-29390dd2":()=>p(()=>import("./软链接（符号链接）和硬链接.html-5Mst7AYK.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-45955c7c":()=>p(()=>import("./配置一台ubuntu.html-C7rsuaUo.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7c3e20c2":()=>p(()=>import("./字符串转不同进制数字.html-1VHAY6pD.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-91127220":()=>p(()=>import("./CMake的使用.html-JYmZiA0C.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4c6cb231":()=>p(()=>import("./gcc_g__常见的编译命令.html-C7lTzyOg.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5342bc7a":()=>p(()=>import("./gdb调试出错的程序.html-S-67lSz9.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-f6ba6062":()=>p(()=>import("./makefile使用方法.html-RJNv6MXq.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-66e8cf78":()=>p(()=>import("./为什么c和c__函数参数从右往左压栈.html-hxPrddVM.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-57c1626a":()=>p(()=>import("./分析这段代码构造函数和析构函数的调用顺序.html-2GYzMQaZ.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-435677cc":()=>p(()=>import("./空结构体的大小.html-OM5e8vbZ.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-6dabb7d0":()=>p(()=>import("./Json简介及使用.html-mJtEWlGT.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5dfb637b":()=>p(()=>import("./Protobuf简介及使用.html-0b5DJ-Oy.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-3706649a":()=>p(()=>import("./404.html-kmhf0wvC.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5157b212":()=>p(()=>import("./index.html-DJeQ1VHk.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-266f8726":()=>p(()=>import("./index.html-gLud1Ha0.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-3899b171":()=>p(()=>import("./index.html-Qq46i63L.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1f23f62c":()=>p(()=>import("./index.html-ogYBTT9m.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5764c670":()=>p(()=>import("./index.html-3xQxfU8H.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-9eec0ba4":()=>p(()=>import("./index.html-HOxDlaay.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-13ac5d5f":()=>p(()=>import("./index.html-bjmUAFMN.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7c538d12":()=>p(()=>import("./index.html-PSr4TjDa.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-ed8603cc":()=>p(()=>import("./index.html-9yiAo-hL.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-42abb996":()=>p(()=>import("./index.html-fctyk1UJ.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-8f661f1c":()=>p(()=>import("./index.html-i8YEyty1.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-44e73480":()=>p(()=>import("./index.html-xstsPMj9.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-430f9745":()=>p(()=>import("./index.html-SkeTP6w1.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5782c814":()=>p(()=>import("./index.html-Z3R6prDN.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-a38f78a4":()=>p(()=>import("./index.html-XeQB87rX.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7d94f39a":()=>p(()=>import("./index.html-eThobncv.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-dfd4ea36":()=>p(()=>import("./index.html-Fx5HM7T5.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-25ac69a1":()=>p(()=>import("./index.html-umkYsHEU.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-161970cb":()=>p(()=>import("./index.html-knM0HdNG.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4086f3eb":()=>p(()=>import("./index.html-9FAcit_t.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-18808a57":()=>p(()=>import("./index.html-nvixBcz1.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-18205b42":()=>p(()=>import("./index.html-U_y_KhWk.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-39d32ddd":()=>p(()=>import("./index.html-o2IWuH6V.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-e5b5c7b4":()=>p(()=>import("./index.html-RqEcOI9d.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-b5fbe93e":()=>p(()=>import("./index.html-4wrJosNE.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-bcefe488":()=>p(()=>import("./index.html-ijb4Z2Ch.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0d4e4374":()=>p(()=>import("./index.html-3QZHU29O.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-19c3cc7c":()=>p(()=>import("./index.html-nKQ4FT-o.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-34ae7acc":()=>p(()=>import("./index.html-lqhcWcAr.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-3f33a400":()=>p(()=>import("./index.html-Y1VFGDsn.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-9fb994fc":()=>p(()=>import("./index.html--XZhyPFH.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1ce298e7":()=>p(()=>import("./index.html-UNmlvfwI.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-17daa261":()=>p(()=>import("./index.html-PzdWX9Nv.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0ee4786c":()=>p(()=>import("./index.html-MgPFbz7z.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7991b247":()=>p(()=>import("./index.html-MySKocUf.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-063f0d28":()=>p(()=>import("./index.html-CL8fvFgA.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-66256d6e":()=>p(()=>import("./index.html-d1FkAaim.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1e2d2742":()=>p(()=>import("./index.html-uHk3UBFr.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-718e2d40":()=>p(()=>import("./index.html-Yjn9jHWy.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-6efd5e40":()=>p(()=>import("./index.html-NxUzHvjf.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-14d4901c":()=>p(()=>import("./index.html-fU29ZsX5.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-6c43b8e2":()=>p(()=>import("./index.html-P_t_dtqc.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-706b751e":()=>p(()=>import("./index.html-wdeuyrAS.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5bc93818":()=>p(()=>import("./index.html-QF-Tp4gv.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-744d024e":()=>p(()=>import("./index.html-hARlgpoy.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-e52c881c":()=>p(()=>import("./index.html-LzV6DJ4Q.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-154dc4c4":()=>p(()=>import("./index.html-tHOaw54a.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-01560935":()=>p(()=>import("./index.html-iOMIJ8tZ.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-03d57386":()=>p(()=>import("./index.html-YkW3Wp41.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-a378ad66":()=>p(()=>import("./index.html-nleEjWld.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-8848dfa8":()=>p(()=>import("./index.html-wIkDRALN.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7b167472":()=>p(()=>import("./index.html-RBF6Ysvi.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-9717cc36":()=>p(()=>import("./index.html-wTNWtURW.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-73267b8b":()=>p(()=>import("./index.html-EzPCSNft.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5c5af6a7":()=>p(()=>import("./index.html-b9Ttm9Jk.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-3e73f0ca":()=>p(()=>import("./index.html-IwGj5oYt.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-65efd6b5":()=>p(()=>import("./index.html-A8G3U_F5.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-c14e6c1e":()=>p(()=>import("./index.html-i9yOal8z.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-57cf9ed7":()=>p(()=>import("./index.html-WJxs6zNC.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-16e3bea5":()=>p(()=>import("./index.html-0kzpq2TE.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-9c48d85a":()=>p(()=>import("./index.html-q3k2CA4a.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-69fe373c":()=>p(()=>import("./index.html-CWLGoHXb.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5a1c7f10":()=>p(()=>import("./index.html-rWxPSnvf.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-bdf2800c":()=>p(()=>import("./index.html-Zy6fEoSW.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-a074e84e":()=>p(()=>import("./index.html-Js_N48DV.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-71173084":()=>p(()=>import("./index.html-cSMuqsTj.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7c8d7d81":()=>p(()=>import("./index.html-jMpzBDIN.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-039b9630":()=>p(()=>import("./index.html-oFKkfC7o.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-539ae27f":()=>p(()=>import("./index.html-dQDB6_jb.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0f7cde43":()=>p(()=>import("./index.html-4tUokqow.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-69c73501":()=>p(()=>import("./index.html-LIvLFYBE.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-54d85698":()=>p(()=>import("./index.html-ftQ6II9m.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-26374ab8":()=>p(()=>import("./index.html-UZvVTzOS.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-3af20a74":()=>p(()=>import("./index.html-Mhs53q1k.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-497728a6":()=>p(()=>import("./index.html-MvgRWnUS.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1ab7dcc2":()=>p(()=>import("./index.html-VjcO4KZk.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7a59998d":()=>p(()=>import("./index.html-TwWYOBqW.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0aedece4":()=>p(()=>import("./index.html-nQMpyjyh.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-470617df":()=>p(()=>import("./index.html-dduVnAhO.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-117d546a":()=>p(()=>import("./index.html--JGHeqMu.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-f64eddd4":()=>p(()=>import("./index.html-nNyeZ9MP.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0b674df5":()=>p(()=>import("./index.html-Ptfm9o1W.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-93cb9d6e":()=>p(()=>import("./index.html-DUFGsXsd.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-cf2ceaf0":()=>p(()=>import("./index.html-pG6eZ_Xr.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-11d405d3":()=>p(()=>import("./index.html-5NSJKVmr.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0440a8b6":()=>p(()=>import("./index.html-QdTk012i.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0b4e059c":()=>p(()=>import("./index.html-oGQyKsOH.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4f1a28a4":()=>p(()=>import("./index.html-ISH3T-eH.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-576828c2":()=>p(()=>import("./index.html-k02_KV8x.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4b30edaa":()=>p(()=>import("./index.html-Ct79qsKu.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-22b11fef":()=>p(()=>import("./index.html-lMAqTxua.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-63c72547":()=>p(()=>import("./index.html-Y1toIq4H.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-a0d22de6":()=>p(()=>import("./index.html-cV0Hgk_6.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-b310d42a":()=>p(()=>import("./index.html-drk6eon6.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-fe7b1fa2":()=>p(()=>import("./index.html-kCIOkANe.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7d0f4556":()=>p(()=>import("./index.html-Bvc9Zz91.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-56e816c6":()=>p(()=>import("./index.html-NpKAzhUd.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-10a04a2f":()=>p(()=>import("./index.html-XnSl-QWo.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5f8d23be":()=>p(()=>import("./index.html-mwBRZb9z.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-3a4a854e":()=>p(()=>import("./index.html-g3ccuiNi.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-93bed62a":()=>p(()=>import("./index.html-o0fse6PX.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-2d6af57c":()=>p(()=>import("./index.html-xGR2hRFB.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-725e7306":()=>p(()=>import("./index.html-S-P7mvKX.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-2be2ad6b":()=>p(()=>import("./index.html-yKf7Lbxx.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-34e22042":()=>p(()=>import("./index.html-xmuy1D1S.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-c263983c":()=>p(()=>import("./index.html-gCl_7Wsm.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-97064af0":()=>p(()=>import("./index.html-aVv2c1Wv.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-b3059a9c":()=>p(()=>import("./index.html-WzDbN4lm.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0f5fd9a1":()=>p(()=>import("./index.html-HfBaNxJD.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-b883da32":()=>p(()=>import("./index.html-t9e5pngX.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-d81fe600":()=>p(()=>import("./index.html-sDtfVR69.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7bc56b12":()=>p(()=>import("./index.html-nrVxxk7x.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5cb0e330":()=>p(()=>import("./index.html-Wzb3XLB0.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-3af70099":()=>p(()=>import("./index.html-j8AA_UqV.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-452dff74":()=>p(()=>import("./index.html-0mZmVUtN.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-079b5775":()=>p(()=>import("./index.html-mQs1M7d2.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-40c68542":()=>p(()=>import("./index.html-budeQd9o.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-59d0051e":()=>p(()=>import("./index.html-5WcXxYZq.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-8200fafe":()=>p(()=>import("./index.html-bJjhVlqr.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1e44e18c":()=>p(()=>import("./index.html-WS-zTNOc.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-05b88e01":()=>p(()=>import("./index.html-HZu0Anun.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-6b17eb4c":()=>p(()=>import("./index.html-XtHYGMlD.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4100090c":()=>p(()=>import("./index.html-WXaEYa1n.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-415e2fc5":()=>p(()=>import("./index.html-Unc6HjEO.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-2611ede8":()=>p(()=>import("./index.html-X_L2i50H.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1cce6bb8":()=>p(()=>import("./index.html-FxEsMqq4.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-74fc21e7":()=>p(()=>import("./index.html-SDq02jaN.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-a9313856":()=>p(()=>import("./index.html--gbUVDdO.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-6cdbb135":()=>p(()=>import("./index.html-lsUUP_GN.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7c695e77":()=>p(()=>import("./index.html-EnfcqSNk.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-6b9ab792":()=>p(()=>import("./index.html-joMA6OFg.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-55a48819":()=>p(()=>import("./index.html-o05k1MeV.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-6942f2d0":()=>p(()=>import("./index.html-wpOGr-K1.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-72049510":()=>p(()=>import("./index.html-8Ii79SK2.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-2ddd04a0":()=>p(()=>import("./index.html-mirYm1g_.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-41a24821":()=>p(()=>import("./index.html-ePsGyail.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-85dac2ea":()=>p(()=>import("./index.html-7_7OxOHU.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-254becce":()=>p(()=>import("./index.html-hBfWUlPR.js"),__vite__mapDeps([])).then(({data:s})=>s)},g2=JSON.parse('{"base":"/","lang":"zh-CN","title":"张威的编程学习笔记","description":"记录学习生活的点点滴滴","head":[],"locales":{}}');var L2=([s,n,l])=>s==="meta"&&n.name?`${s}.${n.name}`:["title","base"].includes(s)?s:s==="template"&&n.id?`${s}.${n.id}`:JSON.stringify([s,n,l]),T2=s=>{const n=new Set,l=[];return s.forEach(a=>{const e=L2(a);n.has(e)||(n.add(e),l.push(a))}),l},I2=s=>s[0]==="/"?s:`/${s}`,yr=s=>s[s.length-1]==="/"||s.endsWith(".html")?s:`${s}/`,Al=s=>/^(https?:)?\/\//.test(s),O2=/.md((\?|#).*)?$/,va=(s,n="/")=>!!(Al(s)||s.startsWith("/")&&!s.startsWith(n)&&!O2.test(s)),vr=s=>/^[a-z][a-z0-9+.-]*:/.test(s),ha=s=>Object.prototype.toString.call(s)==="[object Object]",sp=s=>s[s.length-1]==="/"?s.slice(0,-1):s,ur=s=>s[0]==="/"?s.slice(1):s,k2=(s,n)=>{const l=Object.keys(s).sort((a,e)=>{const o=e.split("/").length-a.split("/").length;return o!==0?o:e.length-a.length});for(const a of l)if(n.startsWith(a))return a;return"/"};const Ar={"v-184f4da6":v(()=>p(()=>import("./intro.html-UBE1FLPW.js"),__vite__mapDeps([0,1]))),"v-8daa1a0e":v(()=>p(()=>import("./index.html-GEPj4Y-_.js"),__vite__mapDeps([2,1]))),"v-3a1d2930":v(()=>p(()=>import("./tool.html-_paMPkf3.js"),__vite__mapDeps([3,1]))),"v-eb072ff4":v(()=>p(()=>import("./index.html-4NILtdrr.js"),__vite__mapDeps([4,1]))),"v-144c90e3":v(()=>p(()=>import("./index.html-JtfMf7q-.js"),__vite__mapDeps([5,1]))),"v-08062d61":v(()=>p(()=>import("./统计单词的个数.html-0OOZB6rI.js"),__vite__mapDeps([6,1]))),"v-1a144c13":v(()=>p(()=>import("./统计字母、数组、空格的个数.html-YNx0hT7b.js"),__vite__mapDeps([7,1]))),"v-4628d8d3":v(()=>p(()=>import("./autohotkey笔记.html-KIQk5u2r.js"),__vite__mapDeps([8,1]))),"v-25b47c13":v(()=>p(()=>import("./index.html-bKE2VUhc.js"),__vite__mapDeps([9,1]))),"v-7945696f":v(()=>p(()=>import("./SourceInsight.html-NgDXn7ut.js"),__vite__mapDeps([10,1]))),"v-5095ca42":v(()=>p(()=>import("./typora配置.html-cVKwdO1H.js"),__vite__mapDeps([11,1]))),"v-5cb072b3":v(()=>p(()=>import("./AOF持久化.html-YeOyxo91.js"),__vite__mapDeps([12,1]))),"v-e451d600":v(()=>p(()=>import("./key通用指令.html-aeORQBXy.js"),__vite__mapDeps([13,1]))),"v-44295686":v(()=>p(()=>import("./list数据类型.html-kVqHC8L0.js"),__vite__mapDeps([14,1]))),"v-cd4e5daa":v(()=>p(()=>import("./RDB持久化.html-TFXyYBwy.js"),__vite__mapDeps([15,1]))),"v-dc384366":v(()=>p(()=>import("./index.html-gURDOzWB.js"),__vite__mapDeps([16,1]))),"v-9ee97fea":v(()=>p(()=>import("./Redis的安装.html-dPcUAKFN.js"),__vite__mapDeps([17,1]))),"v-2877cc16":v(()=>p(()=>import("./set和sorted_set数据类型.html-HrReHjeh.js"),__vite__mapDeps([18,1]))),"v-62cf8211":v(()=>p(()=>import("./string和hash数据类型.html-g8I1viX2.js"),__vite__mapDeps([19,1]))),"v-c5721e08":v(()=>p(()=>import("./事务和事务锁.html-N_Xr2Hba.js"),__vite__mapDeps([20,1]))),"v-20189b06":v(()=>p(()=>import("./删除策略.html-V6-H6Qb6.js"),__vite__mapDeps([21,1]))),"v-0f67a82d":v(()=>p(()=>import("./数据类型实践案例.html-pwAVG-zO.js"),__vite__mapDeps([22,1]))),"v-7ccef86f":v(()=>p(()=>import("./认识NoSQL和Redis.html-NX9O0EY-.js"),__vite__mapDeps([23,1]))),"v-501b8055":v(()=>p(()=>import("./高级数据类型Bitmaps、HyperLogLog、GEO.html-TbmSnjSc.js"),__vite__mapDeps([24,1]))),"v-1464ca76":v(()=>p(()=>import("./index.html-kfpgU97q.js"),__vite__mapDeps([25,1]))),"v-47deb978":v(()=>p(()=>import("./CRUD.html-JQmr8tKv.js"),__vite__mapDeps([26,1]))),"v-68cfc132":v(()=>p(()=>import("./DCL小结.html-uGp-IdQ5.js"),__vite__mapDeps([27,1]))),"v-1509bd1e":v(()=>p(()=>import("./DML小结.html-9Bq4ABIC.js"),__vite__mapDeps([28,1]))),"v-5312ebd6":v(()=>p(()=>import("./mysql的库操作.html-9H2unU2r.js"),__vite__mapDeps([29,1]))),"v-cb572402":v(()=>p(()=>import("./select查询.html-Vd9oKgX-.js"),__vite__mapDeps([30,1]))),"v-a056d220":v(()=>p(()=>import("./多表select-连接查询.html-jIt6lic9.js"),__vite__mapDeps([31,1]))),"v-eedfc64a":v(()=>p(()=>import("./概述.html-fl_off9o.js"),__vite__mapDeps([32,1]))),"v-0c1daf9d":v(()=>p(()=>import("./表操作.html-K5PIWkcx.js"),__vite__mapDeps([33,1]))),"v-f0383c18":v(()=>p(()=>import("./index.html-qH2h9L3F.js"),__vite__mapDeps([34,1]))),"v-40bd95c1":v(()=>p(()=>import("./文件操作.html-buWm2s1w.js"),__vite__mapDeps([35,1]))),"v-15be756c":v(()=>p(()=>import("./MySQL存储引擎.html-EJZci-DY.js"),__vite__mapDeps([36,1]))),"v-18f8cde9":v(()=>p(()=>import("./c语言连接MySQL.html-uU42E2qJ.js"),__vite__mapDeps([37,1]))),"v-17cb7aa4":v(()=>p(()=>import("./mysql的安装.html-WrjFpmN-.js"),__vite__mapDeps([38,1]))),"v-0dd7df9c":v(()=>p(()=>import("./关系型数据库表设计.html-aJhgUs0T.js"),__vite__mapDeps([39,1]))),"v-067342a0":v(()=>p(()=>import("./基本数据类型.html-Rn3ZnFsj.js"),__vite__mapDeps([40,1]))),"v-c8a2e14a":v(()=>p(()=>import("./完整性约束.html-7UWqs2-R.js"),__vite__mapDeps([41,1]))),"v-a87f8e4c":v(()=>p(()=>import("./常用函数.html-SMppQbKR.js"),__vite__mapDeps([42,1]))),"v-1df5d4d6":v(()=>p(()=>import("./用户管理与授权.html-sP584ZGp.js"),__vite__mapDeps([43,1]))),"v-2648a679":v(()=>p(()=>import("./知识拓展.html-XDLls4f2.js"),__vite__mapDeps([44,1]))),"v-cc05253e":v(()=>p(()=>import("./范式设计.html-Yhwdw8fO.js"),__vite__mapDeps([45,1]))),"v-84ceb2f4":v(()=>p(()=>import("./运算符.html-FJM7942B.js"),__vite__mapDeps([46,1]))),"v-32ca78ec":v(()=>p(()=>import("./InnoDB的主键和二级索引树.html-coUYbF81.js"),__vite__mapDeps([47,1]))),"v-f2fadc9e":v(()=>p(()=>import("./InnoDB自适应哈希索引.html-dWQ6god2.js"),__vite__mapDeps([48,1]))),"v-08c9d541":v(()=>p(()=>import("./MySQL优化之慢日志查询.html-nv_5HB2O.js"),__vite__mapDeps([49,1]))),"v-976bf48a":v(()=>p(()=>import("./MySQL索引常见问题.html-cxoVQego.js"),__vite__mapDeps([50,1]))),"v-19f8f8e4":v(()=>p(()=>import("./哈希索引.html-JoXbZWxc.js"),__vite__mapDeps([51,1]))),"v-4b2179bb":v(()=>p(()=>import("./索引基础.html-_tLmYvyv.js"),__vite__mapDeps([52,1]))),"v-4d1339f4":v(()=>p(()=>import("./索引的使用和分析.html-prmbd99I.js"),__vite__mapDeps([53,1]))),"v-b30276bc":v(()=>p(()=>import("./索引的底层实现原理.html-7oQ7G5fl.js"),__vite__mapDeps([54,1]))),"v-1776ebf2":v(()=>p(()=>import("./MySQL事务的隔离级别.html-NqAMu2hF.js"),__vite__mapDeps([55,1]))),"v-51f2dcf6":v(()=>p(()=>import("./事务并发存在的问题(脏读、不可重复读和幻读).html-EdkjYV_6.js"),__vite__mapDeps([56,1]))),"v-0359a68f":v(()=>p(()=>import("./事务的ACID特性.html-mHvKbhqP.js"),__vite__mapDeps([57,1]))),"v-558f976c":v(()=>p(()=>import("./事务的概念.html-6V-A-7sK.js"),__vite__mapDeps([58,1]))),"v-167ae4a4":v(()=>p(()=>import("./sql优化.html-f2zw4b11.js"),__vite__mapDeps([59,1]))),"v-fb0c9a20":v(()=>p(()=>import("./SQL和索引优化总结.html-1JsCUVML.js"),__vite__mapDeps([60,1]))),"v-403714d4":v(()=>p(()=>import("./MySQL重做日志redo log.html-3KjgTI-w.js"),__vite__mapDeps([61,1]))),"v-f10dc5a4":v(()=>p(()=>import("./Server 层四个日志.html-LlGoR9oS.js"),__vite__mapDeps([62,1]))),"v-4dda2b40":v(()=>p(()=>import("./主从复制原理.html-5TWVgOKS.js"),__vite__mapDeps([63,1]))),"v-1015e72b":v(()=>p(()=>import("./读写分离原理.html-U6nl-0By.js"),__vite__mapDeps([64,1]))),"v-afe3b5ec":v(()=>p(()=>import("./读写分离配置实践.html-uqAcKs_2.js"),__vite__mapDeps([65,1]))),"v-ab0fa402":v(()=>p(()=>import("./配置主从复制实践.html-5EqZ2Qps.js"),__vite__mapDeps([66,1]))),"v-3ef06b8b":v(()=>p(()=>import("./MySQL MVCC多版本并发控制（脏读和不可重复读解决原理）.html-Ovv6S34Q.js"),__vite__mapDeps([67,1]))),"v-a01dbb18":v(()=>p(()=>import("./MySQL 意向共享锁、意向排他锁.html-1peq2h55.js"),__vite__mapDeps([68,1]))),"v-329074fa":v(()=>p(()=>import("./MySQL回滚日志undo log.html-EWPMEIQ_.js"),__vite__mapDeps([69,1]))),"v-1029a01f":v(()=>p(()=>import("./MySQL间隙锁（幻读解决原理）.html-R-4gUTtx.js"),__vite__mapDeps([70,1]))),"v-664794b6":v(()=>p(()=>import("./排它锁和共享锁.html-WnE4gzLY.js"),__vite__mapDeps([71,1]))),"v-1743001b":v(()=>p(()=>import("./死锁.html-hQWlGAK7.js"),__vite__mapDeps([72,1]))),"v-25bb8896":v(()=>p(()=>import("./表级锁和行级锁.html-r5JSwEOK.js"),__vite__mapDeps([73,1]))),"v-5dfb342e":v(()=>p(()=>import("./记录锁_间隙锁可以防止删除操作而导致的幻读吗.html-TNx0nZtu.js"),__vite__mapDeps([74,1]))),"v-416fc51c":v(()=>p(()=>import("./锁的优化建议.html-tj4pQche.js"),__vite__mapDeps([75,1]))),"v-125a45f0":v(()=>p(()=>import("./SQL的完整处理流程.html-1Hc5pT3U.js"),__vite__mapDeps([76,1]))),"v-73d634fe":v(()=>p(()=>import("./分库分表实践.html-5ujvPseL.js"),__vite__mapDeps([77,1]))),"v-fb24ca0e":v(()=>p(()=>import("./加载配置项.html-gpHW9nXp.js"),__vite__mapDeps([78,1]))),"v-379adba2":v(()=>p(()=>import("./压力测试.html-F5Hdl8Rl.js"),__vite__mapDeps([79,1]))),"v-2247d511":v(()=>p(()=>import("./数据库编程部分实现.html-EEvOAs8x.js"),__vite__mapDeps([80,1]))),"v-874c376e":v(()=>p(()=>import("./最大空闲时间回收连接扫描线程的实现.html-SXdFZVJd.js"),__vite__mapDeps([81,1]))),"v-5e84d900":v(()=>p(()=>import("./概述.html-qywvVJ_c.js"),__vite__mapDeps([82,1]))),"v-51fa1311":v(()=>p(()=>import("./消费者线程的实现.html-2MCo9TFc.js"),__vite__mapDeps([83,1]))),"v-47e7636c":v(()=>p(()=>import("./生产者线程的实现.html-F4jxOBZl.js"),__vite__mapDeps([84,1]))),"v-f00ce0e0":v(()=>p(()=>import("./连接池单例模式实践.html-7ACAmDbW.js"),__vite__mapDeps([85,1]))),"v-18b96408":v(()=>p(()=>import("./mysqldump数据备份.html-5TxNvTY9.js"),__vite__mapDeps([86,1]))),"v-0072b68a":v(()=>p(()=>import("./344.反转字符串.html-gS1DU8J6.js"),__vite__mapDeps([87,1]))),"v-4a6b903e":v(()=>p(()=>import("./905. 按奇偶排序数组.html-pf8yC_NH.js"),__vite__mapDeps([88,1]))),"v-92d2378e":v(()=>p(()=>import("./LeetCode 209.长度最小的子数组.html-99hzqv4f.js"),__vite__mapDeps([89,1]))),"v-3945022c":v(()=>p(()=>import("./LeetCode 27. 移除元素.html-Fa_eMZlz.js"),__vite__mapDeps([90,1]))),"v-0edaacb7":v(()=>p(()=>import("./LeetCode 59.螺旋矩阵Ⅱ.html-sx1r9pIR.js"),__vite__mapDeps([91,1]))),"v-8fe9fd22":v(()=>p(()=>import("./LeetCode 704.二分查找.html-cLXGV3o9.js"),__vite__mapDeps([92,1]))),"v-69d65be6":v(()=>p(()=>import("./LeetCode 977.有序数组的平方.html-3MTe8HYM.js"),__vite__mapDeps([93,1]))),"v-a277331a":v(()=>p(()=>import("./二分查找总结.html-KYrdvgOJ.js"),__vite__mapDeps([94,1]))),"v-2e7fb111":v(()=>p(()=>import("./数组基础.html-303NVL2e.js"),__vite__mapDeps([95,1]))),"v-75ce370a":v(()=>p(()=>import("./查找N个数组的公共元素.html-fv9oE0ga.js"),__vite__mapDeps([96,1]))),"v-1f0c41ec":v(()=>p(()=>import("./查找三个数组的公共元素.html-GOoT-qba.js"),__vite__mapDeps([97,1]))),"v-98398990":v(()=>p(()=>import("./查找两个数组的公共元素.html-tShRV6m5.js"),__vite__mapDeps([98,1]))),"v-752e9b82":v(()=>p(()=>import("./查找出现次数超过一半的元素.html--RiwK-hh.js"),__vite__mapDeps([99,1]))),"v-c01690d8":v(()=>p(()=>import("./查找最大和次大的元素.html-IfLr433G.js"),__vite__mapDeps([100,1]))),"v-152dfd8d":v(()=>p(()=>import("./234.回文链表.html-3S6HvBJ-.js"),__vite__mapDeps([101,1]))),"v-735dfe06":v(()=>p(()=>import("./LeetCode 203.移除链表元素.html-oOBWdTgR.js"),__vite__mapDeps([102,1]))),"v-d977ced4":v(()=>p(()=>import("./leetcode 21. 合并两个有序链表.html-3e9zjDAW.js"),__vite__mapDeps([103,1]))),"v-64506cc7":v(()=>p(()=>import("./leetcode141.环形链表(判断链表是否有环).html-3i8nqEn9.js"),__vite__mapDeps([104,1]))),"v-13ade0aa":v(()=>p(()=>import("./Leetcode142.环形链表II(查找环的入口地址).html-9407Hfu8.js"),__vite__mapDeps([105,1]))),"v-641d44d2":v(()=>p(()=>import("./leetcode160.相交链表(判断链表是否相交).html-n-UWIUKQ.js"),__vite__mapDeps([106,1]))),"v-8a944abe":v(()=>p(()=>import("./Leetcode19. 删除链表的倒数第N个结点.html-zs_loEpb.js"),__vite__mapDeps([107,1]))),"v-703548b8":v(()=>p(()=>import("./leetcode206.反转链表.html-2-H23HXA.js"),__vite__mapDeps([108,1]))),"v-711b4cec":v(()=>p(()=>import("./Leetcode23. 合并 K 个升序链表.html-6nseq1Wk.js"),__vite__mapDeps([109,1]))),"v-fb458a48":v(()=>p(()=>import("./leetcode61.旋转链表.html-hRf2jfQa.js"),__vite__mapDeps([110,1]))),"v-67248f78":v(()=>p(()=>import("./LeetCode707.html-GBalNQcd.js"),__vite__mapDeps([111,1]))),"v-db839be2":v(()=>p(()=>import("./leetcode86. 分隔链表（链表的分解）.html-2BCYnNcl.js"),__vite__mapDeps([112,1]))),"v-16787a3c":v(()=>p(()=>import("./Leetcode876.链表的中间结点.html-Cf6v_1aI.js"),__vite__mapDeps([113,1]))),"v-a323322a":v(()=>p(()=>import("./leetcode92.反转链表II.html-e-1rVjBa.js"),__vite__mapDeps([114,1]))),"v-4e6f8416":v(()=>p(()=>import("./查找链表中倒数第N个结点.html-p55PSaRG.js"),__vite__mapDeps([115,1]))),"v-ebfa549c":v(()=>p(()=>import("./约瑟夫环问题.html-FCYHEjnS.js"),__vite__mapDeps([116,1]))),"v-08a1ce30":v(()=>p(()=>import("./链表基础.html-FxRthiHe.js"),__vite__mapDeps([117,1]))),"v-24f2d5ba":v(()=>p(()=>import("./index.html-pe7AFeDZ.js"),__vite__mapDeps([118,1]))),"v-450e8862":v(()=>p(()=>import("./TCP和UDP的区别.html-Zs3RsuG8.js"),__vite__mapDeps([119,1]))),"v-74d93789":v(()=>p(()=>import("./上滤.html-bzhDKwgq.js"),__vite__mapDeps([120,1]))),"v-155542a2":v(()=>p(()=>import("./1. 两数之和.html-lLLQUqrq.js"),__vite__mapDeps([121,1]))),"v-6e9dbc4c":v(()=>p(()=>import("./128. 最长连续序列.html-3QM6EWSH.js"),__vite__mapDeps([122,1]))),"v-cdbdf9f8":v(()=>p(()=>import("./15. 三数之和.html-pUwDZb_d.js"),__vite__mapDeps([123,1]))),"v-21edb74e":v(()=>p(()=>import("./167. 两数之和 II - 输入有序数组.html-9D6czqZz.js"),__vite__mapDeps([124,1]))),"v-525b6569":v(()=>p(()=>import("./202. 快乐数.html-px94Dt0L.js"),__vite__mapDeps([125,1]))),"v-30fc6476":v(()=>p(()=>import("./217.存在重复元素.html-H-_dspO1.js"),__vite__mapDeps([126,1]))),"v-30a803f7":v(()=>p(()=>import("./219.存在重复元素 II.html-AzRUxUmi.js"),__vite__mapDeps([127,1]))),"v-115ac7e7":v(()=>p(()=>import("./220. 存在重复元素 III.html-KCoTaFkr.js"),__vite__mapDeps([128,1]))),"v-534e82f8":v(()=>p(()=>import("./242.有效的字母异位词.html-mHwPhMtG.js"),__vite__mapDeps([129,1]))),"v-e58201ee":v(()=>p(()=>import("./349.两个数组的交集.html-cX_IVPJ_.js"),__vite__mapDeps([130,1]))),"v-21b182ee":v(()=>p(()=>import("./383. 赎金信.html-oUaLkMwS.js"),__vite__mapDeps([131,1]))),"v-deb0c8ec":v(()=>p(()=>import("./594. 最长和谐子序列.html--2y927_j.js"),__vite__mapDeps([132,1]))),"v-aa555d4e":v(()=>p(()=>import("./各阶段代码修改回退撤销操作.html-ZF-sYiWI.js"),__vite__mapDeps([133,1]))),"v-971795b6":v(()=>p(()=>import("./基本概念和环境搭建.html-x11dMog1.js"),__vite__mapDeps([134,1]))),"v-093d475d":v(()=>p(()=>import("./常用命令以及原理.html-MdCgCsCK.js"),__vite__mapDeps([135,1]))),"v-6d1b8ec2":v(()=>p(()=>import("./推送代码冲突解决.html-i9yr4UxQ.js"),__vite__mapDeps([136,1]))),"v-2a84a2a1":v(()=>p(()=>import("./本地分支管理.html-x_fouddz.js"),__vite__mapDeps([137,1]))),"v-17abcac0":v(()=>p(()=>import("./远程分支管理.html-C8zkC4Zm.js"),__vite__mapDeps([138,1]))),"v-1a50115e":v(()=>p(()=>import("./冒泡排序.html-CFZc3rFf.js"),__vite__mapDeps([139,1]))),"v-53acd735":v(()=>p(()=>import("./基数排序.html-wVB58tci.js"),__vite__mapDeps([140,1]))),"v-00fc7494":v(()=>p(()=>import("./堆排序.html-fZwX2l13.js"),__vite__mapDeps([141,1]))),"v-380a6c84":v(()=>p(()=>import("./希尔排序.html-EcK0TxaE.js"),__vite__mapDeps([142,1]))),"v-4b65c060":v(()=>p(()=>import("./归并排序.html-gBYNLkTO.js"),__vite__mapDeps([143,1]))),"v-0cc447aa":v(()=>p(()=>import("./插入排序.html-ZU6fpW2P.js"),__vite__mapDeps([144,1]))),"v-64dd32fe":v(()=>p(()=>import("./桶排序.html-jIHUQzWc.js"),__vite__mapDeps([145,1]))),"v-85d8c71c":v(()=>p(()=>import("./计数排序.html-YkYDt2kR.js"),__vite__mapDeps([146,1]))),"v-64c90a94":v(()=>p(()=>import("./选择排序.html-TdsEa9J7.js"),__vite__mapDeps([147,1]))),"v-155d00d3":v(()=>p(()=>import("./（简单）快速排序.html-r3-6o76F.js"),__vite__mapDeps([148,1]))),"v-f1165cc2":v(()=>p(()=>import("./新建 Markdown.html-LrVqDsK1.js"),__vite__mapDeps([149,1]))),"v-eeb8a63a":v(()=>p(()=>import("./两个栈实现队列.html-qebkVb-d.js"),__vite__mapDeps([150,1]))),"v-c84ce682":v(()=>p(()=>import("./新建 Markdown.html-EkrBoVkR.js"),__vite__mapDeps([151,1]))),"v-038e0b34":v(()=>p(()=>import("./反汇编小结.html-eyMEcLlN.js"),__vite__mapDeps([152,1]))),"v-403c82cd":v(()=>p(()=>import("./指令角度堆栈调用过程.html-mOgK4oas.js"),__vite__mapDeps([153,1]))),"v-5aef7a82":v(()=>p(()=>import("./编译器角度理解c__代码的编译和链接.html-jxwxOqf6.js"),__vite__mapDeps([154,1]))),"v-4d611284":v(()=>p(()=>import("./进程虚拟地址空间.html-rVL6SG5H.js"),__vite__mapDeps([155,1]))),"v-66aab0b0":v(()=>p(()=>import("./bool.html-NrprihF6.js"),__vite__mapDeps([156,1]))),"v-1073124a":v(()=>p(()=>import("./c__初探.html-3AE1MxqE.js"),__vite__mapDeps([157,1]))),"v-3cc85216":v(()=>p(()=>import("./const.html-3CBmQAOg.js"),__vite__mapDeps([158,1]))),"v-ba4c1c2a":v(()=>p(()=>import("./inline内联函数.html-rg4JkzF6.js"),__vite__mapDeps([159,1]))),"v-c97d844a":v(()=>p(()=>import("./new、delete.html-pQjHM9OO.js"),__vite__mapDeps([160,1]))),"v-6ef0e0ae":v(()=>p(()=>import("./string.html-0SX-GkrL.js"),__vite__mapDeps([161,1]))),"v-f8fc3194":v(()=>p(()=>import("./内存对齐.html-j46kjj3A.js"),__vite__mapDeps([162,1]))),"v-14c9e918":v(()=>p(()=>import("./函数重载.html-o9WmCoRB.js"),__vite__mapDeps([163,1]))),"v-1155c5a0":v(()=>p(()=>import("./命名空间.html-MfyZg6ga.js"),__vite__mapDeps([164,1]))),"v-636256d6":v(()=>p(()=>import("./异常安全.html-uJifxh7j.js"),__vite__mapDeps([165,1]))),"v-51ee3d17":v(()=>p(()=>import("./引用.html-mPygAGyK.js"),__vite__mapDeps([166,1]))),"v-132402e1":v(()=>p(()=>import("./强制转换.html-24nVl9_q.js"),__vite__mapDeps([167,1]))),"v-01408bc4":v(()=>p(()=>import("./默认参数.html-nxgufn79.js"),__vite__mapDeps([168,1]))),"v-f103c4b8":v(()=>p(()=>import("./do-while(0).html-Ehz0fySD.js"),__vite__mapDeps([169,1]))),"v-fd4b7500":v(()=>p(()=>import("./malloc、free的底层实现.html-PnPKPfBu.js"),__vite__mapDeps([170,1]))),"v-332dfae6":v(()=>p(()=>import("./scanf.html-zuThDgZx.js"),__vite__mapDeps([171,1]))),"v-062c257f":v(()=>p(()=>import("./关键字.html-B6E5Yqm9.js"),__vite__mapDeps([172,1]))),"v-70779923":v(()=>p(()=>import("./前言.html-mDohvN4e.js"),__vite__mapDeps([173,1]))),"v-198bd17a":v(()=>p(()=>import("./变量.html-GXl1YWVW.js"),__vite__mapDeps([174,1]))),"v-a688fcfc":v(()=>p(()=>import("./字符.html-ext7Naed.js"),__vite__mapDeps([175,1]))),"v-505a1229":v(()=>p(()=>import("./常量.html-kseZ_ELY.js"),__vite__mapDeps([176,1]))),"v-1c610f8b":v(()=>p(()=>import("./数据类型.html-o143takZ.js"),__vite__mapDeps([177,1]))),"v-573fd3b5":v(()=>p(()=>import("./整型.html-FMpyxFuX.js"),__vite__mapDeps([178,1]))),"v-63c16f9b":v(()=>p(()=>import("./浮点数.html-Rby-eK6I.js"),__vite__mapDeps([179,1]))),"v-a253b292":v(()=>p(()=>import("./补码.html-6HwT7bsp.js"),__vite__mapDeps([180,1]))),"v-35cd92ed":v(()=>p(()=>import("./进制转换.html-G-a5gFk5.js"),__vite__mapDeps([181,1]))),"v-2a2097b4":v(()=>p(()=>import("./STL向量容器vector简单实现.html-Adfpjpd2.js"),__vite__mapDeps([182,1]))),"v-4ee2bd74":v(()=>p(()=>import("./函数模板与模板函数.html-P5Zoxhpo.js"),__vite__mapDeps([183,1]))),"v-93ba2c5c":v(()=>p(()=>import("./可变模板参数.html-9cXPhiT2.js"),__vite__mapDeps([184,1]))),"v-97506104":v(()=>p(()=>import("./容器空间适配器allocator的简单实现.html-kp6dvs-4.js"),__vite__mapDeps([185,1]))),"v-ca1f584c":v(()=>p(()=>import("./类模板与模板类.html-sXGBZQob.js"),__vite__mapDeps([186,1]))),"v-733883fe":v(()=>p(()=>import("./string迭代器的实现.html-UcyXo1CZ.js"),__vite__mapDeps([187,1]))),"v-0aad1b8c":v(()=>p(()=>import("./vector迭代器的实现.html-O1os6OTd.js"),__vite__mapDeps([188,1]))),"v-6a78bf1e":v(()=>p(()=>import("./剖析new和delete实习原理.html-3q0TmuBe.js"),__vite__mapDeps([189,1]))),"v-7d06c0d6":v(()=>p(()=>import("./友元.html-vQPMrMcM.js"),__vite__mapDeps([190,1]))),"v-f0f10ec2":v(()=>p(()=>import("./复数类CComplex.html-qV8Nth0d.js"),__vite__mapDeps([191,1]))),"v-253e305c":v(()=>p(()=>import("./运算符重载实现string类.html-BwdDzyhc.js"),__vite__mapDeps([192,1]))),"v-62b6f00d":v(()=>p(()=>import("./迭代器失效的底层核心原理.html-otOlPEMf.js"),__vite__mapDeps([193,1]))),"v-02dd1ab7":v(()=>p(()=>import("./重载new和delete运算符实现一个对象池.html-mHbzNGT7.js"),__vite__mapDeps([194,1]))),"v-5e6716c0":v(()=>p(()=>import("./哪些函数不能被设置为虚函数.html-gy4Ch3Wd.js"),__vite__mapDeps([195,1]))),"v-72de4250":v(()=>p(()=>import("./多态的定义和原理.html-btaP4OcI.js"),__vite__mapDeps([196,1]))),"v-e3980572":v(()=>p(()=>import("./带虚函数的多基派生.html-n0oIsH_7.js"),__vite__mapDeps([197,1]))),"v-54b6e5ba":v(()=>p(()=>import("./测试虚表的存在.html-3MovnBDt.js"),__vite__mapDeps([198,1]))),"v-5ed5a75a":v(()=>p(()=>import("./纯虚函数和抽象类.html-RZqs5P3l.js"),__vite__mapDeps([199,1]))),"v-7c62f63c":v(()=>p(()=>import("./继承多态与虚函数案例分析.html-0-a7Pepk.js"),__vite__mapDeps([200,1]))),"v-7ef7d845":v(()=>p(()=>import("./虚函数.html-9KqF5uCE.js"),__vite__mapDeps([201,1]))),"v-68c3f3ca":v(()=>p(()=>import("./虚函数的访问.html-dbANXDox.js"),__vite__mapDeps([202,1]))),"v-849483e2":v(()=>p(()=>import("./虚基类和虚继承.html-TNskzNyb.js"),__vite__mapDeps([203,1]))),"v-0e539496":v(()=>p(()=>import("./虚拟继承时派生类对象的构造和析构.html-6PSCA7nD.js"),__vite__mapDeps([204,1]))),"v-600c7550":v(()=>p(()=>import("./虚析构.html-jSdM2kt8.js"),__vite__mapDeps([205,1]))),"v-f51389fa":v(()=>p(()=>import("./静态绑定和动态绑定.html-pvZN13Jt.js"),__vite__mapDeps([206,1]))),"v-5f9477f2":v(()=>p(()=>import("./this.html-pW8iF6Dl.js"),__vite__mapDeps([207,1]))),"v-31530dfb":v(()=>p(()=>import("./拷贝构造函数.html-qH8tMx_Y.js"),__vite__mapDeps([208,1]))),"v-3bc3bfaf":v(()=>p(()=>import("./拷贝构造和赋值重载的实践.html-xr533X9E.js"),__vite__mapDeps([209,1]))),"v-3a9cf65c":v(()=>p(()=>import("./指向类型成员的指针.html-baHT-shv.js"),__vite__mapDeps([210,1]))),"v-10e1c6eb":v(()=>p(()=>import("./构造函数和析构函数.html-XY4Qy4wV.js"),__vite__mapDeps([211,1]))),"v-451c83e2":v(()=>p(()=>import("./特殊数据成员的初始化.html-3dlrCzzR.js"),__vite__mapDeps([212,1]))),"v-6577db5e":v(()=>p(()=>import("./特殊的成员函数.html-IyKONOSD.js"),__vite__mapDeps([213,1]))),"v-e41f0618":v(()=>p(()=>import("./类和对象.html-a662i2WN.js"),__vite__mapDeps([214,1]))),"v-3eca3d30":v(()=>p(()=>import("./组织对象.html-qj4p0tBT.js"),__vite__mapDeps([215,1]))),"v-1da04370":v(()=>p(()=>import("./赋值运算符函数.html-iuYTEXXo.js"),__vite__mapDeps([216,1]))),"v-0cf00a94":v(()=>p(()=>import("./多基继承.html-nR3dDkO2.js"),__vite__mapDeps([217,1]))),"v-2f0a2344":v(()=>p(()=>import("./派生方式对基类成员的访问权限.html-Go-l6Luq.js"),__vite__mapDeps([218,1]))),"v-7eb7ea5a":v(()=>p(()=>import("./派生类对象间的复制控制.html-KlXlqeju.js"),__vite__mapDeps([219,1]))),"v-11fe42b7":v(()=>p(()=>import("./派生类的构造过程.html-6aFJIqvx.js"),__vite__mapDeps([220,1]))),"v-103be5d9":v(()=>p(()=>import("./继承中的类型转换.html-20pdIK2Q.js"),__vite__mapDeps([221,1]))),"v-7e0a1cbb":v(()=>p(()=>import("./继承的本质和原理.html-aI3wNX62.js"),__vite__mapDeps([222,1]))),"v-210e34fe":v(()=>p(()=>import("./菱形继承问题.html-UZNaPntZ.js"),__vite__mapDeps([223,1]))),"v-eb58d93a":v(()=>p(()=>import("./重载，隐藏，重写（覆盖）.html-UtVhaPp_.js"),__vite__mapDeps([224,1]))),"v-7c6a87cc":v(()=>p(()=>import("./valgrind.html-JWw6x6CE.js"),__vite__mapDeps([225,1]))),"v-43124686":v(()=>p(()=>import("./log4cpp.html-kUUIeJkH.js"),__vite__mapDeps([226,1]))),"v-55ae1b9a":v(()=>p(()=>import("./STL顺序容器：vector、deque、list.html-aRF7Y21N.js"),__vite__mapDeps([227,1]))),"v-8365f3e8":v(()=>p(()=>import("./函数对象与函数指针.html-Knp6Labc.js"),__vite__mapDeps([228,1]))),"v-62b566a8":v(()=>p(()=>import("./容器适配器：栈、队列、优先级队列.html-gpOkvfbd.js"),__vite__mapDeps([229,1]))),"v-4b15d926":v(()=>p(()=>import("./无序关联容器、有序关联容器.html-Ku6PdZQN.js"),__vite__mapDeps([230,1]))),"v-2c413a2b":v(()=>p(()=>import("./泛型算法与绑定器.html-mJHf63XQ.js"),__vite__mapDeps([231,1]))),"v-7c5d97b0":v(()=>p(()=>import("./迭代器iterator.html-gSxyfvoK.js"),__vite__mapDeps([232,1]))),"v-0d61d626":v(()=>p(()=>import("./不带引用计数的智能指针.html-FUNn4l95.js"),__vite__mapDeps([233,1]))),"v-778f0618":v(()=>p(()=>import("./多线程访问共享对象的线程安全问题.html-BTVpfFZp.js"),__vite__mapDeps([234,1]))),"v-29824dbc":v(()=>p(()=>import("./带引用计数的智能指针.html-_ueoWfkq.js"),__vite__mapDeps([235,1]))),"v-6c9710e8":v(()=>p(()=>import("./自定义删除器.html-Lp1mQTk-.js"),__vite__mapDeps([236,1]))),"v-16792cec":v(()=>p(()=>import("./Pimpl.html-UdS2YMRU.js"),__vite__mapDeps([237,1]))),"v-73dfb9d4":v(()=>p(()=>import("./代理模式、适配器模式、装饰器模式.html-2rHmao4w.js"),__vite__mapDeps([238,1]))),"v-ef005662":v(()=>p(()=>import("./单例模式.html-u5aMllNw.js"),__vite__mapDeps([239,1]))),"v-44042d12":v(()=>p(()=>import("./简单工厂、工厂方法、抽象工厂.html-LsjUS2ZR.js"),__vite__mapDeps([240,1]))),"v-5f0f0675":v(()=>p(()=>import("./观察者Observer模式.html-jl8LwH_B.js"),__vite__mapDeps([241,1]))),"v-7c0c7a84":v(()=>p(()=>import("./C__对象的优化.html-VuL659Sn.js"),__vite__mapDeps([242,1]))),"v-5b3d8584":v(()=>p(()=>import("./C__的右值引用.html-0Fx-DvBN.js"),__vite__mapDeps([243,1]))),"v-45747b0a":v(()=>p(()=>import("./move移动语义和forward完美转发.html-DwNyQzHE.js"),__vite__mapDeps([244,1]))),"v-25665f14":v(()=>p(()=>import("./C__11内容总结.html-EtAyE9W3.js"),__vite__mapDeps([245,1]))),"v-6ce1e1a6":v(()=>p(()=>import("./C__11多线程编程.html-SSN0juuU.js"),__vite__mapDeps([246,1]))),"v-7cc2160e":v(()=>p(()=>import("./C__11线程间的同步通信(生产者-消费者模型).html-Lj1lyoIP.js"),__vite__mapDeps([247,1]))),"v-6c9ca25c":v(()=>p(()=>import("./再谈mtx和lock_guard和unique_lock.html-MuWbY28r.js"),__vite__mapDeps([248,1]))),"v-2483becb":v(()=>p(()=>import("./基于CAS操作的atomic原子类型.html-ArI59Tjr.js"),__vite__mapDeps([249,1]))),"v-0ccdd78f":v(()=>p(()=>import("./bind1st和bind2d使用.html-nmZ9K4TK.js"),__vite__mapDeps([250,1]))),"v-0413f5c0":v(()=>p(()=>import("./bind和function实现muduo中的线程池.html-GdWa3f5v.js"),__vite__mapDeps([251,1]))),"v-cf2f50ee":v(()=>p(()=>import("./C__11绑定器介绍.html-FeE7Cfiq.js"),__vite__mapDeps([252,1]))),"v-474433e4":v(()=>p(()=>import("./function函数对象类型实现原理.html-KJ0jvmVU.js"),__vite__mapDeps([253,1]))),"v-2a36819d":v(()=>p(()=>import("./function函数对象类型的应用.html-8ZpJ0U2L.js"),__vite__mapDeps([254,1]))),"v-2c027fc3":v(()=>p(()=>import("./lambda表达式.html-r1By8GmG.js"),__vite__mapDeps([255,1]))),"v-08fdb026":v(()=>p(()=>import("./模板的完全特例化和非完全特例化.html-E-rQYtxS.js"),__vite__mapDeps([256,1]))),"v-48c23000":v(()=>p(()=>import("./reallocate.html-LbgqpMYR.js"),__vite__mapDeps([257,1]))),"v-30a2e42b":v(()=>p(()=>import("./SGI STL二级空间配置器重要成员解读.html-4NBDmNOh.js"),__vite__mapDeps([258,1]))),"v-02ca19a9":v(()=>p(()=>import("./SGI STL的verctor是怎么管理对象的.html-Fi84sso-.js"),__vite__mapDeps([259,1]))),"v-7e13dfea":v(()=>p(()=>import("./两个重要的函数.html-OVP5vsQN.js"),__vite__mapDeps([260,1]))),"v-4e6c7a0a":v(()=>p(()=>import("./内存归还dealloacte.html-de_HyTAS.js"),__vite__mapDeps([261,1]))),"v-a2d2b900":v(()=>p(()=>import("./内存池allocate分配过程.html-mlUNhpir.js"),__vite__mapDeps([262,1]))),"v-0d093800":v(()=>p(()=>import("./分配内存池_S_refill源码.html-Uc_DB-b9.js"),__vite__mapDeps([263,1]))),"v-9ab5c6e8":v(()=>p(()=>import("./实际分配内存池_S_chunk_alloc源码.html-2PU3vdJ7.js"),__vite__mapDeps([264,1]))),"v-a8d7b886":v(()=>p(()=>import("./总结.html-e6IKo5fh.js"),__vite__mapDeps([265,1]))),"v-5d0a9dce":v(()=>p(()=>import("./vim的配置和使用.html-1DC3soSs.js"),__vite__mapDeps([266,1]))),"v-739b4ffd":v(()=>p(()=>import("./centos7配置.html-Uq-aMHHL.js"),__vite__mapDeps([267,1]))),"v-dd2c326a":v(()=>p(()=>import("./netstat使用.html-_hZ_dmOO.js"),__vite__mapDeps([268,1]))),"v-5481f6b5":v(()=>p(()=>import("./tree常用命令.html-Mfo8U_sE.js"),__vite__mapDeps([269,1]))),"v-70781306":v(()=>p(()=>import("./wget使用.html-1x8WYVYp.js"),__vite__mapDeps([270,1]))),"v-fae24824":v(()=>p(()=>import("./打包和压缩.html-g5K8Yvi7.js"),__vite__mapDeps([271,1]))),"v-29390dd2":v(()=>p(()=>import("./软链接（符号链接）和硬链接.html-0-8r3XJD.js"),__vite__mapDeps([272,1]))),"v-45955c7c":v(()=>p(()=>import("./配置一台ubuntu.html-5uPtXkwI.js"),__vite__mapDeps([273,1]))),"v-7c3e20c2":v(()=>p(()=>import("./字符串转不同进制数字.html-RlQREG13.js"),__vite__mapDeps([274,1]))),"v-91127220":v(()=>p(()=>import("./CMake的使用.html-pkHhn7Xo.js"),__vite__mapDeps([275,1]))),"v-4c6cb231":v(()=>p(()=>import("./gcc_g__常见的编译命令.html-CJJOBdmH.js"),__vite__mapDeps([276,1]))),"v-5342bc7a":v(()=>p(()=>import("./gdb调试出错的程序.html-XuLah2pz.js"),__vite__mapDeps([277,1]))),"v-f6ba6062":v(()=>p(()=>import("./makefile使用方法.html-T3-LYDm8.js"),__vite__mapDeps([278,1]))),"v-66e8cf78":v(()=>p(()=>import("./为什么c和c__函数参数从右往左压栈.html-yRvoq_mv.js"),__vite__mapDeps([279,1]))),"v-57c1626a":v(()=>p(()=>import("./分析这段代码构造函数和析构函数的调用顺序.html-XP54DqW7.js"),__vite__mapDeps([280,1]))),"v-435677cc":v(()=>p(()=>import("./空结构体的大小.html-gICAgYTJ.js"),__vite__mapDeps([281,1]))),"v-6dabb7d0":v(()=>p(()=>import("./Json简介及使用.html-eL2xt4Ex.js"),__vite__mapDeps([282,1]))),"v-5dfb637b":v(()=>p(()=>import("./Protobuf简介及使用.html-QXTIEBK1.js"),__vite__mapDeps([283,1]))),"v-3706649a":v(()=>p(()=>import("./404.html-iZDnbT77.js"),__vite__mapDeps([284,1]))),"v-5157b212":v(()=>p(()=>import("./index.html-pGLgRW9D.js"),__vite__mapDeps([285,1]))),"v-266f8726":v(()=>p(()=>import("./index.html-RIxJGpKL.js"),__vite__mapDeps([286,1]))),"v-3899b171":v(()=>p(()=>import("./index.html-zBavJewT.js"),__vite__mapDeps([287,1]))),"v-1f23f62c":v(()=>p(()=>import("./index.html-aK1Cdetn.js"),__vite__mapDeps([288,1]))),"v-5764c670":v(()=>p(()=>import("./index.html-Y654CS5W.js"),__vite__mapDeps([289,1]))),"v-9eec0ba4":v(()=>p(()=>import("./index.html-9s3U9UCg.js"),__vite__mapDeps([290,1]))),"v-13ac5d5f":v(()=>p(()=>import("./index.html-CspiZ390.js"),__vite__mapDeps([291,1]))),"v-7c538d12":v(()=>p(()=>import("./index.html-BlNGiz6t.js"),__vite__mapDeps([292,1]))),"v-ed8603cc":v(()=>p(()=>import("./index.html-ML73nsUU.js"),__vite__mapDeps([293,1]))),"v-42abb996":v(()=>p(()=>import("./index.html-XakRRC3G.js"),__vite__mapDeps([294,1]))),"v-8f661f1c":v(()=>p(()=>import("./index.html-kdvmJaVQ.js"),__vite__mapDeps([295,1]))),"v-44e73480":v(()=>p(()=>import("./index.html-A8e7N3k8.js"),__vite__mapDeps([296,1]))),"v-430f9745":v(()=>p(()=>import("./index.html-mo3KHxRX.js"),__vite__mapDeps([297,1]))),"v-5782c814":v(()=>p(()=>import("./index.html-oj3v4-QH.js"),__vite__mapDeps([298,1]))),"v-a38f78a4":v(()=>p(()=>import("./index.html-kW5A395L.js"),__vite__mapDeps([299,1]))),"v-7d94f39a":v(()=>p(()=>import("./index.html-9vnUZu6N.js"),__vite__mapDeps([300,1]))),"v-dfd4ea36":v(()=>p(()=>import("./index.html-o5C7xlQP.js"),__vite__mapDeps([301,1]))),"v-25ac69a1":v(()=>p(()=>import("./index.html-mzRM7gNw.js"),__vite__mapDeps([302,1]))),"v-161970cb":v(()=>p(()=>import("./index.html-By-SLniX.js"),__vite__mapDeps([303,1]))),"v-4086f3eb":v(()=>p(()=>import("./index.html-2DPbxYBx.js"),__vite__mapDeps([304,1]))),"v-18808a57":v(()=>p(()=>import("./index.html-DlNkOsSS.js"),__vite__mapDeps([305,1]))),"v-18205b42":v(()=>p(()=>import("./index.html-T9IZ09AU.js"),__vite__mapDeps([306,1]))),"v-39d32ddd":v(()=>p(()=>import("./index.html-lCUzs78c.js"),__vite__mapDeps([307,1]))),"v-e5b5c7b4":v(()=>p(()=>import("./index.html-6fT4tQuC.js"),__vite__mapDeps([308,1]))),"v-b5fbe93e":v(()=>p(()=>import("./index.html-WiYYFkGX.js"),__vite__mapDeps([309,1]))),"v-bcefe488":v(()=>p(()=>import("./index.html-OrVQZBaM.js"),__vite__mapDeps([310,1]))),"v-0d4e4374":v(()=>p(()=>import("./index.html-auCdtDm7.js"),__vite__mapDeps([311,1]))),"v-19c3cc7c":v(()=>p(()=>import("./index.html-VqL8EaLX.js"),__vite__mapDeps([312,1]))),"v-34ae7acc":v(()=>p(()=>import("./index.html-Ok9tbvb8.js"),__vite__mapDeps([313,1]))),"v-3f33a400":v(()=>p(()=>import("./index.html-Ezh1_XfE.js"),__vite__mapDeps([314,1]))),"v-9fb994fc":v(()=>p(()=>import("./index.html-rvaO88fi.js"),__vite__mapDeps([315,1]))),"v-1ce298e7":v(()=>p(()=>import("./index.html-74dqlx1Z.js"),__vite__mapDeps([316,1]))),"v-17daa261":v(()=>p(()=>import("./index.html-Fe0wBplp.js"),__vite__mapDeps([317,1]))),"v-0ee4786c":v(()=>p(()=>import("./index.html-1336V0CD.js"),__vite__mapDeps([318,1]))),"v-7991b247":v(()=>p(()=>import("./index.html-ZNd48Ydx.js"),__vite__mapDeps([319,1]))),"v-063f0d28":v(()=>p(()=>import("./index.html-brAFcs6l.js"),__vite__mapDeps([320,1]))),"v-66256d6e":v(()=>p(()=>import("./index.html-y2QShbui.js"),__vite__mapDeps([321,1]))),"v-1e2d2742":v(()=>p(()=>import("./index.html-AWAlVUj3.js"),__vite__mapDeps([322,1]))),"v-718e2d40":v(()=>p(()=>import("./index.html-XmUkdIQD.js"),__vite__mapDeps([323,1]))),"v-6efd5e40":v(()=>p(()=>import("./index.html-bd-EyUHE.js"),__vite__mapDeps([324,1]))),"v-14d4901c":v(()=>p(()=>import("./index.html-VQvDzLtA.js"),__vite__mapDeps([325,1]))),"v-6c43b8e2":v(()=>p(()=>import("./index.html-_441eZV3.js"),__vite__mapDeps([326,1]))),"v-706b751e":v(()=>p(()=>import("./index.html-mevKnnTe.js"),__vite__mapDeps([327,1]))),"v-5bc93818":v(()=>p(()=>import("./index.html-oCykdyZ8.js"),__vite__mapDeps([328,1]))),"v-744d024e":v(()=>p(()=>import("./index.html-eQGGhYsD.js"),__vite__mapDeps([329,1]))),"v-e52c881c":v(()=>p(()=>import("./index.html-ZP6gvpTN.js"),__vite__mapDeps([330,1]))),"v-154dc4c4":v(()=>p(()=>import("./index.html-beaN0RqG.js"),__vite__mapDeps([331,1]))),"v-01560935":v(()=>p(()=>import("./index.html-il82t6_Z.js"),__vite__mapDeps([332,1]))),"v-03d57386":v(()=>p(()=>import("./index.html-ZSTNeDTp.js"),__vite__mapDeps([333,1]))),"v-a378ad66":v(()=>p(()=>import("./index.html-LRVTYBDK.js"),__vite__mapDeps([334,1]))),"v-8848dfa8":v(()=>p(()=>import("./index.html-3iYWm6a-.js"),__vite__mapDeps([335,1]))),"v-7b167472":v(()=>p(()=>import("./index.html-CKkBqeiF.js"),__vite__mapDeps([336,1]))),"v-9717cc36":v(()=>p(()=>import("./index.html-6dKodyie.js"),__vite__mapDeps([337,1]))),"v-73267b8b":v(()=>p(()=>import("./index.html-oP3HVFGe.js"),__vite__mapDeps([338,1]))),"v-5c5af6a7":v(()=>p(()=>import("./index.html-Pk1KLy4H.js"),__vite__mapDeps([339,1]))),"v-3e73f0ca":v(()=>p(()=>import("./index.html-XLwJTFN9.js"),__vite__mapDeps([340,1]))),"v-65efd6b5":v(()=>p(()=>import("./index.html-pdsLh66m.js"),__vite__mapDeps([341,1]))),"v-c14e6c1e":v(()=>p(()=>import("./index.html-fbLVa7if.js"),__vite__mapDeps([342,1]))),"v-57cf9ed7":v(()=>p(()=>import("./index.html-P5aY57Ul.js"),__vite__mapDeps([343,1]))),"v-16e3bea5":v(()=>p(()=>import("./index.html-YEfq0BYX.js"),__vite__mapDeps([344,1]))),"v-9c48d85a":v(()=>p(()=>import("./index.html-R4q0j-1O.js"),__vite__mapDeps([345,1]))),"v-69fe373c":v(()=>p(()=>import("./index.html-ytMAqYK3.js"),__vite__mapDeps([346,1]))),"v-5a1c7f10":v(()=>p(()=>import("./index.html-VvCQSXT7.js"),__vite__mapDeps([347,1]))),"v-bdf2800c":v(()=>p(()=>import("./index.html-OyumdDe5.js"),__vite__mapDeps([348,1]))),"v-a074e84e":v(()=>p(()=>import("./index.html-113Cb2OT.js"),__vite__mapDeps([349,1]))),"v-71173084":v(()=>p(()=>import("./index.html-LnkzOp97.js"),__vite__mapDeps([350,1]))),"v-7c8d7d81":v(()=>p(()=>import("./index.html-nv8A-mzg.js"),__vite__mapDeps([351,1]))),"v-039b9630":v(()=>p(()=>import("./index.html-2GztQHRt.js"),__vite__mapDeps([352,1]))),"v-539ae27f":v(()=>p(()=>import("./index.html-ozTaDJol.js"),__vite__mapDeps([353,1]))),"v-0f7cde43":v(()=>p(()=>import("./index.html-1KIkNbUY.js"),__vite__mapDeps([354,1]))),"v-69c73501":v(()=>p(()=>import("./index.html-JW3hDIyI.js"),__vite__mapDeps([355,1]))),"v-54d85698":v(()=>p(()=>import("./index.html-Pv56FhAo.js"),__vite__mapDeps([356,1]))),"v-26374ab8":v(()=>p(()=>import("./index.html-YVFf4g6B.js"),__vite__mapDeps([357,1]))),"v-3af20a74":v(()=>p(()=>import("./index.html-YpVYopNX.js"),__vite__mapDeps([358,1]))),"v-497728a6":v(()=>p(()=>import("./index.html-70m7GPwo.js"),__vite__mapDeps([359,1]))),"v-1ab7dcc2":v(()=>p(()=>import("./index.html-21YuZrct.js"),__vite__mapDeps([360,1]))),"v-7a59998d":v(()=>p(()=>import("./index.html-vxbgz9s6.js"),__vite__mapDeps([361,1]))),"v-0aedece4":v(()=>p(()=>import("./index.html-ldMa42y6.js"),__vite__mapDeps([362,1]))),"v-470617df":v(()=>p(()=>import("./index.html-UsK_O70m.js"),__vite__mapDeps([363,1]))),"v-117d546a":v(()=>p(()=>import("./index.html-Bl2vVowH.js"),__vite__mapDeps([364,1]))),"v-f64eddd4":v(()=>p(()=>import("./index.html-Qq9otJUz.js"),__vite__mapDeps([365,1]))),"v-0b674df5":v(()=>p(()=>import("./index.html-1UyoQyRg.js"),__vite__mapDeps([366,1]))),"v-93cb9d6e":v(()=>p(()=>import("./index.html-34S_zNq-.js"),__vite__mapDeps([367,1]))),"v-cf2ceaf0":v(()=>p(()=>import("./index.html-sKBqMKk7.js"),__vite__mapDeps([368,1]))),"v-11d405d3":v(()=>p(()=>import("./index.html-T83WzrAo.js"),__vite__mapDeps([369,1]))),"v-0440a8b6":v(()=>p(()=>import("./index.html-r1lWyyAQ.js"),__vite__mapDeps([370,1]))),"v-0b4e059c":v(()=>p(()=>import("./index.html-R9ybFUMF.js"),__vite__mapDeps([371,1]))),"v-4f1a28a4":v(()=>p(()=>import("./index.html-vKfJqWfH.js"),__vite__mapDeps([372,1]))),"v-576828c2":v(()=>p(()=>import("./index.html-JN7PILPO.js"),__vite__mapDeps([373,1]))),"v-4b30edaa":v(()=>p(()=>import("./index.html-CgjwZJwa.js"),__vite__mapDeps([374,1]))),"v-22b11fef":v(()=>p(()=>import("./index.html-11q1D-fY.js"),__vite__mapDeps([375,1]))),"v-63c72547":v(()=>p(()=>import("./index.html--u2XjKIT.js"),__vite__mapDeps([376,1]))),"v-a0d22de6":v(()=>p(()=>import("./index.html-kiHPEJxa.js"),__vite__mapDeps([377,1]))),"v-b310d42a":v(()=>p(()=>import("./index.html-ZW_5dzZN.js"),__vite__mapDeps([378,1]))),"v-fe7b1fa2":v(()=>p(()=>import("./index.html--YcWTHux.js"),__vite__mapDeps([379,1]))),"v-7d0f4556":v(()=>p(()=>import("./index.html-2tkdckI4.js"),__vite__mapDeps([380,1]))),"v-56e816c6":v(()=>p(()=>import("./index.html-nsI9Gb-3.js"),__vite__mapDeps([381,1]))),"v-10a04a2f":v(()=>p(()=>import("./index.html-647A_Ylv.js"),__vite__mapDeps([382,1]))),"v-5f8d23be":v(()=>p(()=>import("./index.html-jnHSgNFW.js"),__vite__mapDeps([383,1]))),"v-3a4a854e":v(()=>p(()=>import("./index.html-nCjgY_Pd.js"),__vite__mapDeps([384,1]))),"v-93bed62a":v(()=>p(()=>import("./index.html-iZp_gd1w.js"),__vite__mapDeps([385,1]))),"v-2d6af57c":v(()=>p(()=>import("./index.html-AfFkSStf.js"),__vite__mapDeps([386,1]))),"v-725e7306":v(()=>p(()=>import("./index.html-AFTBibV7.js"),__vite__mapDeps([387,1]))),"v-2be2ad6b":v(()=>p(()=>import("./index.html-UDJ7l3Mp.js"),__vite__mapDeps([388,1]))),"v-34e22042":v(()=>p(()=>import("./index.html-n6Lwp4VE.js"),__vite__mapDeps([389,1]))),"v-c263983c":v(()=>p(()=>import("./index.html-kxOacqbA.js"),__vite__mapDeps([390,1]))),"v-97064af0":v(()=>p(()=>import("./index.html-l7Bj2vSR.js"),__vite__mapDeps([391,1]))),"v-b3059a9c":v(()=>p(()=>import("./index.html-FTXL8xnj.js"),__vite__mapDeps([392,1]))),"v-0f5fd9a1":v(()=>p(()=>import("./index.html-FUEkLplj.js"),__vite__mapDeps([393,1]))),"v-b883da32":v(()=>p(()=>import("./index.html-gYrt7Bhw.js"),__vite__mapDeps([394,1]))),"v-d81fe600":v(()=>p(()=>import("./index.html-YMK4nMec.js"),__vite__mapDeps([395,1]))),"v-7bc56b12":v(()=>p(()=>import("./index.html-uS1llPU0.js"),__vite__mapDeps([396,1]))),"v-5cb0e330":v(()=>p(()=>import("./index.html-YJnfMzXa.js"),__vite__mapDeps([397,1]))),"v-3af70099":v(()=>p(()=>import("./index.html-TYfatKAP.js"),__vite__mapDeps([398,1]))),"v-452dff74":v(()=>p(()=>import("./index.html-oX3oEqzu.js"),__vite__mapDeps([399,1]))),"v-079b5775":v(()=>p(()=>import("./index.html-WSoGGLu4.js"),__vite__mapDeps([400,1]))),"v-40c68542":v(()=>p(()=>import("./index.html-eqElTxg2.js"),__vite__mapDeps([401,1]))),"v-59d0051e":v(()=>p(()=>import("./index.html-sIsdaQtD.js"),__vite__mapDeps([402,1]))),"v-8200fafe":v(()=>p(()=>import("./index.html-6a-_rq2e.js"),__vite__mapDeps([403,1]))),"v-1e44e18c":v(()=>p(()=>import("./index.html-HTTJ68XU.js"),__vite__mapDeps([404,1]))),"v-05b88e01":v(()=>p(()=>import("./index.html-N8Tu70QN.js"),__vite__mapDeps([405,1]))),"v-6b17eb4c":v(()=>p(()=>import("./index.html-OaBD24bc.js"),__vite__mapDeps([406,1]))),"v-4100090c":v(()=>p(()=>import("./index.html-Sm-E8PRo.js"),__vite__mapDeps([407,1]))),"v-415e2fc5":v(()=>p(()=>import("./index.html-2SS5Ws9k.js"),__vite__mapDeps([408,1]))),"v-2611ede8":v(()=>p(()=>import("./index.html-BmY5JRUy.js"),__vite__mapDeps([409,1]))),"v-1cce6bb8":v(()=>p(()=>import("./index.html-AhnnbDBQ.js"),__vite__mapDeps([410,1]))),"v-74fc21e7":v(()=>p(()=>import("./index.html-1h3PoIpH.js"),__vite__mapDeps([411,1]))),"v-a9313856":v(()=>p(()=>import("./index.html-WLCG2Nx1.js"),__vite__mapDeps([412,1]))),"v-6cdbb135":v(()=>p(()=>import("./index.html-BTa_qDzf.js"),__vite__mapDeps([413,1]))),"v-7c695e77":v(()=>p(()=>import("./index.html-vKVovuRo.js"),__vite__mapDeps([414,1]))),"v-6b9ab792":v(()=>p(()=>import("./index.html-en2qBfyl.js"),__vite__mapDeps([415,1]))),"v-55a48819":v(()=>p(()=>import("./index.html-YJvlHqp7.js"),__vite__mapDeps([416,1]))),"v-6942f2d0":v(()=>p(()=>import("./index.html-n6eZIzxq.js"),__vite__mapDeps([417,1]))),"v-72049510":v(()=>p(()=>import("./index.html-xYYc0BQy.js"),__vite__mapDeps([418,1]))),"v-2ddd04a0":v(()=>p(()=>import("./index.html-8dyOTKhu.js"),__vite__mapDeps([419,1]))),"v-41a24821":v(()=>p(()=>import("./index.html-jDA5X9Yv.js"),__vite__mapDeps([420,1]))),"v-85dac2ea":v(()=>p(()=>import("./index.html-avtIsFTB.js"),__vite__mapDeps([421,1]))),"v-254becce":v(()=>p(()=>import("./index.html-GltxEVkB.js"),__vite__mapDeps([422,1])))};var w2=Symbol(""),mr=Symbol(""),S2=ll({key:"",path:"",title:"",lang:"",frontmatter:{},headers:[]}),Bs=()=>{const s=us(mr);if(!s)throw new Error("pageData() is called without provider.");return s},Fr=Symbol(""),fs=()=>{const s=us(Fr);if(!s)throw new Error("usePageFrontmatter() is called without provider.");return s},Er=Symbol(""),P2=()=>{const s=us(Er);if(!s)throw new Error("usePageHead() is called without provider.");return s},x2=Symbol(""),Dr=Symbol(""),fr=()=>{const s=us(Dr);if(!s)throw new Error("usePageLang() is called without provider.");return s},br=Symbol(""),R2=()=>{const s=us(br);if(!s)throw new Error("usePageLayout() is called without provider.");return s},V2=G(C2),np=Symbol(""),gn=()=>{const s=us(np);if(!s)throw new Error("useRouteLocale() is called without provider.");return s},Cl=G(g2),_r=()=>Cl,hr=Symbol(""),Gl=()=>{const s=us(hr);if(!s)throw new Error("useSiteLocaleData() is called without provider.");return s},M2=Symbol(""),q2="Layout",N2="NotFound",kn=Da({resolveLayouts:s=>s.reduce((n,l)=>({...n,...l.layouts}),{}),resolvePageData:async s=>{const n=V2.value[s];return await(n==null?void 0:n())??S2},resolvePageFrontmatter:s=>s.frontmatter,resolvePageHead:(s,n,l)=>{const a=cs(n.description)?n.description:l.description,e=[...ss(n.head)?n.head:[],...l.head,["title",{},s],["meta",{name:"description",content:a}]];return T2(e)},resolvePageHeadTitle:(s,n)=>[s.title,n.title].filter(l=>!!l).join(" | "),resolvePageLang:(s,n)=>s.lang||n.lang||"en-US",resolvePageLayout:(s,n)=>{let l;if(s.path){const a=s.frontmatter.layout;cs(a)?l=a:l=q2}else l=N2;return n[l]},resolveRouteLocale:(s,n)=>k2(s,n),resolveSiteLocaleData:(s,n)=>({...s,...s.locales[n]})}),De=R({name:"ClientOnly",setup(s,n){const l=G(!1);return ms(()=>{l.value=!0}),()=>{var a,e;return l.value?(e=(a=n.slots).default)==null?void 0:e.call(a):null}}}),Cr=R({name:"Content",props:{pageKey:{type:String,required:!1,default:""}},setup(s){const n=Bs(),l=h(()=>Ar[s.pageKey||n.value.key]);return()=>l.value?c(l.value):c("div","404 Not Found")}}),Dn=(s={})=>s,_s=s=>Al(s)?s:`/${ur(s)}`;const $2={};/*!
  * vue-router v4.2.5
  * (c) 2023 Eduardo San Martin Morote
  * @license MIT
  */const bl=typeof window<"u";function z2(s){return s.__esModule||s[Symbol.toStringTag]==="Module"}const Fs=Object.assign;function Ne(s,n){const l={};for(const a in n){const e=n[a];l[a]=Fn(e)?e.map(s):s(e)}return l}const oa=()=>{},Fn=Array.isArray,Q2=/\/$/,H2=s=>s.replace(Q2,"");function $e(s,n,l="/"){let a,e={},o="",t="";const r=n.indexOf("#");let B=n.indexOf("?");return r<B&&r>=0&&(B=-1),B>-1&&(a=n.slice(0,B),o=n.slice(B+1,r>-1?r:n.length),e=s(o)),r>-1&&(a=a||n.slice(0,r),t=n.slice(r,n.length)),a=W2(a??n,l),{fullPath:a+(o&&"?")+o+t,path:a,query:e,hash:t}}function j2(s,n){const l=n.query?s(n.query):"";return n.path+(l&&"?")+l+(n.hash||"")}function Ft(s,n){return!n||!s.toLowerCase().startsWith(n.toLowerCase())?s:s.slice(n.length)||"/"}function G2(s,n,l){const a=n.matched.length-1,e=l.matched.length-1;return a>-1&&a===e&&Ml(n.matched[a],l.matched[e])&&gr(n.params,l.params)&&s(n.query)===s(l.query)&&n.hash===l.hash}function Ml(s,n){return(s.aliasOf||s)===(n.aliasOf||n)}function gr(s,n){if(Object.keys(s).length!==Object.keys(n).length)return!1;for(const l in s)if(!U2(s[l],n[l]))return!1;return!0}function U2(s,n){return Fn(s)?Et(s,n):Fn(n)?Et(n,s):s===n}function Et(s,n){return Fn(n)?s.length===n.length&&s.every((l,a)=>l===n[a]):s.length===1&&s[0]===n}function W2(s,n){if(s.startsWith("/"))return s;if(!s)return n;const l=n.split("/"),a=s.split("/"),e=a[a.length-1];(e===".."||e===".")&&a.push("");let o=l.length-1,t,r;for(t=0;t<a.length;t++)if(r=a[t],r!==".")if(r==="..")o>1&&o--;else break;return l.slice(0,o).join("/")+"/"+a.slice(t-(t===a.length?1:0)).join("/")}var ua;(function(s){s.pop="pop",s.push="push"})(ua||(ua={}));var pa;(function(s){s.back="back",s.forward="forward",s.unknown=""})(pa||(pa={}));function K2(s){if(!s)if(bl){const n=document.querySelector("base");s=n&&n.getAttribute("href")||"/",s=s.replace(/^\w+:\/\/[^\/]+/,"")}else s="/";return s[0]!=="/"&&s[0]!=="#"&&(s="/"+s),H2(s)}const Y2=/^[^#]+#/;function X2(s,n){return s.replace(Y2,"#")+n}function Z2(s,n){const l=document.documentElement.getBoundingClientRect(),a=s.getBoundingClientRect();return{behavior:n.behavior,left:a.left-l.left-(n.left||0),top:a.top-l.top-(n.top||0)}}const fe=()=>({left:window.pageXOffset,top:window.pageYOffset});function J2(s){let n;if("el"in s){const l=s.el,a=typeof l=="string"&&l.startsWith("#"),e=typeof l=="string"?a?document.getElementById(l.slice(1)):document.querySelector(l):l;if(!e)return;n=Z2(e,s)}else n=s;"scrollBehavior"in document.documentElement.style?window.scrollTo(n):window.scrollTo(n.left!=null?n.left:window.pageXOffset,n.top!=null?n.top:window.pageYOffset)}function Dt(s,n){return(history.state?history.state.position-n:-1)+s}const uo=new Map;function sv(s,n){uo.set(s,n)}function nv(s){const n=uo.get(s);return uo.delete(s),n}let lv=()=>location.protocol+"//"+location.host;function Lr(s,n){const{pathname:l,search:a,hash:e}=n,o=s.indexOf("#");if(o>-1){let r=e.includes(s.slice(o))?s.slice(o).length:1,B=e.slice(r);return B[0]!=="/"&&(B="/"+B),Ft(B,"")}return Ft(l,s)+a+e}function av(s,n,l,a){let e=[],o=[],t=null;const r=({state:u})=>{const A=Lr(s,location),F=l.value,_=n.value;let C=0;if(u){if(l.value=A,n.value=u,t&&t===F){t=null;return}C=_?u.position-_.position:0}else a(A);e.forEach(D=>{D(l.value,F,{delta:C,type:ua.pop,direction:C?C>0?pa.forward:pa.back:pa.unknown})})};function B(){t=l.value}function i(u){e.push(u);const A=()=>{const F=e.indexOf(u);F>-1&&e.splice(F,1)};return o.push(A),A}function d(){const{history:u}=window;u.state&&u.replaceState(Fs({},u.state,{scroll:fe()}),"")}function y(){for(const u of o)u();o=[],window.removeEventListener("popstate",r),window.removeEventListener("beforeunload",d)}return window.addEventListener("popstate",r),window.addEventListener("beforeunload",d,{passive:!0}),{pauseListeners:B,listen:i,destroy:y}}function ft(s,n,l,a=!1,e=!1){return{back:s,current:n,forward:l,replaced:a,position:window.history.length,scroll:e?fe():null}}function ev(s){const{history:n,location:l}=window,a={value:Lr(s,l)},e={value:n.state};e.value||o(a.value,{back:null,current:a.value,forward:null,position:n.length-1,replaced:!0,scroll:null},!0);function o(B,i,d){const y=s.indexOf("#"),u=y>-1?(l.host&&document.querySelector("base")?s:s.slice(y))+B:lv()+s+B;try{n[d?"replaceState":"pushState"](i,"",u),e.value=i}catch(A){console.error(A),l[d?"replace":"assign"](u)}}function t(B,i){const d=Fs({},n.state,ft(e.value.back,B,e.value.forward,!0),i,{position:e.value.position});o(B,d,!0),a.value=B}function r(B,i){const d=Fs({},e.value,n.state,{forward:B,scroll:fe()});o(d.current,d,!0);const y=Fs({},ft(a.value,B,null),{position:d.position+1},i);o(B,y,!1),a.value=B}return{location:a,state:e,push:r,replace:t}}function ov(s){s=K2(s);const n=ev(s),l=av(s,n.state,n.location,n.replace);function a(o,t=!0){t||l.pauseListeners(),history.go(o)}const e=Fs({location:"",base:s,go:a,createHref:X2.bind(null,s)},n,l);return Object.defineProperty(e,"location",{enumerable:!0,get:()=>n.location.value}),Object.defineProperty(e,"state",{enumerable:!0,get:()=>n.state.value}),e}function pv(s){return typeof s=="string"||s&&typeof s=="object"}function Tr(s){return typeof s=="string"||typeof s=="symbol"}const wn={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0},Ir=Symbol("");var bt;(function(s){s[s.aborted=4]="aborted",s[s.cancelled=8]="cancelled",s[s.duplicated=16]="duplicated"})(bt||(bt={}));function ql(s,n){return Fs(new Error,{type:s,[Ir]:!0},n)}function In(s,n){return s instanceof Error&&Ir in s&&(n==null||!!(s.type&n))}const _t="[^/]+?",tv={sensitive:!1,strict:!1,start:!0,end:!0},cv=/[.+*?^${}()[\]/\\]/g;function rv(s,n){const l=Fs({},tv,n),a=[];let e=l.start?"^":"";const o=[];for(const i of s){const d=i.length?[]:[90];l.strict&&!i.length&&(e+="/");for(let y=0;y<i.length;y++){const u=i[y];let A=40+(l.sensitive?.25:0);if(u.type===0)y||(e+="/"),e+=u.value.replace(cv,"\\$&"),A+=40;else if(u.type===1){const{value:F,repeatable:_,optional:C,regexp:D}=u;o.push({name:F,repeatable:_,optional:C});const I=D||_t;if(I!==_t){A+=10;try{new RegExp(`(${I})`)}catch(T){throw new Error(`Invalid custom RegExp for param "${F}" (${I}): `+T.message)}}let f=_?`((?:${I})(?:/(?:${I}))*)`:`(${I})`;y||(f=C&&i.length<2?`(?:/${f})`:"/"+f),C&&(f+="?"),e+=f,A+=20,C&&(A+=-8),_&&(A+=-20),I===".*"&&(A+=-50)}d.push(A)}a.push(d)}if(l.strict&&l.end){const i=a.length-1;a[i][a[i].length-1]+=.7000000000000001}l.strict||(e+="/?"),l.end?e+="$":l.strict&&(e+="(?:/|$)");const t=new RegExp(e,l.sensitive?"":"i");function r(i){const d=i.match(t),y={};if(!d)return null;for(let u=1;u<d.length;u++){const A=d[u]||"",F=o[u-1];y[F.name]=A&&F.repeatable?A.split("/"):A}return y}function B(i){let d="",y=!1;for(const u of s){(!y||!d.endsWith("/"))&&(d+="/"),y=!1;for(const A of u)if(A.type===0)d+=A.value;else if(A.type===1){const{value:F,repeatable:_,optional:C}=A,D=F in i?i[F]:"";if(Fn(D)&&!_)throw new Error(`Provided param "${F}" is an array but it is not repeatable (* or + modifiers)`);const I=Fn(D)?D.join("/"):D;if(!I)if(C)u.length<2&&(d.endsWith("/")?d=d.slice(0,-1):y=!0);else throw new Error(`Missing required param "${F}"`);d+=I}}return d||"/"}return{re:t,score:a,keys:o,parse:r,stringify:B}}function iv(s,n){let l=0;for(;l<s.length&&l<n.length;){const a=n[l]-s[l];if(a)return a;l++}return s.length<n.length?s.length===1&&s[0]===80?-1:1:s.length>n.length?n.length===1&&n[0]===80?1:-1:0}function Bv(s,n){let l=0;const a=s.score,e=n.score;for(;l<a.length&&l<e.length;){const o=iv(a[l],e[l]);if(o)return o;l++}if(Math.abs(e.length-a.length)===1){if(ht(a))return 1;if(ht(e))return-1}return e.length-a.length}function ht(s){const n=s[s.length-1];return s.length>0&&n[n.length-1]<0}const dv={type:0,value:""},yv=/[a-zA-Z0-9_]/;function vv(s){if(!s)return[[]];if(s==="/")return[[dv]];if(!s.startsWith("/"))throw new Error(`Invalid path "${s}"`);function n(A){throw new Error(`ERR (${l})/"${i}": ${A}`)}let l=0,a=l;const e=[];let o;function t(){o&&e.push(o),o=[]}let r=0,B,i="",d="";function y(){i&&(l===0?o.push({type:0,value:i}):l===1||l===2||l===3?(o.length>1&&(B==="*"||B==="+")&&n(`A repeatable param (${i}) must be alone in its segment. eg: '/:ids+.`),o.push({type:1,value:i,regexp:d,repeatable:B==="*"||B==="+",optional:B==="*"||B==="?"})):n("Invalid state to consume buffer"),i="")}function u(){i+=B}for(;r<s.length;){if(B=s[r++],B==="\\"&&l!==2){a=l,l=4;continue}switch(l){case 0:B==="/"?(i&&y(),t()):B===":"?(y(),l=1):u();break;case 4:u(),l=a;break;case 1:B==="("?l=2:yv.test(B)?u():(y(),l=0,B!=="*"&&B!=="?"&&B!=="+"&&r--);break;case 2:B===")"?d[d.length-1]=="\\"?d=d.slice(0,-1)+B:l=3:d+=B;break;case 3:y(),l=0,B!=="*"&&B!=="?"&&B!=="+"&&r--,d="";break;default:n("Unknown state");break}}return l===2&&n(`Unfinished custom RegExp for param "${i}"`),y(),t(),e}function uv(s,n,l){const a=rv(vv(s.path),l),e=Fs(a,{record:s,parent:n,children:[],alias:[]});return n&&!e.record.aliasOf==!n.record.aliasOf&&n.children.push(e),e}function Av(s,n){const l=[],a=new Map;n=Lt({strict:!1,end:!0,sensitive:!1},n);function e(d){return a.get(d)}function o(d,y,u){const A=!u,F=mv(d);F.aliasOf=u&&u.record;const _=Lt(n,d),C=[F];if("alias"in d){const f=typeof d.alias=="string"?[d.alias]:d.alias;for(const T of f)C.push(Fs({},F,{components:u?u.record.components:F.components,path:T,aliasOf:u?u.record:F}))}let D,I;for(const f of C){const{path:T}=f;if(y&&T[0]!=="/"){const V=y.record.path,g=V[V.length-1]==="/"?"":"/";f.path=y.record.path+(T&&g+T)}if(D=uv(f,y,_),u?u.alias.push(D):(I=I||D,I!==D&&I.alias.push(D),A&&d.name&&!gt(D)&&t(d.name)),F.children){const V=F.children;for(let g=0;g<V.length;g++)o(V[g],D,u&&u.children[g])}u=u||D,(D.record.components&&Object.keys(D.record.components).length||D.record.name||D.record.redirect)&&B(D)}return I?()=>{t(I)}:oa}function t(d){if(Tr(d)){const y=a.get(d);y&&(a.delete(d),l.splice(l.indexOf(y),1),y.children.forEach(t),y.alias.forEach(t))}else{const y=l.indexOf(d);y>-1&&(l.splice(y,1),d.record.name&&a.delete(d.record.name),d.children.forEach(t),d.alias.forEach(t))}}function r(){return l}function B(d){let y=0;for(;y<l.length&&Bv(d,l[y])>=0&&(d.record.path!==l[y].record.path||!Or(d,l[y]));)y++;l.splice(y,0,d),d.record.name&&!gt(d)&&a.set(d.record.name,d)}function i(d,y){let u,A={},F,_;if("name"in d&&d.name){if(u=a.get(d.name),!u)throw ql(1,{location:d});_=u.record.name,A=Fs(Ct(y.params,u.keys.filter(I=>!I.optional).map(I=>I.name)),d.params&&Ct(d.params,u.keys.map(I=>I.name))),F=u.stringify(A)}else if("path"in d)F=d.path,u=l.find(I=>I.re.test(F)),u&&(A=u.parse(F),_=u.record.name);else{if(u=y.name?a.get(y.name):l.find(I=>I.re.test(y.path)),!u)throw ql(1,{location:d,currentLocation:y});_=u.record.name,A=Fs({},y.params,d.params),F=u.stringify(A)}const C=[];let D=u;for(;D;)C.unshift(D.record),D=D.parent;return{name:_,path:F,params:A,matched:C,meta:Ev(C)}}return s.forEach(d=>o(d)),{addRoute:o,resolve:i,removeRoute:t,getRoutes:r,getRecordMatcher:e}}function Ct(s,n){const l={};for(const a of n)a in s&&(l[a]=s[a]);return l}function mv(s){return{path:s.path,redirect:s.redirect,name:s.name,meta:s.meta||{},aliasOf:void 0,beforeEnter:s.beforeEnter,props:Fv(s),children:s.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in s?s.components||null:s.component&&{default:s.component}}}function Fv(s){const n={},l=s.props||!1;if("component"in s)n.default=l;else for(const a in s.components)n[a]=typeof l=="object"?l[a]:l;return n}function gt(s){for(;s;){if(s.record.aliasOf)return!0;s=s.parent}return!1}function Ev(s){return s.reduce((n,l)=>Fs(n,l.meta),{})}function Lt(s,n){const l={};for(const a in s)l[a]=a in n?n[a]:s[a];return l}function Or(s,n){return n.children.some(l=>l===s||Or(s,l))}const kr=/#/g,Dv=/&/g,fv=/\//g,bv=/=/g,_v=/\?/g,wr=/\+/g,hv=/%5B/g,Cv=/%5D/g,Sr=/%5E/g,gv=/%60/g,Pr=/%7B/g,Lv=/%7C/g,xr=/%7D/g,Tv=/%20/g;function lp(s){return encodeURI(""+s).replace(Lv,"|").replace(hv,"[").replace(Cv,"]")}function Iv(s){return lp(s).replace(Pr,"{").replace(xr,"}").replace(Sr,"^")}function Ao(s){return lp(s).replace(wr,"%2B").replace(Tv,"+").replace(kr,"%23").replace(Dv,"%26").replace(gv,"`").replace(Pr,"{").replace(xr,"}").replace(Sr,"^")}function Ov(s){return Ao(s).replace(bv,"%3D")}function kv(s){return lp(s).replace(kr,"%23").replace(_v,"%3F")}function wv(s){return s==null?"":kv(s).replace(fv,"%2F")}function ie(s){try{return decodeURIComponent(""+s)}catch{}return""+s}function Sv(s){const n={};if(s===""||s==="?")return n;const a=(s[0]==="?"?s.slice(1):s).split("&");for(let e=0;e<a.length;++e){const o=a[e].replace(wr," "),t=o.indexOf("="),r=ie(t<0?o:o.slice(0,t)),B=t<0?null:ie(o.slice(t+1));if(r in n){let i=n[r];Fn(i)||(i=n[r]=[i]),i.push(B)}else n[r]=B}return n}function Tt(s){let n="";for(let l in s){const a=s[l];if(l=Ov(l),a==null){a!==void 0&&(n+=(n.length?"&":"")+l);continue}(Fn(a)?a.map(o=>o&&Ao(o)):[a&&Ao(a)]).forEach(o=>{o!==void 0&&(n+=(n.length?"&":"")+l,o!=null&&(n+="="+o))})}return n}function Pv(s){const n={};for(const l in s){const a=s[l];a!==void 0&&(n[l]=Fn(a)?a.map(e=>e==null?null:""+e):a==null?a:""+a)}return n}const xv=Symbol(""),It=Symbol(""),be=Symbol(""),ap=Symbol(""),mo=Symbol("");function Yl(){let s=[];function n(a){return s.push(a),()=>{const e=s.indexOf(a);e>-1&&s.splice(e,1)}}function l(){s=[]}return{add:n,list:()=>s.slice(),reset:l}}function Kn(s,n,l,a,e){const o=a&&(a.enterCallbacks[e]=a.enterCallbacks[e]||[]);return()=>new Promise((t,r)=>{const B=y=>{y===!1?r(ql(4,{from:l,to:n})):y instanceof Error?r(y):pv(y)?r(ql(2,{from:n,to:y})):(o&&a.enterCallbacks[e]===o&&typeof y=="function"&&o.push(y),t())},i=s.call(a&&a.instances[e],n,l,B);let d=Promise.resolve(i);s.length<3&&(d=d.then(B)),d.catch(y=>r(y))})}function ze(s,n,l,a){const e=[];for(const o of s)for(const t in o.components){let r=o.components[t];if(!(n!=="beforeRouteEnter"&&!o.instances[t]))if(Rv(r)){const i=(r.__vccOpts||r)[n];i&&e.push(Kn(i,l,a,o,t))}else{let B=r();e.push(()=>B.then(i=>{if(!i)return Promise.reject(new Error(`Couldn't resolve component "${t}" at "${o.path}"`));const d=z2(i)?i.default:i;o.components[t]=d;const u=(d.__vccOpts||d)[n];return u&&Kn(u,l,a,o,t)()}))}}return e}function Rv(s){return typeof s=="object"||"displayName"in s||"props"in s||"__vccOpts"in s}function Fo(s){const n=us(be),l=us(ap),a=h(()=>n.resolve(dl(s.to))),e=h(()=>{const{matched:B}=a.value,{length:i}=B,d=B[i-1],y=l.matched;if(!d||!y.length)return-1;const u=y.findIndex(Ml.bind(null,d));if(u>-1)return u;const A=Ot(B[i-2]);return i>1&&Ot(d)===A&&y[y.length-1].path!==A?y.findIndex(Ml.bind(null,B[i-2])):u}),o=h(()=>e.value>-1&&Nv(l.params,a.value.params)),t=h(()=>e.value>-1&&e.value===l.matched.length-1&&gr(l.params,a.value.params));function r(B={}){return qv(B)?n[dl(s.replace)?"replace":"push"](dl(s.to)).catch(oa):Promise.resolve()}return{route:a,href:h(()=>a.value.href),isActive:o,isExactActive:t,navigate:r}}const Vv=R({name:"RouterLink",compatConfig:{MODE:3},props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},useLink:Fo,setup(s,{slots:n}){const l=Da(Fo(s)),{options:a}=us(be),e=h(()=>({[kt(s.activeClass,a.linkActiveClass,"router-link-active")]:l.isActive,[kt(s.exactActiveClass,a.linkExactActiveClass,"router-link-exact-active")]:l.isExactActive}));return()=>{const o=n.default&&n.default(l);return s.custom?o:c("a",{"aria-current":l.isExactActive?s.ariaCurrentValue:null,href:l.href,onClick:l.navigate,class:e.value},o)}}}),Mv=Vv;function qv(s){if(!(s.metaKey||s.altKey||s.ctrlKey||s.shiftKey)&&!s.defaultPrevented&&!(s.button!==void 0&&s.button!==0)){if(s.currentTarget&&s.currentTarget.getAttribute){const n=s.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(n))return}return s.preventDefault&&s.preventDefault(),!0}}function Nv(s,n){for(const l in n){const a=n[l],e=s[l];if(typeof a=="string"){if(a!==e)return!1}else if(!Fn(e)||e.length!==a.length||a.some((o,t)=>o!==e[t]))return!1}return!0}function Ot(s){return s?s.aliasOf?s.aliasOf.path:s.path:""}const kt=(s,n,l)=>s??n??l,$v=R({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},compatConfig:{MODE:3},setup(s,{attrs:n,slots:l}){const a=us(mo),e=h(()=>s.route||a.value),o=us(It,0),t=h(()=>{let i=dl(o);const{matched:d}=e.value;let y;for(;(y=d[i])&&!y.components;)i++;return i}),r=h(()=>e.value.matched[t.value]);rn(It,h(()=>t.value+1)),rn(xv,r),rn(mo,e);const B=G();return rs(()=>[B.value,r.value,s.name],([i,d,y],[u,A,F])=>{d&&(d.instances[y]=i,A&&A!==d&&i&&i===u&&(d.leaveGuards.size||(d.leaveGuards=A.leaveGuards),d.updateGuards.size||(d.updateGuards=A.updateGuards))),i&&d&&(!A||!Ml(d,A)||!u)&&(d.enterCallbacks[y]||[]).forEach(_=>_(i))},{flush:"post"}),()=>{const i=e.value,d=s.name,y=r.value,u=y&&y.components[d];if(!u)return wt(l.default,{Component:u,route:i});const A=y.props[d],F=A?A===!0?i.params:typeof A=="function"?A(i):A:null,C=c(u,Fs({},F,n,{onVnodeUnmounted:D=>{D.component.isUnmounted&&(y.instances[d]=null)},ref:B}));return wt(l.default,{Component:C,route:i})||C}}});function wt(s,n){if(!s)return null;const l=s(n);return l.length===1?l[0]:l}const Rr=$v;function zv(s){const n=Av(s.routes,s),l=s.parseQuery||Sv,a=s.stringifyQuery||Tt,e=s.history,o=Yl(),t=Yl(),r=Yl(),B=Ms(wn);let i=wn;bl&&s.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const d=Ne.bind(null,O=>""+O),y=Ne.bind(null,wv),u=Ne.bind(null,ie);function A(O,H){let M,Y;return Tr(O)?(M=n.getRecordMatcher(O),Y=H):Y=O,n.addRoute(Y,M)}function F(O){const H=n.getRecordMatcher(O);H&&n.removeRoute(H)}function _(){return n.getRoutes().map(O=>O.record)}function C(O){return!!n.getRecordMatcher(O)}function D(O,H){if(H=Fs({},H||B.value),typeof O=="string"){const b=$e(l,O,H.path),L=n.resolve({path:b.path},H),k=e.createHref(b.fullPath);return Fs(b,L,{params:u(L.params),hash:ie(b.hash),redirectedFrom:void 0,href:k})}let M;if("path"in O)M=Fs({},O,{path:$e(l,O.path,H.path).path});else{const b=Fs({},O.params);for(const L in b)b[L]==null&&delete b[L];M=Fs({},O,{params:y(b)}),H.params=y(H.params)}const Y=n.resolve(M,H),ds=O.hash||"";Y.params=d(u(Y.params));const m=j2(a,Fs({},O,{hash:Iv(ds),path:Y.path})),E=e.createHref(m);return Fs({fullPath:m,hash:ds,query:a===Tt?Pv(O.query):O.query||{}},Y,{redirectedFrom:void 0,href:E})}function I(O){return typeof O=="string"?$e(l,O,B.value.path):Fs({},O)}function f(O,H){if(i!==O)return ql(8,{from:H,to:O})}function T(O){return W(O)}function V(O){return T(Fs(I(O),{replace:!0}))}function g(O){const H=O.matched[O.matched.length-1];if(H&&H.redirect){const{redirect:M}=H;let Y=typeof M=="function"?M(O):M;return typeof Y=="string"&&(Y=Y.includes("?")||Y.includes("#")?Y=I(Y):{path:Y},Y.params={}),Fs({query:O.query,hash:O.hash,params:"path"in Y?{}:O.params},Y)}}function W(O,H){const M=i=D(O),Y=B.value,ds=O.state,m=O.force,E=O.replace===!0,b=g(M);if(b)return W(Fs(I(b),{state:typeof b=="object"?Fs({},ds,b.state):ds,force:m,replace:E}),H||M);const L=M;L.redirectedFrom=H;let k;return!m&&G2(a,Y,M)&&(k=ql(16,{to:L,from:Y}),ln(Y,Y,!0,!1)),(k?Promise.resolve(k):$(L,Y)).catch(w=>In(w)?In(w,2)?w:fn(w):K(w,L,Y)).then(w=>{if(w){if(In(w,2))return W(Fs({replace:E},I(w.to),{state:typeof w.to=="object"?Fs({},ds,w.to.state):ds,force:m}),H||L)}else w=z(L,Y,!0,E,ds);return X(L,Y,w),w})}function N(O,H){const M=f(O,H);return M?Promise.reject(M):Promise.resolve()}function P(O){const H=Tn.values().next().value;return H&&typeof H.runWithContext=="function"?H.runWithContext(O):O()}function $(O,H){let M;const[Y,ds,m]=Qv(O,H);M=ze(Y.reverse(),"beforeRouteLeave",O,H);for(const b of Y)b.leaveGuards.forEach(L=>{M.push(Kn(L,O,H))});const E=N.bind(null,O,H);return M.push(E),Ss(M).then(()=>{M=[];for(const b of o.list())M.push(Kn(b,O,H));return M.push(E),Ss(M)}).then(()=>{M=ze(ds,"beforeRouteUpdate",O,H);for(const b of ds)b.updateGuards.forEach(L=>{M.push(Kn(L,O,H))});return M.push(E),Ss(M)}).then(()=>{M=[];for(const b of m)if(b.beforeEnter)if(Fn(b.beforeEnter))for(const L of b.beforeEnter)M.push(Kn(L,O,H));else M.push(Kn(b.beforeEnter,O,H));return M.push(E),Ss(M)}).then(()=>(O.matched.forEach(b=>b.enterCallbacks={}),M=ze(m,"beforeRouteEnter",O,H),M.push(E),Ss(M))).then(()=>{M=[];for(const b of t.list())M.push(Kn(b,O,H));return M.push(E),Ss(M)}).catch(b=>In(b,8)?b:Promise.reject(b))}function X(O,H,M){r.list().forEach(Y=>P(()=>Y(O,H,M)))}function z(O,H,M,Y,ds){const m=f(O,H);if(m)return m;const E=H===wn,b=bl?history.state:{};M&&(Y||E?e.replace(O.fullPath,Fs({scroll:E&&b&&b.scroll},ds)):e.push(O.fullPath,ds)),B.value=O,ln(O,H,M,E),fn()}let ns;function Ls(){ns||(ns=e.listen((O,H,M)=>{if(!bn.listening)return;const Y=D(O),ds=g(Y);if(ds){W(Fs(ds,{replace:!0}),Y).catch(oa);return}i=Y;const m=B.value;bl&&sv(Dt(m.fullPath,M.delta),fe()),$(Y,m).catch(E=>In(E,12)?E:In(E,2)?(W(E.to,Y).then(b=>{In(b,20)&&!M.delta&&M.type===ua.pop&&e.go(-1,!1)}).catch(oa),Promise.reject()):(M.delta&&e.go(-M.delta,!1),K(E,Y,m))).then(E=>{E=E||z(Y,m,!1),E&&(M.delta&&!In(E,8)?e.go(-M.delta,!1):M.type===ua.pop&&In(E,20)&&e.go(-1,!1)),X(Y,m,E)}).catch(oa)}))}let hs=Yl(),U=Yl(),ls;function K(O,H,M){fn(O);const Y=U.list();return Y.length?Y.forEach(ds=>ds(O,H,M)):console.error(O),Promise.reject(O)}function ws(){return ls&&B.value!==wn?Promise.resolve():new Promise((O,H)=>{hs.add([O,H])})}function fn(O){return ls||(ls=!O,Ls(),hs.list().forEach(([H,M])=>O?M(O):H()),hs.reset()),O}function ln(O,H,M,Y){const{scrollBehavior:ds}=s;if(!bl||!ds)return Promise.resolve();const m=!M&&nv(Dt(O.fullPath,0))||(Y||!M)&&history.state&&history.state.scroll||null;return Vn().then(()=>ds(O,H,m)).then(E=>E&&J2(E)).catch(E=>K(E,O,H))}const xs=O=>e.go(O);let Ks;const Tn=new Set,bn={currentRoute:B,listening:!0,addRoute:A,removeRoute:F,hasRoute:C,getRoutes:_,resolve:D,options:s,push:T,replace:V,go:xs,back:()=>xs(-1),forward:()=>xs(1),beforeEach:o.add,beforeResolve:t.add,afterEach:r.add,onError:U.add,isReady:ws,install(O){const H=this;O.component("RouterLink",Mv),O.component("RouterView",Rr),O.config.globalProperties.$router=H,Object.defineProperty(O.config.globalProperties,"$route",{enumerable:!0,get:()=>dl(B)}),bl&&!Ks&&B.value===wn&&(Ks=!0,T(e.location).catch(ds=>{}));const M={};for(const ds in wn)Object.defineProperty(M,ds,{get:()=>B.value[ds],enumerable:!0});O.provide(be,H),O.provide(ap,_c(M)),O.provide(mo,B);const Y=O.unmount;Tn.add(O),O.unmount=function(){Tn.delete(O),Tn.size<1&&(i=wn,ns&&ns(),ns=null,B.value=wn,Ks=!1,ls=!1),Y()}}};function Ss(O){return O.reduce((H,M)=>H.then(()=>P(M)),Promise.resolve())}return bn}function Qv(s,n){const l=[],a=[],e=[],o=Math.max(n.matched.length,s.matched.length);for(let t=0;t<o;t++){const r=n.matched[t];r&&(s.matched.find(i=>Ml(i,r))?a.push(r):l.push(r));const B=s.matched[t];B&&(n.matched.find(i=>Ml(i,B))||e.push(B))}return[l,a,e]}function Hs(){return us(be)}function Ln(){return us(ap)}var zs=Uint8Array,gl=Uint16Array,Hv=Int32Array,Vr=new zs([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),Mr=new zs([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),jv=new zs([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),qr=function(s,n){for(var l=new gl(31),a=0;a<31;++a)l[a]=n+=1<<s[a-1];for(var e=new Hv(l[30]),a=1;a<30;++a)for(var o=l[a];o<l[a+1];++o)e[o]=o-l[a]<<5|a;return{b:l,r:e}},Nr=qr(Vr,2),$r=Nr.b,Gv=Nr.r;$r[28]=258,Gv[258]=28;var Uv=qr(Mr,0),Wv=Uv.b,Eo=new gl(32768);for(var bs=0;bs<32768;++bs){var Qn=(bs&43690)>>1|(bs&21845)<<1;Qn=(Qn&52428)>>2|(Qn&13107)<<2,Qn=(Qn&61680)>>4|(Qn&3855)<<4,Eo[bs]=((Qn&65280)>>8|(Qn&255)<<8)>>1}var ta=function(s,n,l){for(var a=s.length,e=0,o=new gl(n);e<a;++e)s[e]&&++o[s[e]-1];var t=new gl(n);for(e=1;e<n;++e)t[e]=t[e-1]+o[e-1]<<1;var r;if(l){r=new gl(1<<n);var B=15-n;for(e=0;e<a;++e)if(s[e])for(var i=e<<4|s[e],d=n-s[e],y=t[s[e]-1]++<<d,u=y|(1<<d)-1;y<=u;++y)r[Eo[y]>>B]=i}else for(r=new gl(a),e=0;e<a;++e)s[e]&&(r[e]=Eo[t[s[e]-1]++]>>15-s[e]);return r},Ca=new zs(288);for(var bs=0;bs<144;++bs)Ca[bs]=8;for(var bs=144;bs<256;++bs)Ca[bs]=9;for(var bs=256;bs<280;++bs)Ca[bs]=7;for(var bs=280;bs<288;++bs)Ca[bs]=8;var zr=new zs(32);for(var bs=0;bs<32;++bs)zr[bs]=5;var Kv=ta(Ca,9,1),Yv=ta(zr,5,1),Qe=function(s){for(var n=s[0],l=1;l<s.length;++l)s[l]>n&&(n=s[l]);return n},un=function(s,n,l){var a=n/8|0;return(s[a]|s[a+1]<<8)>>(n&7)&l},He=function(s,n){var l=n/8|0;return(s[l]|s[l+1]<<8|s[l+2]<<16)>>(n&7)},Xv=function(s){return(s+7)/8|0},ep=function(s,n,l){return(n==null||n<0)&&(n=0),(l==null||l>s.length)&&(l=s.length),new zs(s.subarray(n,l))},Zv=["unexpected EOF","invalid block type","invalid length/literal","invalid distance","stream finished","no stream handler",,"no callback","invalid UTF-8 data","extra field too long","date not in range 1980-2099","filename too long","stream finishing","invalid zip data"],on=function(s,n,l){var a=new Error(n||Zv[s]);if(a.code=s,Error.captureStackTrace&&Error.captureStackTrace(a,on),!l)throw a;return a},Jv=function(s,n,l,a){var e=s.length,o=a?a.length:0;if(!e||n.f&&!n.l)return l||new zs(0);var t=!l,r=t||n.i!=2,B=n.i;t&&(l=new zs(e*3));var i=function(ds){var m=l.length;if(ds>m){var E=new zs(Math.max(m*2,ds));E.set(l),l=E}},d=n.f||0,y=n.p||0,u=n.b||0,A=n.l,F=n.d,_=n.m,C=n.n,D=e*8;do{if(!A){d=un(s,y,1);var I=un(s,y+1,3);if(y+=3,I)if(I==1)A=Kv,F=Yv,_=9,C=5;else if(I==2){var g=un(s,y,31)+257,W=un(s,y+10,15)+4,N=g+un(s,y+5,31)+1;y+=14;for(var P=new zs(N),$=new zs(19),X=0;X<W;++X)$[jv[X]]=un(s,y+X*3,7);y+=W*3;for(var z=Qe($),ns=(1<<z)-1,Ls=ta($,z,1),X=0;X<N;){var hs=Ls[un(s,y,ns)];y+=hs&15;var f=hs>>4;if(f<16)P[X++]=f;else{var U=0,ls=0;for(f==16?(ls=3+un(s,y,3),y+=2,U=P[X-1]):f==17?(ls=3+un(s,y,7),y+=3):f==18&&(ls=11+un(s,y,127),y+=7);ls--;)P[X++]=U}}var K=P.subarray(0,g),ws=P.subarray(g);_=Qe(K),C=Qe(ws),A=ta(K,_,1),F=ta(ws,C,1)}else on(1);else{var f=Xv(y)+4,T=s[f-4]|s[f-3]<<8,V=f+T;if(V>e){B&&on(0);break}r&&i(u+T),l.set(s.subarray(f,V),u),n.b=u+=T,n.p=y=V*8,n.f=d;continue}if(y>D){B&&on(0);break}}r&&i(u+131072);for(var fn=(1<<_)-1,ln=(1<<C)-1,xs=y;;xs=y){var U=A[He(s,y)&fn],Ks=U>>4;if(y+=U&15,y>D){B&&on(0);break}if(U||on(2),Ks<256)l[u++]=Ks;else if(Ks==256){xs=y,A=null;break}else{var Tn=Ks-254;if(Ks>264){var X=Ks-257,bn=Vr[X];Tn=un(s,y,(1<<bn)-1)+$r[X],y+=bn}var Ss=F[He(s,y)&ln],O=Ss>>4;Ss||on(3),y+=Ss&15;var ws=Wv[O];if(O>3){var bn=Mr[O];ws+=He(s,y)&(1<<bn)-1,y+=bn}if(y>D){B&&on(0);break}r&&i(u+131072);var H=u+Tn;if(u<ws){var M=o-ws,Y=Math.min(ws,H);for(M+u<0&&on(3);u<Y;++u)l[u]=a[M+u]}for(;u<H;++u)l[u]=l[u-ws]}}n.l=A,n.p=xs,n.b=u,n.f=d,A&&(d=1,n.m=_,n.d=F,n.n=C)}while(!d);return u!=l.length&&t?ep(l,0,u):l.subarray(0,u)},su=new zs(0),nu=function(s,n){return((s[0]&15)!=8||s[0]>>4>7||(s[0]<<8|s[1])%31)&&on(6,"invalid zlib data"),(s[1]>>5&1)==+!n&&on(6,"invalid zlib data: "+(s[1]&32?"need":"unexpected")+" dictionary"),(s[1]>>3&4)+2};function lu(s,n){return Jv(s.subarray(nu(s,n&&n.dictionary),-4),{i:2},n&&n.out,n&&n.dictionary)}var St=typeof TextEncoder<"u"&&new TextEncoder,Do=typeof TextDecoder<"u"&&new TextDecoder,au=0;try{Do.decode(su,{stream:!0}),au=1}catch{}var eu=function(s){for(var n="",l=0;;){var a=s[l++],e=(a>127)+(a>223)+(a>239);if(l+e>s.length)return{s:n,r:ep(s,l-1)};e?e==3?(a=((a&15)<<18|(s[l++]&63)<<12|(s[l++]&63)<<6|s[l++]&63)-65536,n+=String.fromCharCode(55296|a>>10,56320|a&1023)):e&1?n+=String.fromCharCode((a&31)<<6|s[l++]&63):n+=String.fromCharCode((a&15)<<12|(s[l++]&63)<<6|s[l++]&63):n+=String.fromCharCode(a)}};function ou(s,n){if(n){for(var l=new zs(s.length),a=0;a<s.length;++a)l[a]=s.charCodeAt(a);return l}if(St)return St.encode(s);for(var e=s.length,o=new zs(s.length+(s.length>>1)),t=0,r=function(d){o[t++]=d},a=0;a<e;++a){if(t+5>o.length){var B=new zs(t+8+(e-a<<1));B.set(o),o=B}var i=s.charCodeAt(a);i<128||n?r(i):i<2048?(r(192|i>>6),r(128|i&63)):i>55295&&i<57344?(i=65536+(i&1047552)|s.charCodeAt(++a)&1023,r(240|i>>18),r(128|i>>12&63),r(128|i>>6&63),r(128|i&63)):(r(224|i>>12),r(128|i>>6&63),r(128|i&63))}return ep(o,0,t)}function pu(s,n){if(n){for(var l="",a=0;a<s.length;a+=16384)l+=String.fromCharCode.apply(null,s.subarray(a,a+16384));return l}else{if(Do)return Do.decode(s);var e=eu(s),o=e.s,l=e.r;return l.length&&on(8),o}}const os=({name:s="",color:n="currentColor"},{slots:l})=>{var a;return c("svg",{xmlns:"http://www.w3.org/2000/svg",class:["icon",`${s}-icon`],viewBox:"0 0 1024 1024",fill:n,"aria-label":`${s} icon`},(a=l.default)==null?void 0:a.call(l))};os.displayName="IconBase";const Qr=({size:s=48,stroke:n=4,wrapper:l=!0,height:a=2*s})=>{const e=c("svg",{xmlns:"http://www.w3.org/2000/svg",width:s,height:s,preserveAspectRatio:"xMidYMid",viewBox:"25 25 50 50"},[c("animateTransform",{attributeName:"transform",type:"rotate",dur:"2s",keyTimes:"0;1",repeatCount:"indefinite",values:"0;360"}),c("circle",{cx:"50",cy:"50",r:"20",fill:"none",stroke:"currentColor","stroke-width":n,"stroke-linecap":"round"},[c("animate",{attributeName:"stroke-dasharray",dur:"1.5s",keyTimes:"0;0.5;1",repeatCount:"indefinite",values:"1,200;90,200;1,200"}),c("animate",{attributeName:"stroke-dashoffset",dur:"1.5s",keyTimes:"0;0.5;1",repeatCount:"indefinite",values:"0;-35px;-125px"})])]);return l?c("div",{class:"loading-icon-wrapper",style:`display:flex;align-items:center;justify-content:center;height:${a}px`},e):e};Qr.displayName="LoadingIcon";const Hr=(s,{slots:n})=>{var l;return(l=n.default)==null?void 0:l.call(n)},tu=s=>[/\((ipad);[-\w),; ]+apple/i,/applecoremedia\/[\w.]+ \((ipad)/i,/\b(ipad)\d\d?,\d\d?[;\]].+ios/i].some(n=>n.test(s)),cu=s=>[/ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,/cfnetwork\/.+darwin/i].some(n=>n.test(s)),ru=s=>[/(mac os x) ?([\w. ]*)/i,/(macintosh|mac_powerpc\b)(?!.+haiku)/i].some(n=>n.test(s)),op=(s="")=>{if(s){if(typeof s=="number")return new Date(s);const n=Date.parse(s.toString());if(!Number.isNaN(n))return new Date(n)}return null},_e=(s,n)=>{let l=1;for(let a=0;a<s.length;a++)l+=s.charCodeAt(a),l+=l<<10,l^=l>>6;return l+=l<<3,l^=l>>11,l%n},jr=Array.isArray,iu=s=>typeof s=="function",Bu=s=>typeof s=="string";var pp=s=>/^(https?:)?\/\//.test(s),du=/.md((\?|#).*)?$/,yu=(s,n="/")=>!!(pp(s)||s.startsWith("/")&&!s.startsWith(n)&&!du.test(s)),Gr=s=>Object.prototype.toString.call(s)==="[object Object]";function vu(){const s=G(!1);return jl()&&ms(()=>{s.value=!0}),s}function uu(s){return vu(),h(()=>!!s())}const je=s=>typeof s=="number",Rn=s=>typeof s=="string",nl=(s,n)=>Rn(s)&&s.startsWith(n),ja=(s,n)=>Rn(s)&&s.endsWith(n),Ul=Object.entries,Au=Object.fromEntries,nn=Object.keys,mu=s=>(s.endsWith(".md")&&(s=`${s.slice(0,-3)}.html`),!s.endsWith("/")&&!s.endsWith(".html")&&(s=`${s}.html`),s=s.replace(/(^|\/)(?:README|index).html$/i,"$1"),s),Ur=s=>{const[n,l=""]=s.split("#");return n?`${mu(n)}${l?`#${l}`:""}`:s},Pt=s=>Gr(s)&&Rn(s.name),Aa=(s,n=!1)=>s?jr(s)?s.map(l=>Rn(l)?{name:l}:Pt(l)?l:null).filter(l=>l!==null):Rn(s)?[{name:s}]:Pt(s)?[s]:(console.error(`Expect "author" to be \`AuthorInfo[] | AuthorInfo | string[] | string ${n?"":"| false"} | undefined\`, but got`,s),[]):[],Wr=(s,n)=>{if(s){if(jr(s)&&s.every(Rn))return s;if(Rn(s))return[s];console.error(`Expect ${n||"value"} to be \`string[] | string | undefined\`, but got`,s)}return[]},Kr=s=>Wr(s,"category"),Yr=s=>Wr(s,"tag"),ga=s=>nl(s,"/");let Fu=class{constructor(){this.messageElements={};const n="message-container",l=document.getElementById(n);l?this.containerElement=l:(this.containerElement=document.createElement("div"),this.containerElement.id=n,document.body.appendChild(this.containerElement))}pop(n,l=2e3){const a=document.createElement("div"),e=Date.now();return a.className="message move-in",a.innerHTML=n,this.containerElement.appendChild(a),this.messageElements[e]=a,l>0&&setTimeout(()=>{this.close(e)},l),e}close(n){if(n){const l=this.messageElements[n];l.classList.remove("move-in"),l.classList.add("move-out"),l.addEventListener("animationend",()=>{l.remove(),delete this.messageElements[n]})}else nn(this.messageElements).forEach(l=>this.close(Number(l)))}destroy(){document.body.removeChild(this.containerElement)}};const Xr=/#.*$/u,Eu=s=>{const n=Xr.exec(s);return n?n[0]:""},xt=s=>decodeURI(s).replace(Xr,"").replace(/(index)?\.html$/i,"").replace(/(README|index)?\.md$/i,""),Zr=(s,n)=>{if(n===void 0)return!1;const l=xt(s.path),a=xt(n),e=Eu(n);return e?e===s.hash&&(!a||l===a):l===a},Rt=s=>{const n=atob(s);return pu(lu(ou(n,!0)))},Du=s=>pp(s)?s:`https://github.com/${s}`,Jr=s=>!pp(s)||/github\.com/.test(s)?"GitHub":/bitbucket\.org/.test(s)?"Bitbucket":/gitlab\.com/.test(s)?"GitLab":/gitee\.com/.test(s)?"Gitee":null,Nl=(s,...n)=>{const l=s.resolve(...n),a=l.matched[l.matched.length-1];if(!(a!=null&&a.redirect))return l;const{redirect:e}=a,o=iu(e)?e(l):e,t=Bu(o)?{path:o}:o;return Nl(s,{hash:l.hash,query:l.query,params:l.params,...t})},fu=s=>{var n;if(!(s.metaKey||s.altKey||s.ctrlKey||s.shiftKey)&&!s.defaultPrevented&&!(s.button!==void 0&&s.button!==0)&&!(s.currentTarget&&((n=s.currentTarget.getAttribute("target"))!=null&&n.match(/\b_blank\b/i))))return s.preventDefault(),!0},ks=({to:s="",class:n="",...l},{slots:a})=>{var r;const e=Hs(),o=Ur(s),t=(B={})=>fu(B)?e.push(s).catch():Promise.resolve();return c("a",{...l,class:["vp-link",n],href:nl(o,"/")?_s(o):o,onClick:t},(r=a.default)==null?void 0:r.call(a))};ks.displayName="VPLink";const si=()=>c(os,{name:"github"},()=>c("path",{d:"M511.957 21.333C241.024 21.333 21.333 240.981 21.333 512c0 216.832 140.544 400.725 335.574 465.664 24.49 4.395 32.256-10.07 32.256-23.083 0-11.69.256-44.245 0-85.205-136.448 29.61-164.736-64.64-164.736-64.64-22.315-56.704-54.4-71.765-54.4-71.765-44.587-30.464 3.285-29.824 3.285-29.824 49.195 3.413 75.179 50.517 75.179 50.517 43.776 75.008 114.816 53.333 142.762 40.79 4.523-31.66 17.152-53.377 31.19-65.537-108.971-12.458-223.488-54.485-223.488-242.602 0-53.547 19.114-97.323 50.517-131.67-5.035-12.33-21.93-62.293 4.779-129.834 0 0 41.258-13.184 134.912 50.346a469.803 469.803 0 0 1 122.88-16.554c41.642.213 83.626 5.632 122.88 16.554 93.653-63.488 134.784-50.346 134.784-50.346 26.752 67.541 9.898 117.504 4.864 129.834 31.402 34.347 50.474 78.123 50.474 131.67 0 188.586-114.73 230.016-224.042 242.09 17.578 15.232 33.578 44.672 33.578 90.454v135.85c0 13.142 7.936 27.606 32.854 22.87C862.25 912.597 1002.667 728.747 1002.667 512c0-271.019-219.648-490.667-490.71-490.667z"}));si.displayName="GitHubIcon";const ni=()=>c(os,{name:"gitlab"},()=>c("path",{d:"M229.333 78.688C223.52 62 199.895 62 193.895 78.688L87.958 406.438h247.5c-.188 0-106.125-327.75-106.125-327.75zM33.77 571.438c-4.875 15 .563 31.687 13.313 41.25l464.812 345L87.77 406.438zm301.5-165 176.813 551.25 176.812-551.25zm655.125 165-54-165-424.312 551.25 464.812-345c12.938-9.563 18.188-26.25 13.5-41.25zM830.27 78.688c-5.812-16.688-29.437-16.688-35.437 0l-106.125 327.75h247.5z"}));ni.displayName="GitLabIcon";const li=()=>c(os,{name:"gitee"},()=>c("path",{d:"M512 992C246.92 992 32 777.08 32 512S246.92 32 512 32s480 214.92 480 480-214.92 480-480 480zm242.97-533.34H482.39a23.7 23.7 0 0 0-23.7 23.7l-.03 59.28c0 13.08 10.59 23.7 23.7 23.7h165.96a23.7 23.7 0 0 1 23.7 23.7v11.85a71.1 71.1 0 0 1-71.1 71.1H375.71a23.7 23.7 0 0 1-23.7-23.7V423.11a71.1 71.1 0 0 1 71.1-71.1h331.8a23.7 23.7 0 0 0 23.7-23.7l.06-59.25a23.73 23.73 0 0 0-23.7-23.73H423.11a177.78 177.78 0 0 0-177.78 177.75v331.83c0 13.08 10.62 23.7 23.7 23.7h349.62a159.99 159.99 0 0 0 159.99-159.99V482.33a23.7 23.7 0 0 0-23.7-23.7z"}));li.displayName="GiteeIcon";const ai=()=>c(os,{name:"bitbucket"},()=>c("path",{d:"M575.256 490.862c6.29 47.981-52.005 85.723-92.563 61.147-45.714-20.004-45.714-92.562-1.133-113.152 38.29-23.442 93.696 7.424 93.696 52.005zm63.451-11.996c-10.276-81.152-102.29-134.839-177.152-101.156-47.433 21.138-79.433 71.424-77.129 124.562 2.853 69.705 69.157 126.866 138.862 120.576S647.3 548.571 638.708 478.83zm136.558-309.723c-25.161-33.134-67.986-38.839-105.728-45.13-106.862-17.151-216.576-17.7-323.438 1.134-35.438 5.706-75.447 11.996-97.719 43.996 36.572 34.304 88.576 39.424 135.424 45.129 84.553 10.862 171.447 11.447 256 .585 47.433-5.705 99.987-10.276 135.424-45.714zm32.585 591.433c-16.018 55.99-6.839 131.438-66.304 163.986-102.29 56.576-226.304 62.867-338.87 42.862-59.43-10.862-129.135-29.696-161.72-85.723-14.3-54.858-23.442-110.848-32.585-166.84l3.438-9.142 10.276-5.157c170.277 112.567 408.576 112.567 579.438 0 26.844 8.01 6.84 40.558 6.29 60.014zm103.424-549.157c-19.42 125.148-41.728 249.71-63.415 374.272-6.29 36.572-41.728 57.162-71.424 72.558-106.862 53.724-231.424 62.866-348.562 50.286-79.433-8.558-160.585-29.696-225.134-79.433-30.28-23.443-30.28-63.415-35.986-97.134-20.005-117.138-42.862-234.277-57.161-352.585 6.839-51.42 64.585-73.728 107.447-89.71 57.16-21.138 118.272-30.866 178.87-36.571 129.134-12.58 261.157-8.01 386.304 28.562 44.581 13.13 92.563 31.415 122.844 69.705 13.714 17.7 9.143 40.01 6.29 60.014z"}));ai.displayName="BitbucketIcon";const ei=()=>c(os,{name:"source"},()=>c("path",{d:"M601.92 475.2c0 76.428-8.91 83.754-28.512 99.594-14.652 11.88-43.956 14.058-78.012 16.434-18.81 1.386-40.392 2.97-62.172 6.534-18.612 2.97-36.432 9.306-53.064 17.424V299.772c37.818-21.978 63.36-62.766 63.36-109.692 0-69.894-56.826-126.72-126.72-126.72S190.08 120.186 190.08 190.08c0 46.926 25.542 87.714 63.36 109.692v414.216c-37.818 21.978-63.36 62.766-63.36 109.692 0 69.894 56.826 126.72 126.72 126.72s126.72-56.826 126.72-126.72c0-31.086-11.286-59.598-29.7-81.576 13.266-9.504 27.522-17.226 39.996-19.206 16.038-2.574 32.868-3.762 50.688-5.148 48.312-3.366 103.158-7.326 148.896-44.55 61.182-49.698 74.25-103.158 75.24-187.902V475.2h-126.72zM316.8 126.72c34.848 0 63.36 28.512 63.36 63.36s-28.512 63.36-63.36 63.36-63.36-28.512-63.36-63.36 28.512-63.36 63.36-63.36zm0 760.32c-34.848 0-63.36-28.512-63.36-63.36s28.512-63.36 63.36-63.36 63.36 28.512 63.36 63.36-28.512 63.36-63.36 63.36zM823.68 158.4h-95.04V63.36h-126.72v95.04h-95.04v126.72h95.04v95.04h126.72v-95.04h95.04z"}));ei.displayName="SourceIcon";const dn=(s,n)=>{var a;const l=(a=(n==null?void 0:n._instance)||jl())==null?void 0:a.appContext.components;return l?s in l||yn(s)in l||Ea(yn(s))in l:!1},bu=()=>uu(()=>typeof window<"u"&&window.navigator&&"userAgent"in window.navigator),oi=()=>{const s=bu();return h(()=>s.value&&/\b(?:Android|iPhone)/i.test(navigator.userAgent))},al=s=>{const n=gn();return h(()=>s[n.value])};function Vt(s,n){var l;const a=Ms();return Vc(()=>{a.value=s()},{...n,flush:(l=n==null?void 0:n.flush)!=null?l:"sync"}),ll(a)}function tp(s,n){let l,a,e;const o=G(!0),t=()=>{o.value=!0,e()};rs(s,t,{flush:"sync"});const r=typeof n=="function"?n:n.get,B=typeof n=="function"?void 0:n.set,i=Ic((d,y)=>(a=d,e=y,{get(){return o.value&&(l=r(),o.value=!1),a(),l},set(u){B==null||B(u)}}));return Object.isExtensible(i)&&(i.trigger=t),i}function ml(s){return Bc()?(od(s),!0):!1}function Gs(s){return typeof s=="function"?s():dl(s)}const La=typeof window<"u"&&typeof document<"u";typeof WorkerGlobalScope<"u"&&globalThis instanceof WorkerGlobalScope;const _u=Object.prototype.toString,hu=s=>_u.call(s)==="[object Object]",xn=()=>{},fo=Cu();function Cu(){var s,n;return La&&((s=window==null?void 0:window.navigator)==null?void 0:s.userAgent)&&(/iP(ad|hone|od)/.test(window.navigator.userAgent)||((n=window==null?void 0:window.navigator)==null?void 0:n.maxTouchPoints)>2&&/iPad|Macintosh/.test(window==null?void 0:window.navigator.userAgent))}function cp(s,n){function l(...a){return new Promise((e,o)=>{Promise.resolve(s(()=>n.apply(this,a),{fn:n,thisArg:this,args:a})).then(e).catch(o)})}return l}const pi=s=>s();function gu(s,n={}){let l,a,e=xn;const o=r=>{clearTimeout(r),e(),e=xn};return r=>{const B=Gs(s),i=Gs(n.maxWait);return l&&o(l),B<=0||i!==void 0&&i<=0?(a&&(o(a),a=null),Promise.resolve(r())):new Promise((d,y)=>{e=n.rejectOnCancel?y:d,i&&!a&&(a=setTimeout(()=>{l&&o(l),a=null,d(r())},i)),l=setTimeout(()=>{a&&o(a),a=null,d(r())},B)})}}function Lu(s,n=!0,l=!0,a=!1){let e=0,o,t=!0,r=xn,B;const i=()=>{o&&(clearTimeout(o),o=void 0,r(),r=xn)};return y=>{const u=Gs(s),A=Date.now()-e,F=()=>B=y();return i(),u<=0?(e=Date.now(),F()):(A>u&&(l||!t)?(e=Date.now(),F()):n&&(B=new Promise((_,C)=>{r=a?C:_,o=setTimeout(()=>{e=Date.now(),t=!0,_(F()),i()},Math.max(0,u-A))})),!l&&!o&&(o=setTimeout(()=>t=!0,u)),t=!1,B)}}function Tu(s=pi){const n=G(!0);function l(){n.value=!1}function a(){n.value=!0}const e=(...o)=>{n.value&&s(...o)};return{isActive:ll(n),pause:l,resume:a,eventFilter:e}}function Iu(s){let n;function l(){return n||(n=s()),n}return l.reset=async()=>{const a=n;n=void 0,a&&await a},l}function Ou(s){return s||jl()}function ku(...s){if(s.length!==1)return Ql(...s);const n=s[0];return typeof n=="function"?ll(Ic(()=>({get:n,set:xn}))):G(n)}function wu(s,n=200,l={}){return cp(gu(n,l),s)}function Su(s,n=200,l=!1,a=!0,e=!1){return cp(Lu(n,l,a,e),s)}function Pu(s,n,l={}){const{eventFilter:a=pi,...e}=l;return rs(s,cp(a,n),e)}function xu(s,n,l={}){const{eventFilter:a,...e}=l,{eventFilter:o,pause:t,resume:r,isActive:B}=Tu(a);return{stop:Pu(s,n,{...e,eventFilter:o}),pause:t,resume:r,isActive:B}}function he(s,n=!0,l){Ou()?ms(s,l):n?s():Vn(s)}function Ru(s,n,l={}){const{immediate:a=!0}=l,e=G(!1);let o=null;function t(){o&&(clearTimeout(o),o=null)}function r(){e.value=!1,t()}function B(...i){t(),e.value=!0,o=setTimeout(()=>{e.value=!1,o=null,s(...i)},Gs(n))}return a&&(e.value=!0,La&&B()),ml(r),{isPending:ll(e),start:B,stop:r}}function Be(s=!1,n={}){const{truthyValue:l=!0,falsyValue:a=!1}=n,e=qs(s),o=G(s);function t(r){if(arguments.length)return o.value=r,o.value;{const B=Gs(l);return o.value=o.value===B?Gs(a):B,o.value}}return e?t:[o,t]}function Js(s){var n;const l=Gs(s);return(n=l==null?void 0:l.$el)!=null?n:l}const En=La?window:void 0,ti=La?window.document:void 0,ci=La?window.navigator:void 0;function Ts(...s){let n,l,a,e;if(typeof s[0]=="string"||Array.isArray(s[0])?([l,a,e]=s,n=En):[n,l,a,e]=s,!n)return xn;Array.isArray(l)||(l=[l]),Array.isArray(a)||(a=[a]);const o=[],t=()=>{o.forEach(d=>d()),o.length=0},r=(d,y,u,A)=>(d.addEventListener(y,u,A),()=>d.removeEventListener(y,u,A)),B=rs(()=>[Js(n),Gs(e)],([d,y])=>{if(t(),!d)return;const u=hu(y)?{...y}:y;o.push(...l.flatMap(A=>a.map(F=>r(d,A,F,u))))},{immediate:!0,flush:"post"}),i=()=>{B(),t()};return ml(i),i}let Mt=!1;function Vu(s,n,l={}){const{window:a=En,ignore:e=[],capture:o=!0,detectIframe:t=!1}=l;if(!a)return xn;fo&&!Mt&&(Mt=!0,Array.from(a.document.body.children).forEach(u=>u.addEventListener("click",xn)),a.document.documentElement.addEventListener("click",xn));let r=!0;const B=u=>e.some(A=>{if(typeof A=="string")return Array.from(a.document.querySelectorAll(A)).some(F=>F===u.target||u.composedPath().includes(F));{const F=Js(A);return F&&(u.target===F||u.composedPath().includes(F))}}),d=[Ts(a,"click",u=>{const A=Js(s);if(!(!A||A===u.target||u.composedPath().includes(A))){if(u.detail===0&&(r=!B(u)),!r){r=!0;return}n(u)}},{passive:!0,capture:o}),Ts(a,"pointerdown",u=>{const A=Js(s);r=!B(u)&&!!(A&&!u.composedPath().includes(A))},{passive:!0}),t&&Ts(a,"blur",u=>{setTimeout(()=>{var A;const F=Js(s);((A=a.document.activeElement)==null?void 0:A.tagName)==="IFRAME"&&!(F!=null&&F.contains(a.document.activeElement))&&n(u)},0)})].filter(Boolean);return()=>d.forEach(u=>u())}function Mu(){const s=G(!1);return jl()&&ms(()=>{s.value=!0}),s}function Ta(s){const n=Mu();return h(()=>(n.value,!!s()))}function ri(s,n={}){const{window:l=En}=n,a=Ta(()=>l&&"matchMedia"in l&&typeof l.matchMedia=="function");let e;const o=G(!1),t=i=>{o.value=i.matches},r=()=>{e&&("removeEventListener"in e?e.removeEventListener("change",t):e.removeListener(t))},B=Vc(()=>{a.value&&(r(),e=l.matchMedia(Gs(s)),"addEventListener"in e?e.addEventListener("change",t):e.addListener(t),o.value=e.matches)});return ml(()=>{B(),r(),e=void 0}),o}function qt(s,n={}){const{controls:l=!1,navigator:a=ci}=n,e=Ta(()=>a&&"permissions"in a);let o;const t=typeof s=="string"?{name:s}:s,r=G(),B=()=>{o&&(r.value=o.state)},i=Iu(async()=>{if(e.value){if(!o)try{o=await a.permissions.query(t),Ts(o,"change",B),B()}catch{r.value="prompt"}return o}});return i(),l?{state:r,isSupported:e,query:i}:r}function qu(s={}){const{navigator:n=ci,read:l=!1,source:a,copiedDuring:e=1500,legacy:o=!1}=s,t=Ta(()=>n&&"clipboard"in n),r=qt("clipboard-read"),B=qt("clipboard-write"),i=h(()=>t.value||o),d=G(""),y=G(!1),u=Ru(()=>y.value=!1,e);function A(){t.value&&r.value!=="denied"?n.clipboard.readText().then(D=>{d.value=D}):d.value=C()}i.value&&l&&Ts(["copy","cut"],A);async function F(D=Gs(a)){i.value&&D!=null&&(t.value&&B.value!=="denied"?await n.clipboard.writeText(D):_(D),d.value=D,y.value=!0,u.start())}function _(D){const I=document.createElement("textarea");I.value=D??"",I.style.position="absolute",I.style.opacity="0",document.body.appendChild(I),I.select(),document.execCommand("copy"),I.remove()}function C(){var D,I,f;return(f=(I=(D=document==null?void 0:document.getSelection)==null?void 0:D.call(document))==null?void 0:I.toString())!=null?f:""}return{isSupported:i,text:d,copied:y,copy:F}}const Ga=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},Ua="__vueuse_ssr_handlers__",Nu=$u();function $u(){return Ua in Ga||(Ga[Ua]=Ga[Ua]||{}),Ga[Ua]}function zu(s,n){return Nu[s]||n}function Qu(s){return s==null?"any":s instanceof Set?"set":s instanceof Map?"map":s instanceof Date?"date":typeof s=="boolean"?"boolean":typeof s=="string"?"string":typeof s=="object"?"object":Number.isNaN(s)?"any":"number"}const Hu={boolean:{read:s=>s==="true",write:s=>String(s)},object:{read:s=>JSON.parse(s),write:s=>JSON.stringify(s)},number:{read:s=>Number.parseFloat(s),write:s=>String(s)},any:{read:s=>s,write:s=>String(s)},string:{read:s=>s,write:s=>String(s)},map:{read:s=>new Map(JSON.parse(s)),write:s=>JSON.stringify(Array.from(s.entries()))},set:{read:s=>new Set(JSON.parse(s)),write:s=>JSON.stringify(Array.from(s))},date:{read:s=>new Date(s),write:s=>s.toISOString()}},Nt="vueuse-storage";function Fl(s,n,l,a={}){var e;const{flush:o="pre",deep:t=!0,listenToStorageChanges:r=!0,writeDefaults:B=!0,mergeDefaults:i=!1,shallow:d,window:y=En,eventFilter:u,onError:A=P=>{console.error(P)},initOnMounted:F}=a,_=(d?Ms:G)(typeof n=="function"?n():n);if(!l)try{l=zu("getDefaultStorage",()=>{var P;return(P=En)==null?void 0:P.localStorage})()}catch(P){A(P)}if(!l)return _;const C=Gs(n),D=Qu(C),I=(e=a.serializer)!=null?e:Hu[D],{pause:f,resume:T}=xu(_,()=>V(_.value),{flush:o,deep:t,eventFilter:u});return y&&r&&he(()=>{Ts(y,"storage",N),Ts(y,Nt,W),F&&N()}),F||N(),_;function V(P){try{if(P==null)l.removeItem(s);else{const $=I.write(P),X=l.getItem(s);X!==$&&(l.setItem(s,$),y&&y.dispatchEvent(new CustomEvent(Nt,{detail:{key:s,oldValue:X,newValue:$,storageArea:l}})))}}catch($){A($)}}function g(P){const $=P?P.newValue:l.getItem(s);if($==null)return B&&C!=null&&l.setItem(s,I.write(C)),C;if(!P&&i){const X=I.read($);return typeof i=="function"?i(X,C):D==="object"&&!Array.isArray(X)?{...C,...X}:X}else return typeof $!="string"?$:I.read($)}function W(P){N(P.detail)}function N(P){if(!(P&&P.storageArea!==l)){if(P&&P.key==null){_.value=C;return}if(!(P&&P.key!==s)){f();try{(P==null?void 0:P.newValue)!==I.write(_.value)&&(_.value=g(P))}catch($){A($)}finally{P?Vn(T):T()}}}}}function ju(s){return ri("(prefers-color-scheme: dark)",s)}function Gu(s,n,l={}){const{window:a=En,...e}=l;let o;const t=Ta(()=>a&&"ResizeObserver"in a),r=()=>{o&&(o.disconnect(),o=void 0)},B=h(()=>Array.isArray(s)?s.map(y=>Js(y)):[Js(s)]),i=rs(B,y=>{if(r(),t.value&&a){o=new ResizeObserver(n);for(const u of y)u&&o.observe(u,e)}},{immediate:!0,flush:"post",deep:!0}),d=()=>{r(),i()};return ml(d),{isSupported:t,stop:d}}function Uu(s,n={width:0,height:0},l={}){const{window:a=En,box:e="content-box"}=l,o=h(()=>{var y,u;return(u=(y=Js(s))==null?void 0:y.namespaceURI)==null?void 0:u.includes("svg")}),t=G(n.width),r=G(n.height),{stop:B}=Gu(s,([y])=>{const u=e==="border-box"?y.borderBoxSize:e==="content-box"?y.contentBoxSize:y.devicePixelContentBoxSize;if(a&&o.value){const A=Js(s);if(A){const F=a.getComputedStyle(A);t.value=Number.parseFloat(F.width),r.value=Number.parseFloat(F.height)}}else if(u){const A=Array.isArray(u)?u:[u];t.value=A.reduce((F,{inlineSize:_})=>F+_,0),r.value=A.reduce((F,{blockSize:_})=>F+_,0)}else t.value=y.contentRect.width,r.value=y.contentRect.height},l);he(()=>{const y=Js(s);y&&(t.value="offsetWidth"in y?y.offsetWidth:n.width,r.value="offsetHeight"in y?y.offsetHeight:n.height)});const i=rs(()=>Js(s),y=>{t.value=y?n.width:0,r.value=y?n.height:0});function d(){B(),i()}return{width:t,height:r,stop:d}}const $t=["fullscreenchange","webkitfullscreenchange","webkitendfullscreen","mozfullscreenchange","MSFullscreenChange"];function rp(s,n={}){const{document:l=ti,autoExit:a=!1}=n,e=h(()=>{var D;return(D=Js(s))!=null?D:l==null?void 0:l.querySelector("html")}),o=G(!1),t=h(()=>["requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","webkitEnterFullScreen","webkitRequestFullScreen","mozRequestFullScreen","msRequestFullscreen"].find(D=>l&&D in l||e.value&&D in e.value)),r=h(()=>["exitFullscreen","webkitExitFullscreen","webkitExitFullScreen","webkitCancelFullScreen","mozCancelFullScreen","msExitFullscreen"].find(D=>l&&D in l||e.value&&D in e.value)),B=h(()=>["fullScreen","webkitIsFullScreen","webkitDisplayingFullscreen","mozFullScreen","msFullscreenElement"].find(D=>l&&D in l||e.value&&D in e.value)),i=["fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement"].find(D=>l&&D in l),d=Ta(()=>e.value&&l&&t.value!==void 0&&r.value!==void 0&&B.value!==void 0),y=()=>i?(l==null?void 0:l[i])===e.value:!1,u=()=>{if(B.value){if(l&&l[B.value]!=null)return l[B.value];{const D=e.value;if((D==null?void 0:D[B.value])!=null)return!!D[B.value]}}return!1};async function A(){if(!(!d.value||!o.value)){if(r.value)if((l==null?void 0:l[r.value])!=null)await l[r.value]();else{const D=e.value;(D==null?void 0:D[r.value])!=null&&await D[r.value]()}o.value=!1}}async function F(){if(!d.value||o.value)return;u()&&await A();const D=e.value;t.value&&(D==null?void 0:D[t.value])!=null&&(await D[t.value](),o.value=!0)}async function _(){await(o.value?A():F())}const C=()=>{const D=u();(!D||D&&y())&&(o.value=D)};return Ts(l,$t,C,!1),Ts(()=>Js(e),$t,C,!1),a&&ml(A),{isSupported:d,isFullscreen:o,enter:F,exit:A,toggle:_}}function Ge(s){return typeof Window<"u"&&s instanceof Window?s.document.documentElement:typeof Document<"u"&&s instanceof Document?s.documentElement:s}function r7(s,n,l={}){const{window:a=En}=l;return Fl(s,n,a==null?void 0:a.localStorage,l)}function ii(s){const n=window.getComputedStyle(s);if(n.overflowX==="scroll"||n.overflowY==="scroll"||n.overflowX==="auto"&&s.clientWidth<s.scrollWidth||n.overflowY==="auto"&&s.clientHeight<s.scrollHeight)return!0;{const l=s.parentNode;return!l||l.tagName==="BODY"?!1:ii(l)}}function Wu(s){const n=s||window.event,l=n.target;return ii(l)?!1:n.touches.length>1?!0:(n.preventDefault&&n.preventDefault(),!1)}const Wa=new WeakMap;function ip(s,n=!1){const l=G(n);let a=null,e;rs(ku(s),r=>{const B=Ge(Gs(r));if(B){const i=B;Wa.get(i)||Wa.set(i,e),l.value&&(i.style.overflow="hidden")}},{immediate:!0});const o=()=>{const r=Ge(Gs(s));!r||l.value||(fo&&(a=Ts(r,"touchmove",B=>{Wu(B)},{passive:!1})),r.style.overflow="hidden",l.value=!0)},t=()=>{var r;const B=Ge(Gs(s));!B||!l.value||(fo&&(a==null||a()),B.style.overflow=(r=Wa.get(B))!=null?r:"",Wa.delete(B),l.value=!1)};return ml(t),h({get(){return l.value},set(r){r?o():t()}})}function Bi(s,n,l={}){const{window:a=En}=l;return Fl(s,n,a==null?void 0:a.sessionStorage,l)}let Ku=0;function Yu(s,n={}){const l=G(!1),{document:a=ti,immediate:e=!0,manual:o=!1,id:t=`vueuse_styletag_${++Ku}`}=n,r=G(s);let B=()=>{};const i=()=>{if(!a)return;const y=a.getElementById(t)||a.createElement("style");y.isConnected||(y.id=t,n.media&&(y.media=n.media),a.head.appendChild(y)),!l.value&&(B=rs(r,u=>{y.textContent=u},{immediate:!0}),l.value=!0)},d=()=>{!a||!l.value||(B(),a.head.removeChild(a.getElementById(t)),l.value=!1)};return e&&!o&&he(i),o||ml(d),{id:t,css:r,unload:d,load:i,isLoaded:ll(l)}}function Xu(s={}){const{window:n=En,behavior:l="auto"}=s;if(!n)return{x:G(0),y:G(0)};const a=G(n.scrollX),e=G(n.scrollY),o=h({get(){return a.value},set(r){scrollTo({left:r,behavior:l})}}),t=h({get(){return e.value},set(r){scrollTo({top:r,behavior:l})}});return Ts(n,"scroll",()=>{a.value=n.scrollX,e.value=n.scrollY},{capture:!1,passive:!0}),{x:o,y:t}}function Zu(s={}){const{window:n=En,initialWidth:l=Number.POSITIVE_INFINITY,initialHeight:a=Number.POSITIVE_INFINITY,listenOrientation:e=!0,includeScrollbar:o=!0}=s,t=G(l),r=G(a),B=()=>{n&&(o?(t.value=n.innerWidth,r.value=n.innerHeight):(t.value=n.document.documentElement.clientWidth,r.value=n.document.documentElement.clientHeight))};if(B(),he(B),Ts("resize",B,{passive:!0}),e){const i=ri("(orientation: portrait)");rs(i,()=>B())}return{width:t,height:r}}var Ju=R({name:"FontIcon",props:{icon:{type:String,default:""},color:{type:String,default:""},size:{type:[String,Number],default:""}},setup(s){const n=h(()=>{const a=["font-icon icon"],e=`iconfont icon-${s.icon}`;return a.push(e),a}),l=h(()=>{const a={};return s.color&&(a.color=s.color),s.size&&(a["font-size"]=Number.isNaN(Number(s.size))?s.size:`${s.size}px`),nn(a).length?a:null});return()=>s.icon?c("span",{key:s.icon,class:n.value,style:l.value}):null}});const di=({type:s="info",text:n="",vertical:l,color:a},{slots:e})=>{var o;return c("span",{class:["vp-badge",s,{diy:a}],style:{verticalAlign:l??!1,backgroundColor:a??!1}},((o=e.default)==null?void 0:o.call(e))||n)};di.displayName="Badge";const yi=({title:s,desc:n="",logo:l,background:a,color:e,link:o})=>{const t=[l?c("img",{class:"vp-card-logo",src:_s(l),loading:"lazy","no-view":""}):null,c("div",{class:"vp-card-content"},[c("div",{class:"vp-card-title",innerHTML:s}),c("hr"),c("div",{class:"vp-card-desc",innerHTML:n})])],r={};return a&&(r.background=a),e&&(r.color=e),o?va(o)?c("a",{class:"vp-card",href:o,target:"_blank",style:r},t):c(ks,{to:o,class:"vp-card",style:r},()=>t):c("div",{class:"vp-card",style:r},t)};yi.displayName="VPCard";const vi=()=>c(os,{name:"back-to-top"},()=>[c("path",{d:"M512 843.2c-36.2 0-66.4-13.6-85.8-21.8-10.8-4.6-22.6 3.6-21.8 15.2l7 102c.4 6.2 7.6 9.4 12.6 5.6l29-22c3.6-2.8 9-1.8 11.4 2l41 64.2c3 4.8 10.2 4.8 13.2 0l41-64.2c2.4-3.8 7.8-4.8 11.4-2l29 22c5 3.8 12.2.6 12.6-5.6l7-102c.8-11.6-11-20-21.8-15.2-19.6 8.2-49.6 21.8-85.8 21.8z"}),c("path",{d:"m795.4 586.2-96-98.2C699.4 172 513 32 513 32S324.8 172 324.8 488l-96 98.2c-3.6 3.6-5.2 9-4.4 14.2L261.2 824c1.8 11.4 14.2 17 23.6 10.8L419 744s41.4 40 94.2 40c52.8 0 92.2-40 92.2-40l134.2 90.8c9.2 6.2 21.6.6 23.6-10.8l37-223.8c.4-5.2-1.2-10.4-4.8-14zM513 384c-34 0-61.4-28.6-61.4-64s27.6-64 61.4-64c34 0 61.4 28.6 61.4 64S547 384 513 384z"})]);vi.displayName="BackToTopIcon";var sA={"/":{backToTop:"返回顶部"}},nA=R({name:"BackToTop",props:{threshold:{type:Number,default:100},noProgress:Boolean},setup(s){const n=fs(),l=al(sA),a=Ms(),{height:e}=Uu(a),{height:o}=Zu(),{y:t}=Xu(),r=h(()=>n.value.backToTop!==!1&&t.value>s.threshold),B=h(()=>t.value/(e.value-o.value)*100);return ms(()=>{a.value=document.body}),()=>c(sl,{name:"fade"},()=>r.value?c("button",{type:"button",class:"vp-back-to-top-button","aria-label":l.value.backToTop,"data-balloon-pos":"left",onClick:()=>{window.scrollTo({top:0,behavior:"smooth"})}},[s.noProgress?null:c("span",{class:"vp-scroll-progress",role:"progressbar","aria-labelledby":"loadinglabel","aria-valuenow":B.value},c("svg",c("circle",{cx:"50%",cy:"50%",style:{"stroke-dasharray":`calc(${Math.PI*B.value}% - ${4*Math.PI}px) calc(${Math.PI*100}% - ${4*Math.PI}px)`}}))),c(vi)]):null)}});const lA=Dn({enhance:({app:s})=>{dn("FontIcon")||s.component("FontIcon",Ju),dn("Badge")||s.component("Badge",di),dn("VPCard")||s.component("VPCard",yi)},setup:()=>{Yu(`  @import url("https://at.alicdn.com/t/c/font_2410206_5vb9zlyghj.css");
  `)},rootComponents:[()=>c(nA,{})]});function aA(s,n,l){var a,e,o;n===void 0&&(n=50),l===void 0&&(l={});var t=(a=l.isImmediate)!=null&&a,r=(e=l.callback)!=null&&e,B=l.maxWait,i=Date.now(),d=[];function y(){if(B!==void 0){var A=Date.now()-i;if(A+n>=B)return B-A}return n}var u=function(){var A=[].slice.call(arguments),F=this;return new Promise(function(_,C){var D=t&&o===void 0;if(o!==void 0&&clearTimeout(o),o=setTimeout(function(){if(o=void 0,i=Date.now(),!t){var f=s.apply(F,A);r&&r(f),d.forEach(function(T){return(0,T.resolve)(f)}),d=[]}},y()),D){var I=s.apply(F,A);return r&&r(I),_(I)}d.push({resolve:_,reject:C})})};return u.cancel=function(A){o!==void 0&&clearTimeout(o),d.forEach(function(F){return(0,F.reject)(A)}),d=[]},u}const eA=({headerLinkSelector:s,headerAnchorSelector:n,delay:l,offset:a=5})=>{const e=Hs(),t=aA(()=>{var _,C;const r=Math.max(window.scrollY,document.documentElement.scrollTop,document.body.scrollTop);if(Math.abs(r-0)<a){zt(e,"");return}const i=window.innerHeight+r,d=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),y=Math.abs(d-i)<a,u=Array.from(document.querySelectorAll(s)),F=Array.from(document.querySelectorAll(n)).filter(D=>u.some(I=>I.hash===D.hash));for(let D=0;D<F.length;D++){const I=F[D],f=F[D+1],T=r>=(((_=I.parentElement)==null?void 0:_.offsetTop)??0)-a,V=!f||r<(((C=f.parentElement)==null?void 0:C.offsetTop)??0)-a;if(!(T&&V))continue;const W=decodeURIComponent(e.currentRoute.value.hash),N=decodeURIComponent(I.hash);if(W===N)return;if(y){for(let P=D+1;P<F.length;P++)if(W===decodeURIComponent(F[P].hash))return}zt(e,N);return}},l);ms(()=>{window.addEventListener("scroll",t)}),Wo(()=>{window.removeEventListener("scroll",t)})},zt=async(s,n)=>{const{scrollBehavior:l}=s.options;s.options.scrollBehavior=void 0,await s.replace({query:s.currentRoute.value.query,hash:n}).finally(()=>s.options.scrollBehavior=l)},oA=".vp-sidebar-link, .toc-link",pA=".header-anchor",tA=200,cA=5,rA=Dn({setup(){eA({headerLinkSelector:oA,headerAnchorSelector:pA,delay:tA,offset:cA})}});let ui=s=>cs(s.title)?{title:s.title}:null;const Ai=Symbol(""),iA=s=>{ui=s},BA=()=>us(Ai),dA=s=>{s.provide(Ai,ui)};var yA={"/":{title:"目录",empty:"暂无目录"}},vA=R({name:"AutoCatalog",props:{base:{type:String,default:""},level:{type:Number,default:3},index:Boolean,hideHeading:Boolean},setup(s){const n=BA(),l=al(yA),a=Bs(),e=Hs(),o=_r(),t=G(e.getRoutes().map(({meta:i,path:d})=>{const y=n(i);if(!y)return null;const u=d.split("/").length;return{level:ja(d,"/")?u-2:u-1,base:d.replace(/\/[^/]+\/?$/,"/"),path:d,...y}}).filter(i=>Gr(i)&&cs(i.title))),r=()=>{const i=s.base?I2(yr(s.base)):a.value.path.replace(/\/[^/]+$/,"/"),d=i.split("/").length-2,y=[];return t.value.filter(({level:u,path:A})=>{if(!nl(A,i)||A===i)return!1;if(i==="/"){const F=nn(o.value.locales).filter(_=>_!=="/");if(A==="/404.html"||F.some(_=>nl(A,_)))return!1}return u-d<=s.level&&(ja(A,".html")&&!ja(A,"/index.html")||ja(A,"/"))}).sort(({title:u,level:A,order:F},{title:_,level:C,order:D})=>A-C||(je(F)?je(D)?F>0?D>0?F-D:-1:D<0?F-D:1:F:je(D)?D:u.localeCompare(_))).forEach(u=>{var _;const{base:A,level:F}=u;switch(F-d){case 1:y.push(u);break;case 2:{const C=y.find(D=>D.path===A);C&&(C.children??(C.children=[])).push(u);break}default:{const C=y.find(D=>D.path===A.replace(/\/[^/]+\/$/,"/"));if(C){const D=(_=C.children)==null?void 0:_.find(I=>I.path===A);D&&(D.children??(D.children=[])).push(u)}}}}),y},B=h(()=>r());return()=>{const i=B.value.some(d=>d.children);return c("div",{class:["vp-catalog-wrapper",{index:s.index}]},[s.hideHeading?null:c("h2",{class:"vp-catalog-main-title"},l.value.title),B.value.length?c(s.index?"ol":"ul",{class:["vp-catalogs",{deep:i}]},B.value.map(({children:d=[],title:y,path:u,content:A})=>{const F=c(ks,{class:"vp-catalog-title",to:u},()=>A?c(A):y);return c("li",{class:"vp-catalog"},i?[c("h3",{id:y,class:["vp-catalog-child-title",{"has-children":d.length}]},[c("a",{href:`#${y}`,class:"header-anchor","aria-hidden":!0},"#"),F]),d.length?c(s.index?"ol":"ul",{class:"vp-child-catalogs"},d.map(({children:_=[],content:C,path:D,title:I})=>c("li",{class:"vp-child-catalog"},[c("div",{class:["vp-catalog-sub-title",{"has-children":_.length}]},[c("a",{href:`#${I}`,class:"header-anchor"},"#"),c(ks,{class:"vp-catalog-title",to:D},()=>C?c(C):I)]),_.length?c(s.index?"ol":"div",{class:s.index?"vp-sub-catalogs":"vp-sub-catalogs-wrapper"},_.map(({content:f,path:T,title:V})=>s.index?c("li",{class:"vp-sub-catalog"},c(ks,{to:T},()=>f?c(f):V)):c(ks,{class:"vp-sub-catalog-link",to:T},()=>f?c(f):V))):null]))):null]:c("div",{class:"vp-catalog-child-title"},F))})):c("p",{class:"vp-empty-catalog"},l.value.empty)])}}}),uA=Dn({enhance:({app:s})=>{dA(s),dn("AutoCatalog",s)||s.component("AutoCatalog",vA)}});const AA=c("svg",{class:"external-link-icon",xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"},[c("path",{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}),c("polygon",{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"})]),mi=R({name:"ExternalLinkIcon",props:{locales:{type:Object,required:!1,default:()=>({})}},setup(s){const n=gn(),l=h(()=>s.locales[n.value]??{openInNewWindow:"open in new window"});return()=>c("span",[AA,c("span",{class:"external-link-icon-sr-only"},l.value.openInNewWindow)])}});var mA={};const FA=mA,EA=Dn({enhance({app:s}){s.component("ExternalLinkIcon",c(mi,{locales:FA}))}});/**
 * NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT
 */const ys={settings:{minimum:.08,easing:"ease",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,barSelector:'[role="bar"]',parent:"body",template:'<div class="bar" role="bar"></div>'},status:null,set:s=>{const n=ys.isStarted();s=Ue(s,ys.settings.minimum,1),ys.status=s===1?null:s;const l=ys.render(!n),a=l.querySelector(ys.settings.barSelector),e=ys.settings.speed,o=ys.settings.easing;return l.offsetWidth,DA(t=>{Ka(a,{transform:"translate3d("+Qt(s)+"%,0,0)",transition:"all "+e+"ms "+o}),s===1?(Ka(l,{transition:"none",opacity:"1"}),l.offsetWidth,setTimeout(function(){Ka(l,{transition:"all "+e+"ms linear",opacity:"0"}),setTimeout(function(){ys.remove(),t()},e)},e)):setTimeout(()=>t(),e)}),ys},isStarted:()=>typeof ys.status=="number",start:()=>{ys.status||ys.set(0);const s=()=>{setTimeout(()=>{ys.status&&(ys.trickle(),s())},ys.settings.trickleSpeed)};return ys.settings.trickle&&s(),ys},done:s=>!s&&!ys.status?ys:ys.inc(.3+.5*Math.random()).set(1),inc:s=>{let n=ys.status;return n?(typeof s!="number"&&(s=(1-n)*Ue(Math.random()*n,.1,.95)),n=Ue(n+s,0,.994),ys.set(n)):ys.start()},trickle:()=>ys.inc(Math.random()*ys.settings.trickleRate),render:s=>{if(ys.isRendered())return document.getElementById("nprogress");Ht(document.documentElement,"nprogress-busy");const n=document.createElement("div");n.id="nprogress",n.innerHTML=ys.settings.template;const l=n.querySelector(ys.settings.barSelector),a=s?"-100":Qt(ys.status||0),e=document.querySelector(ys.settings.parent);return Ka(l,{transition:"all 0 linear",transform:"translate3d("+a+"%,0,0)"}),e!==document.body&&Ht(e,"nprogress-custom-parent"),e==null||e.appendChild(n),n},remove:()=>{jt(document.documentElement,"nprogress-busy"),jt(document.querySelector(ys.settings.parent),"nprogress-custom-parent");const s=document.getElementById("nprogress");s&&fA(s)},isRendered:()=>!!document.getElementById("nprogress")},Ue=(s,n,l)=>s<n?n:s>l?l:s,Qt=s=>(-1+s)*100,DA=function(){const s=[];function n(){const l=s.shift();l&&l(n)}return function(l){s.push(l),s.length===1&&n()}}(),Ka=function(){const s=["Webkit","O","Moz","ms"],n={};function l(t){return t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,function(r,B){return B.toUpperCase()})}function a(t){const r=document.body.style;if(t in r)return t;let B=s.length;const i=t.charAt(0).toUpperCase()+t.slice(1);let d;for(;B--;)if(d=s[B]+i,d in r)return d;return t}function e(t){return t=l(t),n[t]??(n[t]=a(t))}function o(t,r,B){r=e(r),t.style[r]=B}return function(t,r){for(const B in r){const i=r[B];i!==void 0&&Object.prototype.hasOwnProperty.call(r,B)&&o(t,B,i)}}}(),Fi=(s,n)=>(typeof s=="string"?s:Bp(s)).indexOf(" "+n+" ")>=0,Ht=(s,n)=>{const l=Bp(s),a=l+n;Fi(l,n)||(s.className=a.substring(1))},jt=(s,n)=>{const l=Bp(s);if(!Fi(s,n))return;const a=l.replace(" "+n+" "," ");s.className=a.substring(1,a.length-1)},Bp=s=>(" "+(s.className||"")+" ").replace(/\s+/gi," "),fA=s=>{s&&s.parentNode&&s.parentNode.removeChild(s)},bA=()=>{ms(()=>{const s=Hs(),n=new Set;n.add(s.currentRoute.value.path),s.beforeEach(l=>{n.has(l.path)||ys.start()}),s.afterEach(l=>{n.add(l.path),ys.done()})})},_A=Dn({setup(){bA()}}),hA=JSON.parse('{"encrypt":{"config":{"/demo/encrypt.html":["$2a$10$aVMDyyFOrUG1qhZs/QUfRu9O6/DfNuAtONYGJpH10rnjGGNybjGMm"]}},"author":{"name":"张威","url":"https://iszhwei.gitee.io"},"logo":"logo.svg","repo":"https://githubfast.com/iszhwei","docsDir":"src","footer":"","displayFooter":true,"blog":{"description":"Zhang Wei","intro":"/intro.html","medias":{"Email":"mailto:iszhwei@163.com","Gitee":"https://gitee.com/iszhwei","GitHub":"https://githubfast.com/iszhwei"}},"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","lastUpdated":"上次编辑于","contributors":"贡献者","editLink":"在 GitHub 上编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"encryptLocales":{"iconLabel":"文章已加密","placeholder":"输入密码","remember":"记住密码","errorHint":"请输入正确的密码"},"routeLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家","openInNewWindow":"Open in new window"},"navbar":[{"text":"c/c++","icon":"c","link":"/ccpp/"},{"text":"操作系统","icon":"linux","link":"/linux/"},{"text":"网络编程","icon":"network","link":"/network/"},{"text":"MySQL","icon":"mysql","link":"/mysql/"},{"text":"Redis","icon":"mysql","link":"/redis/"},{"text":"算法与数据结构","icon":"any","link":"/algo/"},{"text":"随笔","icon":"write","link":"/others/"},{"text":"工具分享","icon":"config","link":"tool"}],"sidebar":{"/linux/":"structure","/algo/":"structure","/redis/":"structure","/network/":"structure","/others/":"structure","/ccpp/":"structure","/mysql/":"structure"}}}}'),CA=G(hA),Ei=()=>CA,Di=Symbol(""),gA=()=>{const s=us(Di);if(!s)throw new Error("useThemeLocaleData() is called without provider.");return s},LA=(s,n)=>{const{locales:l,...a}=s;return{...a,...l==null?void 0:l[n]}},TA=Dn({enhance({app:s}){const n=Ei(),l=s._context.provides[np],a=h(()=>LA(n.value,l.value));s.provide(Di,a),Object.defineProperties(s.config.globalProperties,{$theme:{get(){return n.value}},$themeLocale:{get(){return a.value}}})}});var IA={"/":{copy:"复制代码",copied:"已复制",hint:"复制成功"}},OA=['.theme-hope-content div[class*="language-"] pre'];const kA=800,wA=2e3,SA=IA,PA=OA,Gt=!1,We=new Map,xA=()=>{const{copy:s}=qu({legacy:!0}),n=al(SA),l=Bs(),a=oi(),e=r=>{if(!r.hasAttribute("copy-code-registered")){const B=document.createElement("button");B.type="button",B.classList.add("copy-code-button"),B.innerHTML='<div class="copy-icon" />',B.setAttribute("aria-label",n.value.copy),B.setAttribute("data-copied",n.value.copied),r.parentElement&&r.parentElement.insertBefore(B,r),r.setAttribute("copy-code-registered","")}},o=()=>Vn().then(()=>new Promise(r=>{setTimeout(()=>{PA.forEach(B=>{document.querySelectorAll(B).forEach(e)}),r()},kA)})),t=(r,B,i)=>{let{innerText:d=""}=B;/language-(shellscript|shell|bash|sh|zsh)/.test(r.classList.toString())&&(d=d.replace(/^ *(\$|>) /gm,"")),s(d).then(()=>{i.classList.add("copied"),clearTimeout(We.get(i));const y=setTimeout(()=>{i.classList.remove("copied"),i.blur(),We.delete(i)},wA);We.set(i,y)})};ms(()=>{(!a.value||Gt)&&o(),Ts("click",r=>{const B=r.target;if(B.matches('div[class*="language-"] > button.copy')){const i=B.parentElement,d=B.nextElementSibling;d&&t(i,d,B)}else if(B.matches('div[class*="language-"] div.copy-icon')){const i=B.parentElement,d=i.parentElement,y=i.nextElementSibling;y&&t(d,y,i)}}),rs(()=>l.value.path,()=>{(!a.value||Gt)&&o()})})};var RA=Dn({setup:()=>{xA()}});const Ya=Fl("VUEPRESS_CODE_TAB_STORE",{});var VA=R({name:"CodeTabs",props:{active:{type:Number,default:0},data:{type:Array,required:!0},id:{type:String,required:!0},tabId:{type:String,default:""}},slots:Object,setup(s,{slots:n}){const l=G(s.active),a=Ms([]),e=()=>{s.tabId&&(Ya.value[s.tabId]=s.data[l.value].id)},o=(i=l.value)=>{l.value=i<a.value.length-1?i+1:0,a.value[l.value].focus()},t=(i=l.value)=>{l.value=i>0?i-1:a.value.length-1,a.value[l.value].focus()},r=(i,d)=>{i.key===" "||i.key==="Enter"?(i.preventDefault(),l.value=d):i.key==="ArrowRight"?(i.preventDefault(),o()):i.key==="ArrowLeft"&&(i.preventDefault(),t()),s.tabId&&(Ya.value[s.tabId]=s.data[l.value].id)},B=()=>{if(s.tabId){const i=s.data.findIndex(({id:d})=>Ya.value[s.tabId]===d);if(i!==-1)return i}return s.active};return ms(()=>{l.value=B(),rs(()=>Ya.value[s.tabId],(i,d)=>{if(s.tabId&&i!==d){const y=s.data.findIndex(({id:u})=>u===i);y!==-1&&(l.value=y)}})}),()=>s.data.length?c("div",{class:"vp-code-tabs"},[c("div",{class:"vp-code-tabs-nav",role:"tablist"},s.data.map(({id:i},d)=>{const y=d===l.value;return c("button",{type:"button",ref:u=>{u&&(a.value[d]=u)},class:["vp-code-tab-nav",{active:y}],role:"tab","aria-controls":`codetab-${s.id}-${d}`,"aria-selected":y,onClick:()=>{l.value=d,e()},onKeydown:u=>r(u,d)},n[`title${d}`]({value:i,isActive:y}))})),s.data.map(({id:i},d)=>{const y=d===l.value;return c("div",{class:["vp-code-tab",{active:y}],id:`codetab-${s.id}-${d}`,role:"tabpanel","aria-expanded":y},[c("div",{class:"vp-code-tab-title"},n[`title${d}`]({value:i,isActive:y})),n[`tab${d}`]({value:i,isActive:y})])})]):null}});const fi=({active:s=!1},{slots:n})=>{var l;return c("div",{class:["code-group-item",{active:s}],"aria-selected":s},(l=n.default)==null?void 0:l.call(n))};fi.displayName="CodeGroupItem";const MA=R({name:"CodeGroup",slots:Object,setup(s,{slots:n}){const l=G(-1),a=Ms([]),e=(r=l.value)=>{l.value=r<a.value.length-1?r+1:0,a.value[l.value].focus()},o=(r=l.value)=>{l.value=r>0?r-1:a.value.length-1,a.value[l.value].focus()},t=(r,B)=>{r.key===" "||r.key==="Enter"?(r.preventDefault(),l.value=B):r.key==="ArrowRight"?(r.preventDefault(),e(B)):r.key==="ArrowLeft"&&(r.preventDefault(),o(B))};return()=>{var B;const r=(((B=n.default)==null?void 0:B.call(n))||[]).filter(i=>i.type.name==="CodeGroupItem").map(i=>(i.props===null&&(i.props={}),i));return r.length===0?null:(l.value<0||l.value>r.length-1?(l.value=r.findIndex(i=>"active"in i.props),l.value===-1&&(l.value=0)):r.forEach((i,d)=>{i.props.active=d===l.value}),c("div",{class:"code-group"},[c("div",{class:"code-group-nav"},r.map((i,d)=>{const y=d===l.value;return c("button",{type:"button",ref:u=>{u&&(a.value[d]=u)},class:["code-group-nav-tab",{active:y}],"aria-pressed":y,"aria-expanded":y,onClick:()=>{l.value=d},onKeydown:u=>t(u,d)},i.props.title)})),r]))}}}),qA='<svg class="codepen-icon" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg"><path d="M123.429 668L468 897.714V692.571L277.143 565.143zM88 585.714L198.286 512 88 438.286v147.428zm468 312L900.571 668 746.857 565.143 556 692.57v205.143zM512 616l155.429-104L512 408 356.571 512zM277.143 458.857L468 331.43V126.286L123.429 356zM825.714 512L936 585.714V438.286zm-78.857-53.143L900.571 356 556 126.286v205.143zM1024 356v312q0 23.429-19.429 36.571l-468 312Q524.571 1024 512 1024t-24.571-7.429l-468-312Q0 691.43 0 668V356q0-23.429 19.429-36.571l468-312Q499.429 0 512 0t24.571 7.429l468 312Q1024 332.57 1024 356z"/></svg>',NA='<svg class="jsfiddle-icon" viewBox="0 0 1170 1024" xmlns="http://www.w3.org/2000/svg"><path d="M1028.571 441.143q63.429 26.286 102.572 83.143t39.143 126.571q0 93.714-67.429 160.286T940 877.714q-2.286 0-6.571-.285t-6-.286H232q-97.143-5.714-164.571-71.714T0 645.143q0-62.857 31.429-116t84-84q-6.858-22.286-6.858-46.857 0-65.715 46.858-112T269.143 240q54.286 0 98.286 33.143 42.857-88 127.142-141.714t186.572-53.715q94.857 0 174.857 46t126.571 124.857 46.572 172q0 3.429-.286 10.286t-.286 10.286zm-761.142 152q0 69.714 48 110.286T434.286 744q78.285 0 137.143-56.571-9.143-11.429-27.143-32.286t-24.857-28.857q-38.286 37.143-82.286 37.143-31.429 0-53.429-19.143t-22-50q0-30.286 22-49.715T436 525.143q25.143 0 48.286 12T526 568.57t37.143 42.858 39.428 46.857 44 42.857T702 732.57t69.429 12q69.142 0 116.857-40.857T936 594.857q0-69.143-48-109.714T769.714 444.57Q688 444.571 632 500l53.143 61.714q37.714-36.571 81.143-36.571 29.714 0 52.571 18.857t22.857 48q0 32.571-21.143 52.286T766.857 664q-24.571 0-47.143-12t-41.143-31.429-37.428-42.857-39.714-46.857T557.143 488 502 456.571t-67.714-12q-69.715 0-118.286 40.286t-48.571 108.286z"/></svg>';var $A={useBabel:!1,jsLib:[],cssLib:[],codepenLayout:"left",codepenEditors:"101",babel:"https://unpkg.com/@babel/standalone/babel.min.js",vue:"https://unpkg.com/vue/dist/vue.global.prod.js",react:"https://unpkg.com/react/umd/react.production.min.js",reactDOM:"https://unpkg.com/react-dom/umd/react-dom.production.min.js"};const Ke=$A,Ut={html:{types:["html","slim","haml","md","markdown","vue"],map:{html:"none",vue:"none",md:"markdown"}},js:{types:["js","javascript","coffee","coffeescript","ts","typescript","ls","livescript"],map:{js:"none",javascript:"none",coffee:"coffeescript",ls:"livescript",ts:"typescript"}},css:{types:["css","less","sass","scss","stylus","styl"],map:{css:"none",styl:"stylus"}}},zA=(s,n,l)=>{const a=document.createElement(s);return ha(n)&&nn(n).forEach(e=>{if(e.indexOf("data"))a[e]=n[e];else{const o=e.replace("data","");a.dataset[o]=n[e]}}),l&&l.forEach(e=>{a.appendChild(e)}),a},dp=s=>({...Ke,...s,jsLib:Array.from(new Set([...Ke.jsLib||[],...s.jsLib||[]])),cssLib:Array.from(new Set([...Ke.cssLib||[],...s.cssLib||[]]))}),Ol=(s,n)=>{if(s[n]!==void 0)return s[n];const l=new Promise(a=>{var o;const e=document.createElement("script");e.src=n,(o=document.querySelector("body"))==null||o.appendChild(e),e.onload=()=>{a()}});return s[n]=l,l},QA=(s,n)=>{if(n.css&&Array.from(s.childNodes).every(l=>l.nodeName!=="STYLE")){const l=zA("style",{innerHTML:n.css});s.appendChild(l)}},HA=(s,n,l)=>{const a=l.getScript();if(a&&Array.from(n.childNodes).every(e=>e.nodeName!=="SCRIPT")){const e=document.createElement("script");e.appendChild(document.createTextNode(`{const document=window.document.querySelector('#${s} .vp-code-demo-display').shadowRoot;
${a}}`)),n.appendChild(e)}},jA=s=>{const n=nn(s),l={html:[],js:[],css:[],isLegal:!1};return["html","js","css"].forEach(a=>{const e=n.filter(o=>Ut[a].types.includes(o));if(e.length){const o=e[0];l[a]=[s[o].replace(/^\n|\n$/g,""),Ut[a].map[o]||o]}}),l.isLegal=(!l.html.length||l.html[1]==="none")&&(!l.js.length||l.js[1]==="none")&&(!l.css.length||l.css[1]==="none"),l},bi=s=>s.replace(/<br \/>/g,"<br>").replace(/<((\S+)[^<]*?)\s+\/>/g,"<$1></$2>"),_i=s=>`<div id="app">
${bi(s)}
</div>`,GA=s=>`${s.replace("export default ","const $reactApp = ").replace(/App\.__style__(\s*)=(\s*)`([\s\S]*)?`/,"")};
ReactDOM.createRoot(document.getElementById("app")).render(React.createElement($reactApp))`,UA=s=>s.replace(/export\s+default\s*\{(\n*[\s\S]*)\n*\}\s*;?$/u,"Vue.createApp({$1}).mount('#app')").replace(/export\s+default\s*define(Async)?Component\s*\(\s*\{(\n*[\s\S]*)\n*\}\s*\)\s*;?$/u,"Vue.createApp({$1}).mount('#app')").trim(),hi=s=>`(function(exports){var module={};module.exports=exports;${s};return module.exports.__esModule?module.exports.default:module.exports;})({})`,WA=(s,n)=>{const l=dp(n),a=s.js[0]||"";return{...l,html:bi(s.html[0]||""),js:a,css:s.css[0]||"",isLegal:s.isLegal,getScript:()=>{var e;return l.useBabel?((e=window.Babel.transform(a,{presets:["es2015"]}))==null?void 0:e.code)||"":a}}},KA=/<template>([\s\S]+)<\/template>/u,YA=/<script(\s*lang=(['"])(.*?)\2)?>([\s\S]+)<\/script>/u,XA=/<style(\s*lang=(['"])(.*?)\2)?\s*(?:scoped)?>([\s\S]+)<\/style>/u,ZA=(s,n)=>{const l=dp(n),a=s.html[0]||"",e=KA.exec(a),o=YA.exec(a),t=XA.exec(a),r=e?e[1].replace(/^\n|\n$/g,""):"",[B="",i=""]=o?[o[4].replace(/^\n|\n$/g,""),o[3]]:[],[d="",y=""]=t?[t[4].replace(/^\n|\n$/g,""),t[3]]:[],u=i===""&&(y===""||y==="css");return{...l,html:_i(r),js:UA(B),css:d,isLegal:u,jsLib:[l.vue,...l.jsLib],getScript:()=>{var F,_;const A=n.useBabel?((_=(F=window.Babel)==null?void 0:F.transform(B,{presets:["es2015"]}))==null?void 0:_.code)||"":B.replace(/export\s+default/u,"return");return`const app=window.document.createElement('div');document.firstElementChild.appendChild(app);const appOptions=${hi(A)};appOptions.template=\`${r.replace("`",'\\`"')}\`;window.Vue.createApp(appOptions).mount(app);`}}},JA=(s,n)=>{const l=dp(n);return{...l,html:_i(""),js:GA(s.js[0]||""),css:s.css[0]||(s.js[0]?s.js[0].replace(/App\.__style__(?:\s*)=(?:\s*)`([\s\S]*)?`/,"$1").trim():""),isLegal:s.isLegal,jsLib:[l.react,l.reactDOM,...l.jsLib],jsx:!0,getScript:()=>{var e,o;const a=((o=(e=window.Babel)==null?void 0:e.transform(s.js[0]||"",{presets:["es2015","react"]}))==null?void 0:o.code)||"";return`window.ReactDOM.createRoot(document.firstElementChild).render(window.React.createElement(${hi(a)}))`}}},kl={},s8=s=>Promise.all([Ol(kl,s.babel),Ol(kl,s.react),Ol(kl,s.reactDOM)]),n8=s=>{const n=[Ol(kl,s.vue)];return s.useBabel&&n.push(Ol(kl,s.babel)),Promise.all(n)},l8=s=>s.useBabel?Ol(kl,s.babel):Promise.resolve();var a8=R({name:"CodeDemo",props:{id:{type:String,required:!0},type:{type:String,default:"normal"},title:{type:String,default:""},config:{type:String,default:""},code:{type:String,required:!0}},slots:Object,setup(s,{slots:n}){const[l,a]=Be(!1),e=Ms(),o=Ms(),t=G("0"),r=G(!1),B=h(()=>JSON.parse(s.config?Rt(s.config):"{}")),i=h(()=>{const F=JSON.parse(Rt(s.code));return jA(F)}),d=h(()=>s.type==="react"?JA(i.value,B.value):s.type==="vue"?ZA(i.value,B.value):WA(i.value,B.value)),y=h(()=>d.value.isLegal),u=(F=!1)=>{const _=e.value.attachShadow({mode:"open"}),C=document.createElement("div");C.classList.add("code-demo-app"),_.appendChild(C),y.value?(F&&(C.innerHTML=d.value.html),QA(_,d.value),HA(s.id,_,d.value),t.value="0"):t.value="auto",r.value=!0},A=()=>{switch(s.type){case"react":return s8(d.value).then(()=>u());case"vue":return n8(d.value).then(()=>u());default:return l8(d.value).then(()=>u(!0))}};return Ts("beforeprint",()=>{a(!0)}),ms(()=>{setTimeout(()=>{A()},800)}),()=>{var F;return c("div",{class:"vp-code-demo",id:s.id},[c("div",{class:"vp-code-demo-header"},[d.value.isLegal?c("button",{type:"button",title:"toggle","aria-hidden":!0,class:["vp-code-demo-toggle-button",l.value?"down":"end"],onClick:()=>{t.value=l.value?"0":`${o.value.clientHeight+13.8}px`,a()}}):null,s.title?c("span",{class:"vp-code-demo-title"},decodeURIComponent(s.title)):null,d.value.isLegal&&d.value.jsfiddle!==!1?c("form",{class:"code-demo-jsfiddle",target:"_blank",action:"https://jsfiddle.net/api/post/library/pure/",method:"post"},[c("input",{type:"hidden",name:"html",value:d.value.html}),c("input",{type:"hidden",name:"js",value:d.value.js}),c("input",{type:"hidden",name:"css",value:d.value.css}),c("input",{type:"hidden",name:"wrap",value:"1"}),c("input",{type:"hidden",name:"panel_js",value:"3"}),c("input",{type:"hidden",name:"resources",value:[...d.value.cssLib,...d.value.jsLib].join(",")}),c("button",{type:"submit",class:"jsfiddle-button",innerHTML:NA,"aria-label":"JSFiddle","data-balloon-pos":"up"})]):null,!d.value.isLegal||d.value.codepen!==!1?c("form",{class:"code-demo-codepen",target:"_blank",action:"https://codepen.io/pen/define",method:"post"},[c("input",{type:"hidden",name:"data",value:JSON.stringify({html:d.value.html,js:d.value.js,css:d.value.css,js_external:d.value.jsLib.join(";"),css_external:d.value.cssLib.join(";"),layout:d.value.codepenLayout,html_pre_processor:i.value?i.value.html[1]:"none",js_pre_processor:i.value?i.value.js[1]:d.value.jsx?"babel":"none",css_pre_processor:i.value?i.value.css[1]:"none",editors:d.value.codepenEditors})}),c("button",{type:"submit",innerHTML:qA,class:"codepen-button","aria-label":"Codepen","data-balloon-pos":"up"})]):null]),r.value?null:c(Qr,{class:"vp-code-demo-loading"}),c("div",{ref:e,class:"vp-code-demo-display",style:{display:y.value&&r.value?"block":"none"}}),c("div",{class:"vp-code-demo-code-wrapper",style:{height:t.value}},c("div",{ref:o,class:"vp-code-demo-codes"},(F=n.default)==null?void 0:F.call(n)))])}}}),e8=R({name:"MdDemo",props:{id:{type:String,required:!0},title:{type:String,default:""}},slots:Object,setup(s,{slots:n}){const[l,a]=Be(!1),e=Ms(),o=G("0");return Ts("beforeprint",()=>{a(!0)}),()=>{var t,r;return c("div",{class:"vp-md-demo",id:s.id},[c("div",{class:"vp-md-demo-header"},[c("button",{type:"button",title:"toggle","aria-hidden":!0,class:["vp-md-demo-toggle-button",l.value?"down":"end"],onClick:()=>{o.value=l.value?"0":`${e.value.clientHeight+13.8}px`,a()}}),s.title?decodeURIComponent(s.title):null]),c("div",{class:"vp-md-demo-display"},(t=n.default)==null?void 0:t.call(n)),c("div",{class:"vp-md-demo-code-wrapper",style:{height:o.value}},c("div",{ref:e,class:"vp-md-demo-codes"},(r=n.code)==null?void 0:r.call(n)))])}}});const o8=()=>{Ts("beforeprint",()=>{document.querySelectorAll("details").forEach(s=>{s.open=!0})})},Ye=Fl("VUEPRESS_TAB_STORE",{});var p8=R({name:"Tabs",props:{active:{type:Number,default:0},data:{type:Array,required:!0},id:{type:String,required:!0},tabId:{type:String,default:""}},slots:Object,setup(s,{slots:n}){const l=G(s.active),a=Ms([]),e=()=>{s.tabId&&(Ye.value[s.tabId]=s.data[l.value].id)},o=(i=l.value)=>{l.value=i<a.value.length-1?i+1:0,a.value[l.value].focus()},t=(i=l.value)=>{l.value=i>0?i-1:a.value.length-1,a.value[l.value].focus()},r=(i,d)=>{i.key===" "||i.key==="Enter"?(i.preventDefault(),l.value=d):i.key==="ArrowRight"?(i.preventDefault(),o()):i.key==="ArrowLeft"&&(i.preventDefault(),t()),e()},B=()=>{if(s.tabId){const i=s.data.findIndex(({id:d})=>Ye.value[s.tabId]===d);if(i!==-1)return i}return s.active};return ms(()=>{l.value=B(),rs(()=>Ye.value[s.tabId],(i,d)=>{if(s.tabId&&i!==d){const y=s.data.findIndex(({id:u})=>u===i);y!==-1&&(l.value=y)}})}),()=>s.data.length?c("div",{class:"vp-tabs"},[c("div",{class:"vp-tabs-nav",role:"tablist"},s.data.map(({id:i},d)=>{const y=d===l.value;return c("button",{type:"button",ref:u=>{u&&(a.value[d]=u)},class:["vp-tab-nav",{active:y}],role:"tab","aria-controls":`tab-${s.id}-${d}`,"aria-selected":y,onClick:()=>{l.value=d,e()},onKeydown:u=>r(u,d)},n[`title${d}`]({value:i,isActive:y}))})),s.data.map(({id:i},d)=>{const y=d===l.value;return c("div",{class:["vp-tab",{active:y}],id:`tab-${s.id}-${d}`,role:"tabpanel","aria-expanded":y},[c("div",{class:"vp-tab-title"},n[`title${d}`]({value:i,isActive:y})),n[`tab${d}`]({value:i,isActive:y})])})]):null}});const t8=Dn({enhance:({app:s})=>{s.component("CodeTabs",VA),dn("CodeGroup",s)||s.component("CodeGroup",MA),dn("CodeGroupItem",s)||s.component("CodeGroupItem",fi),s.component("CodeDemo",a8),s.component("MdDemo",e8),s.component("Tabs",p8)},setup:()=>{o8()}});let c8={};const Ci=Symbol(""),r8=()=>us(Ci),i8=s=>{s.provide(Ci,c8)};var B8={"/":{closeTitle:"关闭",downloadTitle:"下载图片",fullscreenTitle:"切换全屏",zoomTitle:"缩放",arrowPrevTitle:"上一个 (左箭头)",arrowNextTitle:"下一个 (右箭头)"}};const d8=".theme-hope-content :not(a) > img:not([no-view])",y8=B8,v8=800,u8='<div class="photo-swipe-loading"><svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" preserveAspectRatio="xMidYMid" viewBox="25 25 50 50"><animateTransform attributeName="transform" type="rotate" dur="2s" keyTimes="0;1" repeatCount="indefinite" values="0;360"></animateTransform><circle cx="50" cy="50" r="20" fill="none" stroke="currentColor" stroke-width="4" stroke-linecap="round"><animate attributeName="stroke-dasharray" dur="1.5s" keyTimes="0;0.5;1" repeatCount="indefinite" values="1,200;90,200;1,200"></animate><animate attributeName="stroke-dashoffset" dur="1.5s" keyTimes="0;0.5;1" repeatCount="indefinite" values="0;-35px;-125px"></animate></circle></svg></div>',A8=s=>cs(s)?Array.from(document.querySelectorAll(s)):s.map(n=>Array.from(document.querySelectorAll(n))).flat(),gi=s=>new Promise((n,l)=>{s.complete?n({type:"image",element:s,src:s.src,width:s.naturalWidth,height:s.naturalHeight,alt:s.alt,msrc:s.src}):(s.onload=()=>n(gi(s)),s.onerror=a=>l(a))}),m8=()=>{const s=al(y8),n=fs(),l=Bs(),{isSupported:a,toggle:e}=rp(),o=r8();let t;const r=h(()=>n.value.photoSwipe===!1?!1:n.value.photoSwipe||d8),B=d=>{d.on("uiRegister",()=>{a&&d.ui.registerElement({name:"fullscreen",order:7,isButton:!0,html:'<svg class="pswp__icn" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg"><path d="M249.5 270.833H437v-75H212a37.5 37.5 0 0 0-37.5 37.5v225h75v-187.5zm-37.5 600h225v-75H249.5v-187.5h-75v225a37.5 37.5 0 0 0 37.5 37.5zm637.5-37.5v-225h-75v187.5H587v75h225a37.5 37.5 0 0 0 37.5-37.5zM587 270.833h187.5v187.5h75v-225a37.5 37.5 0 0 0-37.5-37.5H587v75z"/></svg>',onClick:()=>{e()}}),d.ui.registerElement({name:"download",order:8,isButton:!0,tagName:"a",html:{isCustomSVG:!0,inner:'<path d="M20.5 14.3 17.1 18V10h-2.2v7.9l-3.4-3.6L10 16l6 6.1 6-6.1-1.5-1.6ZM23 23H9v2h14" id="pswp__icn-download"/>',outlineID:"pswp__icn-download"},onInit:(y,u)=>{y.setAttribute("download",""),y.setAttribute("target","_blank"),y.setAttribute("rel","noopener"),u.on("change",()=>{y.setAttribute("href",u.currSlide.data.src)})}}),d.ui.registerElement({name:"bulletsIndicator",className:"photo-swipe-bullets-indicator",appendTo:"wrapper",onInit:(y,u)=>{const A=[];let F=-1;for(let _=0;_<u.getNumItems();_++){const C=document.createElement("div");C.className="photo-swipe-bullet",C.onclick=D=>{u.goTo(A.indexOf(D.target))},A.push(C),y.appendChild(C)}u.on("change",()=>{F>=0&&A[F].classList.remove("active"),A[u.currIndex].classList.add("active"),F=u.currIndex})}})})},i=async()=>{if(r.value)return Promise.all([p(()=>import("./photoswipe.esm-08_zHRDQ.js"),__vite__mapDeps([])),Vn().then(()=>new Promise(d=>setTimeout(d,v8)).then(()=>A8(r.value)))]).then(([{default:d},y])=>{const u=y.map(A=>({html:u8,element:A,msrc:A.src}));y.forEach((A,F)=>{const _=()=>{t=new d({preloaderDelay:0,showHideAnimationType:"zoom",...s.value,...o,dataSource:u,index:F,closeOnVerticalDrag:!0,wheelToZoom:!1}),B(t),t.addFilter("thumbEl",()=>A),t.addFilter("placeholderSrc",()=>A.src),t.init()};A.style.cursor="zoom-in",A.addEventListener("click",()=>{_()}),A.addEventListener("keypress",({key:C})=>{C==="Enter"&&_()})}),y.forEach((A,F)=>{gi(A).then(_=>{u.splice(F,1,_),t==null||t.refreshSlideContent(F)})})})};ms(()=>{Ts("wheel",()=>{t==null||t.close()}),rs(()=>l.value.path,i,{immediate:!0})})};var F8=Dn({enhance:({app:s})=>{i8(s)},setup:()=>{m8()}}),Wt={"/":{word:"约 $word 字",less1Minute:"小于 1 分钟",time:"大约 $time 分钟"}};const Li=()=>{const s=Bs();return h(()=>s.value.readingTime??null)},bo=typeof Wt>"u"?null:Wt,Ti=(s,n)=>{const{minutes:l,words:a}=s,{less1Minute:e,word:o,time:t}=n;return{time:l<1?e:t.replace("$time",Math.round(l).toString()),words:o.replace("$word",a.toString())}},Kt={words:"",time:""},Ii=()=>bo?al(bo):h(()=>null),E8=()=>{if(typeof bo>"u")return h(()=>Kt);const s=Li(),n=Ii();return h(()=>s.value&&n.value?Ti(s.value,n.value):Kt)},qn=()=>Ei(),ts=()=>gA(),El=()=>h(()=>!!qn().value.pure);var Xe=R({name:"EmptyComponent",setup:()=>()=>null});const D8="719px",f8="1440px",b8="false",yp={mobileBreakPoint:D8,pcBreakPoint:f8,enableThemeColor:b8},vp={"/linux/":["文件操作",{text:"01 工具和基本命令",prefix:"01 工具和基本命令/",collapsible:!0,children:["配置一台ubuntu","软链接（符号链接）和硬链接","打包和压缩","netstat使用","tree常用命令","wget使用","centos7配置"]},{text:"02 Vim",prefix:"02 vim/",collapsible:!0,children:["vim的配置和使用"]},{text:"03 编译工具",prefix:"03 编译工具/",collapsible:!0,children:["/linux/03%20%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/gcc_g__%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BC%96%E8%AF%91%E5%91%BD%E4%BB%A4.html","gdb调试出错的程序","makefile使用方法","CMake的使用"]},{text:"04 文件操作",prefix:"04 文件操作/",collapsible:!0,children:["字符串转不同进制数字"]}],"/algo/":["统计单词的个数","统计字母、数组、空格的个数",{text:"01 数组",prefix:"01 数组/",collapsible:!0,children:["数组基础","LeetCode 704.二分查找","二分查找总结","LeetCode 27. 移除元素","LeetCode 977.有序数组的平方","LeetCode 209.长度最小的子数组","LeetCode 59.螺旋矩阵Ⅱ","905. 按奇偶排序数组","344.反转字符串","查找两个数组的公共元素","查找三个数组的公共元素","查找最大和次大的元素","查找N个数组的公共元素","查找出现次数超过一半的元素"]},{text:"02 链表",prefix:"02 链表/",collapsible:!0,children:["链表基础","LeetCode 203.移除链表元素","LeetCode707","leetcode 21. 合并两个有序链表","leetcode86. 分隔链表（链表的分解）","Leetcode23. 合并 K 个升序链表","查找链表中倒数第N个结点","Leetcode19. 删除链表的倒数第N个结点","Leetcode876.链表的中间结点","leetcode141.环形链表(判断链表是否有环)","Leetcode142.环形链表II(查找环的入口地址)","leetcode160.相交链表(判断链表是否相交)","leetcode206.反转链表","leetcode92.反转链表II","234.回文链表","leetcode61.旋转链表","约瑟夫环问题"]},{text:"03 哈希算法",prefix:"03 哈希算法/",collapsible:!0,children:["242.有效的字母异位词","349.两个数组的交集","217.存在重复元素","219.存在重复元素 II","220. 存在重复元素 III","594. 最长和谐子序列","128. 最长连续序列","383. 赎金信","202. 快乐数","1. 两数之和","167. 两数之和 II - 输入有序数组","15. 三数之和"]},{text:"04 排序算法",prefix:"04 排序算法/",collapsible:!0,children:["冒泡排序","选择排序","插入排序","桶排序","（简单）快速排序","希尔排序","归并排序","堆排序","基数排序","计数排序"]},{text:"堆",prefix:"堆/",collapsible:!0,children:["上滤"]},{text:"队",prefix:"队/",collapsible:!0,children:["两个栈实现队列","新建 Markdown"]},{text:"栈",prefix:"栈/",collapsible:!0,children:["新建 Markdown"]}],"/redis/":["Redis的安装","认识NoSQL和Redis","string和hash数据类型","list数据类型","set和sorted_set数据类型","数据类型实践案例","key通用指令","RDB持久化","AOF持久化","事务和事务锁","高级数据类型Bitmaps、HyperLogLog、GEO","删除策略"],"/network/":["TCP和UDP的区别",{text:"序列化",prefix:"序列化/",collapsible:!0,children:["Json简介及使用","Protobuf简介及使用"]}],"/others/":["autohotkey笔记",{text:"Git的分布式管理",prefix:"git的分布式管理/",collapsible:!0,children:["基本概念和环境搭建","常用命令以及原理","各阶段代码修改回退撤销操作","推送代码冲突解决","本地分支管理","远程分支管理"]},"SourceInsight","typora配置"],"/ccpp/":[{text:"00 基础必备",prefix:"00 基础必备/",collapsible:!0,children:["进程虚拟地址空间","指令角度堆栈调用过程","/ccpp/00%20%E5%9F%BA%E7%A1%80%E5%BF%85%E5%A4%87/%E7%BC%96%E8%AF%91%E5%99%A8%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3c__%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BC%96%E8%AF%91%E5%92%8C%E9%93%BE%E6%8E%A5.html","反汇编小结"]},{text:"01 C语言基础",prefix:"01 c语言基础/",collapsible:!0,children:["前言","数据类型","关键字","常量","进制转换","变量","整型","补码","scanf","浮点数","字符","do-while(0)","malloc、free的底层实现"]},{text:"02 C++基础",prefix:"02 c__基础/",collapsible:!0,children:["/ccpp/02%20c__%E5%9F%BA%E7%A1%80/c__%E5%88%9D%E6%8E%A2.html","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.html","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%AE%89%E5%85%A8.html","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/const.html","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/new%E3%80%81delete.html","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E5%BC%95%E7%94%A8.html","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2.html","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD.html","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0.html","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/bool.html","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/inline%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0.html","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/string.html","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90.html"]},{text:"03 类和对象",prefix:"03 类和对象/",collapsible:!0,children:["类和对象","构造函数和析构函数","拷贝构造函数","指向类型成员的指针","this","赋值运算符函数","拷贝构造和赋值重载的实践","特殊数据成员的初始化","特殊的成员函数","组织对象"]},{text:"04 模板",prefix:"04 模板/",collapsible:!0,children:["函数模板与模板函数","类模板与模板类","可变模板参数","STL向量容器vector简单实现","容器空间适配器allocator的简单实现"]},{text:"05 运算符重载",prefix:"05 运算符重载/",collapsible:!0,children:["复数类CComplex","友元","运算符重载实现string类","string迭代器的实现","vector迭代器的实现","迭代器失效的底层核心原理","剖析new和delete实习原理","重载new和delete运算符实现一个对象池"]},{text:"06 继承",prefix:"06 继承/",collapsible:!0,children:["继承的本质和原理","派生方式对基类成员的访问权限","派生类的构造过程","重载，隐藏，重写（覆盖）","继承中的类型转换","多基继承","派生类对象间的复制控制","菱形继承问题"]},{text:"07 多态",prefix:"07 多态/",collapsible:!0,children:["虚函数","静态绑定和动态绑定","虚函数的访问","哪些函数不能被设置为虚函数","虚析构","多态的定义和原理","纯虚函数和抽象类","继承多态与虚函数案例分析","虚基类和虚继承","虚拟继承时派生类对象的构造和析构","测试虚表的存在","带虚函数的多基派生"]},{text:"09 标准库 S T L",prefix:"09 标准库STL/",collapsible:!0,children:["STL顺序容器：vector、deque、list","容器适配器：栈、队列、优先级队列","无序关联容器、有序关联容器","迭代器iterator","函数对象与函数指针","泛型算法与绑定器"]},{text:"10 设计模式",prefix:"10 设计模式/",collapsible:!0,children:["Pimpl","单例模式","简单工厂、工厂方法、抽象工厂","代理模式、适配器模式、装饰器模式","观察者Observer模式"]},{text:"11 资源管理",prefix:"11 资源管理/",collapsible:!0,children:["valgrind"]},{text:"12 日志",prefix:"12 日志/",collapsible:!0,children:["log4cpp"]},{text:"14 面试题",prefix:"14 面试题/",collapsible:!0,children:["/ccpp/14%20%E9%9D%A2%E8%AF%95%E9%A2%98/%E4%B8%BA%E4%BB%80%E4%B9%88c%E5%92%8Cc__%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BB%8E%E5%8F%B3%E5%BE%80%E5%B7%A6%E5%8E%8B%E6%A0%88.html","分析这段代码构造函数和析构函数的调用顺序","空结构体的大小"]},{text:"15 对象的优化",prefix:"15 对象的优化/",collapsible:!0,children:["/ccpp/15%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BC%98%E5%8C%96/C__%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BC%98%E5%8C%96.html","/ccpp/15%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BC%98%E5%8C%96/C__%E7%9A%84%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8.html","move移动语义和forward完美转发"]},{text:"16 智能指针",prefix:"16 智能指针/",collapsible:!0,children:["不带引用计数的智能指针","带引用计数的智能指针","多线程访问共享对象的线程安全问题","自定义删除器"]},{text:"17 Bind绑定器和function函数对象",prefix:"17 bind绑定器和function函数对象/",collapsible:!0,children:["bind1st和bind2d使用","function函数对象类型的应用","模板的完全特例化和非完全特例化","/ccpp/17%20bind%E7%BB%91%E5%AE%9A%E5%99%A8%E5%92%8Cfunction%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/C__11%E7%BB%91%E5%AE%9A%E5%99%A8%E4%BB%8B%E7%BB%8D.html","function函数对象类型实现原理","bind和function实现muduo中的线程池","lambda表达式"]},{text:"18 C++11知识汇总",prefix:"18 C__11知识汇总/",collapsible:!0,children:["/ccpp/18%20C__11%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/C__11%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93.html","/ccpp/18%20C__11%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/C__11%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B.html","/ccpp/18%20C__11%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/C__11%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E5%90%8C%E6%AD%A5%E9%80%9A%E4%BF%A1(%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B).html","/ccpp/18%20C__11%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/%E5%86%8D%E8%B0%88mtx%E5%92%8Clock_guard%E5%92%8Cunique_lock.html","/ccpp/18%20C__11%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/%E5%9F%BA%E4%BA%8ECAS%E6%93%8D%E4%BD%9C%E7%9A%84atomic%E5%8E%9F%E5%AD%90%E7%B1%BB%E5%9E%8B.html"]},{text:"19 S G I S T L二级空间配置器内存池源码",prefix:"19 SGI STL二级空间配置器内存池源码/",collapsible:!0,children:["SGI STL的verctor是怎么管理对象的","SGI STL二级空间配置器重要成员解读","两个重要的函数","内存池allocate分配过程","分配内存池_S_refill源码","实际分配内存池_S_chunk_alloc源码","内存归还dealloacte","reallocate","总结"]}],"/mysql/":[{text:"01 My S Q L基础",prefix:"01 MySQL基础/",collapsible:!0,children:["mysql的安装","知识拓展","基本数据类型","运算符","完整性约束","关系型数据库表设计","范式设计","常用函数","c语言连接MySQL","用户管理与授权"]},{text:"02 My S Q L核心 S Q L",prefix:"02 MySQL核心SQL/",collapsible:!0,children:["概述","mysql的库操作","表操作","CRUD","select查询","DML小结","多表select-连接查询","DCL小结"]},{text:"03 My S Q L存储引擎",prefix:"03 MySQL存储引擎/",collapsible:!0,children:["MySQL存储引擎"]},{text:"04 M Y S Q L索引",prefix:"04 MYSQL索引/",collapsible:!0,children:["索引基础","索引的使用和分析","索引的底层实现原理","InnoDB的主键和二级索引树","哈希索引","InnoDB自适应哈希索引","MySQL索引常见问题","MySQL优化之慢日志查询"]},{text:"05 My S Q L事务",prefix:"05 MySQL事务/",collapsible:!0,children:["事务的概念","事务的ACID特性","事务并发存在的问题(脏读、不可重复读和幻读)","MySQL事务的隔离级别"]},{text:"06 My S Q L的锁机制",prefix:"06 MySQL的锁机制/",collapsible:!0,children:["表级锁和行级锁","排它锁和共享锁","死锁","锁的优化建议","MySQL间隙锁（幻读解决原理）","MySQL回滚日志undo log","MySQL MVCC多版本并发控制（脏读和不可重复读解决原理）","MySQL 意向共享锁、意向排他锁","/mysql/06%20MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/%E8%AE%B0%E5%BD%95%E9%94%81_%E9%97%B4%E9%9A%99%E9%94%81%E5%8F%AF%E4%BB%A5%E9%98%B2%E6%AD%A2%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C%E8%80%8C%E5%AF%BC%E8%87%B4%E7%9A%84%E5%B9%BB%E8%AF%BB%E5%90%97.html"]},{text:"07 My S Q L优化",prefix:"07 MySQL优化/",collapsible:!0,children:["sql优化","SQL和索引优化总结"]},{text:"08 My S Q L日志",prefix:"08 MySQL日志/",collapsible:!0,children:["MySQL重做日志redo log","Server 层四个日志"]},{text:"09 数据备份",prefix:"09 数据备份/",collapsible:!0,children:["mysqldump数据备份"]},{text:"10 My S Q L集群",prefix:"10 MySQL集群/",collapsible:!0,children:["主从复制原理","配置主从复制实践","读写分离原理","读写分离配置实践"]},{text:"11 拓展",prefix:"11 拓展/",collapsible:!0,children:["SQL的完整处理流程","分库分表实践"]},{text:"12 连接池",prefix:"12 连接池/",collapsible:!0,children:["概述","数据库编程部分实现","连接池单例模式实践","最大空闲时间回收连接扫描线程的实现","加载配置项","生产者线程的实现","消费者线程的实现","压力测试"]}]},Oi=s=>{const{icon:n="",color:l,size:a}=s,e={};return l&&(e.color=l),a&&(e.height=Number.isNaN(Number(a))?a:`${a}px`),Al(n)?c("img",{class:"icon",src:n,"no-view":"",style:e}):ga(n)?c("img",{class:"icon",src:_s(n),"aria-hidden":"","no-view":"",style:e}):c(sn("FontIcon"),s)};Oi.displayName="HopeIcon";var Qs=Oi;const Ia=()=>{const s=Hs(),n=Ln();return l=>{if(l)if(ga(l))n.path!==l&&s.push(l);else if(vr(l))window&&window.open(l);else{const a=n.path.slice(0,n.path.lastIndexOf("/"));s.push(`${a}/${encodeURI(l)}`)}}},ki=()=>{const s=ts(),n=fs();return h(()=>{const{author:l}=n.value;return l?Aa(l):l===!1?[]:Aa(s.value.author,!1)})},_8=()=>{const s=fs();return h(()=>Kr(s.value.category).map(n=>{var l,a;return{name:n,path:((a=(l=us(Symbol.for("categoryMap")))==null?void 0:l.value.map[n])==null?void 0:a.path)||""}}))},h8=()=>{const s=fs();return h(()=>Yr(s.value.tag).map(n=>{var l,a;return{name:n,path:((a=(l=us(Symbol.for("tagMap")))==null?void 0:l.value.map[n])==null?void 0:a.path)||""}}))},C8=()=>{const s=fs(),n=Bs();return h(()=>{const l=op(s.value.date);if(l)return l;const{createdTime:a}=n.value.git||{};return a?new Date(a):null})},g8=()=>{const s=ts(),n=Bs(),l=fs(),a=ki(),e=_8(),o=h8(),t=C8(),r=Li(),B=E8(),i=h(()=>({author:a.value,category:e.value,date:t.value,localizedDate:n.value.localizedDate,tag:o.value,isOriginal:l.value.isOriginal||!1,readingTime:r.value,readingTimeLocale:B.value,pageview:"pageview"in l.value?l.value.pageview:!0})),d=h(()=>"pageInfo"in l.value?l.value.pageInfo:"pageInfo"in s.value?s.value.pageInfo:null);return{info:i,items:d}},{mobileBreakPoint:L8,pcBreakPoint:T8}=yp,Yt=s=>s.endsWith("px")?Number(s.slice(0,-2)):null,Oa=()=>{const s=G(!1),n=G(!1),l=()=>{s.value=window.innerWidth<=(Yt(L8)??719),n.value=window.innerWidth>=(Yt(T8)??1440)};return ms(()=>{l(),Ts("resize",l,!1),Ts("orientationchange",l,!1)}),{isMobile:s,isPC:n}},wi=Symbol(""),ka=()=>{const s=us(wi);if(!s)throw new Error("useDarkmode() is called without provider.");return s},I8=s=>{const n=qn(),l=ju(),a=Fl("vuepress-theme-hope-scheme","auto"),e=h(()=>n.value.darkmode||"switch"),o=h(()=>{const r=e.value;return r==="disable"?!1:r==="enable"?!0:r==="auto"?l.value:r==="toggle"?a.value==="dark":a.value==="dark"||a.value==="auto"&&l.value}),t=h(()=>{const r=e.value;return r==="switch"||r==="toggle"});s.provide(wi,{canToggle:t,config:e,isDarkmode:o,status:a}),Object.defineProperties(s.config.globalProperties,{$isDarkmode:{get:()=>o.value}})},O8=()=>{const{isDarkmode:s}=ka(),n=(l=s.value)=>document.documentElement.setAttribute("data-theme",l?"dark":"light");ms(()=>{rs(s,n,{immediate:!0})})};var Us=R({name:"AutoLink",inheritAttrs:!1,props:{config:{type:Object,required:!0},exact:Boolean,noExternalLinkIcon:Boolean},emits:["focusout"],slots:Object,setup(s,{attrs:n,emit:l,slots:a}){const e=Ln(),o=_r(),t=Ql(s,"config"),r=h(()=>Al(t.value.link)),B=h(()=>!r.value&&vr(t.value.link)),i=h(()=>t.value.target||(r.value?"_blank":void 0)),d=h(()=>i.value==="_blank"),y=h(()=>!r.value&&!B.value&&!d.value),u=h(()=>t.value.rel||(d.value?"noopener noreferrer":void 0)),A=h(()=>t.value.ariaLabel||t.value.text),F=h(()=>{if(s.exact)return!1;const C=nn(o.value.locales);return C.length?C.every(D=>D!==t.value.link):t.value.link!=="/"}),_=h(()=>y.value?t.value.activeMatch?new RegExp(t.value.activeMatch).test(e.path):F.value?nl(e.path,t.value.link):e.path===t.value.link:!1);return()=>{const{before:C,after:D,default:I}=a,{text:f,icon:T,link:V}=t.value;return y.value?c(ks,{to:V,"aria-label":A.value,...n,class:["nav-link",{active:_.value},n.class],onFocusout:()=>l("focusout")},()=>I?I():[C?C():c(Qs,{icon:T}),f,D==null?void 0:D()]):c("a",{href:V,rel:u.value,target:i.value,"aria-label":A.value,...n,class:["nav-link",n.class],onFocusout:()=>l("focusout")},I?I():[C?C():c(Qs,{icon:T}),f,s.noExternalLinkIcon?null:c(mi),D==null?void 0:D()])}}});const $l=(s,n,l=!1)=>"activeMatch"in n?new RegExp(n.activeMatch).test(s.path):Zr(s,n.link)?!0:n.children&&!l?n.children.some(a=>$l(s,a)):!1,Si=(s,n)=>n.type==="group"?n.children.some(l=>l.type==="group"?Si(s,l):l.type==="page"&&$l(s,l,!0))||"prefix"in n&&Zr(s,n.prefix):!1,Pi=(s,n)=>cs(s.link)?c(Us,{...n,config:s}):c("p",n,[c(Qs,{icon:s.icon}),s.text]),xi=s=>{const n=Ln();return s?c("ul",{class:"vp-sidebar-sub-headers"},s.map(l=>c("li",{class:"vp-sidebar-sub-header"},[Pi(l,{class:["vp-sidebar-link","vp-heading",{active:$l(n,l,!0)}]}),xi(l.children)]))):null};var Ds=(s=>(s.type="y",s.title="t",s.shortTitle="s",s.icon="i",s.author="a",s.date="d",s.localizedDate="l",s.category="c",s.tag="g",s.isEncrypted="n",s.isOriginal="o",s.readingTime="r",s.excerpt="e",s.sticky="u",s.cover="v",s.index="I",s.order="O",s))(Ds||{}),Ri=(s=>(s.article="a",s.home="h",s.slide="s",s.page="p",s))(Ri||{});const rl=(s="",n="")=>ga(n)?n:`${yr(s)}${n}`,wl=(s,n,l=!1)=>{let a=Nl(s,Ur(encodeURI(n)));a.name==="404"&&(a=Nl(s,n));const{fullPath:e,meta:o,name:t}=a;return{text:!l&&o[Ds.shortTitle]?o[Ds.shortTitle]:o[Ds.title]||n,link:t==="404"?n:e,...o[Ds.icon]?{icon:o[Ds.icon]}:{}}},k8=(s,n)=>{const l=Bs();return{type:"heading",text:s.title,link:`${l.value.path}#${s.slug}`,children:up(s.children,n)}},up=(s,n)=>n>0?s.map(l=>k8(l,n-1)):[],Vi=s=>{const n=Bs();return up(n.value.headers,s)},_o=(s,n,l="")=>{const a=Hs(),e=Bs(),o=(t,r=l)=>{var i;const B=cs(t)?wl(a,rl(r,t)):t.link?{...t,...va(t.link)?{}:{link:wl(a,rl(r,t.link)).link}}:t;if("children"in B){const d=rl(r,B.prefix),y=B.children==="structure"?vp[d]:B.children;return{type:"group",...B,prefix:d,children:y.map(u=>o(u,d))}}return{type:"page",...B,children:B.link===e.value.path?up(((i=e.value.headers[0])==null?void 0:i.level)===1?e.value.headers[0].children:e.value.headers,n):[]}};return s.map(t=>o(t))},w8=(s,n)=>{const l=Bs(),a=nn(s).sort((e,o)=>o.length-e.length);for(const e of a)if(nl(decodeURI(l.value.path),e)){const o=s[e];return o?_o(o==="structure"?vp[e]:o==="heading"?Vi(n):o,n,e):[]}return console.warn(`${l.value.path} is missing sidebar config.`),[]},S8=(s,n)=>{const l=gn();return s===!1?[]:s==="heading"?Vi(n):s==="structure"?_o(vp[l.value],n,l.value):ss(s)?_o(s,n):ha(s)?w8(s,n):[]},Mi=Symbol(""),P8=()=>{const s=fs(),n=ts(),l=Bs(),a=h(()=>s.value.home?!1:s.value.sidebar??n.value.sidebar??"structure"),e=h(()=>s.value.headerDepth??n.value.headerDepth??2),o=tp(()=>[a.value,e.value,l.value.path,null],()=>S8(a.value,e.value));rn(Mi,o)},Ap=()=>{const s=us(Mi);if(!s)throw new Error("useSidebarItems() is called without provider.");return s};var x8=R({name:"PageFooter",setup(){const s=qn(),n=ts(),l=fs(),a=ki(),e=h(()=>{const{copyright:i,footer:d}=l.value;return d!==!1&&!!(i||d||n.value.displayFooter)}),o=h(()=>{const{footer:i}=l.value;return i===!1?!1:cs(i)?i:n.value.footer||""}),t=h(()=>a.value.map(({name:i})=>i).join(", ")),r=i=>`Copyright © ${new Date().getFullYear()} ${t.value} ${i?`${i} Licensed`:""}`,B=h(()=>{const{copyright:i,license:d=""}=l.value,{license:y}=s.value,{copyright:u}=n.value;return i??(d?r(d):cs(u)?u:t.value||y?r(y):!1)});return()=>e.value?c("footer",{class:"vp-footer-wrapper"},[o.value?c("div",{class:"vp-footer",innerHTML:o.value}):null,B.value?c("div",{class:"vp-copyright",innerHTML:B.value}):null]):null}}),R8=R({name:"NavbarDropdownLink",props:{config:{type:Object,required:!0}},slots:Object,setup(s,{slots:n}){const l=Bs(),a=Ql(s,"config"),e=h(()=>a.value.ariaLabel||a.value.text),o=G(!1);rs(()=>l.value.path,()=>{o.value=!1});const t=r=>{r.detail===0&&(o.value=!o.value)};return()=>{var r;return c("div",{class:["dropdown-wrapper",{open:o.value}]},[c("button",{type:"button",class:"dropdown-title","aria-label":e.value,onClick:t},[((r=n.title)==null?void 0:r.call(n))||c("span",{class:"title"},[c(Qs,{icon:a.value.icon}),s.config.text]),c("span",{class:"arrow"}),c("ul",{class:"nav-dropdown"},a.value.children.map((B,i)=>{const d=i===a.value.children.length-1;return c("li",{class:"dropdown-item"},"children"in B?[c("h4",{class:"dropdown-subtitle"},B.link?c(Us,{config:B,onFocusout:()=>{B.children.length===0&&d&&(o.value=!1)}}):c("span",B.text)),c("ul",{class:"dropdown-subitem-wrapper"},B.children.map((y,u)=>c("li",{class:"dropdown-subitem"},c(Us,{config:y,onFocusout:()=>{u===B.children.length-1&&d&&(o.value=!1)}}))))]:c(Us,{config:B,onFocusout:()=>{d&&(o.value=!1)}}))}))])])}}});const qi=(s,n,l="")=>cs(n)?wl(s,rl(l,n)):"children"in n?{...n,...n.link&&!va(n.link)?wl(s,rl(l,n.link)):{},children:n.children.map(a=>qi(s,a,rl(l,n.prefix)))}:{...n,link:va(n.link)?n.link:wl(s,rl(l,n.link)).link},Ni=()=>{const s=ts(),n=Hs(),l=()=>(s.value.navbar||[]).map(a=>qi(n,a));return tp(()=>s.value.navbar,()=>l())},V8=()=>{const s=ts(),n=h(()=>s.value.repo||null),l=h(()=>n.value?Du(n.value):null),a=h(()=>n.value?Jr(n.value):null),e=h(()=>l.value?s.value.repoLabel??(a.value===null?"Source":a.value):null);return h(()=>!l.value||!e.value||s.value.repoDisplay===!1?null:{type:a.value||"Source",label:e.value,link:l.value})};var M8=R({name:"NavScreenDropdown",props:{config:{type:Object,required:!0}},setup(s){const n=Bs(),l=Ql(s,"config"),a=h(()=>l.value.ariaLabel||l.value.text),e=G(!1);rs(()=>n.value.path,()=>{e.value=!1});const o=(t,r)=>r[r.length-1]===t;return()=>[c("button",{type:"button",class:["nav-screen-dropdown-title",{active:e.value}],"aria-label":a.value,onClick:()=>{e.value=!e.value}},[c("span",{class:"title"},[c(Qs,{icon:l.value.icon}),s.config.text]),c("span",{class:["arrow",e.value?"down":"end"]})]),c("ul",{class:["nav-screen-dropdown",{hide:!e.value}]},l.value.children.map(t=>c("li",{class:"dropdown-item"},"children"in t?[c("h4",{class:"dropdown-subtitle"},t.link?c(Us,{config:t,onFocusout:()=>{o(t,l.value.children)&&t.children.length===0&&(e.value=!1)}}):c("span",t.text)),c("ul",{class:"dropdown-subitem-wrapper"},t.children.map(r=>c("li",{class:"dropdown-subitem"},c(Us,{config:r,onFocusout:()=>{o(r,t.children)&&o(t,l.value.children)&&(e.value=!1)}}))))]:c(Us,{config:t,onFocusout:()=>{o(t,l.value.children)&&(e.value=!1)}}))))]}}),q8=R({name:"NavScreenLinks",setup(){const s=Ni();return()=>s.value.length?c("nav",{class:"nav-screen-links"},s.value.map(n=>c("div",{class:"navbar-links-item"},"children"in n?c(M8,{config:n}):c(Us,{config:n})))):null}});const $i=()=>c(os,{name:"dark"},()=>c("path",{d:"M524.8 938.667h-4.267a439.893 439.893 0 0 1-313.173-134.4 446.293 446.293 0 0 1-11.093-597.334A432.213 432.213 0 0 1 366.933 90.027a42.667 42.667 0 0 1 45.227 9.386 42.667 42.667 0 0 1 10.24 42.667 358.4 358.4 0 0 0 82.773 375.893 361.387 361.387 0 0 0 376.747 82.774 42.667 42.667 0 0 1 54.187 55.04 433.493 433.493 0 0 1-99.84 154.88 438.613 438.613 0 0 1-311.467 128z"}));$i.displayName="DarkIcon";const zi=()=>c(os,{name:"light"},()=>c("path",{d:"M952 552h-80a40 40 0 0 1 0-80h80a40 40 0 0 1 0 80zM801.88 280.08a41 41 0 0 1-57.96-57.96l57.96-58a41.04 41.04 0 0 1 58 58l-58 57.96zM512 752a240 240 0 1 1 0-480 240 240 0 0 1 0 480zm0-560a40 40 0 0 1-40-40V72a40 40 0 0 1 80 0v80a40 40 0 0 1-40 40zm-289.88 88.08-58-57.96a41.04 41.04 0 0 1 58-58l57.96 58a41 41 0 0 1-57.96 57.96zM192 512a40 40 0 0 1-40 40H72a40 40 0 0 1 0-80h80a40 40 0 0 1 40 40zm30.12 231.92a41 41 0 0 1 57.96 57.96l-57.96 58a41.04 41.04 0 0 1-58-58l58-57.96zM512 832a40 40 0 0 1 40 40v80a40 40 0 0 1-80 0v-80a40 40 0 0 1 40-40zm289.88-88.08 58 57.96a41.04 41.04 0 0 1-58 58l-57.96-58a41 41 0 0 1 57.96-57.96z"}));zi.displayName="LightIcon";const Qi=()=>c(os,{name:"auto"},()=>c("path",{d:"M512 992C246.92 992 32 777.08 32 512S246.92 32 512 32s480 214.92 480 480-214.92 480-480 480zm0-840c-198.78 0-360 161.22-360 360 0 198.84 161.22 360 360 360s360-161.16 360-360c0-198.78-161.22-360-360-360zm0 660V212c165.72 0 300 134.34 300 300 0 165.72-134.28 300-300 300z"}));Qi.displayName="AutoIcon";const Hi=()=>c(os,{name:"enter-fullscreen"},()=>c("path",{d:"M762.773 90.24h-497.28c-96.106 0-174.4 78.293-174.4 174.4v497.28c0 96.107 78.294 174.4 174.4 174.4h497.28c96.107 0 175.04-78.293 174.4-174.4V264.64c0-96.213-78.186-174.4-174.4-174.4zm-387.2 761.173H215.04c-21.867 0-40.427-17.92-41.067-41.066V649.92c0-22.507 17.92-40.427 40.427-40.427 11.307 0 21.227 4.694 28.48 11.947 7.253 7.253 11.947 17.92 11.947 28.48v62.293l145.28-145.28c15.893-15.893 41.813-15.893 57.706 0 15.894 15.894 15.894 41.814 0 57.707l-145.28 145.28h62.294c22.506 0 40.426 17.92 40.426 40.427s-17.173 41.066-39.68 41.066zM650.24 165.76h160.427c21.866 0 40.426 17.92 41.066 41.067v160.426c0 22.507-17.92 40.427-40.426 40.427-11.307 0-21.227-4.693-28.48-11.947-7.254-7.253-11.947-17.92-11.947-28.48v-62.186L625.6 450.347c-15.893 15.893-41.813 15.893-57.707 0-15.893-15.894-15.893-41.814 0-57.707l145.28-145.28H650.88c-22.507 0-40.427-17.92-40.427-40.427s17.174-41.173 39.787-41.173z"}));Hi.displayName="EnterFullScreenIcon";const ji=()=>c(os,{name:"cancel-fullscreen"},()=>c("path",{d:"M778.468 78.62H247.922c-102.514 0-186.027 83.513-186.027 186.027V795.08c0 102.514 83.513 186.027 186.027 186.027h530.432c102.514 0 186.71-83.513 186.026-186.027V264.647C964.494 162.02 880.981 78.62 778.468 78.62zM250.88 574.35h171.122c23.324 0 43.122 19.115 43.804 43.805v171.121c0 24.008-19.114 43.122-43.122 43.122-12.06 0-22.641-5.006-30.378-12.743s-12.743-19.115-12.743-30.379V722.83L224.597 877.91c-16.953 16.952-44.6 16.952-61.553 0-16.953-16.954-16.953-44.602 0-61.554L318.009 661.39h-66.446c-24.007 0-43.122-19.114-43.122-43.122 0-24.12 18.432-43.918 42.439-43.918zm521.899-98.873H601.657c-23.325 0-43.122-19.114-43.805-43.804V260.55c0-24.007 19.115-43.122 43.122-43.122 12.06 0 22.642 5.007 30.379 12.743s12.743 19.115 12.743 30.38v66.445l154.965-154.965c16.953-16.953 44.601-16.953 61.554 0 16.953 16.953 16.953 44.6 0 61.554L705.536 388.55h66.446c24.007 0 43.122 19.115 43.122 43.122.114 24.007-18.318 43.804-42.325 43.804z"}));ji.displayName="CancelFullScreenIcon";const Gi=()=>c(os,{name:"outlook"},()=>[c("path",{d:"M224 800c0 9.6 3.2 44.8 6.4 54.4 6.4 48-48 76.8-48 76.8s80 41.6 147.2 0 134.4-134.4 38.4-195.2c-22.4-12.8-41.6-19.2-57.6-19.2C259.2 716.8 227.2 761.6 224 800zM560 675.2l-32 51.2c-51.2 51.2-83.2 32-83.2 32 25.6 67.2 0 112-12.8 128 25.6 6.4 51.2 9.6 80 9.6 54.4 0 102.4-9.6 150.4-32l0 0c3.2 0 3.2-3.2 3.2-3.2 22.4-16 12.8-35.2 6.4-44.8-9.6-12.8-12.8-25.6-12.8-41.6 0-54.4 60.8-99.2 137.6-99.2 6.4 0 12.8 0 22.4 0 12.8 0 38.4 9.6 48-25.6 0-3.2 0-3.2 3.2-6.4 0-3.2 3.2-6.4 3.2-6.4 6.4-16 6.4-16 6.4-19.2 9.6-35.2 16-73.6 16-115.2 0-105.6-41.6-198.4-108.8-268.8C704 396.8 560 675.2 560 675.2zM224 419.2c0-28.8 22.4-51.2 51.2-51.2 28.8 0 51.2 22.4 51.2 51.2 0 28.8-22.4 51.2-51.2 51.2C246.4 470.4 224 448 224 419.2zM320 284.8c0-22.4 19.2-41.6 41.6-41.6 22.4 0 41.6 19.2 41.6 41.6 0 22.4-19.2 41.6-41.6 41.6C339.2 326.4 320 307.2 320 284.8zM457.6 208c0-12.8 12.8-25.6 25.6-25.6 12.8 0 25.6 12.8 25.6 25.6 0 12.8-12.8 25.6-25.6 25.6C470.4 233.6 457.6 220.8 457.6 208zM128 505.6C128 592 153.6 672 201.6 736c28.8-60.8 112-60.8 124.8-60.8-16-51.2 16-99.2 16-99.2l316.8-422.4c-48-19.2-99.2-32-150.4-32C297.6 118.4 128 291.2 128 505.6zM764.8 86.4c-22.4 19.2-390.4 518.4-390.4 518.4-22.4 28.8-12.8 76.8 22.4 99.2l9.6 6.4c35.2 22.4 80 12.8 99.2-25.6 0 0 6.4-12.8 9.6-19.2 54.4-105.6 275.2-524.8 288-553.6 6.4-19.2-3.2-32-19.2-32C777.6 76.8 771.2 80 764.8 86.4z"})]);Gi.displayName="OutlookIcon";var Ui=R({name:"AppearanceSwitch",setup(){const{config:s,isDarkmode:n,status:l}=ka(),a=El(),e=()=>{s.value==="switch"?l.value={light:"dark",dark:"auto",auto:"light"}[l.value]:l.value=l.value==="light"?"dark":"light"},o=async t=>{if(!(document.startViewTransition&&!window.matchMedia("(prefers-reduced-motion: reduce)").matches&&!a.value)||!t){e();return}const r=t.clientX,B=t.clientY,i=Math.hypot(Math.max(r,innerWidth-r),Math.max(B,innerHeight-B)),d=n.value;await document.startViewTransition(async()=>{e(),await Vn()}).ready,n.value!==d&&document.documentElement.animate({clipPath:n.value?[`circle(${i}px at ${r}px ${B}px)`,`circle(0px at ${r}px ${B}px)`]:[`circle(0px at ${r}px ${B}px)`,`circle(${i}px at ${r}px ${B}px)`]},{duration:400,pseudoElement:n.value?"::view-transition-old(root)":"::view-transition-new(root)"})};return()=>c("button",{type:"button",id:"appearance-switch",onClick:o},[c(Qi,{style:{display:l.value==="auto"?"block":"none"}}),c($i,{style:{display:l.value==="dark"?"block":"none"}}),c(zi,{style:{display:l.value==="light"?"block":"none"}})])}}),N8=R({name:"AppearanceMode",setup(){const s=ts(),{canToggle:n}=ka(),l=h(()=>s.value.outlookLocales.darkmode);return()=>n.value?c("div",{class:"appearance-wrapper"},[c("label",{class:"appearance-title",for:"appearance-switch"},l.value),c(Ui)]):null}});const Ze="VUEPRESS_THEME_COLOR";var $8=R({name:"ThemeColorPicker",props:{themeColor:{type:Object,required:!0}},setup(s){const n=(l="")=>{const a=document.documentElement.classList,e=nn(s.themeColor);if(!l){localStorage.removeItem(Ze),a.remove(...e);return}a.remove(...e.filter(o=>o!==l)),a.add(l),localStorage.setItem(Ze,l)};return ms(()=>{const l=localStorage.getItem(Ze);l&&n(l)}),()=>c("ul",{id:"theme-color-picker"},[c("li",c("span",{class:"theme-color",onClick:()=>n()})),Ul(s.themeColor).map(([l,a])=>c("li",c("span",{style:{background:a},onClick:()=>n(l)})))])}});const Sl=yp.enableThemeColor==="true",z8=Sl?Au(Ul(yp).filter(([s])=>s.startsWith("theme-"))):{};var Q8=R({name:"ThemeColor",setup(){const s=ts(),n=h(()=>s.value.outlookLocales.themeColor);return()=>Sl?c("div",{class:"theme-color-wrapper"},[c("label",{class:"theme-color-title",for:"theme-color-picker"},n.value),c($8,{themeColor:z8})]):null}}),Wi=R({name:"ToggleFullScreenButton",setup(){const s=ts(),{isSupported:n,isFullscreen:l,toggle:a}=rp(),e=h(()=>s.value.outlookLocales.fullscreen);return()=>n?c("div",{class:"full-screen-wrapper"},[c("label",{class:"full-screen-title",for:"full-screen-switch"},e.value),c("button",{type:"button",id:"full-screen-switch",class:"full-screen",ariaPressed:l.value,onClick:()=>a()},l.value?c(ji):c(Hi))]):null}}),Ki=R({name:"OutlookSettings",setup(){const s=qn(),n=El(),l=h(()=>!n.value&&s.value.fullscreen);return()=>c(De,()=>[Sl?c(Q8):null,c(N8),l.value?c(Wi):null])}}),H8=R({name:"NavScreen",props:{show:Boolean},emits:["close"],slots:Object,setup(s,{emit:n,slots:l}){const a=Bs(),{isMobile:e}=Oa(),o=Ms(),t=ip(o);return ms(()=>{o.value=document.body,rs(e,r=>{!r&&s.show&&(t.value=!1,n("close"))}),rs(()=>a.value.path,()=>{t.value=!1,n("close")})}),Hl(()=>{t.value=!1}),()=>c(sl,{name:"fade",onEnter:()=>{t.value=!0},onAfterLeave:()=>{t.value=!1}},()=>{var r,B;return s.show?c("div",{id:"nav-screen"},c("div",{class:"vp-nav-screen-container"},[(r=l.before)==null?void 0:r.call(l),c(q8),c("div",{class:"vp-outlook-wrapper"},c(Ki)),(B=l.after)==null?void 0:B.call(l)])):null})}}),j8=R({name:"NavbarBrand",setup(){const s=gn(),n=Gl(),l=ts(),a=h(()=>l.value.home||s.value),e=h(()=>n.value.title),o=h(()=>l.value.navTitle??e.value),t=h(()=>l.value.logo?_s(l.value.logo):null),r=h(()=>l.value.logoDark?_s(l.value.logoDark):null);return()=>c(ks,{to:a.value,class:"vp-brand"},()=>[t.value?c("img",{class:["vp-nav-logo",{light:!!r.value}],src:t.value,alt:""}):null,r.value?c("img",{class:["vp-nav-logo dark"],src:r.value,alt:""}):null,o.value?c("span",{class:["vp-site-name",{"hide-in-pad":t.value&&l.value.hideSiteNameOnMobile!==!1}]},o.value):null])}}),G8=R({name:"NavbarLinks",setup(){const s=Ni();return()=>s.value.length?c("nav",{class:"vp-nav-links"},s.value.map(n=>c("div",{class:"nav-item hide-in-mobile"},"children"in n?c(R8,{config:n}):c(Us,{config:n})))):null}}),U8=R({name:"RepoLink",components:{BitbucketIcon:ai,GiteeIcon:li,GitHubIcon:si,GitLabIcon:ni,SourceIcon:ei},setup(){const s=V8();return()=>s.value?c("div",{class:"nav-item vp-repo"},c("a",{class:"vp-repo-link",href:s.value.link,target:"_blank",rel:"noopener noreferrer","aria-label":s.value.label},c(sn(`${s.value.type}Icon`),{style:{width:"1.25rem",height:"1.25rem",verticalAlign:"middle"}}))):null}});const Yi=({active:s=!1},{emit:n})=>c("button",{type:"button",class:["vp-toggle-navbar-button",{"is-active":s}],"aria-label":"Toggle Navbar","aria-expanded":s,"aria-controls":"nav-screen",onClick:()=>n("toggle")},c("span",[c("span",{class:"vp-top"}),c("span",{class:"vp-middle"}),c("span",{class:"vp-bottom"})]));Yi.displayName="ToggleNavbarButton";var W8=Yi;const ho=(s,{emit:n})=>c("button",{type:"button",class:"vp-toggle-sidebar-button",title:"Toggle Sidebar",onClick:()=>n("toggle")},c("span",{class:"icon"}));ho.displayName="ToggleSidebarButton",ho.emits=["toggle"];var K8=ho,Y8=R({name:"OutlookButton",setup(){const{isSupported:s}=rp(),n=qn(),l=El(),a=Bs(),{canToggle:e}=ka(),o=G(!1),t=h(()=>!l.value&&n.value.fullscreen&&s);return rs(()=>a.value.path,()=>{o.value=!1}),()=>e.value||t.value||Sl?c("div",{class:"nav-item hide-in-mobile"},e.value&&!t.value&&!Sl?c(Ui):t.value&&!e.value&&!Sl?c(Wi):c("button",{type:"button",class:["outlook-button",{open:o.value}],tabindex:"-1","aria-hidden":!0},[c(Gi),c("div",{class:"outlook-dropdown"},c(Ki))])):null}}),X8=R({name:"NavBar",emits:["toggleSidebar"],slots:Object,setup(s,{emit:n,slots:l}){const a=ts(),{isMobile:e}=Oa(),o=G(!1),t=h(()=>{const{navbarAutoHide:d="mobile"}=a.value;return d!=="none"&&(d==="always"||e.value)}),r=h(()=>a.value.navbarLayout||{start:["Brand"],center:["Links"],end:["Language","Repo","Outlook","Search"]}),B={Brand:j8,Language:Xe,Links:G8,Repo:U8,Outlook:Y8,Search:dn("Docsearch")?sn("Docsearch"):dn("SearchBox")?sn("SearchBox"):Xe},i=d=>B[d]??(dn(d)?sn(d):Xe);return()=>{var d,y,u,A,F,_;return[c("header",{id:"navbar",class:["vp-navbar",{"auto-hide":t.value,"hide-icon":a.value.navbarIcon===!1}]},[c("div",{class:"vp-navbar-start"},[c(K8,{onToggle:()=>{o.value&&(o.value=!1),n("toggleSidebar")}}),(d=l.startBefore)==null?void 0:d.call(l),(r.value.start||[]).map(C=>c(i(C))),(y=l.startAfter)==null?void 0:y.call(l)]),c("div",{class:"vp-navbar-center"},[(u=l.centerBefore)==null?void 0:u.call(l),(r.value.center||[]).map(C=>c(i(C))),(A=l.centerAfter)==null?void 0:A.call(l)]),c("div",{class:"vp-navbar-end"},[(F=l.endBefore)==null?void 0:F.call(l),(r.value.end||[]).map(C=>c(i(C))),(_=l.endAfter)==null?void 0:_.call(l),c(W8,{active:o.value,onToggle:()=>{o.value=!o.value}})])]),c(H8,{show:o.value,onClose:()=>{o.value=!1}},{before:()=>{var C;return(C=l.screenTop)==null?void 0:C.call(l)},after:()=>{var C;return(C=l.screenBottom)==null?void 0:C.call(l)}})]}}}),Z8=R({name:"SidebarChild",props:{config:{type:Object,required:!0}},setup(s){const n=Ln();return()=>[Pi(s.config,{class:["vp-sidebar-link",`vp-sidebar-${s.config.type}`,{active:$l(n,s.config,!0)}],exact:!0}),xi(s.config.children)]}}),J8=R({name:"SidebarGroup",props:{config:{type:Object,required:!0},open:{type:Boolean,required:!0}},emits:["toggle"],setup(s,{emit:n}){const l=Ln(),a=h(()=>$l(l,s.config)),e=h(()=>$l(l,s.config,!0));return()=>{const{collapsible:o,children:t=[],icon:r,prefix:B,link:i,text:d}=s.config;return c("section",{class:"vp-sidebar-group"},[c(o?"button":"p",{class:["vp-sidebar-heading",{clickable:o||i,exact:e.value,active:a.value}],...o?{type:"button",onClick:()=>n("toggle"),onKeydown:y=>{y.key==="Enter"&&n("toggle")}}:{}},[c(Qs,{icon:r}),i?c(Us,{class:"vp-sidebar-title",config:{text:d,link:i},noExternalLinkIcon:!0}):c("span",{class:"vp-sidebar-title"},d),o?c("span",{class:["vp-arrow",s.open?"down":"end"]}):null]),s.open||!o?c(Xi,{key:B,config:t}):null])}}}),Xi=R({name:"SidebarLinks",props:{config:{type:Array,required:!0}},setup(s){const n=Ln(),l=G(-1),a=e=>{l.value=e===l.value?-1:e};return rs(()=>n.path,()=>{const e=s.config.findIndex(o=>Si(n,o));l.value=e},{immediate:!0,flush:"post"}),()=>c("ul",{class:"vp-sidebar-links"},s.config.map((e,o)=>c("li",e.type==="group"?c(J8,{config:e,open:o===l.value,onToggle:()=>a(o)}):c(Z8,{config:e}))))}}),s6=R({name:"SideBar",slots:Object,setup(s,{slots:n}){const l=Ln(),a=ts(),e=Ap(),o=Ms();return ms(()=>{rs(()=>l.hash,t=>{const r=document.querySelector(`.vp-sidebar a.vp-sidebar-link[href="${l.path}${t}"]`);if(!r)return;const{top:B,height:i}=o.value.getBoundingClientRect(),{top:d,height:y}=r.getBoundingClientRect();d<B?r.scrollIntoView(!0):d+y>B+i&&r.scrollIntoView(!1)},{immediate:!0})}),()=>{var t,r,B;return c("aside",{ref:o,id:"sidebar",class:["vp-sidebar",{"hide-icon":a.value.sidebarIcon===!1}]},[(t=n.top)==null?void 0:t.call(n),((r=n.default)==null?void 0:r.call(n))||c(Xi,{config:e.value}),(B=n.bottom)==null?void 0:B.call(n)])}}}),mp=R({name:"CommonWrapper",props:{containerClass:{type:String,default:""},noNavbar:Boolean,noSidebar:Boolean,noToc:Boolean},slots:Object,setup(s,{slots:n}){const l=Hs(),a=Bs(),e=fs(),o=ts(),{isMobile:t,isPC:r}=Oa(),[B,i]=Be(!1),[d,y]=Be(!1),u=Ap(),A=G(!1),F=h(()=>s.noNavbar||e.value.navbar===!1||o.value.navbar===!1?!1:!!(a.value.title||o.value.logo||o.value.repo||o.value.navbar)),_=h(()=>s.noSidebar?!1:e.value.sidebar!==!1&&u.value.length!==0&&!e.value.home),C=h(()=>s.noToc||e.value.home?!1:e.value.toc||o.value.toc!==!1&&e.value.toc!==!1),D={x:0,y:0},I=g=>{D.x=g.changedTouches[0].clientX,D.y=g.changedTouches[0].clientY},f=g=>{const W=g.changedTouches[0].clientX-D.x,N=g.changedTouches[0].clientY-D.y;Math.abs(W)>Math.abs(N)*1.5&&Math.abs(W)>40&&(W>0&&D.x<=80?i(!0):i(!1))},T=()=>window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0;let V=0;return Ts("scroll",Su(()=>{const g=T();g<=58||g<V?A.value=!1:V+200<g&&!B.value&&(A.value=!0),V=g},300,!0)),rs(t,g=>{g||i(!1)}),ms(()=>{const g=ip(document.body);rs(B,N=>{g.value=N});const W=l.afterEach(()=>{i(!1)});Hl(()=>{g.value=!1,W()})}),()=>c(dn("GlobalEncrypt")?sn("GlobalEncrypt"):Hr,()=>c("div",{class:["theme-container",{"no-navbar":!F.value,"no-sidebar":!_.value&&!(n.sidebar||n.sidebarTop||n.sidebarBottom),"has-toc":C.value,"hide-navbar":A.value,"sidebar-collapsed":!t.value&&!r.value&&d.value,"sidebar-open":t.value&&B.value},s.containerClass,e.value.containerClass||""],onTouchStart:I,onTouchEnd:f},[F.value?c(X8,{onToggleSidebar:()=>i()},{startBefore:()=>{var g;return(g=n.navbarStartBefore)==null?void 0:g.call(n)},startAfter:()=>{var g;return(g=n.navbarStartAfter)==null?void 0:g.call(n)},centerBefore:()=>{var g;return(g=n.navbarCenterBefore)==null?void 0:g.call(n)},centerAfter:()=>{var g;return(g=n.navbarCenterAfter)==null?void 0:g.call(n)},endBefore:()=>{var g;return(g=n.navbarEndBefore)==null?void 0:g.call(n)},endAfter:()=>{var g;return(g=n.navbarEndAfter)==null?void 0:g.call(n)},screenTop:()=>{var g;return(g=n.navScreenTop)==null?void 0:g.call(n)},screenBottom:()=>{var g;return(g=n.navScreenBottom)==null?void 0:g.call(n)}}):null,c(sl,{name:"fade"},()=>B.value?c("div",{class:"vp-sidebar-mask",onClick:()=>i(!1)}):null),c(sl,{name:"fade"},()=>t.value?null:c("div",{class:"toggle-sidebar-wrapper",onClick:()=>y()},c("span",{class:["arrow",d.value?"end":"start"]}))),c(s6,{},{...n.sidebar?{default:()=>n.sidebar()}:{},top:()=>{var g;return(g=n.sidebarTop)==null?void 0:g.call(n)},bottom:()=>{var g;return(g=n.sidebarBottom)==null?void 0:g.call(n)}}),n.default(),c(x8)]))}}),As=R({name:"DropTransition",props:{type:{type:String,default:"single"},delay:{type:Number,default:0},duration:{type:Number,default:.25},appear:Boolean},slots:Object,setup(s,{slots:n}){const l=e=>{e.style.transition=`transform ${s.duration}s ease-in-out ${s.delay}s, opacity ${s.duration}s ease-in-out ${s.delay}s`,e.style.transform="translateY(-20px)",e.style.opacity="0"},a=e=>{e.style.transform="translateY(0)",e.style.opacity="1"};return()=>c(s.type==="single"?sl:y2,{name:"drop",appear:s.appear,onAppear:l,onAfterAppear:a,onEnter:l,onAfterEnter:a,onBeforeLeave:l},()=>n.default())}});const Co=({custom:s})=>c(Cr,{class:["theme-hope-content",{custom:s}]});Co.displayName="MarkdownContent",Co.props={custom:Boolean};var Fp=Co;const Zi=()=>c(os,{name:"author"},()=>c("path",{d:"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z"}));Zi.displayName="AuthorIcon";const Ji=()=>c(os,{name:"calendar"},()=>c("path",{d:"M716.4 110.137c0-18.753-14.72-33.473-33.472-33.473-18.753 0-33.473 14.72-33.473 33.473v33.473h66.993v-33.473zm-334.87 0c0-18.753-14.72-33.473-33.473-33.473s-33.52 14.72-33.52 33.473v33.473h66.993v-33.473zm468.81 33.52H716.4v100.465c0 18.753-14.72 33.473-33.472 33.473a33.145 33.145 0 01-33.473-33.473V143.657H381.53v100.465c0 18.753-14.72 33.473-33.473 33.473a33.145 33.145 0 01-33.473-33.473V143.657H180.6A134.314 134.314 0 0046.66 277.595v535.756A134.314 134.314 0 00180.6 947.289h669.74a134.36 134.36 0 00133.94-133.938V277.595a134.314 134.314 0 00-133.94-133.938zm33.473 267.877H147.126a33.145 33.145 0 01-33.473-33.473c0-18.752 14.72-33.473 33.473-33.473h736.687c18.752 0 33.472 14.72 33.472 33.473a33.145 33.145 0 01-33.472 33.473z"}));Ji.displayName="CalendarIcon";const sB=()=>c(os,{name:"category"},()=>c("path",{d:"M148.41 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H148.41c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.311-40.31zM147.556 553.478H429.73c22.263 0 40.311 18.048 40.311 40.31v282.176c0 22.263-18.048 40.312-40.31 40.312H147.555c-22.263 0-40.311-18.049-40.311-40.312V593.79c0-22.263 18.048-40.311 40.31-40.311zM593.927 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H593.927c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.31-40.31zM730.22 920.502H623.926c-40.925 0-74.22-33.388-74.22-74.425V623.992c0-41.038 33.387-74.424 74.425-74.424h222.085c41.038 0 74.424 33.226 74.424 74.067v114.233c0 10.244-8.304 18.548-18.547 18.548s-18.548-8.304-18.548-18.548V623.635c0-20.388-16.746-36.974-37.33-36.974H624.13c-20.585 0-37.331 16.747-37.331 37.33v222.086c0 20.585 16.654 37.331 37.126 37.331H730.22c10.243 0 18.547 8.304 18.547 18.547 0 10.244-8.304 18.547-18.547 18.547z"}));sB.displayName="CategoryIcon";const nB=()=>c(os,{name:"print"},()=>c("path",{d:"M819.2 364.8h-44.8V128c0-17.067-14.933-32-32-32H281.6c-17.067 0-32 14.933-32 32v236.8h-44.8C145.067 364.8 96 413.867 96 473.6v192c0 59.733 49.067 108.8 108.8 108.8h44.8V896c0 17.067 14.933 32 32 32h460.8c17.067 0 32-14.933 32-32V774.4h44.8c59.733 0 108.8-49.067 108.8-108.8v-192c0-59.733-49.067-108.8-108.8-108.8zM313.6 160h396.8v204.8H313.6V160zm396.8 704H313.6V620.8h396.8V864zM864 665.6c0 25.6-19.2 44.8-44.8 44.8h-44.8V588.8c0-17.067-14.933-32-32-32H281.6c-17.067 0-32 14.933-32 32v121.6h-44.8c-25.6 0-44.8-19.2-44.8-44.8v-192c0-25.6 19.2-44.8 44.8-44.8h614.4c25.6 0 44.8 19.2 44.8 44.8v192z"}));nB.displayName="PrintIcon";const lB=()=>c(os,{name:"tag"},()=>c("path",{d:"M939.902 458.563L910.17 144.567c-1.507-16.272-14.465-29.13-30.737-30.737L565.438 84.098h-.402c-3.215 0-5.726 1.005-7.634 2.913l-470.39 470.39a10.004 10.004 0 000 14.164l365.423 365.424c1.909 1.908 4.42 2.913 7.132 2.913s5.223-1.005 7.132-2.913l470.39-470.39c2.01-2.11 3.014-5.023 2.813-8.036zm-240.067-72.121c-35.458 0-64.286-28.828-64.286-64.286s28.828-64.285 64.286-64.285 64.286 28.828 64.286 64.285-28.829 64.286-64.286 64.286z"}));lB.displayName="TagIcon";const aB=()=>c(os,{name:"timer"},()=>c("path",{d:"M799.387 122.15c4.402-2.978 7.38-7.897 7.38-13.463v-1.165c0-8.933-7.38-16.312-16.312-16.312H256.33c-8.933 0-16.311 7.38-16.311 16.312v1.165c0 5.825 2.977 10.874 7.637 13.592 4.143 194.44 97.22 354.963 220.201 392.763-122.204 37.542-214.893 196.511-220.2 389.397-4.661 5.049-7.638 11.651-7.638 19.03v5.825h566.49v-5.825c0-7.379-2.849-13.981-7.509-18.9-5.049-193.016-97.867-351.985-220.2-389.527 123.24-37.67 216.446-198.453 220.588-392.892zM531.16 450.445v352.632c117.674 1.553 211.787 40.778 211.787 88.676H304.097c0-48.286 95.149-87.382 213.728-88.676V450.445c-93.077-3.107-167.901-81.297-167.901-177.093 0-8.803 6.99-15.793 15.793-15.793 8.803 0 15.794 6.99 15.794 15.793 0 80.261 63.69 145.635 142.01 145.635s142.011-65.374 142.011-145.635c0-8.803 6.99-15.793 15.794-15.793s15.793 6.99 15.793 15.793c0 95.019-73.789 172.82-165.96 177.093z"}));aB.displayName="TimerIcon";const eB=()=>c(os,{name:"word"},()=>[c("path",{d:"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z"}),c("path",{d:"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z"})]);eB.displayName="WordIcon";const el=()=>{const s=ts();return h(()=>s.value.metaLocales)};var n6=R({name:"AuthorInfo",inheritAttrs:!1,props:{author:{type:Array,required:!0},pure:Boolean},setup(s){const n=el();return()=>s.author.length?c("span",{class:"page-author-info","aria-label":`${n.value.author}${s.pure?"":"🖊"}`,...s.pure?{}:{"data-balloon-pos":"down"}},[c(Zi),c("span",s.author.map(l=>l.url?c("a",{class:"page-author-item",href:l.url,target:"_blank",rel:"noopener noreferrer"},l.name):c("span",{class:"page-author-item"},l.name))),c("span",{property:"author",content:s.author.map(l=>l.name).join(", ")})]):null}}),l6=R({name:"CategoryInfo",inheritAttrs:!1,props:{category:{type:Array,required:!0},pure:Boolean},setup(s){const n=Hs(),l=Bs(),a=el(),e=(o,t="")=>{t&&l.value.path!==t&&(o.preventDefault(),n.push(t))};return()=>s.category.length?c("span",{class:"page-category-info","aria-label":`${a.value.category}${s.pure?"":"🌈"}`,...s.pure?{}:{"data-balloon-pos":"down"}},[c(sB),s.category.map(({name:o,path:t})=>c("span",{class:["page-category-item",{[`category${_e(o,9)}`]:!s.pure,clickable:t}],role:t?"navigation":"",onClick:r=>e(r,t)},o)),c("meta",{property:"articleSection",content:s.category.map(({name:o})=>o).join(",")})]):null}}),a6=R({name:"DateInfo",inheritAttrs:!1,props:{date:{type:Object,default:null},localizedDate:{type:String,default:""},pure:Boolean},setup(s){const n=fr(),l=el();return()=>s.date?c("span",{class:"page-date-info","aria-label":`${l.value.date}${s.pure?"":"📅"}`,...s.pure?{}:{"data-balloon-pos":"down"}},[c(Ji),c("span",c(De,()=>s.localizedDate||s.date.toLocaleDateString(n.value))),c("meta",{property:"datePublished",content:s.date.toISOString()||""})]):null}}),e6=R({name:"OriginalInfo",inheritAttrs:!1,props:{isOriginal:Boolean},setup(s){const n=el();return()=>s.isOriginal?c("span",{class:"page-original-info"},n.value.origin):null}}),o6=R({name:"ReadingTimeInfo",inheritAttrs:!1,props:{readingTime:{type:Object,default:()=>null},readingTimeLocale:{type:Object,default:()=>null},pure:Boolean},setup(s){const n=el(),l=h(()=>{if(!s.readingTime)return null;const{minutes:a}=s.readingTime;return a<1?"PT1M":`PT${Math.round(a)}M`});return()=>{var a,e;return(a=s.readingTimeLocale)!=null&&a.time?c("span",{class:"page-reading-time-info","aria-label":`${n.value.readingTime}${s.pure?"":"⌛"}`,...s.pure?{}:{"data-balloon-pos":"down"}},[c(aB),c("span",(e=s.readingTimeLocale)==null?void 0:e.time),c("meta",{property:"timeRequired",content:l.value})]):null}}}),p6=R({name:"TagInfo",inheritAttrs:!1,props:{tag:{type:Array,default:()=>[]},pure:Boolean},setup(s){const n=Hs(),l=Bs(),a=el(),e=(o,t="")=>{t&&l.value.path!==t&&(o.preventDefault(),n.push(t))};return()=>s.tag.length?c("span",{class:"page-tag-info","aria-label":`${a.value.tag}${s.pure?"":"🏷"}`,...s.pure?{}:{"data-balloon-pos":"down"}},[c(lB),s.tag.map(({name:o,path:t})=>c("span",{class:["page-tag-item",{[`tag${_e(o,9)}`]:!s.pure,clickable:t}],role:t?"navigation":"",onClick:r=>e(r,t)},o)),c("meta",{property:"keywords",content:s.tag.map(({name:o})=>o).join(",")})]):null}}),t6=R({name:"ReadTimeInfo",inheritAttrs:!1,props:{readingTime:{type:Object,default:()=>null},readingTimeLocale:{type:Object,default:()=>null},pure:Boolean},setup(s){const n=el();return()=>{var l,a,e;return(l=s.readingTimeLocale)!=null&&l.words?c("span",{class:"page-word-info","aria-label":`${n.value.words}${s.pure?"":"🔠"}`,...s.pure?{}:{"data-balloon-pos":"down"}},[c(eB),c("span",(a=s.readingTimeLocale)==null?void 0:a.words),c("meta",{property:"wordCount",content:(e=s.readingTime)==null?void 0:e.words})]):null}}}),oB=R({name:"PageInfo",components:{AuthorInfo:n6,CategoryInfo:l6,DateInfo:a6,OriginalInfo:e6,PageViewInfo:()=>null,ReadingTimeInfo:o6,TagInfo:p6,WordInfo:t6},props:{items:{type:[Array,Boolean],default:()=>["Author","Original","Date","PageView","ReadingTime","Category","Tag"]},info:{type:Object,required:!0}},setup(s){const n=El();return()=>s.items?c("div",{class:"page-info"},s.items.map(l=>c(sn(`${l}Info`),{...s.info,pure:n.value}))):null}}),c6=R({name:"PrintButton",setup(){const s=qn(),n=ts();return()=>s.value.print===!1?null:c("button",{type:"button",class:"print-button",title:n.value.metaLocales.print,onClick:()=>{window.print()}},c(nB))}});const r6=({title:s,level:n,slug:l})=>c(ks,{to:`#${l}`,class:["toc-link",`level${n}`]},()=>s),go=(s,n)=>{const l=Ln();return s.length&&n>0?c("ul",{class:"toc-list"},s.map(a=>{const e=go(a.children,n-1);return[c("li",{class:["toc-item",{active:l.hash===`#${a.slug}`}]},r6(a)),e?c("li",e):null]})):null};var pB=R({name:"TOC",props:{items:{type:Array,default:()=>[]},headerDepth:{type:Number,default:2}},slots:Object,setup(s,{slots:n}){const l=Ln(),a=Bs(),e=el(),o=Ms(),t=G("-1.7rem"),r=i=>{var d;(d=o.value)==null||d.scrollTo({top:i,behavior:"smooth"})},B=()=>{if(o.value){const i=document.querySelector(".toc-item.active");i?t.value=`${i.getBoundingClientRect().top-o.value.getBoundingClientRect().top+o.value.scrollTop}px`:t.value="-1.7rem"}else t.value="-1.7rem"};return ms(()=>{rs(()=>l.hash,i=>{if(o.value){const d=document.querySelector(`#toc a.toc-link[href$="${i}"]`);if(!d)return;const{top:y,height:u}=o.value.getBoundingClientRect(),{top:A,height:F}=d.getBoundingClientRect();A<y?r(o.value.scrollTop+A-y):A+F>y+u&&r(o.value.scrollTop+A+F-y-u)}}),rs(()=>l.fullPath,B,{flush:"post",immediate:!0})}),()=>{var d,y;const i=s.items.length?go(s.items,s.headerDepth):a.value.headers?go(a.value.headers,s.headerDepth):null;return i?c("div",{class:"toc-place-holder"},[c("aside",{id:"toc"},[(d=n.before)==null?void 0:d.call(n),c("div",{class:"toc-header"},[e.value.toc,c(c6)]),c("div",{class:"toc-wrapper",ref:o},[i,c("div",{class:"toc-marker",style:{top:t.value}})]),(y=n.after)==null?void 0:y.call(n)])]):null}}}),Ep=R({name:"SkipLink",props:{content:{type:String,default:"main-content"}},setup(s){const n=Bs(),l=ts(),a=Ms(),e=({target:o})=>{const t=document.querySelector(o.hash);if(t){const r=()=>{t.removeAttribute("tabindex"),t.removeEventListener("blur",r)};t.setAttribute("tabindex","-1"),t.addEventListener("blur",r),t.focus(),window.scrollTo(0,0)}};return ms(()=>{rs(()=>n.value.path,()=>a.value.focus())}),()=>[c("span",{ref:a,tabindex:"-1"}),c("a",{href:`#${s.content}`,class:"vp-skip-link sr-only",onClick:e},l.value.routeLocales.skipToContent)]}});let Je=null,Xl=null;const i6={wait:()=>Je,pending:()=>{Je=new Promise(s=>Xl=s)},resolve:()=>{Xl==null||Xl(),Je=null,Xl=null}},tB=()=>i6;var cB=R({name:"FadeSlideY",slots:Object,setup(s,{slots:n}){const{resolve:l,pending:a}=tB();return()=>c(sl,{name:"fade-slide-y",mode:"out-in",onBeforeEnter:l,onBeforeLeave:a},()=>{var e;return(e=n.default)==null?void 0:e.call(n)})}});const B6=(s,n)=>{const l=s.replace(n,"/").split("/"),a=[];let e=sp(n);return l.forEach((o,t)=>{t!==l.length-1?(e+=`${o}/`,a.push({link:e,name:o||"Home"})):o!==""&&(e+=o,a.push({link:e,name:o}))}),a},rB=(s,{slots:n})=>{var y,u;const{bgImage:l,bgImageDark:a,bgImageStyle:e,color:o,description:t,image:r,imageDark:B,header:i,features:d=[]}=s;return c("div",{class:"vp-feature-wrapper"},[l?c("div",{class:["vp-feature-bg",{light:a}],style:[{"background-image":`url(${l})`},e]}):null,a?c("div",{class:"vp-feature-bg dark",style:[{"background-image":`url(${a})`},e]}):null,c("div",{class:"vp-feature",style:o?{color:o}:{}},[((y=n.image)==null?void 0:y.call(n,s))||[r?c("img",{class:["vp-feature-image",{light:B}],src:_s(r),alt:""}):null,B?c("img",{class:"vp-feature-image dark",src:_s(B),alt:""}):null],((u=n.info)==null?void 0:u.call(n,s))||[i?c("h2",{class:"vp-feature-header"},i):null,t?c("p",{class:"vp-feature-description",innerHTML:t}):null],d.length?c("div",{class:"vp-features"},d.map(({icon:A,title:F,details:_,link:C})=>{const D=[c("h3",{class:"vp-feature-title"},[c(Qs,{icon:A}),c("span",{innerHTML:F})]),c("p",{class:"vp-feature-details",innerHTML:_})];return C?va(C)?c("a",{class:"vp-feature-item link",href:C,"aria-label":F,target:"_blank"},D):c(ks,{class:"vp-feature-item link",to:C,"aria-label":F},()=>D):c("div",{class:"vp-feature-item"},D)})):null])])};rB.displayName="FeaturePanel";var Xt=rB;const iB=s=>{const{icon:n="",color:l,size:a}=s,e={};return l&&(e.color=l),a&&(e.height=Number.isNaN(Number(a))?a:`${a}px`),Al(n)?c("img",{class:"icon",src:n,"no-view":"",style:e}):ga(n)?c("img",{class:"icon",src:_s(n),"aria-hidden":"","no-view":"",style:e}):c(sn("FontIcon"),s)};iB.displayName="HopeIcon";var d6=iB,y6=R({name:"HeroInfo",slots:Object,setup(s,{slots:n}){const l=fs(),a=Gl(),e=h(()=>l.value.heroFullScreen??!1),o=h(()=>{const{heroText:i,tagline:d}=l.value;return{text:i??a.value.title??"Hello",tagline:d??a.value.description??"",isFullScreen:e.value}}),t=h(()=>{const{heroText:i,heroImage:d,heroImageDark:y,heroAlt:u,heroImageStyle:A}=l.value;return{image:d?_s(d):null,imageDark:y?_s(y):null,heroStyle:A,alt:u||i||"",isFullScreen:e.value}}),r=h(()=>{const{bgImage:i,bgImageDark:d,bgImageStyle:y}=l.value;return{image:Rn(i)?_s(i):null,imageDark:Rn(d)?_s(d):null,bgStyle:y,isFullScreen:e.value}}),B=h(()=>l.value.actions??[]);return()=>{var i,d,y;return c("header",{class:["vp-hero-info-wrapper",{fullscreen:e.value}]},[((i=n.heroBg)==null?void 0:i.call(n,r.value))||[r.value.image?c("div",{class:["vp-hero-mask",{light:r.value.imageDark}],style:[{"background-image":`url(${r.value.image})`},r.value.bgStyle]}):null,r.value.imageDark?c("div",{class:"vp-hero-mask dark",style:[{"background-image":`url(${r.value.imageDark})`},r.value.bgStyle]}):null],c("div",{class:"vp-hero-info"},[((d=n.heroImage)==null?void 0:d.call(n,t.value))||c(As,{appear:!0,type:"group"},()=>[t.value.image?c("img",{key:"light",class:["vp-hero-image",{light:t.value.imageDark}],style:t.value.heroStyle,src:t.value.image,alt:t.value.alt}):null,t.value.imageDark?c("img",{key:"dark",class:"vp-hero-image dark",style:t.value.heroStyle,src:t.value.imageDark,alt:t.value.alt}):null]),((y=n.heroInfo)==null?void 0:y.call(n,o.value))??c("div",{class:"vp-hero-infos"},[o.value.text?c(As,{appear:!0,delay:.04},()=>c("h1",{id:"main-title"},o.value.text)):null,o.value.tagline?c(As,{appear:!0,delay:.08},()=>c("p",{id:"main-description",innerHTML:o.value.tagline})):null,B.value.length?c(As,{appear:!0,delay:.12},()=>c("p",{class:"vp-hero-actions"},B.value.map(u=>c(Us,{class:["vp-hero-action",u.type||"default"],config:u,noExternalLinkIcon:!0},u.icon?{before:()=>c(d6,{icon:u.icon})}:{})))):null])])])}}});const BB=(s,{slots:n})=>{var u,A,F;const{bgImage:l,bgImageDark:a,bgImageStyle:e,color:o,description:t,image:r,imageDark:B,header:i,highlights:d=[],type:y="un-order"}=s;return c("div",{class:"vp-highlight-wrapper",style:o?{color:o}:{}},[l?c("div",{class:["vp-highlight-bg",{light:a}],style:[{"background-image":`url(${l})`},e]}):null,a?c("div",{class:"vp-highlight-bg dark",style:[{"background-image":`url(${a})`},e]}):null,c("div",{class:"vp-highlight"},[((u=n.image)==null?void 0:u.call(n,s))||[r?c("img",{class:["vp-highlight-image",{light:B}],src:_s(r),alt:""}):null,B?c("img",{class:"vp-highlight-image dark",src:_s(B),alt:""}):null],((A=n.info)==null?void 0:A.call(n,s))||[c("div",{class:"vp-highlight-info-wrapper"},c("div",{class:"vp-highlight-info"},[i?c("h2",{class:"vp-highlight-header",innerHTML:i}):null,t?c("p",{class:"vp-highlight-description",innerHTML:t}):null,((F=n.highlights)==null?void 0:F.call(n,d))||c(y==="order"?"ol":y==="no-order"?"dl":"ul",{class:"vp-highlights"},d.map(({icon:_,title:C,details:D,link:I})=>{const f=[c(y==="no-order"?"dt":"h3",{class:"vp-highlight-title"},[_?c(Qs,{class:"vp-highlight-icon",icon:_}):null,c("span",{innerHTML:C})]),D?c(y==="no-order"?"dd":"p",{class:"vp-highlight-details",innerHTML:D}):null];return c(y==="no-order"?"div":"li",{class:["vp-highlight-item-wrapper",{link:I}]},I?yu(I)?c("a",{class:"vp-highlight-item link",href:I,"aria-label":C,target:"_blank"},f):c(ks,{class:"vp-highlight-item link",to:I,"aria-label":C},()=>f):c("div",{class:"vp-highlight-item"},f))}))]))]])])};BB.displayName="HighlightPanel";var v6=BB,u6=R({name:"HomePage",slots:Object,setup(s,{slots:n}){const l=El(),a=fs(),e=h(()=>{const{features:t}=a.value;return ss(t)?t:null}),o=h(()=>{const{highlights:t}=a.value;return ss(t)?t:null});return()=>{var t,r,B,i;return c("main",{id:"main-content",class:["vp-project-home ",{pure:l.value}],"aria-labelledby":a.value.heroText===null?"":"main-title"},[(t=n.top)==null?void 0:t.call(n),c(y6),((r=o.value)==null?void 0:r.map(d=>"features"in d?c(Xt,d):c(v6,d)))||(e.value?c(As,{appear:!0,delay:.24},()=>c(Xt,{features:e.value})):null),(B=n.center)==null?void 0:B.call(n),c(As,{appear:!0,delay:.32},()=>c(Fp)),(i=n.bottom)==null?void 0:i.call(n)])}}}),A6=R({name:"BreadCrumb",setup(){const s=Hs(),n=Bs(),l=gn(),a=fs(),e=ts(),o=Ms([]),t=h(()=>(a.value.breadcrumb||a.value.breadcrumb!==!1&&e.value.breadcrumb!==!1)&&o.value.length>1),r=h(()=>a.value.breadcrumbIcon||a.value.breadcrumbIcon!==!1&&e.value.breadcrumbIcon!==!1),B=()=>{const i=s.getRoutes(),d=B6(n.value.path,l.value).map(({link:y,name:u})=>{const A=i.find(F=>F.path===y);if(A){const{meta:F,path:_}=Nl(s,A.path);return{title:F[Ds.shortTitle]||F[Ds.title]||u,icon:F[Ds.icon],path:_}}return null}).filter(y=>y!==null);d.length>1&&(o.value=d)};return ms(()=>{rs(()=>n.value.path,B,{immediate:!0})}),()=>c("nav",{class:["vp-breadcrumb",{disable:!t.value}]},t.value?c("ol",{vocab:"https://schema.org/",typeof:"BreadcrumbList"},o.value.map((i,d)=>c("li",{class:{"is-active":o.value.length-1===d},property:"itemListElement",typeof:"ListItem"},[c(ks,{to:i.path,property:"item",typeof:"WebPage"},()=>[r.value?c(Qs,{icon:i.icon}):null,c("span",{property:"name"},i.title||"Unknown")]),c("meta",{property:"position",content:d+1})]))):[])}});const Zt=s=>{const n=Hs();return s===!1?!1:cs(s)?wl(n,s,!0):ha(s)?s:null},Lo=(s,n,l)=>{const a=s.findIndex(e=>e.link===n);if(a!==-1){const e=s[a+l];return e!=null&&e.link?e:null}for(const e of s)if(e.children){const o=Lo(e.children,n,l);if(o)return o}return null};var m6=R({name:"PageNav",setup(){const s=ts(),n=fs(),l=Ap(),a=Bs(),e=Ia(),o=h(()=>{const r=Zt(n.value.prev);return r===!1?null:r||(s.value.prevLink===!1?null:Lo(l.value,a.value.path,-1))}),t=h(()=>{const r=Zt(n.value.next);return r===!1?null:r||(s.value.nextLink===!1?null:Lo(l.value,a.value.path,1))});return Ts("keydown",r=>{r.altKey&&(r.key==="ArrowRight"?t.value&&(e(t.value.link),r.preventDefault()):r.key==="ArrowLeft"&&o.value&&(e(o.value.link),r.preventDefault()))}),()=>o.value||t.value?c("nav",{class:"vp-page-nav"},[o.value?c(Us,{class:"prev",config:o.value},()=>{var r,B;return[c("div",{class:"hint"},[c("span",{class:"arrow start"}),s.value.metaLocales.prev]),c("div",{class:"link"},[c(Qs,{icon:(r=o.value)==null?void 0:r.icon}),(B=o.value)==null?void 0:B.text])]}):null,t.value?c(Us,{class:"next",config:t.value},()=>{var r,B;return[c("div",{class:"hint"},[s.value.metaLocales.next,c("span",{class:"arrow end"})]),c("div",{class:"link"},[(r=t.value)==null?void 0:r.text,c(Qs,{icon:(B=t.value)==null?void 0:B.icon})])]}):null]):null}});const F6={GitHub:":repo/edit/:branch/:path",GitLab:":repo/-/edit/:branch/:path",Gitee:":repo/edit/:branch/:path",Bitbucket:":repo/src/:branch/:path?mode=edit&spa=0&at=:branch&fileviewer=file-view-default"},E6=({docsRepo:s,docsBranch:n,docsDir:l,filePathRelative:a,editLinkPattern:e})=>{if(!a)return null;const o=Jr(s);let t;return e?t=e:o!==null&&(t=F6[o]),t?t.replace(/:repo/,Al(s)?s:`https://github.com/${s}`).replace(/:branch/,n).replace(/:path/,ur(`${sp(l)}/${a}`)):null},D6=()=>{const s=ts(),n=Bs(),l=fs();return h(()=>{const{repo:a,docsRepo:e=a,docsBranch:o="main",docsDir:t="",editLink:r,editLinkPattern:B=""}=s.value;if(!(l.value.editLink??r??!0)||!e)return null;const i=E6({docsRepo:e,docsBranch:o,docsDir:t,editLinkPattern:B,filePathRelative:n.value.filePathRelative});return i?{text:s.value.metaLocales.editLink,link:i}:null})},f6=()=>{const s=Gl(),n=ts(),l=Bs(),a=fs();return h(()=>{var e,o;return!(a.value.lastUpdated??n.value.lastUpdated??!0)||!((e=l.value.git)!=null&&e.updatedTime)?null:new Date((o=l.value.git)==null?void 0:o.updatedTime).toLocaleString(s.value.lang)})},b6=()=>{const s=ts(),n=Bs(),l=fs();return h(()=>{var a;return l.value.contributors??s.value.contributors??!0?((a=n.value.git)==null?void 0:a.contributors)??null:null})};var _6=R({name:"PageTitle",setup(){const s=Bs(),n=fs(),l=ts(),{info:a,items:e}=g8();return()=>c("div",{class:"vp-page-title"},[c("h1",[l.value.titleIcon===!1?null:c(Qs,{icon:n.value.icon}),s.value.title]),c(oB,{info:a.value,...e.value===null?{}:{items:e.value}}),c("hr")])}});const dB=()=>c(os,{name:"edit"},()=>[c("path",{d:"M430.818 653.65a60.46 60.46 0 0 1-50.96-93.281l71.69-114.012 7.773-10.365L816.038 80.138A60.46 60.46 0 0 1 859.225 62a60.46 60.46 0 0 1 43.186 18.138l43.186 43.186a60.46 60.46 0 0 1 0 86.373L588.879 565.55l-8.637 8.637-117.466 68.234a60.46 60.46 0 0 1-31.958 11.229z"}),c("path",{d:"M728.802 962H252.891A190.883 190.883 0 0 1 62.008 771.98V296.934a190.883 190.883 0 0 1 190.883-192.61h267.754a60.46 60.46 0 0 1 0 120.92H252.891a69.962 69.962 0 0 0-69.098 69.099V771.98a69.962 69.962 0 0 0 69.098 69.098h475.911A69.962 69.962 0 0 0 797.9 771.98V503.363a60.46 60.46 0 1 1 120.922 0V771.98A190.883 190.883 0 0 1 728.802 962z"})]);dB.displayName="EditIcon";var h6=R({name:"PageMeta",setup(){const s=ts(),n=D6(),l=f6(),a=b6();return()=>{const{metaLocales:e}=s.value;return c("footer",{class:"page-meta"},[n.value?c("div",{class:"meta-item edit-link"},c(Us,{class:"label",config:n.value},{before:()=>c(dB)})):null,c("div",{class:"meta-item git-info"},[l.value?c("div",{class:"update-time"},[c("span",{class:"label"},`${e.lastUpdated}: `),c(De,()=>c("span",{class:"info"},l.value))]):null,a.value&&a.value.length?c("div",{class:"contributors"},[c("span",{class:"label"},`${e.contributors}: `),a.value.map(({email:o,name:t},r)=>[c("span",{class:"contributor",title:`email: ${o}`},t),r!==a.value.length-1?",":""])]):null])])}}}),C6=R({name:"NormalPage",slots:Object,setup(s,{slots:n}){const l=fs(),{isDarkmode:a}=ka(),e=ts(),o=h(()=>l.value.toc||l.value.toc!==!1&&e.value.toc!==!1);return()=>c("main",{id:"main-content",class:"vp-page"},c(dn("LocalEncrypt")?sn("LocalEncrypt"):Hr,()=>{var t,r,B,i;return[(t=n.top)==null?void 0:t.call(n),l.value.cover?c("div",{class:"page-cover"},c("img",{src:_s(l.value.cover),alt:"","no-view":""})):null,c(A6),c(_6),o.value?c(pB,{headerDepth:l.value.headerDepth??e.value.headerDepth??2},{before:()=>{var d;return(d=n.tocBefore)==null?void 0:d.call(n)},after:()=>{var d;return(d=n.tocAfter)==null?void 0:d.call(n)}}):null,(r=n.contentBefore)==null?void 0:r.call(n),c(Fp),(B=n.contentAfter)==null?void 0:B.call(n),c(h6),c(m6),dn("CommentService")?c(sn("CommentService"),{darkmode:a.value}):null,(i=n.bottom)==null?void 0:i.call(n)]}))}}),g6=R({name:"Layout",slots:Object,setup(s,{slots:n}){const l=qn(),a=ts(),e=Bs(),o=fs(),{isMobile:t}=Oa(),r=h(()=>{var B,i;return((B=a.value.blog)==null?void 0:B.sidebarDisplay)||((i=l.value.blog)==null?void 0:i.sidebarDisplay)||"mobile"});return()=>[c(Ep),c(mp,{},{default:()=>{var B;return((B=n.default)==null?void 0:B.call(n))||(o.value.home?c(u6):c(cB,()=>c(C6,{key:e.value.path},{top:()=>{var i;return(i=n.top)==null?void 0:i.call(n)},bottom:()=>{var i;return(i=n.bottom)==null?void 0:i.call(n)},contentBefore:()=>{var i;return(i=n.contentBefore)==null?void 0:i.call(n)},contentAfter:()=>{var i;return(i=n.contentAfter)==null?void 0:i.call(n)},tocBefore:()=>{var i;return(i=n.tocBefore)==null?void 0:i.call(n)},tocAfter:()=>{var i;return(i=n.tocAfter)==null?void 0:i.call(n)}})))},...r.value!=="none"?{navScreenBottom:()=>c(sn("BloggerInfo"))}:{},...!t.value&&r.value==="always"?{sidebar:()=>c(sn("BloggerInfo"))}:{}})]}}),L6=R({name:"NotFoundHint",setup(){const s=ts(),n=()=>{const l=s.value.routeLocales.notFoundMsg;return l[Math.floor(Math.random()*l.length)]};return()=>c("div",{class:"not-found-hint"},[c("p",{class:"error-code"},"404"),c("h1",{class:"error-title"},s.value.routeLocales.notFoundTitle),c("p",{class:"error-hint"},n())])}}),T6=R({name:"NotFound",slots:Object,setup(s,{slots:n}){const l=gn(),a=ts(),{navigate:e}=Fo({to:a.value.home??l.value});return()=>[c(Ep),c(mp,{noSidebar:!0},()=>{var o;return c("main",{id:"main-content",class:"vp-page not-found"},((o=n.default)==null?void 0:o.call(n))||[c(L6),c("div",{class:"actions"},[c("button",{type:"button",class:"action-button",onClick:()=>{window.history.go(-1)}},a.value.routeLocales.back),c("button",{type:"button",class:"action-button",onClick:()=>e()},a.value.routeLocales.home)])])})]}});const I6={Email:'<svg xmlns="http://www.w3.org/2000/svg" class="icon email-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1384FF"/><path fill="#fff" d="M270.077 286.233H751.99c32.933 0 59.86 24.855 60.274 55.51l-301.023 157L210.217 341.88c.207-30.723 26.927-55.717 59.86-55.717zm-59.929 115.714-.276 277.756c0 30.931 27.134 56.2 60.205 56.2H751.99c33.14 0 60.274-25.269 60.274-56.2V401.81L518.283 551.492a15.88 15.88 0 0 1-14.43 0L210.148 401.947z"/></svg>',Gitee:'<svg xmlns="http://www.w3.org/2000/svg" class="icon gitee-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#C71D23"/><path fill="#fff" d="M772.953 454.723H480.17v.006a25.46 25.46 0 0 0-25.46 25.453l-.025 63.649a25.46 25.46 0 0 0 25.46 25.466l178.242-.007a25.46 25.46 0 0 1 25.459 25.46v12.73c0 42.18-34.198 76.378-76.378 76.378H365.583a25.46 25.46 0 0 1-25.46-25.46V416.533h-.006c0-42.18 34.192-76.378 76.378-76.378h356.388v-.013a25.46 25.46 0 0 0 25.46-25.446l.057-63.65h.013a25.46 25.46 0 0 0-25.46-25.471l-356.432.012c-105.453 0-190.946 85.493-190.946 190.946v356.433a25.46 25.46 0 0 0 25.46 25.46H626.56c94.913 0 171.852-76.94 171.852-171.852V480.182a25.46 25.46 0 0 0-25.46-25.46z"/></svg>',GitHub:'<svg xmlns="http://www.w3.org/2000/svg" class="icon github-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#171515"/><path fill="#fff" d="M509.423 146.442c-200.317 0-362.756 162.42-362.756 362.8 0 160.266 103.936 296.24 248.109 344.217 18.139 3.327 24.76-7.872 24.76-17.486 0-8.613-.313-31.427-.49-61.702-100.912 21.923-122.205-48.63-122.205-48.63-16.495-41.91-40.28-53.067-40.28-53.067-32.937-22.51 2.492-22.053 2.492-22.053 36.407 2.566 55.568 37.386 55.568 37.386 32.362 55.438 84.907 39.43 105.58 30.143 3.296-23.444 12.667-39.43 23.032-48.498-80.557-9.156-165.246-40.28-165.246-179.297 0-39.604 14.135-71.988 37.342-97.348-3.731-9.178-16.18-46.063 3.556-96.009 0 0 30.46-9.754 99.76 37.19 28.937-8.048 59.97-12.071 90.823-12.211 30.807.14 61.843 4.165 90.822 12.21 69.26-46.944 99.663-37.189 99.663-37.189 19.792 49.946 7.34 86.831 3.61 96.01 23.25 25.359 37.29 57.742 37.29 97.347 0 139.366-84.82 170.033-165.637 179.013 13.026 11.2 24.628 33.342 24.628 67.182 0 48.498-.445 87.627-.445 99.521 0 9.702 6.535 20.988 24.945 17.444 144.03-48.067 247.881-183.95 247.881-344.175 0-200.378-162.442-362.798-362.802-362.798z"/></svg>'},O6={category:{"/":{path:"/category/",map:{使用指南:{path:"/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",keys:["v-08062d61","v-1a144c13","v-40bd95c1","v-450e8862","v-74d93789","v-64dd32fe","v-f1165cc2","v-c84ce682","v-97506104","v-6a78bf1e","v-5ed5a75a","v-cf2f50ee","v-dd2c326a","v-7c3e20c2"]},redis:{path:"/category/redis/",keys:["v-5cb072b3","v-e451d600","v-44295686","v-cd4e5daa","v-9ee97fea","v-2877cc16","v-62cf8211","v-c5721e08","v-20189b06","v-0f67a82d","v-7ccef86f","v-501b8055"]},mysql:{path:"/category/mysql/",keys:["v-47deb978","v-68cfc132","v-1509bd1e","v-5312ebd6","v-cb572402","v-a056d220","v-eedfc64a","v-0c1daf9d","v-15be756c","v-18f8cde9","v-17cb7aa4","v-0dd7df9c","v-067342a0","v-c8a2e14a","v-a87f8e4c","v-1df5d4d6","v-2648a679","v-cc05253e","v-84ceb2f4","v-32ca78ec","v-f2fadc9e","v-08c9d541","v-976bf48a","v-19f8f8e4","v-4b2179bb","v-4d1339f4","v-b30276bc","v-1776ebf2","v-51f2dcf6","v-0359a68f","v-558f976c","v-167ae4a4","v-fb0c9a20","v-403714d4","v-f10dc5a4","v-4dda2b40","v-1015e72b","v-afe3b5ec","v-ab0fa402","v-3ef06b8b","v-a01dbb18","v-329074fa","v-1029a01f","v-664794b6","v-1743001b","v-25bb8896","v-5dfb342e","v-416fc51c","v-125a45f0","v-73d634fe","v-fb24ca0e","v-379adba2","v-2247d511","v-874c376e","v-5e84d900","v-51fa1311","v-47e7636c","v-f00ce0e0","v-18b96408"]},数据结构与算法:{path:"/category/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/",keys:["v-0072b68a","v-4a6b903e","v-92d2378e","v-3945022c","v-0edaacb7","v-8fe9fd22","v-69d65be6","v-a277331a","v-2e7fb111","v-75ce370a","v-1f0c41ec","v-98398990","v-752e9b82","v-c01690d8","v-152dfd8d","v-735dfe06","v-d977ced4","v-64506cc7","v-13ade0aa","v-641d44d2","v-8a944abe","v-703548b8","v-711b4cec","v-fb458a48","v-67248f78","v-db839be2","v-16787a3c","v-a323322a","v-4e6f8416","v-ebfa549c","v-08a1ce30","v-155542a2","v-6e9dbc4c","v-cdbdf9f8","v-21edb74e","v-525b6569","v-30fc6476","v-30a803f7","v-115ac7e7","v-534e82f8","v-e58201ee","v-21b182ee","v-deb0c8ec","v-1a50115e","v-53acd735","v-00fc7494","v-380a6c84","v-4b65c060","v-0cc447aa","v-85d8c71c","v-64c90a94","v-155d00d3","v-eeb8a63a"]},git:{path:"/category/git/",keys:["v-aa555d4e","v-971795b6","v-093d475d","v-6d1b8ec2","v-2a84a2a1","v-17abcac0"]},"c/c++":{path:"/category/cc__/",keys:["v-038e0b34","v-403c82cd","v-5aef7a82","v-4d611284","v-66aab0b0","v-1073124a","v-3cc85216","v-ba4c1c2a","v-c97d844a","v-6ef0e0ae","v-f8fc3194","v-14c9e918","v-1155c5a0","v-636256d6","v-51ee3d17","v-132402e1","v-01408bc4","v-f103c4b8","v-fd4b7500","v-332dfae6","v-062c257f","v-70779923","v-198bd17a","v-a688fcfc","v-505a1229","v-1c610f8b","v-573fd3b5","v-63c16f9b","v-a253b292","v-35cd92ed","v-2a2097b4","v-4ee2bd74","v-93ba2c5c","v-ca1f584c","v-733883fe","v-0aad1b8c","v-7d06c0d6","v-f0f10ec2","v-253e305c","v-62b6f00d","v-02dd1ab7","v-5e6716c0","v-72de4250","v-e3980572","v-54b6e5ba","v-7c62f63c","v-7ef7d845","v-68c3f3ca","v-849483e2","v-0e539496","v-600c7550","v-f51389fa","v-5f9477f2","v-31530dfb","v-3bc3bfaf","v-3a9cf65c","v-10e1c6eb","v-451c83e2","v-6577db5e","v-e41f0618","v-3eca3d30","v-1da04370","v-0cf00a94","v-2f0a2344","v-7eb7ea5a","v-11fe42b7","v-103be5d9","v-7e0a1cbb","v-210e34fe","v-eb58d93a","v-7c6a87cc","v-43124686","v-55ae1b9a","v-8365f3e8","v-62b566a8","v-4b15d926","v-2c413a2b","v-7c5d97b0","v-0d61d626","v-778f0618","v-29824dbc","v-6c9710e8","v-16792cec","v-73dfb9d4","v-ef005662","v-44042d12","v-5f0f0675","v-7c0c7a84","v-5b3d8584","v-45747b0a","v-25665f14","v-6ce1e1a6","v-7cc2160e","v-6c9ca25c","v-2483becb","v-0ccdd78f","v-0413f5c0","v-474433e4","v-2a36819d","v-2c027fc3","v-08fdb026","v-48c23000","v-30a2e42b","v-02ca19a9","v-7e13dfea","v-4e6c7a0a","v-a2d2b900","v-0d093800","v-9ab5c6e8","v-a8d7b886","v-66e8cf78","v-57c1626a","v-435677cc"]},linux:{path:"/category/linux/",keys:["v-5d0a9dce","v-739b4ffd","v-5481f6b5","v-70781306","v-fae24824","v-29390dd2","v-91127220","v-4c6cb231","v-5342bc7a","v-f6ba6062"]},ubuntu:{path:"/category/ubuntu/",keys:["v-45955c7c"]},network:{path:"/category/network/",keys:["v-6dabb7d0","v-5dfb637b"]}}}},tag:{"/":{path:"/tag/",map:{页面配置:{path:"/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/",keys:["v-08062d61","v-1a144c13","v-40bd95c1","v-450e8862","v-74d93789","v-64dd32fe","v-f1165cc2","v-c84ce682","v-97506104","v-5ed5a75a","v-4b15d926","v-cf2f50ee","v-7c3e20c2"]},使用指南:{path:"/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",keys:["v-08062d61","v-1a144c13","v-40bd95c1","v-450e8862","v-74d93789","v-64dd32fe","v-f1165cc2","v-c84ce682","v-97506104","v-5ed5a75a","v-4b15d926","v-cf2f50ee","v-7c3e20c2"]},redis持久化:{path:"/tag/redis%E6%8C%81%E4%B9%85%E5%8C%96/",keys:["v-5cb072b3","v-cd4e5daa"]},redis基础:{path:"/tag/redis%E5%9F%BA%E7%A1%80/",keys:["v-e451d600","v-44295686","v-2877cc16","v-62cf8211","v-0f67a82d","v-7ccef86f"]},redis安装:{path:"/tag/redis%E5%AE%89%E8%A3%85/",keys:["v-9ee97fea"]},redis事务:{path:"/tag/redis%E4%BA%8B%E5%8A%A1/",keys:["v-c5721e08"]},redis删除策略:{path:"/tag/redis%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5/",keys:["v-20189b06"]},redis高级数据类型:{path:"/tag/redis%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",keys:["v-501b8055"]},mysql核心SQL:{path:"/tag/mysql%E6%A0%B8%E5%BF%83sql/",keys:["v-47deb978","v-68cfc132","v-1509bd1e","v-5312ebd6","v-cb572402","v-a056d220","v-eedfc64a","v-0c1daf9d"]},mysql存储引擎:{path:"/tag/mysql%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/",keys:["v-15be756c"]},"c/c++连接数据库":{path:"/tag/cc__%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/",keys:["v-18f8cde9"]},安装方法:{path:"/tag/%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/",keys:["v-17cb7aa4"]},mysql基础:{path:"/tag/mysql%E5%9F%BA%E7%A1%80/",keys:["v-0dd7df9c","v-067342a0","v-c8a2e14a","v-a87f8e4c","v-1df5d4d6","v-2648a679","v-cc05253e","v-84ceb2f4"]},mysql索引:{path:"/tag/mysql%E7%B4%A2%E5%BC%95/",keys:["v-32ca78ec","v-f2fadc9e","v-976bf48a","v-19f8f8e4","v-4b2179bb","v-4d1339f4","v-b30276bc"]},mysql日志:{path:"/tag/mysql%E6%97%A5%E5%BF%97/",keys:["v-08c9d541","v-403714d4","v-f10dc5a4","v-3ef06b8b","v-329074fa"]},事务:{path:"/tag/%E4%BA%8B%E5%8A%A1/",keys:["v-1776ebf2","v-51f2dcf6","v-0359a68f","v-558f976c"]},mysql优化:{path:"/tag/mysql%E4%BC%98%E5%8C%96/",keys:["v-167ae4a4","v-fb0c9a20"]},数据备份:{path:"/tag/%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/",keys:["v-f10dc5a4","v-18b96408"]},mysql集群:{path:"/tag/mysql%E9%9B%86%E7%BE%A4/",keys:["v-4dda2b40","v-1015e72b","v-afe3b5ec","v-ab0fa402"]},"mysql MVCC":{path:"/tag/mysql-mvcc/",keys:["v-3ef06b8b","v-329074fa"]},mysql锁机制:{path:"/tag/mysql%E9%94%81%E6%9C%BA%E5%88%B6/",keys:["v-a01dbb18","v-1029a01f","v-664794b6","v-1743001b","v-25bb8896","v-5dfb342e","v-416fc51c"]},mysql拓展:{path:"/tag/mysql%E6%8B%93%E5%B1%95/",keys:["v-125a45f0","v-73d634fe"]},mysql连接池:{path:"/tag/mysql%E8%BF%9E%E6%8E%A5%E6%B1%A0/",keys:["v-fb24ca0e","v-379adba2","v-2247d511","v-874c376e","v-5e84d900","v-51fa1311","v-47e7636c","v-f00ce0e0"]},数组:{path:"/tag/%E6%95%B0%E7%BB%84/",keys:["v-0072b68a","v-4a6b903e","v-92d2378e","v-3945022c","v-0edaacb7","v-8fe9fd22","v-69d65be6","v-a277331a","v-2e7fb111","v-75ce370a","v-1f0c41ec","v-98398990","v-752e9b82","v-c01690d8","v-152dfd8d","v-534e82f8","v-e58201ee"]},双指针:{path:"/tag/%E5%8F%8C%E6%8C%87%E9%92%88/",keys:["v-0072b68a","v-4a6b903e","v-92d2378e","v-3945022c","v-69d65be6","v-98398990","v-152dfd8d","v-d977ced4","v-64506cc7","v-13ade0aa","v-641d44d2","v-8a944abe","v-711b4cec","v-fb458a48","v-db839be2","v-16787a3c","v-a323322a","v-4e6f8416","v-155542a2","v-cdbdf9f8","v-21edb74e","v-525b6569","v-deb0c8ec"]},字符串:{path:"/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2/",keys:["v-0072b68a","v-534e82f8"]},滑动窗口:{path:"/tag/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/",keys:["v-92d2378e","v-115ac7e7"]},二分查找:{path:"/tag/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/",keys:["v-8fe9fd22","v-a277331a","v-21edb74e","v-115ac7e7"]},基础知识:{path:"/tag/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",keys:["v-2e7fb111","v-08a1ce30"]},哈希:{path:"/tag/%E5%93%88%E5%B8%8C/",keys:["v-98398990","v-155542a2","v-6e9dbc4c","v-cdbdf9f8","v-21edb74e","v-525b6569","v-534e82f8","v-e58201ee","v-21b182ee","v-deb0c8ec"]},链表:{path:"/tag/%E9%93%BE%E8%A1%A8/",keys:["v-152dfd8d","v-735dfe06","v-d977ced4","v-64506cc7","v-13ade0aa","v-641d44d2","v-8a944abe","v-703548b8","v-711b4cec","v-fb458a48","v-67248f78","v-db839be2","v-16787a3c","v-a323322a","v-4e6f8416","v-ebfa549c","v-08a1ce30"]},虚拟头结点:{path:"/tag/%E8%99%9A%E6%8B%9F%E5%A4%B4%E7%BB%93%E7%82%B9/",keys:["v-735dfe06","v-d977ced4"]},分治思想:{path:"/tag/%E5%88%86%E6%B2%BB%E6%80%9D%E6%83%B3/",keys:["v-711b4cec"]},优先队列:{path:"/tag/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/",keys:["v-711b4cec"]},循环链表:{path:"/tag/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/",keys:["v-ebfa549c"]},哈希表:{path:"/tag/%E5%93%88%E5%B8%8C%E8%A1%A8/",keys:["v-30fc6476","v-30a803f7","v-115ac7e7"]},git:{path:"/tag/git/",keys:["v-aa555d4e","v-971795b6","v-093d475d","v-6d1b8ec2","v-2a84a2a1","v-17abcac0"]},排序算法:{path:"/tag/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",keys:["v-1a50115e","v-53acd735","v-00fc7494","v-380a6c84","v-4b65c060","v-0cc447aa","v-85d8c71c","v-64c90a94","v-155d00d3"]},队列:{path:"/tag/%E9%98%9F%E5%88%97/",keys:["v-eeb8a63a"]},反汇编:{path:"/tag/%E5%8F%8D%E6%B1%87%E7%BC%96/",keys:["v-038e0b34"]},操作系统:{path:"/tag/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/",keys:["v-403c82cd","v-5aef7a82","v-4d611284"]},堆栈:{path:"/tag/%E5%A0%86%E6%A0%88/",keys:["v-403c82cd"]},编译链接:{path:"/tag/%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5/",keys:["v-5aef7a82"]},虚拟内存:{path:"/tag/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/",keys:["v-4d611284"]},"c++基础":{path:"/tag/c__%E5%9F%BA%E7%A1%80/",keys:["v-66aab0b0","v-1073124a","v-3cc85216","v-ba4c1c2a","v-c97d844a","v-6ef0e0ae","v-f8fc3194","v-14c9e918","v-1155c5a0","v-636256d6","v-51ee3d17","v-132402e1","v-01408bc4"]},内存对齐:{path:"/tag/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/",keys:["v-f8fc3194"]},"do-while(0)":{path:"/tag/do-while(0)/",keys:["v-f103c4b8"]},c语言基础:{path:"/tag/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/",keys:["v-fd4b7500"]},c基础:{path:"/tag/c%E5%9F%BA%E7%A1%80/",keys:["v-332dfae6","v-062c257f","v-70779923","v-198bd17a","v-a688fcfc","v-505a1229","v-1c610f8b","v-573fd3b5","v-63c16f9b","v-a253b292","v-35cd92ed"]},模板实践:{path:"/tag/%E6%A8%A1%E6%9D%BF%E5%AE%9E%E8%B7%B5/",keys:["v-2a2097b4"]},STL:{path:"/tag/stl/",keys:["v-2a2097b4","v-55ae1b9a","v-8365f3e8","v-62b566a8","v-2c413a2b","v-7c5d97b0"]},模板:{path:"/tag/%E6%A8%A1%E6%9D%BF/",keys:["v-4ee2bd74","v-93ba2c5c","v-ca1f584c"]},运算符重载:{path:"/tag/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/",keys:["v-733883fe","v-0aad1b8c","v-6a78bf1e","v-f0f10ec2","v-253e305c","v-62b6f00d","v-02dd1ab7"]},迭代器:{path:"/tag/%E8%BF%AD%E4%BB%A3%E5%99%A8/",keys:["v-733883fe","v-0aad1b8c","v-62b6f00d"]},"new/delete":{path:"/tag/newdelete/",keys:["v-6a78bf1e","v-02dd1ab7"]},类和对象:{path:"/tag/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/",keys:["v-7d06c0d6","v-5f9477f2","v-31530dfb","v-3bc3bfaf","v-3a9cf65c","v-10e1c6eb","v-451c83e2","v-6577db5e","v-e41f0618","v-3eca3d30","v-1da04370"]},对象池:{path:"/tag/%E5%AF%B9%E8%B1%A1%E6%B1%A0/",keys:["v-02dd1ab7"]},多态:{path:"/tag/%E5%A4%9A%E6%80%81/",keys:["v-5e6716c0","v-72de4250","v-e3980572","v-54b6e5ba","v-7c62f63c","v-7ef7d845","v-68c3f3ca","v-0e539496","v-600c7550","v-f51389fa"]},继承:{path:"/tag/%E7%BB%A7%E6%89%BF/",keys:["v-849483e2","v-0cf00a94","v-2f0a2344","v-7eb7ea5a","v-11fe42b7","v-103be5d9","v-7e0a1cbb","v-210e34fe","v-eb58d93a"]},内存泄漏:{path:"/tag/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/",keys:["v-7c6a87cc"]},日志:{path:"/tag/%E6%97%A5%E5%BF%97/",keys:["v-43124686"]},智能指针:{path:"/tag/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/",keys:["v-0d61d626","v-778f0618","v-29824dbc","v-6c9710e8"]},lambda:{path:"/tag/lambda/",keys:["v-6c9710e8","v-2c027fc3"]},设计模式:{path:"/tag/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",keys:["v-16792cec","v-73dfb9d4","v-ef005662","v-44042d12","v-5f0f0675"]},对象优化:{path:"/tag/%E5%AF%B9%E8%B1%A1%E4%BC%98%E5%8C%96/",keys:["v-7c0c7a84","v-5b3d8584","v-45747b0a"]},"c++11":{path:"/tag/c__11/",keys:["v-25665f14","v-6c9ca25c","v-2483becb"]},多线程:{path:"/tag/%E5%A4%9A%E7%BA%BF%E7%A8%8B/",keys:["v-6ce1e1a6"]},"c++11线程":{path:"/tag/c__11%E7%BA%BF%E7%A8%8B/",keys:["v-7cc2160e"]},bind绑定器:{path:"/tag/bind%E7%BB%91%E5%AE%9A%E5%99%A8/",keys:["v-0ccdd78f","v-0413f5c0"]},function函数对象:{path:"/tag/function%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/",keys:["v-0413f5c0","v-474433e4","v-2a36819d"]},线程池:{path:"/tag/%E7%BA%BF%E7%A8%8B%E6%B1%A0/",keys:["v-0413f5c0"]},类模板:{path:"/tag/%E7%B1%BB%E6%A8%A1%E6%9D%BF/",keys:["v-08fdb026"]},"SGI STL源码":{path:"/tag/sgi-stl%E6%BA%90%E7%A0%81/",keys:["v-48c23000","v-30a2e42b","v-02ca19a9","v-7e13dfea","v-4e6c7a0a","v-a2d2b900","v-0d093800","v-9ab5c6e8","v-a8d7b886"]},vim配置:{path:"/tag/vim%E9%85%8D%E7%BD%AE/",keys:["v-5d0a9dce"]},装机:{path:"/tag/%E8%A3%85%E6%9C%BA/",keys:["v-739b4ffd"]},linux工具和基本命令:{path:"/tag/linux%E5%B7%A5%E5%85%B7%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/",keys:["v-dd2c326a","v-5481f6b5","v-70781306","v-fae24824","v-29390dd2"]},配置:{path:"/tag/%E9%85%8D%E7%BD%AE/",keys:["v-45955c7c"]},编译工具:{path:"/tag/%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/",keys:["v-91127220","v-4c6cb231","v-5342bc7a","v-f6ba6062"]},"c++补充":{path:"/tag/c__%E8%A1%A5%E5%85%85/",keys:["v-66e8cf78","v-57c1626a","v-435677cc"]},数据序列化:{path:"/tag/%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97%E5%8C%96/",keys:["v-6dabb7d0"]},Protobuf简介及使用:{path:"/tag/protobuf%E7%AE%80%E4%BB%8B%E5%8F%8A%E4%BD%BF%E7%94%A8/",keys:["v-5dfb637b"]}}}}},k6={article:{"/":{path:"/article/",keys:["v-184f4da6","v-3a1d2930","v-eb072ff4","v-144c90e3","v-08062d61","v-1a144c13","v-4628d8d3","v-25b47c13","v-7945696f","v-5095ca42","v-5cb072b3","v-e451d600","v-44295686","v-cd4e5daa","v-dc384366","v-9ee97fea","v-2877cc16","v-62cf8211","v-c5721e08","v-20189b06","v-0f67a82d","v-7ccef86f","v-501b8055","v-1464ca76","v-47deb978","v-68cfc132","v-1509bd1e","v-5312ebd6","v-cb572402","v-a056d220","v-eedfc64a","v-0c1daf9d","v-f0383c18","v-40bd95c1","v-15be756c","v-18f8cde9","v-17cb7aa4","v-0dd7df9c","v-067342a0","v-c8a2e14a","v-a87f8e4c","v-1df5d4d6","v-2648a679","v-cc05253e","v-84ceb2f4","v-32ca78ec","v-f2fadc9e","v-08c9d541","v-976bf48a","v-19f8f8e4","v-4b2179bb","v-4d1339f4","v-b30276bc","v-1776ebf2","v-51f2dcf6","v-0359a68f","v-558f976c","v-167ae4a4","v-fb0c9a20","v-403714d4","v-f10dc5a4","v-4dda2b40","v-1015e72b","v-afe3b5ec","v-ab0fa402","v-3ef06b8b","v-a01dbb18","v-329074fa","v-1029a01f","v-664794b6","v-1743001b","v-25bb8896","v-5dfb342e","v-416fc51c","v-125a45f0","v-73d634fe","v-fb24ca0e","v-379adba2","v-2247d511","v-874c376e","v-5e84d900","v-51fa1311","v-47e7636c","v-f00ce0e0","v-18b96408","v-0072b68a","v-4a6b903e","v-92d2378e","v-3945022c","v-0edaacb7","v-8fe9fd22","v-69d65be6","v-a277331a","v-2e7fb111","v-75ce370a","v-1f0c41ec","v-98398990","v-752e9b82","v-c01690d8","v-152dfd8d","v-735dfe06","v-d977ced4","v-64506cc7","v-13ade0aa","v-641d44d2","v-8a944abe","v-703548b8","v-711b4cec","v-fb458a48","v-67248f78","v-db839be2","v-16787a3c","v-a323322a","v-4e6f8416","v-ebfa549c","v-08a1ce30","v-24f2d5ba","v-450e8862","v-74d93789","v-155542a2","v-6e9dbc4c","v-cdbdf9f8","v-21edb74e","v-525b6569","v-30fc6476","v-30a803f7","v-115ac7e7","v-534e82f8","v-e58201ee","v-21b182ee","v-deb0c8ec","v-aa555d4e","v-971795b6","v-093d475d","v-6d1b8ec2","v-2a84a2a1","v-17abcac0","v-1a50115e","v-53acd735","v-00fc7494","v-380a6c84","v-4b65c060","v-0cc447aa","v-64dd32fe","v-85d8c71c","v-64c90a94","v-155d00d3","v-f1165cc2","v-eeb8a63a","v-c84ce682","v-038e0b34","v-403c82cd","v-5aef7a82","v-4d611284","v-66aab0b0","v-1073124a","v-3cc85216","v-ba4c1c2a","v-c97d844a","v-6ef0e0ae","v-f8fc3194","v-14c9e918","v-1155c5a0","v-636256d6","v-51ee3d17","v-132402e1","v-01408bc4","v-f103c4b8","v-fd4b7500","v-332dfae6","v-062c257f","v-70779923","v-198bd17a","v-a688fcfc","v-505a1229","v-1c610f8b","v-573fd3b5","v-63c16f9b","v-a253b292","v-35cd92ed","v-2a2097b4","v-4ee2bd74","v-93ba2c5c","v-97506104","v-ca1f584c","v-733883fe","v-0aad1b8c","v-6a78bf1e","v-7d06c0d6","v-f0f10ec2","v-253e305c","v-62b6f00d","v-02dd1ab7","v-5e6716c0","v-72de4250","v-e3980572","v-54b6e5ba","v-5ed5a75a","v-7c62f63c","v-7ef7d845","v-68c3f3ca","v-849483e2","v-0e539496","v-600c7550","v-f51389fa","v-5f9477f2","v-31530dfb","v-3bc3bfaf","v-3a9cf65c","v-10e1c6eb","v-451c83e2","v-6577db5e","v-e41f0618","v-3eca3d30","v-1da04370","v-0cf00a94","v-2f0a2344","v-7eb7ea5a","v-11fe42b7","v-103be5d9","v-7e0a1cbb","v-210e34fe","v-eb58d93a","v-7c6a87cc","v-43124686","v-55ae1b9a","v-8365f3e8","v-62b566a8","v-4b15d926","v-2c413a2b","v-7c5d97b0","v-0d61d626","v-778f0618","v-29824dbc","v-6c9710e8","v-16792cec","v-73dfb9d4","v-ef005662","v-44042d12","v-5f0f0675","v-7c0c7a84","v-5b3d8584","v-45747b0a","v-25665f14","v-6ce1e1a6","v-7cc2160e","v-6c9ca25c","v-2483becb","v-0ccdd78f","v-0413f5c0","v-cf2f50ee","v-474433e4","v-2a36819d","v-2c027fc3","v-08fdb026","v-48c23000","v-30a2e42b","v-02ca19a9","v-7e13dfea","v-4e6c7a0a","v-a2d2b900","v-0d093800","v-9ab5c6e8","v-a8d7b886","v-5d0a9dce","v-739b4ffd","v-dd2c326a","v-5481f6b5","v-70781306","v-fae24824","v-29390dd2","v-45955c7c","v-7c3e20c2","v-91127220","v-4c6cb231","v-5342bc7a","v-f6ba6062","v-66e8cf78","v-57c1626a","v-435677cc","v-6dabb7d0","v-5dfb637b"]}},star:{"/":{path:"/star/",keys:[]}},timeline:{"/":{path:"/timeline/",keys:[]}}},Jt=G(O6),yB=(s="")=>{const n=Bs(),l=Hs(),a=gn();return h(()=>{var B;const e=s||((B=fs().value.blog)==null?void 0:B.key)||"";if(!e)return console.warn("useBlogCategory: key not found"),{path:"/",map:{}};const o=l.getRoutes();if(!Jt.value[e])throw new Error(`useBlogCategory: key ${e} is invalid`);const t=Jt.value[e][a.value],r={path:t.path,map:{}};for(const i in t.map){const d=t.map[i];r.map[i]={path:d.path,items:[]};for(const y of d.keys){const u=o.find(({name:A})=>A===y);if(u){const A=Nl(l,u.path);r.map[i].items.push({path:A.path,info:A.meta})}}n.value.path===d.path&&(r.currentItems=r.map[i].items)}return r})},sc=G(k6),Ce=(s="")=>{const n=Hs(),l=gn();return h(()=>{var r;const a=s||((r=fs().value.blog)==null?void 0:r.key)||"";if(!a)return console.warn("useBlogType: key not found"),{path:"/",items:[]};if(!sc.value[a])throw new Error(`useBlogType: key ${s} is invalid`);const e=n.getRoutes(),o=sc.value[a][l.value],t={path:o.path,items:[]};for(const B of o.keys){const i=e.find(({name:d})=>d===B);if(i){const d=Nl(n,i.path);t.items.push({path:d.path,info:d.meta})}}return t})};var w6=[];const vB=Symbol.for("categoryMap"),wa=()=>{const s=us(vB);if(!s)throw new Error("useCategoryMap() is called without provider.");return s},S6=()=>{const s=yB("category");rn(vB,s)},Sa=()=>{const s=qn(),n=ts();return h(()=>({...s.value.blog,...n.value.blog}))},uB=Symbol.for("tagMap"),Pa=()=>{const s=us(uB);if(!s)throw new Error("useTagMap() is called without provider.");return s},P6=()=>{const s=yB("tag");rn(uB,s)},x6=s=>{const n=ts();return h(()=>{const{[Ds.author]:l}=s.value;return l?Aa(l):l===!1?[]:Aa(n.value.author,!1)})},R6=s=>{const n=wa();return h(()=>Kr(s.value[Ds.category]).map(l=>({name:l,path:n.value.map[l].path})))},V6=s=>{const n=Pa();return h(()=>Yr(s.value[Ds.tag]).map(l=>({name:l,path:n.value.map[l].path})))},M6=s=>h(()=>{const{[Ds.date]:n}=s.value;return op(n)}),q6=s=>{const n=Ql(s,"info"),l=Sa(),a=x6(n),e=R6(n),o=V6(n),t=M6(n),r=Ii(),B=h(()=>({author:a.value,category:e.value,date:t.value,localizedDate:n.value[Ds.localizedDate]||"",tag:o.value,isOriginal:n.value[Ds.isOriginal]||!1,readingTime:n.value[Ds.readingTime]||null,readingTimeLocale:n.value[Ds.readingTime]&&r.value?Ti(n.value[Ds.readingTime],r.value):null,pageview:s.path})),i=h(()=>l.value.articleInfo);return{info:B,items:i}},AB=Symbol(""),xa=()=>{const s=us(AB);if(!s)throw new Error("useArticles() is called without provider.");return s},N6=()=>{const s=Ce("article");rn(AB,s)},mB=Symbol(""),Dp=()=>{const s=us(mB);if(!s)throw new Error("useStars() is called without provider.");return s},$6=()=>{const s=Ce("star");rn(mB,s)},FB=Symbol(""),fp=()=>{const s=us(FB);if(!s)throw new Error("useTimelines() is called without provider.");return s},z6=()=>{const s=Ce("timeline"),n=h(()=>{const l=[];return s.value.items.forEach(({info:a,path:e})=>{const o=op(a[Ds.date]),t=o==null?void 0:o.getFullYear(),r=o?o.getMonth()+1:null,B=o==null?void 0:o.getDate();t&&r&&B&&((!l[0]||l[0].year!==t)&&l.unshift({year:t,items:[]}),l[0].items.push({date:`${r}/${B}`,info:a,path:e}))}),{...s.value,config:l.reverse()}});rn(FB,n)},Q6=()=>{N6(),S6(),$6(),P6(),z6()};var H6=R({name:"SocialMedia",setup(){const s=Sa(),n=El(),l=h(()=>{const a=s.value.medias;return a?Ul(a).map(([e,o])=>({name:e,icon:I6[e],url:o})):[]});return()=>l.value.length?c("div",{class:"vp-social-medias"},l.value.map(({name:a,icon:e,url:o})=>c("a",{class:"vp-social-media",href:o,rel:"noopener noreferrer",target:"_blank","aria-label":a,...n.value?{}:{"data-balloon-pos":"up"},innerHTML:e}))):null}}),bp=R({name:"BloggerInfo",setup(){const s=Sa(),n=Gl(),l=ts(),a=xa(),e=wa(),o=Pa(),t=fp(),r=Ia(),B=h(()=>{var u;return s.value.name||((u=Aa(l.value.author)[0])==null?void 0:u.name)||n.value.title}),i=h(()=>s.value.avatar||l.value.logo),d=h(()=>l.value.blogLocales),y=h(()=>s.value.intro);return()=>{const{article:u,category:A,tag:F,timeline:_}=d.value,C=[[a.value.path,a.value.items.length,u],[e.value.path,nn(e.value.map).length,A],[o.value.path,nn(o.value.map).length,F],[t.value.path,t.value.items.length,_]];return c("div",{class:"vp-blogger-info",vocab:"https://schema.org/",typeof:"Person"},[c("div",{class:"vp-blogger",...y.value?{style:{cursor:"pointer"},"aria-label":d.value.intro,"data-balloon-pos":"down",role:"link",onClick:()=>r(y.value)}:{}},[i.value?c("img",{class:["vp-blogger-avatar",{round:s.value.roundAvatar}],src:_s(i.value),property:"image",alt:"Blogger Avatar",loading:"lazy"}):null,B.value?c("div",{class:"vp-blogger-name",property:"name"},B.value):null,s.value.description?c("div",{class:"vp-blogger-description",innerHTML:s.value.description}):null,y.value?c("meta",{property:"url",content:_s(y.value)}):null]),c("div",{class:"vp-blog-counts"},C.map(([D,I,f])=>c(ks,{class:"vp-blog-count",to:D},()=>[c("div",{class:"count"},I),c("div",f)]))),c(H6)])}}});const _p=()=>c(os,{name:"category"},()=>c("path",{d:"M148.41 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H148.41c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.311-40.31zM147.556 553.478H429.73c22.263 0 40.311 18.048 40.311 40.31v282.176c0 22.263-18.048 40.312-40.31 40.312H147.555c-22.263 0-40.311-18.049-40.311-40.312V593.79c0-22.263 18.048-40.311 40.31-40.311zM593.927 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H593.927c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.31-40.31zM730.22 920.502H623.926c-40.925 0-74.22-33.388-74.22-74.425V623.992c0-41.038 33.387-74.424 74.425-74.424h222.085c41.038 0 74.424 33.226 74.424 74.067v114.233c0 10.244-8.304 18.548-18.547 18.548s-18.548-8.304-18.548-18.548V623.635c0-20.388-16.746-36.974-37.33-36.974H624.13c-20.585 0-37.331 16.747-37.331 37.33v222.086c0 20.585 16.654 37.331 37.126 37.331H730.22c10.243 0 18.547 8.304 18.547 18.547 0 10.244-8.304 18.547-18.547 18.547z"}));_p.displayName="CategoryIcon";const hp=()=>c(os,{name:"tag"},()=>c("path",{d:"M939.902 458.563L910.17 144.567c-1.507-16.272-14.465-29.13-30.737-30.737L565.438 84.098h-.402c-3.215 0-5.726 1.005-7.634 2.913l-470.39 470.39a10.004 10.004 0 000 14.164l365.423 365.424c1.909 1.908 4.42 2.913 7.132 2.913s5.223-1.005 7.132-2.913l470.39-470.39c2.01-2.11 3.014-5.023 2.813-8.036zm-240.067-72.121c-35.458 0-64.286-28.828-64.286-64.286s28.828-64.285 64.286-64.285 64.286 28.828 64.286 64.285-28.829 64.286-64.286 64.286z"}));hp.displayName="TagIcon";const Cp=()=>c(os,{name:"timeline"},()=>c("path",{d:"M511.997 70.568c-243.797 0-441.429 197.633-441.429 441.435 0 243.797 197.632 441.429 441.43 441.429S953.431 755.8 953.431 512.002c0-243.796-197.637-441.434-441.435-441.434zm150.158 609.093-15.605 15.61c-8.621 8.615-22.596 8.615-31.215 0L472.197 552.126c-4.95-4.944-4.34-14.888-4.34-24.677V247.14c0-12.19 9.882-22.07 22.07-22.07h22.07c12.19 0 22.07 9.882 22.07 22.07v273.218l128.088 128.088c8.62 8.62 8.62 22.595 0 31.215zm0 0"}));Cp.displayName="TimelineIcon";const EB=()=>c(os,{name:"slides"},()=>c("path",{d:"M896 170.667v426.666a85.333 85.333 0 0 1-85.333 85.334h-256v61.184l192.597 115.584-43.861 73.13-148.736-89.173v95.275h-85.334v-95.318l-148.736 89.216-43.861-73.13 192.597-115.627v-61.141h-256A85.333 85.333 0 0 1 128 597.333V170.667H85.333V85.333h853.334v85.334H896zm-682.667 0v426.666h597.334V170.667H213.333zM426.667 512h-85.334V341.333h85.334V512zm128 0h-85.334V256h85.334v256zm128 0h-85.334V384h85.334v128z"}));EB.displayName="SlideIcon";const DB=()=>c(os,{name:"sticky"},()=>[c("path",{d:"m381.3 733.8l-161.9 118c-5.9 4.5-13.2 6.6-20.1 6.6-8.7 0-17.7-3.4-24.3-10-12.2-12.2-13.9-31.3-3.5-45.2l144.5-195.5-113.6-112.9c-11.1-11.1-13.2-28.4-5.5-42 5.5-8.7 52.1-76.4 155.5-51 1.8 0.3 3.5 0.3 5.6 0.7 4.2 0.3 9 0.7 14.2 1.7 21.9 3.5 60.8-13.9 94.5-42.7 32.3-27.5 53.1-59.4 53.1-81.6 0-5.2 0-10.8-0.3-16-0.7-20.8-2.1-52.8 21.5-76.4 28.1-28.1 72.9-30.6 103.9-5.2 0.6 0.3 1 1 1.7 1.7 16.7 16.3 187.5 187.2 189.3 188.9 14.5 14.6 22.9 34.4 22.9 55.3 0 20.8-8 40.2-22.9 54.8-23.7 23.6-56 22.6-77.1 21.6-4.9 0-10.5-0.4-15.7-0.4-20.8 0-45.8 14.6-70.5 41.3-34.3 37.5-55.5 85.8-53.8 107.7 0.7 6.9 2.1 19.1 2.4 20.8 25 101.4-42.7 147.6-50.7 152.8-13.9 8.4-31.6 6.3-42.7-4.8l-112.1-112.2z"})]);DB.displayName="StickyIcon";const ge=()=>c(os,{name:"article"},()=>c("path",{d:"M853.333 938.667H170.667A42.667 42.667 0 0 1 128 896V128a42.667 42.667 0 0 1 42.667-42.667h682.666A42.667 42.667 0 0 1 896 128v768a42.667 42.667 0 0 1-42.667 42.667zm-42.666-85.334V170.667H213.333v682.666h597.334zM298.667 256h170.666v170.667H298.667V256zm0 256h426.666v85.333H298.667V512zm0 170.667h426.666V768H298.667v-85.333zm256-384h170.666V384H554.667v-85.333z"}));ge.displayName="ArticleIcon";const fB=()=>c(os,{name:"book"},()=>c("path",{d:"M256 853.333h426.667A85.333 85.333 0 0 0 768 768V256a85.333 85.333 0 0 0-85.333-85.333H469.333a42.667 42.667 0 0 1 0-85.334h213.334A170.667 170.667 0 0 1 853.333 256v512a170.667 170.667 0 0 1-170.666 170.667H213.333A42.667 42.667 0 0 1 170.667 896V128a42.667 42.667 0 0 1 42.666-42.667h128A42.667 42.667 0 0 1 384 128v304.256l61.653-41.088a42.667 42.667 0 0 1 47.36 0l61.654 41.045V256A42.667 42.667 0 0 1 640 256v256a42.667 42.667 0 0 1-66.347 35.499l-104.32-69.547-104.32 69.547A42.667 42.667 0 0 1 298.667 512V170.667H256v682.666z"}));fB.displayName="BookIcon";const bB=()=>c(os,{name:"link"},()=>c("path",{d:"M460.8 584.533c17.067 17.067 17.067 42.667 0 59.734-17.067 17.066-42.667 17.066-59.733 0-85.334-85.334-85.334-217.6 0-302.934L554.667 192C640 110.933 776.533 110.933 857.6 196.267c81.067 81.066 81.067 213.333 0 294.4l-68.267 64c0-34.134-4.266-68.267-17.066-102.4l21.333-21.334c51.2-46.933 55.467-128 4.267-179.2s-128-55.466-179.2-4.266c-4.267 0-4.267 4.266-4.267 4.266L465.067 401.067c-51.2 51.2-51.2 132.266-4.267 183.466m123.733-183.466C601.6 384 627.2 384 644.267 401.067c85.333 85.333 85.333 217.6 0 302.933l-153.6 149.333C405.333 934.4 268.8 934.4 187.733 849.067c-81.066-81.067-81.066-213.334 0-294.4l68.267-64c0 34.133 4.267 72.533 17.067 102.4L251.733 614.4C204.8 665.6 204.8 746.667 256 793.6c51.2 46.933 123.733 46.933 174.933 0l149.334-149.333c51.2-51.2 51.2-128 0-179.2-12.8-17.067-17.067-46.934 4.266-64z"}));bB.displayName="LinkIcon";const _B=()=>c(os,{name:"project"},()=>c("path",{d:"M987.456 425.152H864V295.296a36.48 36.48 0 0 0-36.544-36.544h-360l-134.08-128.256A9.344 9.344 0 0 0 327.04 128H36.48A36.48 36.48 0 0 0 0 164.544v676.608a36.48 36.48 0 0 0 36.544 36.544h797.76a36.672 36.672 0 0 0 33.92-22.848L1021.44 475.52a36.48 36.48 0 0 0-33.92-50.304zM82.304 210.304h215.424l136.64 130.752h347.328v84.096H198.848A36.672 36.672 0 0 0 164.928 448L82.304 652.8V210.304zM808.32 795.456H108.544l118.08-292.608h699.904L808.32 795.52z"}));_B.displayName="ProjectIcon";const hB=()=>c(os,{name:"friend"},()=>c("path",{d:"M860.16 213.333A268.373 268.373 0 0 0 512 186.027a267.52 267.52 0 0 0-348.16 404.48L428.8 855.893a118.613 118.613 0 0 0 166.4 0l264.96-265.386a267.52 267.52 0 0 0 0-377.174zM800 531.627l-264.96 264.96a32.427 32.427 0 0 1-46.08 0L224 530.347a183.04 183.04 0 0 1 0-256 182.187 182.187 0 0 1 256 0 42.667 42.667 0 0 0 60.587 0 182.187 182.187 0 0 1 256 0 183.04 183.04 0 0 1 3.413 256z"}));hB.displayName="FriendIcon";const To=()=>c(os,{name:"slide-down"},()=>c("path",{d:"M108.775 312.23c13.553 0 27.106 3.734 39.153 11.806l375.205 250.338 363.641-252.808c32.587-21.624 76.499-12.83 98.123 19.757 21.685 32.467 12.95 76.56-19.576 98.184l-402.854 278.89c-23.733 15.901-54.694 15.962-78.547.12L69.501 442.097c-32.647-21.685-41.441-65.777-19.817-98.304 13.734-20.54 36.201-31.563 59.09-31.563Z"}));To.displayName="SlideDownIcon";const CB=()=>c("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",class:"empty-icon",viewBox:"0 0 1024 1024",innerHTML:'<defs><linearGradient id="f" x1="512.342" y1="2266.13" x2="512.342" y2="666.063" gradientUnits="userSpaceOnUse"><stop offset=".919" stop-color="#e6e6e6" stop-opacity="0"/><stop offset="1" stop-color="#e6e6e6"/></linearGradient><linearGradient id="g" x1="528.912" y1="774" x2="388.088" y2="612" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#e6e6e6" stop-opacity="0"/></linearGradient><linearGradient id="h" x1="213.219" y1="721.704" x2="251.313" y2="683.61" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#d7d7d7"/><stop offset=".485" stop-color="#fafafa"/><stop offset="1" stop-color="#fafafa"/></linearGradient><linearGradient id="i" x1="724.813" y1="821.718" x2="768.656" y2="777.876" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#fafafa"/></linearGradient><linearGradient id="a" x1="513.493" y1="714.594" x2="471.007" y2="544.188" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#999"/><stop offset="1" stop-color="#ccc"/></linearGradient><linearGradient id="b" x1="440.156" y1="564.031" x2="508.594" y2="495.594" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#f0f0f0"/></linearGradient><linearGradient id="l" x1="660.988" y1="754.156" x2="608.637" y2="544.188" xlink:href="#a"/><linearGradient id="m" x1="479.188" y1="774.219" x2="649.782" y2="603.625" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#b3b3b3"/><stop offset="1" stop-color="#e6e6e6"/></linearGradient><linearGradient id="n" x1="447.121" y1="774.219" x2="394.661" y2="563.813" xlink:href="#a"/><linearGradient id="o" x1="494" y1="597" x2="628" y2="463" xlink:href="#b"/><linearGradient id="d" x1="610.485" y1="604.938" x2="697.298" y2="518.125" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#fff"/></linearGradient><linearGradient id="p" x1="457.438" y1="619.25" x2="353.469" y2="619.25" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#e6e6e6" stop-opacity="0"/><stop offset="1" stop-color="#e6e6e6"/></linearGradient><linearGradient id="q" x1="542.734" y1="674.25" x2="615.672" y2="601.313" xlink:href="#b"/><linearGradient id="c" x1="627.933" y1="358.938" x2="685.192" y2="422.531" gradientUnits="userSpaceOnUse"><stop offset=".4" stop-color="#e6e6e6" stop-opacity=".4"/><stop offset=".443" stop-color="#fff"/><stop offset=".6" stop-color="#ccc"/></linearGradient><linearGradient id="r" x1="618.547" y1="422.531" x2="681.547" y2="359.531" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#e6e6e6"/><stop offset=".761" stop-color="#fff"/><stop offset="1" stop-color="#f0f0f0"/></linearGradient><linearGradient id="s" x1="625" y1="441.5" x2="697" y2="369.5" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset=".761" stop-color="#fff"/><stop offset="1" stop-color="#f0f0f0"/></linearGradient><linearGradient id="t" x1="627.681" y1="361.438" x2="692.257" y2="433.156" xlink:href="#c"/><linearGradient id="u" x1="561.414" y1="735.438" x2="573.149" y2="688.375" xlink:href="#d"/><linearGradient id="v" x1="405" y1="485.875" x2="440" y2="450.875" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#fff" stop-opacity=".702"/></linearGradient><linearGradient id="w" x1="404.61" y1="486.906" x2="441.86" y2="449.656" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset=".495" stop-color="#ccc" stop-opacity=".702"/><stop offset=".498" stop-color="#ccc"/><stop offset="1" stop-color="#fff" stop-opacity=".302"/></linearGradient><radialGradient id="e" cx="329.297" cy="647.578" r="8.172" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#fafafa"/><stop offset="1.2" stop-color="#e6e6e6"/></radialGradient><radialGradient id="j" cx="802.297" cy="673.578" r="8.172" xlink:href="#e"/><radialGradient id="k" cx="774.844" cy="642.75" r="5.531" xlink:href="#e"/></defs><path d="M512.33 666.07c441.828 0 800 358.18 800 800.03s-358.172 800.02-800 800.02-800-358.18-800-800.02 358.17-800.03 800-800.03z" style="fill:url(#f);fill-rule:evenodd"/><path d="m272 694 242-82 131 119-188 43z" style="fill:url(#g);fill-rule:evenodd"/><path fill="#b3b3b3" fill-rule="evenodd" d="M232.391 723.534a2.4 2.4 0 0 1 2.4 2.4v17.725a2.4 2.4 0 0 1-4.8 0v-17.725a2.4 2.4 0 0 1 2.4-2.4z"/><path d="M232.255 676.559c10.33 0 17.067 15.408 18.7 28.493 1.619 12.942-2.372 23.694-18.7 23.694-16.878 0-20.213-10.733-18.7-23.694 1.633-14.061 8.37-28.493 18.7-28.493z" style="fill:url(#h);fill-rule:evenodd"/><path fill="#b3b3b3" fill-rule="evenodd" d="M745.853 826h.938a2.4 2.4 0 0 1 2.4 2.4v22.238a2.4 2.4 0 0 1-2.4 2.4h-.938a2.4 2.4 0 0 1-2.4-2.4V828.4a2.4 2.4 0 0 1 2.4-2.4z"/><path d="M746.727 830.3c-19.438 0-23.278-9.326-21.541-20.59a34.467 34.467 0 0 1 3.289-10.369 16.628 16.628 0 0 1 0-9.112c2.889-12.327 12.059-20.911 18.356-20.911 6.56 0 15.468 9.1 18.356 20.911a14.589 14.589 0 0 1-.335 9.217 34.36 34.36 0 0 1 3.419 10.264c1.861 11.243-2.735 20.59-21.544 20.59z" style="fill:url(#i);fill-rule:evenodd"/><path fill="#ccc" fill-rule="evenodd" d="M328.841 654.562a6.571 6.571 0 0 0-5.2-5.027q-4.107-.952-.034-2.045a6.571 6.571 0 0 0 5.027-5.2q.952-4.109 2.045-.035a6.569 6.569 0 0 0 5.2 5.027q4.109.954.035 2.045a6.569 6.569 0 0 0-5.027 5.2q-.955 4.108-2.046.035z"/><path d="M328.383 653.73a6.567 6.567 0 0 0-5.2-5.027q-4.109-.954-.035-2.045a6.568 6.568 0 0 0 5.027-5.2q.954-4.107 2.046-.034a6.568 6.568 0 0 0 5.2 5.027q4.107.952.035 2.045a6.568 6.568 0 0 0-5.027 5.2q-.954 4.104-2.046.034z" style="fill:url(#e);fill-rule:evenodd"/><path fill="#ccc" fill-rule="evenodd" d="M801.841 680.562a6.571 6.571 0 0 0-5.2-5.027q-4.107-.952-.034-2.045a6.571 6.571 0 0 0 5.027-5.2q.952-4.109 2.045-.035a6.569 6.569 0 0 0 5.2 5.027q4.108.954.035 2.045a6.569 6.569 0 0 0-5.027 5.2q-.955 4.108-2.046.035z"/><path d="M801.383 679.73a6.567 6.567 0 0 0-5.2-5.027q-4.108-.954-.035-2.045a6.568 6.568 0 0 0 5.027-5.2q.954-4.107 2.046-.034a6.568 6.568 0 0 0 5.2 5.027q4.107.952.035 2.045a6.568 6.568 0 0 0-5.027 5.2q-.954 4.104-2.046.034z" style="fill:url(#j);fill-rule:evenodd"/><path d="M774.21 646.9a4.446 4.446 0 0 0-3.517-3.4q-2.778-.643-.023-1.383a4.443 4.443 0 0 0 3.4-3.517q.645-2.778 1.383-.023a4.443 4.443 0 0 0 3.517 3.4q2.778.645.023 1.383a4.446 4.446 0 0 0-3.4 3.517q-.645 2.78-1.383.023z" style="fill:url(#k);fill-rule:evenodd"/><path d="m385.6 714.6.158-150.658L598.9 544.174l-.158 150.658z" style="fill:url(#a);fill-rule:evenodd"/><path d="m385.474 564.031 214.763-19.383-36.171-49.067-215.559 17.634z" style="fill:url(#b);fill-rule:evenodd"/><path d="m598.744 694.832.156-150.658 71.975 59.319-.158 150.658z" style="fill:url(#l);fill-rule:evenodd"/><path d="m457.064 774.209.158-150.658 214.691-19.914-.158 150.663z" style="fill:url(#m);fill-rule:evenodd"/><path d="m384.566 714.459.158-150.659 72.5 59.75-.158 150.658z" style="fill:url(#n);fill-rule:evenodd"/><path d="M494 640s75.357-58.4 42-83-38.887 1.663-37 14 53.847 12.465 54-26c.2-49.979 75-125 75-125" style="fill:none;stroke-width:3px;stroke-dasharray:12 6;stroke:url(#o);fill-rule:evenodd"/><path d="m670.275 604.939-72.041-59.9 38.476-26.909 72.86 58.159z" style="fill:url(#d);fill-rule:evenodd"/><path d="m425.5 674.383-72.042-59.9 31.109-50.347 72.86 58.16z" style="fill:url(#p);fill-rule:evenodd"/><path d="m487.918 674.235 214.482-22.57-31.1-50.346-215.309 20.833z" style="fill:url(#q);fill-rule:evenodd"/><path style="fill:#fff;fill-rule:evenodd" d="m697.363 358.927-69.58 62.511-12.035 1.082z"/><path d="m697.363 358.927-69.58 62.511-12.035 1.082z" style="fill:url(#c);fill-rule:evenodd"/><path d="M615.748 422.52 604 413l92.089-53.46" style="fill:url(#r);fill-rule:evenodd"/><path d="m625 432 12 18 60-89" style="fill:url(#s);fill-rule:evenodd"/><path d="m626.98 421.335-2.471 11.828 70.918-71.735" style="fill:#fff;fill-rule:evenodd"/><path d="m626.98 421.335-2.471 11.828 70.918-71.735" style="fill:url(#t);fill-rule:evenodd"/><path d="m494.814 735.44 21.293-2.1v-6.613l-13.4 1.319v-6.965l10.977-1.08v-6.613l-10.977 1.08v-6.084l12.917-1.27v-6.525l-20.808 2.047v32.8zM521 732.863l7.054-.694v-11.241a106.361 106.361 0 0 0-1.014-11.274l.176-.017 2.645 7.586 4.453 11.553 4.32-.425 4.408-12.424 2.733-8.116.177-.018a111.811 111.811 0 0 0-1.014 11.474v11.241l7.185-.707V697l-8.552.841-5.025 14.646c-.618 1.956-1.147 4.08-1.808 6.173l-.22.022c-.617-1.968-1.146-3.987-1.808-5.818l-5.2-13.639-8.508.837v32.8zm37.213-3.661 7.891-.776v-10.889l3.835-.377c6.922-.681 12.961-4.714 12.961-12.517 0-8.111-5.951-10.082-13.181-9.371l-11.504 1.128v32.8zm7.891-17.881v-9.478l3.218-.316c3.792-.373 5.908.565 5.908 3.871 0 3.218-1.852 5.208-5.687 5.585zM594 725.682l7.891-.777v-26.274l8.905-.876v-6.524l-25.657 2.524v6.524l8.861-.871v26.274zm27.991-2.754 7.847-.772v-11.594l9.919-22.18-8.244.811-2.733 7.542c-.925 2.56-1.807 4.939-2.733 7.587l-.176.018c-.926-2.466-1.764-4.676-2.645-7.058l-2.734-7-8.375.824 9.874 20.233v11.594z" style="fill:url(#u);fill-rule:evenodd"/><path fill="#ccc" fill-rule="evenodd" d="M408.938 457.309a17.5 17.5 0 0 0 21.374 26.725 17.5 17.5 0 1 1-16.306-30.955 17.442 17.442 0 0 0-5.068 4.23z"/><circle cx="422.5" cy="468.375" r="17.5" style="fill:url(#v)"/><path fill="#ccc" fill-rule="evenodd" d="M391.76 451.5c-2.358 4.419 9.827 15.52 27.215 24.8 15.131 8.071 29.212 12.1 34.166 10.093-4.191 2.772-18.943-1.24-34.86-9.73-17.388-9.275-29.573-20.376-27.215-24.8a2.96 2.96 0 0 1 1.585-1.3 2.606 2.606 0 0 0-.891.937z"/><path d="M418.975 476.29c-17.388-9.275-29.573-20.376-27.215-24.8s18.363-.484 35.751 8.791 29.572 20.376 27.215 24.8-18.364.483-35.751-8.791zm31.634 5.732c1.824-3.42-8.789-12.642-23.7-20.6s-28.486-11.633-30.31-8.213 8.789 12.642 23.7 20.6 28.486 11.633 30.31 8.213zm-36.645-29.008-2.775 1.452.032 1.751 28.637 14.183.266-4.559z" style="fill:url(#w);fill-rule:evenodd"/><g class="people"><path style="fill:#f8cfad;fill-rule:evenodd" d="m612.131 676.5 1.362 3.532 3.255-2.324-1.361-3.532zM629.131 665.5l1.362 3.532 3.255-2.324-1.361-3.532z"/><path style="fill:#141a33;fill-rule:evenodd" d="m617.764 678.184-3.162-.078a11.028 11.028 0 0 0-1.034 3.454c-.258 2.006-1.177 5-.449 5.367 1.5 2.659 4.118-.215 4.118-.215s2.187-2.848 1.925-5.265c-.106-.973-1.181-1.869-1.398-3.263zM633.781 665.855l3.019.945a11.008 11.008 0 0 1-.137 3.6c-.4 1.981-.179 4.166-.986 4.277-2.283 2.03-3.827-1.533-3.827-1.533s-1.473-2.456-.444-4.659c.412-.88 1.718-1.385 2.375-2.63z"/><path style="fill:#f0c5a8;fill-rule:evenodd" d="M599.935 592.534s10.293 9.761 11.95 7.564 3.536-3.463-6.758-13.65z"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M611.3 596.361c1.674-1.105 11.5 7.048 14.5 11.774s-12.705-4.36-14.632-6.776-1.54-3.893.132-4.998z"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M621.815 607.988s1.809 2.549 2.433 1.756 2.475-1.064 2.449-1.138.1-.819 1.288-2.331-3.8-3.632-5.81-.494a2.556 2.556 0 0 0-.36 2.207z"/><path fill="#232c57" fill-rule="evenodd" d="M598 617s14.968-5.618 17 7a150.235 150.235 0 0 1 2 22s12.666 11.836 16 19c0 0-4.753-1.629-4 2 0 0-18.132-14.647-19-19s-9.148-18.716-12-31z"/><path d="M589 622s14.968-5.618 17 7a150.235 150.235 0 0 1 2 22s4.666 17.836 8 25c0 0-4.753-1.629-4 2 0 0-10.132-20.647-11-25s-9.148-18.716-12-31z" style="fill:#292966;fill-rule:evenodd"/><path style="fill:#f0c5a8;fill-rule:evenodd" d="M585.626 597.7s-10.292 9.761-11.95 7.563-3.536-3.463 6.758-13.65z"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M574.259 601.529c-1.675-1.105-11.5 7.049-14.5 11.774s12.7-4.36 14.631-6.775 1.543-3.894-.131-4.999z"/><path style="fill:#f0c5a8;fill-rule:evenodd" d="M591.715 577.752s-.606 1.681 1.48 3.716-3.615 5.307-4.645 2.85-.48-2.716-.48-2.716z"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M583.527 574.123c-.839 1.043.491 3.873 1.453 5.449s2.749 2.833 3.364 2.428 4.088-2.657 4-4-.228-3.4-.228-3.4 2.562-1.641 2.154-2.916-2.916-.154-2.916-.154a15.853 15.853 0 0 0-.227-2.224c-.189-.929-6.887-1.445-7.827 2.6s.558 1.805.227 2.217z"/><path fill="#232c57" fill-rule="evenodd" d="M584.227 567.758c2.1-.885 7.2-3.684 10.125.318s.842 4.385.989 5.294-1.894 5.69-1.341 6.63-3.865.8-4.657-1.179-2.844-.539-2.227-1.224-1.3-4.456-2.916-2.154a9.252 9.252 0 0 0 .309-1.38c-.115.192.259-3.257-.673-1.32s-2.1 1.037-3.069.762-1.8-1.118-1.071-1.689c.023-.016 2.436-3.172 4.531-4.058z"/><path d="M589 585c-2.584-.47-10.055.362-13 13 0 0 1.9 3.349 5 4s6 21 6 21 24.016 11.06 27-3c-.07-13.826-8-21-8-21s5.829-3.2 5-6-8.016-10.153-11-10-6 0-6 0-2.416 2.47-5 2z" style="fill:#f6bb07;fill-rule:evenodd"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M563.284 612.581s-.986 2.965-1.814 2.389-2.678-.3-2.675-.374-.333-.755-1.912-1.854 2.577-4.583 5.414-2.167a2.551 2.551 0 0 1 .987 2.006z"/></g>'});CB.displayName="EmptyIcon";const gB=()=>c(os,{name:"lock"},()=>c("path",{d:"M787.168 952.268H236.832c-30.395 0-55.033-24.638-55.033-55.033V429.45c0-30.395 24.638-55.034 55.033-55.034h82.55V264.35c0-106.38 86.238-192.618 192.618-192.618S704.618 157.97 704.618 264.35v110.066h82.55c30.395 0 55.033 24.639 55.033 55.034v467.785c0 30.395-24.639 55.033-55.033 55.033zM484.483 672.046v115.122h55.034V672.046c31.99-11.373 55.033-41.605 55.033-77.496 0-45.592-36.958-82.55-82.55-82.55s-82.55 36.958-82.55 82.55c0 35.89 23.042 66.123 55.033 77.496zM622.067 264.35c0-60.788-49.28-110.067-110.067-110.067s-110.067 49.28-110.067 110.067v110.066h220.135V264.35z"}));gB.displayName="LockIcon";var j6=R({name:"ArticleItem",props:{info:{type:Object,required:!0},path:{type:String,required:!0}},slots:Object,setup(s,{slots:n}){const l=Ql(s,"info"),{info:a,items:e}=q6(s);return()=>{var u,A,F;const{[Ds.title]:o,[Ds.type]:t,[Ds.isEncrypted]:r=!1,[Ds.cover]:B,[Ds.excerpt]:i,[Ds.sticky]:d}=l.value,y=a.value;return c("div",{class:"vp-article-wrapper"},c("article",{class:"vp-article-item",vocab:"https://schema.org/",typeof:"Article"},[((u=n.cover)==null?void 0:u.call(n,{cover:B}))||(B?[c("img",{class:"vp-article-cover",src:_s(B),loading:"lazy"}),c("meta",{property:"image",content:_s(B)})]:[]),d?c(DB):null,c(ks,{to:s.path},()=>{var _;return((_=n.title)==null?void 0:_.call(n,{title:o,isEncrypted:r,type:t}))||c("header",{class:"vp-article-title"},[r?c(gB):null,t===Ri.slide?c(EB):null,c("span",{property:"headline"},o)])}),((A=n.excerpt)==null?void 0:A.call(n,{excerpt:i}))||(i?c("div",{class:"vp-article-excerpt",innerHTML:i}):null),c("hr",{class:"vp-article-hr"}),((F=n.info)==null?void 0:F.call(n,{info:y}))||c(oB,{info:y,...e.value?{items:e.value}:{}})]))}}}),G6=R({name:"Pagination",props:{total:{type:Number,default:10},perPage:{type:Number,default:10},current:{type:Number,default:1}},emits:["updateCurrentPage"],setup(s,{emit:n}){let l;const a=ts(),e=G(""),o=h(()=>a.value.paginationLocales),t=h(()=>Math.ceil(s.total/s.perPage)),r=h(()=>!!t.value&&t.value!==1),B=h(()=>t.value<7?!1:s.current>4),i=h(()=>t.value<7?!1:s.current<t.value-3),d=h(()=>{const{current:A}=s;let F=1,_=t.value;const C=[];t.value>=7&&(A<=4&&A<t.value-3?(F=1,_=5):A>4&&A>=t.value-3?(_=t.value,F=t.value-4):t.value>7&&(F=A-2,_=A+2));for(let D=F;D<=_;D++)C.push(D);return C}),y=A=>n("updateCurrentPage",A),u=A=>{const F=parseInt(A);F<=t.value&&F>0?y(F):l.pop(`<svg viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg" width="16" height="16"><path d="M64 512a448 448 0 1 0 896 0 448 448 0 1 0-896 0Z" fill="#FA5151"/><path d="m557.3 512 113.1-113.1c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L512 466.7 398.9 353.6c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L466.7 512 353.6 625.1c-12.5 12.5-12.5 32.8 0 45.3 6.2 6.2 14.4 9.4 22.6 9.4s16.4-3.1 22.6-9.4L512 557.3l113.1 113.1c6.2 6.2 14.4 9.4 22.6 9.4s16.4-3.1 22.6-9.4c12.5-12.5 12.5-32.8 0-45.3L557.3 512z" fill="#FFF"/></svg>${o.value.errorText.replace(/\$page/g,t.value.toString())}`)};return ms(()=>{l=new Fu}),()=>c("div",{class:"vp-pagination"},r.value?c("nav",{class:"vp-pagination-list"},[c("div",{class:"vp-pagination-number "},[s.current>1?c("div",{class:"prev",role:"navigation",unselectable:"on",onClick:()=>y(s.current-1)},o.value.prev):null,B.value?[c("div",{role:"navigation",onClick:()=>y(1)},1),c("div",{class:"ellipsis"},"...")]:null,d.value.map(A=>c("div",{key:A,class:{active:s.current===A},role:"navigation",onClick:()=>y(A)},A)),i.value?[c("div",{class:"ellipsis"},"..."),c("div",{role:"navigation",onClick:()=>y(t.value)},t.value)]:null,s.current<t.value?c("div",{class:"next",role:"navigation",unselectable:"on",onClick:()=>y(s.current+1)},o.value.next):null]),c("div",{class:"vp-pagination-nav"},[c("label",{for:"navigation-text"},`${o.value.navigate}: `),c("input",{id:"navigation-text",value:e.value,onInput:({target:A})=>{e.value=A.value},onKeydown:A=>{A.key==="Enter"&&(A.preventDefault(),u(e.value))}}),c("button",{class:"vp-pagination-button",role:"navigation",title:o.value.action,onClick:()=>u(e.value)},o.value.action)])]):[])}}),gp=R({name:"ArticleList",props:{items:{type:Array,default:()=>[]}},setup(s){const n=Ln(),l=Hs(),a=Sa(),e=G(1),o=h(()=>a.value.articlePerPage||10),t=h(()=>s.items.slice((e.value-1)*o.value,e.value*o.value)),r=async B=>{e.value=B;const i={...n.query};!(i.page===B.toString()||B===1&&!i.page)&&(B===1?delete i.page:i.page=B.toString(),await l.push({path:n.path,query:i}))};return ms(()=>{const{page:B}=n.query;console.log("mounted"),r(B?Number(B):1),rs(e,()=>{const i=document.querySelector("#article-list").getBoundingClientRect().top+window.scrollY;setTimeout(()=>{window.scrollTo(0,i)},100)})}),()=>c("div",{id:"article-list",class:"vp-article-list",role:"feed"},t.value.length?[...t.value.map(({info:B,path:i},d)=>c(As,{appear:!0,delay:d*.04},()=>c(j6,{key:i,info:B,path:i}))),c(G6,{current:e.value,perPage:o.value,total:s.items.length,onUpdateCurrentPage:r})]:c(CB))}}),LB=R({name:"CategoryList",setup(){const s=Bs(),n=wa();return()=>c("ul",{class:"vp-category-list"},Ul(n.value.map).sort(([,l],[,a])=>a.items.length-l.items.length).map(([l,{path:a,items:e}])=>c("li",{class:["vp-category",`vp-category${_e(l,9)}`,{active:a===s.value.path}]},c(ks,{to:a},()=>[l,c("span",{class:"count"},e.length)]))))}}),TB=R({name:"TagList",setup(){const s=fs(),n=Pa(),l=a=>{var e;return a===((e=s.value.blog)==null?void 0:e.name)};return()=>c("ul",{class:"tag-list-wrapper"},Ul(n.value.map).sort(([,a],[,e])=>e.items.length-a.items.length).map(([a,{path:e,items:o}])=>c("li",{class:["tag",`tag${_e(a,9)}`,{active:l(a)}]},c(ks,{to:e},()=>[a,c("span",{class:"tag-num"},o.length)]))))}}),U6=R({name:"TimelineList",setup(){const s=ts(),n=fp(),l=Ia(),a=h(()=>s.value.blogLocales.timeline);return()=>c("div",{class:"timeline-list-wrapper"},[c("div",{class:"timeline-list-title",onClick:()=>l(n.value.path)},[c(Cp),c("span",{class:"num"},n.value.items.length),a.value]),c("hr"),c("div",{class:"timeline-content"},c("ul",{class:"timeline-list"},n.value.config.map(({year:e,items:o},t)=>c(As,{appear:!0,delay:.08*(t+1)},()=>c("li",[c("h3",{class:"timeline-year"},e),c("ul",{class:"timeline-year-wrapper"},o.map(({date:r,info:B,path:i})=>c("li",{class:"timeline-item"},[c("span",{class:"timeline-date"},r),c(ks,{class:"timeline-title",to:i},()=>B[Ds.title])])))])))))])}});const W6={article:ge,category:_p,tag:hp,timeline:Cp};var IB=R({name:"InfoList",setup(){const s=ts(),n=xa(),l=wa(),a=h(()=>nn(l.value.map).length),e=Dp(),o=Pa(),t=h(()=>nn(o.value.map).length),r=Ia(),B=G("article"),i=h(()=>s.value.blogLocales);return()=>c("div",{class:"vp-blog-infos"},[c("div",{class:"vp-blog-type-switcher"},Ul(W6).map(([d,y])=>c("button",{type:"button",class:"vp-blog-type-button",onClick:()=>{B.value=d}},c("div",{class:["icon-wrapper",{active:B.value===d}],"aria-label":i.value[d],"data-balloon-pos":"up"},c(y))))),c(As,()=>B.value==="article"?c("div",{class:"vp-star-article-wrapper"},[c("div",{class:"title",onClick:()=>r(n.value.path)},[c(ge),c("span",{class:"num"},n.value.items.length),i.value.article]),c("hr"),e.value.items.length?c("ul",{class:"vp-star-articles"},e.value.items.map(({info:d,path:y},u)=>c(As,{appear:!0,delay:.08*(u+1)},()=>c("li",{class:"vp-star-article"},c(ks,{to:y},()=>d[Ds.title]))))):c("div",{class:"vp-star-article-empty"},i.value.empty.replace("$text",i.value.star))]):B.value==="category"?c("div",{class:"vp-category-wrapper"},[a.value?[c("div",{class:"title",onClick:()=>r(l.value.path)},[c(_p),c("span",{class:"num"},a.value),i.value.category]),c("hr"),c(As,{delay:.04},()=>c(LB))]:c("div",{class:"vp-category-empty"},i.value.empty.replace("$text",i.value.category))]):B.value==="tag"?c("div",{class:"vp-tag-wrapper"},[t.value?[c("div",{class:"title",onClick:()=>r(o.value.path)},[c(hp),c("span",{class:"num"},t.value),i.value.tag]),c("hr"),c(As,{delay:.04},()=>c(TB))]:c("div",{class:"vp-tag-empty"},i.value.empty.replace("$text",i.value.tag))]):c(As,()=>c(U6)))])}}),Le=R({name:"BlogWrapper",slots:Object,setup(s,{slots:n}){const{isMobile:l}=Oa();return()=>[c(Ep),c(mp,{noSidebar:!0,noToc:!0},{default:()=>n.default(),navScreenBottom:()=>c(bp),...l.value?{sidebar:()=>c(IB)}:{}})]}});const OB=()=>c("aside",{class:"vp-blog-info-wrapper"},[c(As,()=>c(bp)),c(As,{delay:.04},()=>c(IB))]);OB.displayName="InfoPanel";var Te=OB,K6=R({name:"BlogPage",setup(){const s=Bs(),n=fs(),l=wa(),a=Pa();return()=>{const{key:e="",name:o=""}=n.value.blog||{},t=o?e==="category"?l.value.map[o].items:e==="tag"?a.value.map[o].items:[]:[];return c(Le,()=>c("div",{class:"vp-page vp-blog"},c("div",{class:"blog-page-wrapper"},[c("main",{id:"main-content",class:"vp-blog-main"},[c(As,()=>e==="category"?c(LB):e==="tag"?c(TB):null),o?c(As,{appear:!0,delay:.24},()=>c(gp,{key:s.value.path,items:t})):null]),c(As,{delay:.16},()=>c(Te,{key:"blog"}))])))}}});const Y6="//theme-hope-assets.vuejs.press/hero/default.jpg";var X6=R({name:"BlogHero",slots:Object,setup(s,{slots:n}){const l=fs(),a=Gl(),e=Ms(),o=h(()=>l.value.heroFullScreen??!1),t=h(()=>{const{heroText:B,heroImage:i,heroImageDark:d,heroAlt:y,heroImageStyle:u,tagline:A}=l.value;return{text:B??a.value.title??"Hello",image:i?_s(i):null,imageDark:d?_s(d):null,heroStyle:u,alt:y||B||"",tagline:A??"",isFullScreen:o.value}}),r=h(()=>{const{bgImage:B,bgImageDark:i,bgImageStyle:d}=l.value;return{image:cs(B)?_s(B):B===!1?null:Y6,imageDark:cs(i)?_s(i):null,bgStyle:d,isFullScreen:o.value}});return()=>{var B,i;return l.value.hero===!1?null:c("div",{ref:e,class:["vp-blog-hero",{fullscreen:o.value,"no-bg":!r.value.image}]},[((B=n.heroBg)==null?void 0:B.call(n,r.value))||[r.value.image?c("div",{class:["vp-blog-mask",{light:r.value.imageDark}],style:[{background:`url(${r.value.image}) center/cover no-repeat`},r.value.bgStyle]}):null,r.value.imageDark?c("div",{class:"vp-blog-mask dark",style:[{background:`url(${r.value.imageDark}) center/cover no-repeat`},r.value.bgStyle]}):null],((i=n.heroInfo)==null?void 0:i.call(n,t.value))||[c(As,{appear:!0,type:"group",delay:.04},()=>[t.value.image?c("img",{key:"light",class:["vp-blog-hero-image",{light:t.value.imageDark}],style:t.value.heroStyle,src:t.value.image,alt:t.value.alt}):null,t.value.imageDark?c("img",{key:"dark",class:"vp-blog-hero-image dark",style:t.value.heroStyle,src:t.value.imageDark,alt:t.value.alt}):null]),c(As,{appear:!0,delay:.08},()=>t.value.text?c("h1",{class:"vp-blog-hero-title"},t.value.text):null),c(As,{appear:!0,delay:.12},()=>t.value.tagline?c("p",{class:"vp-blog-hero-description",innerHTML:t.value.tagline}):null)],t.value.isFullScreen?c("button",{type:"button",class:"slide-down-button",onClick:()=>{window.scrollTo({top:e.value.clientHeight,behavior:"smooth"})}},[c(To),c(To)]):null])}}});const Z6=["link","article","book","project","friend"];var J6=R({name:"ProjectPanel",components:{ArticleIcon:ge,BookIcon:fB,FriendIcon:hB,LinkIcon:bB,ProjectIcon:_B},props:{items:{type:Array,required:!0}},setup(s){const n=El(),l=Ia(),a=(e="",o="icon")=>Z6.includes(e)?c(sn(`${e}-icon`)):Al(e)?c("img",{class:"vp-project-image",src:e,alt:o}):ga(e)?c("img",{class:"vp-project-image",src:_s(e),alt:o}):c(Qs,{icon:e});return()=>c("div",{class:"vp-project-panel"},s.items.map(({icon:e,link:o,name:t,desc:r},B)=>c("div",{class:["vp-project-card",{[`project${B%9}`]:!n.value}],onClick:()=>l(o)},[a(e,t),c("div",{class:"vp-project-name"},t),c("div",{class:"vp-project-desc"},r)])))}}),s1=R({name:"BlogHome",setup(){const s=xa(),n=fs(),l=h(()=>n.value.projects??[]);return()=>c("div",{class:"vp-page vp-blog"},[c(X6),c("div",{class:"blog-page-wrapper"},[c("main",{id:"main-content",class:"vp-blog-main"},[l.value.length?c(As,{appear:!0,delay:.16},()=>c(J6,{items:l.value})):null,c(As,{appear:!0,delay:.24},()=>c(gp,{items:s.value.items}))]),c(As,{appear:!0,delay:.16},()=>c(Te,{key:"blog"}))]),c(As,{appear:!0,delay:.28},()=>c(Fp))])}});const kB=()=>c(Le,()=>c(s1));kB.displayName="BlogHomeLayout";var n1=kB,l1=R({name:"ArticleType",setup(){const s=Bs(),n=gn(),l=ts(),a=xa(),e=Dp(),o=h(()=>{const t=l.value.blogLocales;return[{text:t.all,path:a.value.path},{text:t.star,path:e.value.path},...w6.map(({key:r,path:B})=>({text:t[r],path:B.replace(/^\//,n.value)}))]});return()=>c("ul",{class:"vp-article-type-wrapper"},o.value.map(t=>c("li",{class:["vp-article-type",{active:t.path===s.value.path}]},c(ks,{to:t.path},()=>t.text))))}}),a1=R({name:"BlogPage",setup(){const s=Ce(),n=fs(),l=Bs(),a=xa(),e=Dp(),o=h(()=>{const{key:t="",type:r}=n.value.blog||{};return t==="star"?e.value.items:r==="type"&&t?s.value.items:a.value.items});return()=>c(Le,()=>c("div",{class:"vp-page vp-blog"},c("div",{class:"blog-page-wrapper"},[c("main",{id:"main-content",class:"vp-blog-main"},[c(As,()=>c(l1)),c(As,{appear:!0,delay:.24},()=>c(gp,{key:l.value.path,items:o.value}))]),c(As,{delay:.16},()=>c(Te,{key:"blog"}))])))}}),e1=R({name:"TimelineItems",setup(){const s=Sa(),n=ts(),l=fp(),a=h(()=>s.value.timeline||n.value.blogLocales.timelineTitle),e=h(()=>l.value.config.map(({year:o})=>({title:o.toString(),level:2,slug:o.toString(),children:[]})));return()=>c("div",{class:"timeline-wrapper"},c("ul",{class:"timeline-content"},[c(As,()=>c("li",{class:"motto"},a.value)),c(pB,{items:e.value}),l.value.config.map(({year:o,items:t},r)=>c(As,{appear:!0,delay:.08*(r+1),type:"group"},()=>[c("h3",{key:"title",id:o,class:"timeline-year-title"},c("span",o)),c("li",{key:"content",class:"timeline-year-list"},[c("ul",{class:"timeline-year-wrapper"},t.map(({date:B,info:i,path:d})=>c("li",{class:"timeline-item"},[c("span",{class:"timeline-date"},B),c(ks,{class:"timeline-title",to:d},()=>i[Ds.title])])))])]))]))}});const wB=()=>c(Le,()=>c("div",{class:"vp-page vp-blog"},c("div",{class:"blog-page-wrapper"},[c("main",{id:"main-content",class:"vp-blog-main"},[c(As,{appear:!0,delay:.24},()=>c(e1))]),c(As,{delay:.16},()=>c(Te,{key:"blog"}))])));wB.displayName="Timeline";var o1=wB,p1={};const fl="./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),so=Array.from({length:64},(s,n)=>n),Xa=s=>Array(s).fill(-1),Hn=[...Xa(46),0,1,...so.slice(54,64),...Xa(7),...so.slice(2,28),...Xa(6),...so.slice(28,54),...Xa(5)],nc=[608135816,2242054355,320440878,57701188,2752067618,698298832,137296536,3964562569,1160258022,953160567,3193202383,887688300,3232508343,3380367581,1065670069,3041331479,2450970073,2306472731],lc=[3509652390,2564797868,805139163,3491422135,3101798381,1780907670,3128725573,4046225305,614570311,3012652279,134345442,2240740374,1667834072,1901547113,2757295779,4103290238,227898511,1921955416,1904987480,2182433518,2069144605,3260701109,2620446009,720527379,3318853667,677414384,3393288472,3101374703,2390351024,1614419982,1822297739,2954791486,3608508353,3174124327,2024746970,1432378464,3864339955,2857741204,1464375394,1676153920,1439316330,715854006,3033291828,289532110,2706671279,2087905683,3018724369,1668267050,732546397,1947742710,3462151702,2609353502,2950085171,1814351708,2050118529,680887927,999245976,1800124847,3300911131,1713906067,1641548236,4213287313,1216130144,1575780402,4018429277,3917837745,3693486850,3949271944,596196993,3549867205,258830323,2213823033,772490370,2760122372,1774776394,2652871518,566650946,4142492826,1728879713,2882767088,1783734482,3629395816,2517608232,2874225571,1861159788,326777828,3124490320,2130389656,2716951837,967770486,1724537150,2185432712,2364442137,1164943284,2105845187,998989502,3765401048,2244026483,1075463327,1455516326,1322494562,910128902,469688178,1117454909,936433444,3490320968,3675253459,1240580251,122909385,2157517691,634681816,4142456567,3825094682,3061402683,2540495037,79693498,3249098678,1084186820,1583128258,426386531,1761308591,1047286709,322548459,995290223,1845252383,2603652396,3431023940,2942221577,3202600964,3727903485,1712269319,422464435,3234572375,1170764815,3523960633,3117677531,1434042557,442511882,3600875718,1076654713,1738483198,4213154764,2393238008,3677496056,1014306527,4251020053,793779912,2902807211,842905082,4246964064,1395751752,1040244610,2656851899,3396308128,445077038,3742853595,3577915638,679411651,2892444358,2354009459,1767581616,3150600392,3791627101,3102740896,284835224,4246832056,1258075500,768725851,2589189241,3069724005,3532540348,1274779536,3789419226,2764799539,1660621633,3471099624,4011903706,913787905,3497959166,737222580,2514213453,2928710040,3937242737,1804850592,3499020752,2949064160,2386320175,2390070455,2415321851,4061277028,2290661394,2416832540,1336762016,1754252060,3520065937,3014181293,791618072,3188594551,3933548030,2332172193,3852520463,3043980520,413987798,3465142937,3030929376,4245938359,2093235073,3534596313,375366246,2157278981,2479649556,555357303,3870105701,2008414854,3344188149,4221384143,3956125452,2067696032,3594591187,2921233993,2428461,544322398,577241275,1471733935,610547355,4027169054,1432588573,1507829418,2025931657,3646575487,545086370,48609733,2200306550,1653985193,298326376,1316178497,3007786442,2064951626,458293330,2589141269,3591329599,3164325604,727753846,2179363840,146436021,1461446943,4069977195,705550613,3059967265,3887724982,4281599278,3313849956,1404054877,2845806497,146425753,1854211946,1266315497,3048417604,3681880366,3289982499,290971e4,1235738493,2632868024,2414719590,3970600049,1771706367,1449415276,3266420449,422970021,1963543593,2690192192,3826793022,1062508698,1531092325,1804592342,2583117782,2714934279,4024971509,1294809318,4028980673,1289560198,2221992742,1669523910,35572830,157838143,1052438473,1016535060,1802137761,1753167236,1386275462,3080475397,2857371447,1040679964,2145300060,2390574316,1461121720,2956646967,4031777805,4028374788,33600511,2920084762,1018524850,629373528,3691585981,3515945977,2091462646,2486323059,586499841,988145025,935516892,3367335476,2599673255,2839830854,265290510,3972581182,2759138881,3795373465,1005194799,847297441,406762289,1314163512,1332590856,1866599683,4127851711,750260880,613907577,1450815602,3165620655,3734664991,3650291728,3012275730,3704569646,1427272223,778793252,1343938022,2676280711,2052605720,1946737175,3164576444,3914038668,3967478842,3682934266,1661551462,3294938066,4011595847,840292616,3712170807,616741398,312560963,711312465,1351876610,322626781,1910503582,271666773,2175563734,1594956187,70604529,3617834859,1007753275,1495573769,4069517037,2549218298,2663038764,504708206,2263041392,3941167025,2249088522,1514023603,1998579484,1312622330,694541497,2582060303,2151582166,1382467621,776784248,2618340202,3323268794,2497899128,2784771155,503983604,4076293799,907881277,423175695,432175456,1378068232,4145222326,3954048622,3938656102,3820766613,2793130115,2977904593,26017576,3274890735,3194772133,1700274565,1756076034,4006520079,3677328699,720338349,1533947780,354530856,688349552,3973924725,1637815568,332179504,3949051286,53804574,2852348879,3044236432,1282449977,3583942155,3416972820,4006381244,1617046695,2628476075,3002303598,1686838959,431878346,2686675385,1700445008,1080580658,1009431731,832498133,3223435511,2605976345,2271191193,2516031870,1648197032,4164389018,2548247927,300782431,375919233,238389289,3353747414,2531188641,2019080857,1475708069,455242339,2609103871,448939670,3451063019,1395535956,2413381860,1841049896,1491858159,885456874,4264095073,4001119347,1565136089,3898914787,1108368660,540939232,1173283510,2745871338,3681308437,4207628240,3343053890,4016749493,1699691293,1103962373,3625875870,2256883143,3830138730,1031889488,3479347698,1535977030,4236805024,3251091107,2132092099,1774941330,1199868427,1452454533,157007616,2904115357,342012276,595725824,1480756522,206960106,497939518,591360097,863170706,2375253569,3596610801,1814182875,2094937945,3421402208,1082520231,3463918190,2785509508,435703966,3908032597,1641649973,2842273706,3305899714,1510255612,2148256476,2655287854,3276092548,4258621189,236887753,3681803219,274041037,1734335097,3815195456,3317970021,1899903192,1026095262,4050517792,356393447,2410691914,3873677099,3682840055,3913112168,2491498743,4132185628,2489919796,1091903735,1979897079,3170134830,3567386728,3557303409,857797738,1136121015,1342202287,507115054,2535736646,337727348,3213592640,1301675037,2528481711,1895095763,1721773893,3216771564,62756741,2142006736,835421444,2531993523,1442658625,3659876326,2882144922,676362277,1392781812,170690266,3921047035,1759253602,3611846912,1745797284,664899054,1329594018,3901205900,3045908486,2062866102,2865634940,3543621612,3464012697,1080764994,553557557,3656615353,3996768171,991055499,499776247,1265440854,648242737,3940784050,980351604,3713745714,1749149687,3396870395,4211799374,3640570775,1161844396,3125318951,1431517754,545492359,4268468663,3499529547,1437099964,2702547544,3433638243,2581715763,2787789398,1060185593,1593081372,2418618748,4260947970,69676912,2159744348,86519011,2512459080,3838209314,1220612927,3339683548,133810670,1090789135,1078426020,1569222167,845107691,3583754449,4072456591,1091646820,628848692,1613405280,3757631651,526609435,236106946,48312990,2942717905,3402727701,1797494240,859738849,992217954,4005476642,2243076622,3870952857,3732016268,765654824,3490871365,2511836413,1685915746,3888969200,1414112111,2273134842,3281911079,4080962846,172450625,2569994100,980381355,4109958455,2819808352,2716589560,2568741196,3681446669,3329971472,1835478071,660984891,3704678404,4045999559,3422617507,3040415634,1762651403,1719377915,3470491036,2693910283,3642056355,3138596744,1364962596,2073328063,1983633131,926494387,3423689081,2150032023,4096667949,1749200295,3328846651,309677260,2016342300,1779581495,3079819751,111262694,1274766160,443224088,298511866,1025883608,3806446537,1145181785,168956806,3641502830,3584813610,1689216846,3666258015,3200248200,1692713982,2646376535,4042768518,1618508792,1610833997,3523052358,4130873264,2001055236,3610705100,2202168115,4028541809,2961195399,1006657119,2006996926,3186142756,1430667929,3210227297,1314452623,4074634658,4101304120,2273951170,1399257539,3367210612,3027628629,1190975929,2062231137,2333990788,2221543033,2438960610,1181637006,548689776,2362791313,3372408396,3104550113,3145860560,296247880,1970579870,3078560182,3769228297,1714227617,3291629107,3898220290,166772364,1251581989,493813264,448347421,195405023,2709975567,677966185,3703036547,1463355134,2715995803,1338867538,1343315457,2802222074,2684532164,233230375,2599980071,2000651841,3277868038,1638401717,4028070440,3237316320,6314154,819756386,300326615,590932579,1405279636,3267499572,3150704214,2428286686,3959192993,3461946742,1862657033,1266418056,963775037,2089974820,2263052895,1917689273,448879540,3550394620,3981727096,150775221,3627908307,1303187396,508620638,2975983352,2726630617,1817252668,1876281319,1457606340,908771278,3720792119,3617206836,2455994898,1729034894,1080033504,976866871,3556439503,2881648439,1522871579,1555064734,1336096578,3548522304,2579274686,3574697629,3205460757,3593280638,3338716283,3079412587,564236357,2993598910,1781952180,1464380207,3163844217,3332601554,1699332808,1393555694,1183702653,3581086237,1288719814,691649499,2847557200,2895455976,3193889540,2717570544,1781354906,1676643554,2592534050,3230253752,1126444790,2770207658,2633158820,2210423226,2615765581,2414155088,3127139286,673620729,2805611233,1269405062,4015350505,3341807571,4149409754,1057255273,2012875353,2162469141,2276492801,2601117357,993977747,3918593370,2654263191,753973209,36408145,2530585658,25011837,3520020182,2088578344,530523599,2918365339,1524020338,1518925132,3760827505,3759777254,1202760957,3985898139,3906192525,674977740,4174734889,2031300136,2019492241,3983892565,4153806404,3822280332,352677332,2297720250,60907813,90501309,3286998549,1016092578,2535922412,2839152426,457141659,509813237,4120667899,652014361,1966332200,2975202805,55981186,2327461051,676427537,3255491064,2882294119,3433927263,1307055953,942726286,933058658,2468411793,3933900994,4215176142,1361170020,2001714738,2830558078,3274259782,1222529897,1679025792,2729314320,3714953764,1770335741,151462246,3013232138,1682292957,1483529935,471910574,1539241949,458788160,3436315007,1807016891,3718408830,978976581,1043663428,3165965781,1927990952,4200891579,2372276910,3208408903,3533431907,1412390302,2931980059,4132332400,1947078029,3881505623,4168226417,2941484381,1077988104,1320477388,886195818,18198404,3786409e3,2509781533,112762804,3463356488,1866414978,891333506,18488651,661792760,1628790961,3885187036,3141171499,876946877,2693282273,1372485963,791857591,2686433993,3759982718,3167212022,3472953795,2716379847,445679433,3561995674,3504004811,3574258232,54117162,3331405415,2381918588,3769707343,4154350007,1140177722,4074052095,668550556,3214352940,367459370,261225585,2610173221,4209349473,3468074219,3265815641,314222801,3066103646,3808782860,282218597,3406013506,3773591054,379116347,1285071038,846784868,2669647154,3771962079,3550491691,2305946142,453669953,1268987020,3317592352,3279303384,3744833421,2610507566,3859509063,266596637,3847019092,517658769,3462560207,3443424879,370717030,4247526661,2224018117,4143653529,4112773975,2788324899,2477274417,1456262402,2901442914,1517677493,1846949527,2295493580,3734397586,2176403920,1280348187,1908823572,3871786941,846861322,1172426758,3287448474,3383383037,1655181056,3139813346,901632758,1897031941,2986607138,3066810236,3447102507,1393639104,373351379,950779232,625454576,3124240540,4148612726,2007998917,544563296,2244738638,2330496472,2058025392,1291430526,424198748,50039436,29584100,3605783033,2429876329,2791104160,1057563949,3255363231,3075367218,3463963227,1469046755,985887462],SB=[1332899944,1700884034,1701343084,1684370003,1668446532,1869963892],Io=(s,n)=>{if(n<=0||n>s.length)throw Error(`Illegal len: ${n}`);let l=0,a,e;const o=[];for(;l<n;){if(a=s[l++]&255,o.push(fl[a>>2&63]),a=(a&3)<<4,l>=n){o.push(fl[a&63]);break}if(e=s[l++]&255,a|=e>>4&15,o.push(fl[a&63]),a=(e&15)<<2,l>=n){o.push(fl[a&63]);break}e=s[l++]&255,a|=e>>6&3,o.push(fl[a&63]),o.push(fl[e&63])}return o.join("")},t1=(s,n)=>{if(n<=0)throw Error(`Illegal len: ${n}`);const l=s.length;let a=0,e=0,o,t,r,B,i,d;const y=[];for(;a<l-1&&e<n&&(d=s.charCodeAt(a++),o=d<Hn.length?Hn[d]:-1,d=s.charCodeAt(a++),t=d<Hn.length?Hn[d]:-1,!(o==-1||t==-1||(i=o<<2>>>0,i|=(t&48)>>4,y.push(String.fromCharCode(i)),++e>=n||a>=l)||(d=s.charCodeAt(a++),r=d<Hn.length?Hn[d]:-1,r==-1)||(i=(t&15)<<4>>>0,i|=(r&60)>>2,y.push(String.fromCharCode(i)),++e>=n||a>=l)));)d=s.charCodeAt(a++),B=d<Hn.length?Hn[d]:-1,i=(r&3)<<6>>>0,i|=B,y.push(String.fromCharCode(i)),++e;return y.map(u=>u.charCodeAt(0))},c1=(s,n)=>{let l=null;for(typeof s=="number"&&(l=s,s=()=>null);l!==null||(l=s())!==null;)l<128?n(l&127):l<2048?(n(l>>6&31|192),n(l&63|128)):l<65536?(n(l>>12&15|224),n(l>>6&63|128),n(l&63|128)):(n(l>>18&7|240),n(l>>12&63|128),n(l>>6&63|128),n(l&63|128)),l=null},r1=(s,n)=>{let l,a=null;for(;(l=a!==null?a:s())!==null;){if(l>=55296&&l<=57343&&(a=s())!==null&&a>=56320&&a<=57343){n((l-55296)*1024+a-56320+65536),a=null;continue}n(l)}a!==null&&n(a)},i1=(s,n)=>{r1(s,function(l){c1(l,n)})},B1=typeof process=="object"&&p1.NEXT_RUNTIME==="edge"?setTimeout:typeof setImmediate=="function"?setImmediate:typeof process=="object"&&typeof process.nextTick=="function"?process.nextTick:setTimeout,d1=s=>{const n=[];let l=0;return i1(()=>l>=s.length?null:s.charCodeAt(l++),a=>{n.push(a)}),n},ma=(s,n,l,a)=>{let e,o=s[n],t=s[n+1];return o^=l[0],e=a[o>>>24],e+=a[256|o>>16&255],e^=a[512|o>>8&255],e+=a[768|o&255],t^=e^l[1],e=a[t>>>24],e+=a[256|t>>16&255],e^=a[512|t>>8&255],e+=a[768|t&255],o^=e^l[2],e=a[o>>>24],e+=a[256|o>>16&255],e^=a[512|o>>8&255],e+=a[768|o&255],t^=e^l[3],e=a[t>>>24],e+=a[256|t>>16&255],e^=a[512|t>>8&255],e+=a[768|t&255],o^=e^l[4],e=a[o>>>24],e+=a[256|o>>16&255],e^=a[512|o>>8&255],e+=a[768|o&255],t^=e^l[5],e=a[t>>>24],e+=a[256|t>>16&255],e^=a[512|t>>8&255],e+=a[768|t&255],o^=e^l[6],e=a[o>>>24],e+=a[256|o>>16&255],e^=a[512|o>>8&255],e+=a[768|o&255],t^=e^l[7],e=a[t>>>24],e+=a[256|t>>16&255],e^=a[512|t>>8&255],e+=a[768|t&255],o^=e^l[8],e=a[o>>>24],e+=a[256|o>>16&255],e^=a[512|o>>8&255],e+=a[768|o&255],t^=e^l[9],e=a[t>>>24],e+=a[256|t>>16&255],e^=a[512|t>>8&255],e+=a[768|t&255],o^=e^l[10],e=a[o>>>24],e+=a[256|o>>16&255],e^=a[512|o>>8&255],e+=a[768|o&255],t^=e^l[11],e=a[t>>>24],e+=a[256|t>>16&255],e^=a[512|t>>8&255],e+=a[768|t&255],o^=e^l[12],e=a[o>>>24],e+=a[256|o>>16&255],e^=a[512|o>>8&255],e+=a[768|o&255],t^=e^l[13],e=a[t>>>24],e+=a[256|t>>16&255],e^=a[512|t>>8&255],e+=a[768|t&255],o^=e^l[14],e=a[o>>>24],e+=a[256|o>>16&255],e^=a[512|o>>8&255],e+=a[768|o&255],t^=e^l[15],e=a[t>>>24],e+=a[256|t>>16&255],e^=a[512|t>>8&255],e+=a[768|t&255],o^=e^l[16],s[n]=t^l[17],s[n+1]=o,s},_l=(s,n)=>{let l=0;for(let a=0;a<4;++a)l=l<<8|s[n]&255,n=(n+1)%s.length;return{key:l,offp:n}},ac=(s,n,l)=>{const a=n.length,e=l.length;let o=0,t=[0,0],r;for(let B=0;B<a;B++)r=_l(s,o),o=r.offp,n[B]=n[B]^r.key;for(let B=0;B<a;B+=2)t=ma(t,0,n,l),n[B]=t[0],n[B+1]=t[1];for(let B=0;B<e;B+=2)t=ma(t,0,n,l),l[B]=t[0],l[B+1]=t[1]},y1=(s,n,l,a)=>{const e=l.length,o=a.length;let t=0,r=[0,0],B;for(let i=0;i<e;i++)B=_l(n,t),t=B.offp,l[i]=l[i]^B.key;t=0;for(let i=0;i<e;i+=2)B=_l(s,t),t=B.offp,r[0]^=B.key,B=_l(s,t),t=B.offp,r[1]^=B.key,r=ma(r,0,l,a),l[i]=r[0],l[i+1]=r[1];for(let i=0;i<o;i+=2)B=_l(s,t),t=B.offp,r[0]^=B.key,B=_l(s,t),t=B.offp,r[1]^=B.key,r=ma(r,0,l,a),a[i]=r[0],a[i+1]=r[1]},ec=(s,n,l,a,e)=>{const o=SB.slice(),t=o.length;if(l<4||l>31){const u=new Error(`Illegal number of rounds (4-31): ${l}`);if(a===!1)return Promise.reject(u);throw u}if(n.length!==16){const u=new Error(`Illegal salt length: ${n.length} != 16`);if(a===!1)return Promise.reject(u);throw u}l=1<<l>>>0;let r,B,i=0,d;Int32Array?(r=new Int32Array(nc),B=new Int32Array(lc)):(r=nc.slice(),B=lc.slice()),y1(n,s,r,B);const y=()=>{if(e&&e(i/l),i<l){const u=Date.now();for(;i<l&&(i=i+1,ac(s,r,B),ac(n,r,B),!(Date.now()-u>100)););}else{for(i=0;i<64;i++)for(d=0;d<t>>1;d++)ma(o,d<<1,r,B);const u=[];for(i=0;i<t;i++)u.push((o[i]>>24&255)>>>0),u.push((o[i]>>16&255)>>>0),u.push((o[i]>>8&255)>>>0),u.push((o[i]&255)>>>0);return a===!1?Promise.resolve(u):u}if(a===!1)return new Promise(u=>B1(()=>{y().then(u)}))};if(a===!1)return y();{let u;for(;;)if(typeof(u=y())<"u")return u||[]}},v1=s=>{var n;try{const{crypto:l,msCrypto:a}=window,e=new Uint32Array(s);return(n=l||a)==null||n.getRandomValues(e),Array.from(e)}catch{throw Error("WebCryptoAPI is not available")}},u1=(s=10)=>{if(typeof s!="number")throw Error("Illegal arguments: "+typeof s);s<4?s=4:s>31&&(s=31);const n=[];return n.push("$2a$"),s<10&&n.push("0"),n.push(s.toString()),n.push("$"),n.push(Io(v1(16),16)),n.join("")};function A1(s,n,l,a){if(typeof s!="string"||typeof n!="string"){const A=new Error("Invalid string / salt: Not a string");if(l===!1)return Promise.reject(A);throw A}let e,o;if(n.charAt(0)!=="$"||n.charAt(1)!=="2"){const A=new Error("Invalid salt version: "+n.substring(0,2));if(l===!1)return Promise.reject(A);throw A}if(n.charAt(2)==="$")e="\0",o=3;else{if(e=n.charAt(2),e!=="a"&&e!=="b"&&e!=="y"||n.charAt(3)!=="$"){const A=Error("Invalid salt revision: "+n.substring(2,4));if(l===!1)return Promise.reject(A);throw A}o=4}if(n.charAt(o+2)>"$"){const A=new Error("Missing salt rounds");if(l===!1)return Promise.reject(A);throw A}const t=parseInt(n.substring(o,o+1),10)*10,r=parseInt(n.substring(o+1,o+2),10),B=t+r,i=n.substring(o+3,o+25);s+=e>="a"?"\0":"";const d=d1(s),y=t1(i,16),u=A=>{const F=[];return F.push("$2"),e>="a"&&F.push(e),F.push("$"),B<10&&F.push("0"),F.push(B.toString()),F.push("$"),F.push(Io(y,y.length)),F.push(Io(A,SB.length*4-1)),F.join("")};return l===!1?ec(d,y,B,!1,a).then(A=>u(A)):u(ec(d,y,B,!0,a))}const m1=(s,n=10)=>{if(typeof n=="number"&&(n=u1(n)),typeof s!="string"||typeof n!="string")throw Error("Illegal arguments: "+typeof s+", "+typeof n);return A1(s,n,!0)},Oo=(s,n)=>{if(typeof s!="string"||typeof n!="string")throw Error("Illegal arguments: "+typeof s+", "+typeof n);return n.length!==60?!1:m1(s,n.substring(0,n.length-31))===n},PB=()=>c(os,{name:"lock"},()=>c("path",{d:"M787.168 952.268H236.832c-30.395 0-55.033-24.638-55.033-55.033V429.45c0-30.395 24.638-55.034 55.033-55.034h82.55V264.35c0-106.38 86.238-192.618 192.618-192.618S704.618 157.97 704.618 264.35v110.066h82.55c30.395 0 55.033 24.639 55.033 55.034v467.785c0 30.395-24.639 55.033-55.033 55.033zM484.483 672.046v115.122h55.034V672.046c31.99-11.373 55.033-41.605 55.033-77.496 0-45.592-36.958-82.55-82.55-82.55s-82.55 36.958-82.55 82.55c0 35.89 23.042 66.123 55.033 77.496zM622.067 264.35c0-60.788-49.28-110.067-110.067-110.067s-110.067 49.28-110.067 110.067v110.066h220.135V264.35z"}));PB.displayName="LockIcon";var xB=R({name:"PasswordModal",props:{full:Boolean},emits:["verify"],setup(s,{emit:n}){const l=fs(),a=ts(),e=G(""),o=G(!1),t=G(!1),r=h(()=>a.value.encryptLocales);let B=null;const i=()=>{B&&clearTimeout(B),o.value=!1,n("verify",e.value,t.value),Vn().then(()=>{o.value=!0,B=setTimeout(()=>{o.value=!1},1e3)})};return()=>c("div",{class:["vp-decrypt-layer",{expand:s.full||l.value.home}]},c("div",{class:"vp-decrypt-modal"},[c("div",{class:["vp-decrypt-hint",{tried:o.value}]},o.value?r.value.errorHint:c(PB,{"aria-label":r.value.iconLabel})),c("div",{class:"vp-decrypt-input"},[c("input",{type:"password",value:e.value,placeholder:r.value.placeholder,onInput:({target:d})=>{e.value=d.value},onKeydown:({key:d})=>{d==="Enter"&&i()}})]),c("div",{class:"vp-remember-password"},[c("input",{type:"checkbox",value:t.value,onChange:()=>t.value=!t.value}),r.value.remember]),c("button",{type:"button",class:"vp-decrypt-submit",onClick:()=>i()},"OK")]))}});const RB=()=>{const s=qn();return h(()=>s.value.encrypt||{})},oc="VUEPRESS_HOPE_GLOBAL_TOKEN",F1=()=>{const s=RB(),n=Fl(oc,""),l=Bi(oc,""),a=h(()=>{const{global:o=!1,admin:t=[]}=s.value;return o&&t.length>0}),e=h(()=>{if(a.value){if(n.value)return s.value.admin.some(o=>Oo(n.value,o));if(l.value)return s.value.admin.some(o=>Oo(l.value,o))}return!1});return{isEncrypted:a,isDecrypted:e,validate:(o,t=!1)=>{(t?n:l).value=o}}},no=(s="",n)=>!!s&&Oo(s,n),pc="VUEPRESS_HOPE_PATH_TOKEN",E1=()=>{const s=Bs(),n=RB(),l=Fl(pc,{}),a=Bi(pc,{}),e=t=>ha(n.value.config)?nn(n.value.config).filter(r=>nl(decodeURI(t),r)).sort((r,B)=>B.length-r.length):[],o=t=>{const r=e(t);if(r.length>0){const{config:B={}}=n.value;return{isEncrypted:!0,isDecrypted:r.some(i=>l.value[i]&&B[i].some(d=>no(l.value[i],d))||a.value[i]&&B[i].some(d=>no(a.value[i],d)))}}return{isDecrypted:!1,isEncrypted:!1}};return{status:h(()=>o(s.value.path)),getStatus:o,validate:(t,r=!1)=>{const{config:B={}}=n.value,i=e(s.value.path);for(const d of i)if(B[d].filter(y=>no(t,y))){(r?l:a).value[d]=t;break}}}};var D1=R({name:"GlobalEncrypt",slots:Object,setup(s,{slots:n}){const{isDecrypted:l,isEncrypted:a,validate:e}=F1(),o=G(!1);return ms(()=>{o.value=!0}),()=>c(cB,()=>a.value?o.value?l.value?n.default():c(xB,{full:!0,onVerify:e}):null:n.default())}}),f1=R({name:"LocalEncrypt",slots:Object,setup(s,{slots:n}){const{status:l,validate:a}=E1(),e=G(!1);return ms(()=>{e.value=!0}),()=>{const{isEncrypted:o,isDecrypted:t}=l.value;return o?e.value?t?n.default():c(xB,{full:!0,onVerify:a}):null:n.default()}}});iA(s=>{const n=s.t,l=s.I!==!1,a=s.i;return l?{title:n,content:a?()=>[c(Qs,{icon:a}),n]:null,order:s.O,index:s.I}:null});const b1=Dn({enhance:({app:s,router:n})=>{const{scrollBehavior:l}=n.options;n.options.scrollBehavior=async(...a)=>(await tB().wait(),l(...a)),I8(s),s.component("HopeIcon",Qs),s.component("VPLink",ks),s.component("BloggerInfo",bp),s.component("GlobalEncrypt",D1),s.component("LocalEncrypt",f1)},setup:()=>{O8(),P8(),Q6()},layouts:{Layout:g6,NotFound:T6,BlogCategory:K6,BlogHome:n1,BlogType:a1,Timeline:o1}}),_1=()=>c(os,{name:"heading"},()=>c("path",{d:"M250.4 704.6H64V595.4h202.4l26.2-166.6H94V319.6h214.4L352 64h127.8l-43.6 255.4h211.2L691 64h126.2l-43.6 255.4H960v109.2H756.2l-24.6 166.6H930v109.2H717L672 960H545.8l43.6-255.4H376.6L333 960H206.8l43.6-255.4zm168.4-276L394 595.4h211.2l24.6-166.6h-211z"}));_1.displayName="HeadingIcon";const h1=()=>c(os,{name:"heart"},()=>c("path",{d:"M1024 358.156C1024 195.698 892.3 64 729.844 64c-86.362 0-164.03 37.218-217.844 96.49C458.186 101.218 380.518 64 294.156 64 131.698 64 0 195.698 0 358.156 0 444.518 37.218 522.186 96.49 576H96l320 320c32 32 64 64 96 64s64-32 96-64l320-320h-.49c59.272-53.814 96.49-131.482 96.49-217.844zM841.468 481.232 517.49 805.49a2981.962 2981.962 0 0 1-5.49 5.48c-1.96-1.95-3.814-3.802-5.49-5.48L182.532 481.234C147.366 449.306 128 405.596 128 358.156 128 266.538 202.538 192 294.156 192c47.44 0 91.15 19.366 123.076 54.532L512 350.912l94.768-104.378C638.696 211.366 682.404 192 729.844 192 821.462 192 896 266.538 896 358.156c0 47.44-19.368 91.15-54.532 123.076z"}));h1.displayName="HeartIcon";const C1=()=>c(os,{name:"history"},()=>c("path",{d:"M512 1024a512 512 0 1 1 512-512 512 512 0 0 1-512 512zm0-896a384 384 0 1 0 384 384 384 384 0 0 0-384-384zm192 448H512a64 64 0 0 1-64-64V320a64 64 0 0 1 128 0v128h128a64 64 0 0 1 0 128z"}));C1.displayName="HistoryIcon";const g1=()=>c(os,{name:"title"},()=>c("path",{d:"M512 256c70.656 0 134.656 28.672 180.992 75.008A254.933 254.933 0 0 1 768 512c0 83.968-41.024 157.888-103.488 204.48C688.96 748.736 704 788.48 704 832c0 105.984-86.016 192-192 192-106.048 0-192-86.016-192-192h128a64 64 0 1 0 128 0 64 64 0 0 0-64-64 255.19 255.19 0 0 1-181.056-75.008A255.403 255.403 0 0 1 256 512c0-83.968 41.024-157.824 103.488-204.544C335.04 275.264 320 235.584 320 192A192 192 0 0 1 512 0c105.984 0 192 85.952 192 192H576a64.021 64.021 0 0 0-128 0c0 35.328 28.672 64 64 64zM384 512c0 70.656 57.344 128 128 128s128-57.344 128-128-57.344-128-128-128-128 57.344-128 128z"}));g1.displayName="TitleIcon";const Lp=()=>c(os,{name:"search"},()=>c("path",{d:"M192 480a256 256 0 1 1 512 0 256 256 0 0 1-512 0m631.776 362.496-143.2-143.168A318.464 318.464 0 0 0 768 480c0-176.736-143.264-320-320-320S128 303.264 128 480s143.264 320 320 320a318.016 318.016 0 0 0 184.16-58.592l146.336 146.368c12.512 12.48 32.768 12.48 45.28 0 12.48-12.512 12.48-32.768 0-45.28"}));Lp.displayName="SearchIcon";const VB=()=>c("svg",{xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32",preserveAspectRatio:"xMidYMid",viewBox:"0 0 100 100"},[c("circle",{cx:"28",cy:"75",r:"11",fill:"currentColor"},c("animate",{attributeName:"fill-opacity",begin:"0s",dur:"1s",keyTimes:"0;0.2;1",repeatCount:"indefinite",values:"0;1;1"})),c("path",{fill:"none",stroke:"#88baf0","stroke-width":"10",d:"M28 47a28 28 0 0 1 28 28"},c("animate",{attributeName:"stroke-opacity",begin:"0.1s",dur:"1s",keyTimes:"0;0.2;1",repeatCount:"indefinite",values:"0;1;1"})),c("path",{fill:"none",stroke:"#88baf0","stroke-width":"10",d:"M28 25a50 50 0 0 1 50 50"},c("animate",{attributeName:"stroke-opacity",begin:"0.2s",dur:"1s",keyTimes:"0;0.2;1",repeatCount:"indefinite",values:"0;1;1"}))]);VB.displayName="LoadingIcon";const MB=({hint:s})=>c("div",{class:"search-pro-result-wrapper loading"},[c(VB),s]);MB.displayName="SearchLoading";const L1='<svg width="20" height="20" viewBox="0 0 20 20"><path d="M10 10l5.09-5.09L10 10l5.09 5.09L10 10zm0 0L4.91 4.91 10 10l-5.09 5.09L10 10z" stroke="currentColor" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round"></path></svg>';var T1={0:"分类：$content",1:"标签：$content"},I1={"/":{cancel:"取消",placeholder:"搜索",search:"搜索",searching:"搜索中",defaultTitle:"文档",select:"选择",navigate:"切换",autocomplete:"自动补全",exit:"关闭",queryHistory:"搜索历史",resultHistory:"历史结果",emptyHistory:"无搜索历史",emptyResult:"没有找到结果",loading:"正在加载搜索索引..."}},O1={searchDelay:150,suggestDelay:0,queryHistoryCount:5,resultHistoryCount:5,hotKeys:[{key:"k",ctrl:!0},{key:"/",ctrl:!0}],worker:"search-pro.worker.js"};const Tp=O1,i7=T1,qB=Tp.hotKeys,Ip=I1;new URL("data:application/javascript;base64,aW1wb3J0e3NlYXJjaCBhcyBDLGdldFN0b3JlZEZpZWxkcyBhcyBSLGF1dG9TdWdnZXN0IGFzIFQsbG9hZEpTT05JbmRleCBhcyB3fWZyb20ic2xpbXNlYXJjaCI7aW1wb3J0ICQgZnJvbSJAdGVtcC9zZWFyY2gtcHJvL2luZGV4IjtpbXBvcnR7ZW50cmllcyBhcyBFfWZyb20idnVlcHJlc3Mtc2hhcmVkL2NsaWVudCI7Y29uc3QgeD0obCxlKT0+e2NvbnN0IG49bC50b0xvd2VyQ2FzZSgpLHM9ZS50b0xvd2VyQ2FzZSgpLG89W107bGV0IHQ9MCxyPTA7Y29uc3QgaT0oYyxnPSExKT0+e2xldCBwPSIiO3I9PT0wP3A9Yy5sZW5ndGg+MjA/YOKApiAke2Muc2xpY2UoLTIwKX1gOmM6Zz9wPWMubGVuZ3RoK3I+MTAwP2Ake2Muc2xpY2UoMCwxMDAtcil94oCmIGA6YzpwPWMubGVuZ3RoPjIwP2Ake2Muc2xpY2UoMCwyMCl9IOKApiAke2Muc2xpY2UoLTIwKX1gOmMscCYmby5wdXNoKHApLHIrPXAubGVuZ3RoLGd8fChvLnB1c2goWyJtYXJrIixlXSkscis9ZS5sZW5ndGgscj49MTAwJiZvLnB1c2goIiDigKYiKSl9O2xldCBoPW4uaW5kZXhPZihzLHQpO2lmKGg9PT0tMSlyZXR1cm4gbnVsbDtmb3IoO2g+PTA7KXtjb25zdCBjPWgrcy5sZW5ndGg7aWYoaShsLnNsaWNlKHQsaCkpLHQ9YyxyPjEwMClicmVhaztoPW4uaW5kZXhPZihzLHQpfXJldHVybiByPDEwMCYmaShsLnNsaWNlKHQpLCEwKSxvfSxTPS9bXHU0ZTAwLVx1OWZhNV0vZyxNPShsPXt9KT0+KHtmdXp6eTouMixwcmVmaXg6ITAscHJvY2Vzc1Rlcm06ZT0+e2NvbnN0IG49ZS5tYXRjaChTKXx8W10scz1lLnJlcGxhY2UoUywiIikudG9Mb3dlckNhc2UoKTtyZXR1cm4gcz9bcywuLi5uXTpbLi4ubl19LC4uLmx9KSxGPShsLGUpPT5lLmNvbnRlbnRzLnJlZHVjZSgobixbLHNdKT0+bitzLDApLWwuY29udGVudHMucmVkdWNlKChuLFssc10pPT5uK3MsMCksXz0obCxlKT0+TWF0aC5tYXgoLi4uZS5jb250ZW50cy5tYXAoKFssbl0pPT5uKSktTWF0aC5tYXgoLi4ubC5jb250ZW50cy5tYXAoKFssbl0pPT5uKSksTz0obCxlLG49e30pPT57Y29uc3Qgcz17fTtyZXR1cm4gQyhlLGwsTSh7Ym9vc3Q6e2g6Mix0OjEsYzo0fSwuLi5ufSkpLmZvckVhY2gobz0+e2NvbnN0e2lkOnQsdGVybXM6cixzY29yZTppfT1vLGg9dC5pbmNsdWRlcygiQCIpLGM9dC5pbmNsdWRlcygiIyIpLFtnLHBdPXQuc3BsaXQoL1sjQF0vKSxtPXIuc29ydCgodSxhKT0+dS5sZW5ndGgtYS5sZW5ndGgpLmZpbHRlcigodSxhKT0+ci5zbGljZShhKzEpLmV2ZXJ5KGY9PiFmLmluY2x1ZGVzKHUpKSkse2NvbnRlbnRzOmR9PXNbZ10/Pz17dGl0bGU6IiIsY29udGVudHM6W119O2lmKGgpZC5wdXNoKFt7dHlwZToiY3VzdG9tRmllbGQiLGtleTpnLGluZGV4OnAsZGlzcGxheTptLm1hcCh1PT5vLmMubWFwKGE9PngoYSx1KSkpLmZsYXQoKS5maWx0ZXIodT0+dSE9PW51bGwpfSxpXSk7ZWxzZXtjb25zdCB1PW0ubWFwKGE9Pngoby5oLGEpKS5maWx0ZXIoYT0+YSE9PW51bGwpO2lmKHUubGVuZ3RoJiZkLnB1c2goW3t0eXBlOmM/ImhlYWRpbmciOiJ0aXRsZSIsa2V5OmcsLi4uYyYme2FuY2hvcjpwfSxkaXNwbGF5OnV9LGldKSwidCJpbiBvKWZvcihjb25zdCBhIG9mIG8udCl7Y29uc3QgZj1tLm1hcCh5PT54KGEseSkpLmZpbHRlcih5PT55IT09bnVsbCk7Zi5sZW5ndGgmJmQucHVzaChbe3R5cGU6InRleHQiLGtleTpnLC4uLmMmJnthbmNob3I6cH0sZGlzcGxheTpmfSxpXSl9fX0pLEUocykuc29ydCgoWyxvXSxbLHRdKT0+U0VBUkNIX1BST19TT1JUX1NUUkFURUdZPT09InRvdGFsIj9GKG8sdCk6XyhvLHQpKS5tYXAoKFtvLHt0aXRsZTp0LGNvbnRlbnRzOnJ9XSk9PntpZighdCl7Y29uc3QgaT1SKGUsbyk7aSYmKHQ9aS5oKX1yZXR1cm57dGl0bGU6dCxjb250ZW50czpyLm1hcCgoW2ldKT0+aSl9fSl9LGs9KGwsZSxuPXt9KT0+VChlLGwsTShuKSkubWFwKCh7c3VnZ2VzdGlvbjpzfSk9PnMpO3NlbGYub25tZXNzYWdlPWFzeW5jKHtkYXRhOnt0eXBlOmw9ImFsbCIscXVlcnk6ZSxsb2NhbGU6bixvcHRpb25zOnN9fSk9Pntjb25zdHtkZWZhdWx0Om99PWF3YWl0ICRbbl0oKSx0PXcobyx7ZmllbGRzOlsiaCIsInQiLCJjIl0sc3RvcmVGaWVsZHM6WyJoIiwidCIsImMiXX0pO2w9PT0ic3VnZ2VzdCI/c2VsZi5wb3N0TWVzc2FnZShrKGUsdCxzKSk6bD09PSJzZWFyY2giP3NlbGYucG9zdE1lc3NhZ2UoTyhlLHQscykpOnNlbGYucG9zdE1lc3NhZ2Uoe3N1Z2dlc3Rpb25zOmsoZSx0LHMpLHJlc3VsdHM6TyhlLHQscyl9KX07Ci8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcAo=",import.meta.url);let k1={};const NB=Symbol(""),w1=()=>us(NB),S1=s=>{s.provide(NB,k1)},P1=()=>{const s=new Worker(`/${Tp.worker}`,{}),n=[];return s.addEventListener("message",({data:l})=>{const{resolve:a}=n.shift();a(l)}),{search:l=>new Promise((a,e)=>{s.postMessage(l),n.push({resolve:a,reject:e})}),terminate:()=>{s.terminate(),n.forEach(({reject:l})=>l(new Error("Worker has been terminated.")))}}},x1=(s,n=!1)=>{const l=G(0),a=h(()=>s.value[l.value]),e=()=>{l.value=l.value>0?l.value-1:s.value.length-1},o=()=>{l.value=l.value<s.value.length-1?l.value+1:0};return rs(s,()=>{n||(l.value=0)}),{index:l,item:a,prev:e,next:o}},Op=Symbol(""),R1=()=>{const s=G(!1);rn(Op,s)},V1=s=>s instanceof Element?document.activeElement===s&&(["TEXTAREA","SELECT","INPUT"].includes(s.tagName)||s.hasAttribute("contenteditable")):!1,M1=s=>qB.some(n=>{const{key:l,ctrl:a=!1,shift:e=!1,alt:o=!1,meta:t=!1}=n;return l===s.key&&a===s.ctrlKey&&e===s.shiftKey&&o===s.altKey&&t===s.metaKey}),q1='<svg width="15" height="15" aria-label="Enter key" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M12 3.53088v3c0 1-1 2-2 2H4M7 11.53088l-3-3 3-3"></path></g></svg>',N1='<svg width="15" height="15" aria-label="Arrow down" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M7.5 3.5v8M10.5 8.5l-3 3-3-3"></path></g></svg>',$1='<svg width="15" height="15" aria-label="Arrow up" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M7.5 11.5v-8M10.5 6.5l-3-3-3 3"></path></g></svg>',z1='<svg width="15" height="15" aria-label="Escape key" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M13.6167 8.936c-.1065.3583-.6883.962-1.4875.962-.7993 0-1.653-.9165-1.653-2.1258v-.5678c0-1.2548.7896-2.1016 1.653-2.1016.8634 0 1.3601.4778 1.4875 1.0724M9 6c-.1352-.4735-.7506-.9219-1.46-.8972-.7092.0246-1.344.57-1.344 1.2166s.4198.8812 1.3445.9805C8.465 7.3992 8.968 7.9337 9 8.5c.032.5663-.454 1.398-1.4595 1.398C6.6593 9.898 6 9 5.963 8.4851m-1.4748.5368c-.2635.5941-.8099.876-1.5443.876s-1.7073-.6248-1.7073-2.204v-.4603c0-1.0416.721-2.131 1.7073-2.131.9864 0 1.6425 1.031 1.5443 2.2492h-2.956"></path></g></svg>',Q1=s=>{const n=G([]);{const l=w1(),a=gn();ms(()=>{const e=wu(r=>{r?o({type:"suggest",query:r,locale:a.value,options:l}).then(B=>{n.value=B.length?nl(B[0],r)&&!B[0].slice(r.length).includes(" ")?B:[r,...B]:[]}).catch(B=>{console.error(B)}):n.value=[]},Tp.suggestDelay),{search:o,terminate:t}=P1();rs([s,a],()=>e(s.value),{immediate:!0}),Hl(()=>{t()})})}return{suggestions:n}},lo=qB[0];var H1=R({name:"SearchBox",setup(){const s=al(Ip),n=us(Op),l=G(!1),a=h(()=>lo?[(l.value?["⌃","⇧","⌥","⌘"]:["Ctrl","Shift","Alt","Win"]).filter((e,o)=>lo[["ctrl","shift","alt","meta"][o]]),lo.key.toUpperCase()]:null);return Ts("keydown",e=>{!n.value&&M1(e)&&!V1(e.target)&&(e.preventDefault(),n.value=!0)}),ms(()=>{const{userAgent:e}=navigator;l.value=ru(e)||cu(e)||tu(e)}),()=>[c("button",{type:"button",class:"search-pro-button","aria-label":s.value.search,onClick:()=>{n.value=!0}},[c(Lp),c("div",{class:"search-pro-placeholder"},s.value.search),a.value?c("div",{class:"search-pro-key-hints"},a.value.map(e=>c("kbd",{class:"search-pro-key"},e))):null])]}});const j1=v({loader:()=>p(()=>import("./SearchResult-Y5aA4Qz3.js"),__vite__mapDeps([])),loadingComponent:()=>{const s=al(Ip);return c(MB,{hint:s.value.loading})}});var G1=R({name:"SearchModal",setup(){const s=us(Op),n=Gl(),l=oi(),a=al(Ip),e=G(""),{suggestions:o}=Q1(e),t=G(!1),{index:r,prev:B,next:i}=x1(o),d=Ms(),y=Ms(),u=(A=r.value)=>{e.value=o.value[A],t.value=!1};return Ts("keydown",A=>{t.value?A.key==="ArrowUp"?B():A.key==="ArrowDown"?i():A.key==="Enter"?u():A.key==="Escape"&&(t.value=!1):A.key==="Escape"&&(s.value=!1)}),ms(()=>{const A=ip(document.body);rs(s,async F=>{var _;A.value=F,F&&(await Vn(),(_=d.value)==null||_.focus())}),Vu(y,()=>{t.value=!1}),Hl(()=>{A.value=!1})}),()=>s.value?c("div",{class:"search-pro-modal-wrapper"},[c("div",{class:"search-pro-mask",onClick:()=>{s.value=!1,e.value=""}}),c("div",{class:"search-pro-modal"},[c("div",{class:"search-pro-box"},[c("form",[c("label",{for:"search-pro","aria-label":a.value.search},c(Lp)),c("input",{ref:d,type:"search",class:"search-pro-input",id:"search-pro",placeholder:a.value.placeholder,spellcheck:"false",autocapitalize:"off",autocomplete:"off",autocorrect:"off",name:`${n.value.title}-search`,value:e.value,"aria-controls":"search-pro-results",onKeydown:A=>{const{key:F}=A;o.value.length&&(F==="Tab"?(u(),A.preventDefault()):(F==="ArrowDown"||F==="ArrowUp"||F==="Escape")&&A.preventDefault())},onInput:({target:A})=>{e.value=A.value,t.value=!0,r.value=0}}),e.value?c("button",{type:"reset",class:"search-pro-clear-button",innerHTML:L1,onClick:()=>{e.value=""}}):null,t.value&&o.value.length?c("ul",{class:"search-pro-suggestions",ref:y},o.value.map((A,F)=>c("li",{class:["search-pro-suggestion",{active:F===r.value}],onClick:()=>{u(F)}},[c("kbd",{class:"search-pro-auto-complete",title:`Tab ${a.value.autocomplete}`},"Tab"),A]))):null]),c("button",{type:"button",class:"search-pro-close-button",onClick:()=>{s.value=!1,e.value=""}},a.value.cancel)]),c(j1,{query:e.value,isFocusing:!t.value,onClose:()=>{s.value=!1},onUpdateQuery:A=>{e.value=A}}),l.value?null:c("div",{class:"search-pro-hints"},[c("span",{class:"search-pro-hint"},[c("kbd",{innerHTML:q1}),a.value.select]),c("span",{class:"search-pro-hint"},[c("kbd",{innerHTML:$1}),c("kbd",{innerHTML:N1}),a.value.navigate]),c("span",{class:"search-pro-hint"},[c("kbd",{innerHTML:z1}),a.value.exit])])])]):null}}),U1=Dn({enhance({app:s}){S1(s),s.component("SearchBox",H1)},setup(){R1()},rootComponents:[G1]});const Za=[$2,lA,rA,uA,EA,_A,TA,RA,t8,F8,b1,U1],W1=[["v-184f4da6","/intro.html",{v:"/assets/images/cover3.jpg",e:`<h1> 简历</h1>
<h1> 个人信息</h1>
<ul>
<li>张威/男/1998</li>
<li>硕士/华南师范大学（211）电子信息</li>
<li>技术博客：http://old.ftqq.com</li>
<li>Github：http://github.com/easychen</li>
<li>期望职位：c/c++后端开发工程师</li>
<li>期望薪资：15k~20k</li>
<li>期望城市：广州</li>
</ul>
<p>、</p>
<h1> 技能清单</h1>
<p>（我一般主张将技能清单写入到工作经历里边去。不过很难完整，所以有这么一段也不错）</p>`,r:{minutes:1.03,words:308},y:"a",t:"简历",i:"circle-info"},[":md"]],["v-8daa1a0e","/",{y:"h",t:"博客主页",i:"home"},["/README.md"]],["v-3a1d2930","/tool.html",{e:`<h1> 工具分享</h1>
<h2> <a href="https://github.com/iszhwei/mutalin" target="_blank" rel="noopener noreferrer">基因序列比对工具-mutialin</a></h2>
<p>虽然有很多优秀的软件能做双序列比对，但对于<strong>每个基因要对几十个甚至上百个样品测序结果比对</strong>步骤太繁琐，浪费大量时间和人力，因此编写了个小工具解放劳动力，现在把它分享出来，希望能对医学方向的同学和生物方面研究的同学提供些许帮助。
<mark><strong>这个软件尤其是对做基因编辑方向的同学简直就是福音</strong></mark>
<mark><strong>感觉有用的同学请不吝fork、star一下哦</strong></mark></p>`,r:{minutes:1.48,words:444},y:"a",t:"工具分享"},[":md"]],["v-eb072ff4","/mysql/",{r:{minutes:.03,words:9},y:"a",t:"MySQL",i:"laptop-code"},["/mysql/README.md"]],["v-144c90e3","/algo/",{r:{minutes:.05,words:15},y:"a",t:"算法与数据结构",i:"laptop-code"},["/algo/README.md"]],["v-08062d61","/algo/%E7%BB%9F%E8%AE%A1%E5%8D%95%E8%AF%8D%E7%9A%84%E4%B8%AA%E6%95%B0.html",{c:["使用指南"],g:["页面配置","使用指南"],e:`<p>输入一行字符串（单词和若干空格）， 输出该行单词个数。</p>
<div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #abb2bf">Input：____hello_________world_ how___are___you___\\n</span></span>
<span class="line"><span style="color: #abb2bf">Output:   5</span></span>
<span class="line"><span style="color: #abb2bf"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.56,words:167},y:"a",t:"统计单词的个数",i:"file",O:3},["/algo/统计单词的个数.html","/algo/统计单词的个数.md",":md"]],["v-1a144c13","/algo/%E7%BB%9F%E8%AE%A1%E5%AD%97%E6%AF%8D%E3%80%81%E6%95%B0%E7%BB%84%E3%80%81%E7%A9%BA%E6%A0%BC%E7%9A%84%E4%B8%AA%E6%95%B0.html",{c:["使用指南"],g:["页面配置","使用指南"],e:`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cout;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::endl;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> letter </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> space </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> number </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">char</span><span style="color: #ABB2BF"> content;</span></span>
<span class="line"><span style="color: #ABB2BF">     cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"请输入一行字符："</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">((content </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getchar</span><span style="color: #ABB2BF">()) </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> (content </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'</span><span style="color: #56B6C2">\\n</span><span style="color: #98C379">'</span><span style="color: #ABB2BF">)) {</span></span>
<span class="line"><span style="color: #ABB2BF">         </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">((content </span><span style="color: #C678DD">&gt;=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'a'</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> content </span><span style="color: #C678DD">&lt;=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'z'</span><span style="color: #ABB2BF">) </span><span style="color: #56B6C2">||</span><span style="color: #ABB2BF"> (content </span><span style="color: #C678DD">&gt;=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'A'</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> content </span><span style="color: #C678DD">&lt;=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'Z'</span><span style="color: #ABB2BF">)) {               letter</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">         }       </span></span>
<span class="line"><span style="color: #ABB2BF">         </span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(content </span><span style="color: #C678DD">&gt;=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'0'</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> content </span><span style="color: #C678DD">&lt;=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'9'</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">             number</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">         }       </span></span>
<span class="line"><span style="color: #ABB2BF">         </span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(content </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">' '</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">             space</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">         }       </span></span>
<span class="line"><span style="color: #ABB2BF">     }       </span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">     cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"英文字母个数为："</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> letter </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">     cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"空格个数为："</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> space </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl; </span></span>
<span class="line"><span style="color: #ABB2BF">     cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"数字个数为："</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> number </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">         </span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;                                                                           </span></span>
<span class="line"><span style="color: #ABB2BF"> }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.6,words:181},y:"a",t:"统计字母、数字、空格个数",i:"file",O:3},["/algo/统计字母、数组、空格的个数.html","/algo/统计字母、数组、空格的个数.md",":md"]],["v-4628d8d3","/others/autohotkey%E7%AC%94%E8%AE%B0.html",{e:`<h1> Autohotkey笔记</h1>
<h2> 脚本开机自启</h2>
<p>将 .ahk （Ahk脚本）文件，创建快捷方式，并把快捷方式放入 <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup </code>文件夹即可。如需取消开机自启，就删除这个快捷方式。</p>
<p>方法二：win + R 输入<code>shell:startup</code>回车后自动打开开机自启目录</p>
<h2> 使用</h2>
<p>如果第一次使用的话，双击 .ahk 文件（Ahk脚本所使用的文件名后缀）会弹出打开方式选择框，点“更多应用-&gt;在这台电脑上查找其他应用”，然后找到并选中上一步解<strong>压文件</strong>夹里的 “AutoHotkeyU64.exe” 文件即可。</p>`,r:{minutes:1.65,words:494},y:"a",t:"Autohotkey笔记"},["/others/autohotkey笔记.html","/others/autohotkey笔记.md",":md"]],["v-25b47c13","/others/",{r:{minutes:.03,words:10},y:"a",t:"随笔",i:"laptop-code"},["/others/README.md"]],["v-7945696f","/others/SourceInsight.html",{e:`<h1> Source Insight使用</h1>
<h2> <mark></mark></h2>
<div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #abb2bf">输入法：</span></span>
<span class="line"><span style="color: #abb2bf">	设置-常规-兼容性（打开）</span></span>
<span class="line"><span style="color: #abb2bf"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.95,words:286},y:"a",t:"Source Insight使用"},[":md"]],["v-5095ca42","/others/typora%E9%85%8D%E7%BD%AE.html",{e:`<h1> typora配置</h1>
<h2> 右键新建文件中没有<code>.md</code></h2>
<div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #abb2bf">Windows Registry Editor Version 5.00</span></span>
<span class="line"><span style="color: #abb2bf">[HKEY_CLASSES_ROOT\\.md]</span></span>
<span class="line"><span style="color: #abb2bf">@="Typora.exe"</span></span>
<span class="line"><span style="color: #abb2bf">[HKEY_CLASSES_ROOT\\.md\\ShellNew]</span></span>
<span class="line"><span style="color: #abb2bf">"NullFile"=""</span></span>
<span class="line"><span style="color: #abb2bf">[HKEY_CLASSES_ROOT\\Typora.exe]</span></span>
<span class="line"><span style="color: #abb2bf">@="Markdown"</span></span>
<span class="line"><span style="color: #abb2bf"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:14.56,words:4369},y:"a",t:"typora配置"},["/others/typora配置.html","/others/typora配置.md",":md"]],["v-5cb072b3","/redis/AOF%E6%8C%81%E4%B9%85%E5%8C%96.html",{c:["redis"],g:["redis持久化"],e:`<h1> AOF持久化</h1>
<h2> 一、AOF概念</h2>
<p>RDB存储的弊端</p>
<ul>
<li>存储数据量较大，效率较低——<strong>基于快照思想，每次读写都是全部数据，当数据量巨大时，效率非常低</strong></li>
<li>大数据量下的IO性能较低</li>
<li>基于fork创建子进程，内存产生额外消耗</li>
<li>宕机会带来数据丢失</li>
</ul>
<p>AOF解决思路</p>
<ul>
<li>不记录数据，记录操作过程</li>
<li><strong>对均进行记录，排除丢失数据的风险</strong></li>
</ul>
<p>AOF（append only file）持久化：<strong>不记录数据，只是以独立日志的方式记录每次写命令</strong>，重启时再重新执行AOF文件中命令达到恢复数据的目的
AOF的主要作用是解决了数据持久化的实时性，目前已经是Redis持久化的<strong>主流方式</strong>（优先用AOF，再使用RDB）</p>`,r:{minutes:8.41,words:2523},y:"a",t:"AOF持久化",i:"file",O:9},["/redis/AOF持久化.html","/redis/AOF持久化.md",":md"]],["v-e451d600","/redis/key%E9%80%9A%E7%94%A8%E6%8C%87%E4%BB%A4.html",{c:["redis"],g:["redis基础"],e:`<h1> key通用指令</h1>
<p><strong>key特征：</strong> key是一个****，<u>通过key获取redis中保存的数据</u></p>
<p><strong>key应该设计那些操作？</strong></p>
<ul>
<li>对于key自身<strong>状态</strong>的相关操作：删除，判定存在，获取类型等</li>
<li>对于key<strong>有效性控制</strong>相关操作：有效期设定，判定是否有效，有效状态的切换等</li>
<li>对于key快速<strong>查询</strong>操作：按指定条件查询key</li>
</ul>`,r:{minutes:2.65,words:795},y:"a",t:"key通用指令",i:"file",O:7},["/redis/key通用指令.html","/redis/key通用指令.md",":md"]],["v-44295686","/redis/list%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",{c:["redis"],g:["redis基础"],e:`<h1> list数据类型</h1>
<h2> 一、list类型概念</h2>
<ul>
<li>数据存储需求：<u>存储多个数据</u>，并对数据<u>进入存储空间的顺序进行区分</u></li>
<li>需要的存储数据：一个存储空间保存多个数据，且通过数据可以</li>
<li>list类型保存多个数据，底层使用存储结构实现</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 二、基本命令</h2>
<h3> 1. 添加/修改数据</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">lpush </span><span style="color: #C678DD">key</span><span style="color: #ABB2BF"> value1 </span><span style="color: #E06C75">[value2]</span><span style="color: #ABB2BF"> …</span></span>
<span class="line"><span style="color: #ABB2BF">rpush </span><span style="color: #C678DD">key</span><span style="color: #ABB2BF"> value1 </span><span style="color: #E06C75">[value2]</span><span style="color: #ABB2BF"> …</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.08,words:1225},y:"a",t:"list数据类型",i:"file",O:4},["/redis/list数据类型.html","/redis/list数据类型.md",":md"]],["v-cd4e5daa","/redis/RDB%E6%8C%81%E4%B9%85%E5%8C%96.html",{c:["redis"],g:["redis持久化"],e:`<h1> RDB持久化</h1>
<h2> 一、持久化简介</h2>
<h3> 什么是持久化？</h3>
<p>将内存中的数据保存至永久性存储介质称为持久化</p>
<h3> 为什么要持久化？</h3>
<p><u>防止数据的意外丢失</u>，确保数据安全性</p>
<h3> 如何防止数据丢失？</h3>
<ul>
<li>
<p><strong>RDB持久化</strong>：将当前****保存到硬盘（原理是将Reids在内存中的数据库记录定时dump到磁盘上的RDB持久化）</p>
<p><strong>AOF持久化</strong>：将每次执行的写****保存到硬盘（原理是将Reids的操作日志<u>以追加的方式写入文件，类似于MySQL的binlog</u>）</p>
</li>
</ul>`,r:{minutes:7.9,words:2370},y:"a",t:"RDB持久化",i:"file",O:8},["/redis/RDB持久化.html","/redis/RDB持久化.md",":md"]],["v-dc384366","/redis/",{r:{minutes:.03,words:9},y:"a",t:"Redis",i:"laptop-code"},["/redis/README.md"]],["v-9ee97fea","/redis/Redis%E7%9A%84%E5%AE%89%E8%A3%85.html",{c:["redis"],g:["redis安装"],e:`<h1> Redis的安装</h1>
<h2> Redis的安装</h2>
<ol>
<li>
<p>redis官网上下载最新安装包到家目录</p>
</li>
<li>
<p>解压压缩包，然后会在家目录下面生成一个对应文件夹redis-6.0.8。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">tar</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">zxvf</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">redis-6.0.8.tar.gz</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>
<li>
<p>进入到解压后的目录redis-6.0.8，然后执行make</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #56B6C2">cd</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">redis-6.0.8</span></span>
<span class="line"><span style="color: #61AFEF">make</span></span>
<span class="line"><span style="color: #61AFEF">sudo</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">make</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">install</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>进入utils目录</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #56B6C2">cd</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">utils</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着进入到<code>install_server.sh</code>文件，注释掉下面的内容（大于在77行，有8行，shell的注释是以<code>#</code>进行的注释）</p>
<figure><figcaption></figcaption></figure>
<p>注释之后，保存退出并且执行下面命令</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">sudo</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">./install_server.sh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
</li>
</ol>`,r:{minutes:10.1,words:3030},y:"a",t:"Redis的安装",i:"file",O:1},["/redis/Redis的安装.html","/redis/Redis的安装.md",":md"]],["v-2877cc16","/redis/set%E5%92%8Csorted_set%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",{c:["redis"],g:["redis基础"],e:`<h1> set和sorted_set数据类型</h1>
<h2> 一、set类型概念</h2>
<p>新的存储需求：存储大量的数据，在查询方面提供更高的效率
需要的存储结构：能够保存大量的数据，高效的内部存储机制，便于查询
set类型：<strong>与hash存储结构完全相同，底层数据结构使用，仅存储field，不存储value（nil），并且field</strong></p>
<figure><figcaption></figcaption></figure>
<h2> 二、set类型数据的基本操作</h2>
<p><strong>添加数据</strong></p>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">sadd </span><span style="color: #C678DD">key</span><span style="color: #ABB2BF"> member1 </span><span style="color: #E06C75">[member2]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:10.64,words:3192},y:"a",t:"set和sorted_set数据类型",i:"file",O:5},["/redis/set和sorted_set数据类型.html","/redis/set和sorted_set数据类型.md",":md"]],["v-62cf8211","/redis/string%E5%92%8Chash%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",{c:["redis"],g:["redis基础"],e:`<h1> string和hash数据类型</h1>
<h2> 一、redis 数据存储格式</h2>
<p>redis<u>自身是一个Map，其中所有的数据都是采用<strong>key:value</strong>的形式存储</u>，<strong>数据类型指的是存储的value的类型，key部分永远都是字符串</strong></p>
<figure><figcaption></figcaption></figure>
<h3> 常用数据类型</h3>
<table>
<thead>
<tr>
<th>类型</th>
<th>简介</th>
<th>特性</th>
<th>场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>String(字符串)</td>
<td>二进制安全</td>
<td>可以包含<strong>任何数据</strong>，比如jpg或者，一个键</td>
<td>---</td>
</tr>
<tr>
<td>Hash(字典)</td>
<td>键值对集合，即编程语言中的Map类型</td>
<td>适合，并且像数据库中update一个属性一样()</td>
<td>存储、读取、修改<strong>用户属性</strong></td>
</tr>
<tr>
<td>List(列表)</td>
<td>链表(双向链表)</td>
<td>增删快，提供了操作某一段元素的API</td>
<td>1、最新消息<strong>排行</strong>等功能(比如朋友圈的<strong>时间线</strong>)  2、<strong>消息队列</strong></td>
</tr>
<tr>
<td>Set(集合)</td>
<td>哈希表实现，元素<strong>不重复</strong></td>
<td>1、添加、删除、查找的   2、为集合</td>
<td>1、<strong>共同</strong>好友  2、利用<strong>唯一性</strong>，统计访问网站的  3、<u>好友推荐时,根据tag求<strong>交集</strong>，大于某个阈值就可以推荐</u></td>
</tr>
<tr>
<td>Sorted  Set(zset，有序集合)</td>
<td>将Set中的元素增加<strong>一个权重参数score</strong>，元素按score<strong>有序排列</strong>；元素<strong>不重复</strong></td>
<td>数据插入集合时，已经进行天然排序</td>
<td>1、<strong>排行榜</strong>  2、带<strong>权重的消息队列</strong>  l</td>
</tr>
</tbody>
</table>`,r:{minutes:12.4,words:3720},y:"a",t:"string和hash数据类型",i:"file",O:3},["/redis/string和hash数据类型.html","/redis/string和hash数据类型.md",":md"]],["v-c5721e08","/redis/%E4%BA%8B%E5%8A%A1%E5%92%8C%E4%BA%8B%E5%8A%A1%E9%94%81.html",{c:["redis"],g:["redis事务"],e:`<h1> 事务和事务锁</h1>
<h2> 一、事务简介</h2>
<p>Redis执行指令过程中，多条连续执行的指令被干扰，打断，插队，这多条连续指令执行的结果可能就会有问题</p>
<p>由于客户端2中断了客户端1两条连续的指令执行，导致客户端1获取到itcast</p>
<figure><figcaption></figcaption></figure>
<p>redis事务就是一个命令执行的队列，将一系列预定义命令包装成一个整体（一个队列）。当执行时，一次性按照添加顺序依次执行，中间不会被打断或者干扰。</p>
<p>一个队列中，一次性、顺序性、排他性的执行一系列命令</p>
<h2> 二、事务基本指令</h2>`,r:{minutes:6.8,words:2039},y:"a",t:"事务和事务锁",i:"file",O:10},["/redis/事务和事务锁.html","/redis/事务和事务锁.md",":md"]],["v-20189b06","/redis/%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5.html",{c:["redis"],g:["redis删除策略"],e:`<h1> 删除策略</h1>
<h2> 一、过期数据</h2>
<p><strong>Redis中的数据特征：</strong> Redis是一种内存级数据库，所有数据均存放在内存中，内存中的数据可以通过TTL指令获取其状态</p>
<ul>
<li>XX : 具有时效性的数据</li>
<li>-1 : 永久有效的数据</li>
<li>-2 : 已经过期的数据 或 被删除的数据 或 未定义的数据</li>
</ul>
<p><strong>过期的数据真的被删了吗？</strong></p>
<figure><figcaption></figcaption></figure>
<p>redis服务器有很多操作需要执行时，CPU的压力会很大，于是redis中的策略是，在内存还够的前提下，先不急着释放已删除的数据的内存空间，先执行客户端的指令</p>`,r:{minutes:5.44,words:1633},y:"a",t:"删除策略",i:"file",O:11},["/redis/删除策略.html","/redis/删除策略.md",":md"]],["v-0f67a82d","/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AE%9E%E8%B7%B5%E6%A1%88%E4%BE%8B.html",{c:["redis"],g:["redis基础"],e:`<h1> 数据类型实践案例</h1>
<h2> 业务场景一：计数器（string类型）</h2>
<p>人工智能领域的语义识别与自动对话将是未来服务业机器人应答呼叫体系中的重要技术，百度自研用户评价语义识别服务，免费开放给企业试用，同时训练自己的模型。现对试用用户的使用行为进行限速，<strong>限制每个用户每分钟最多发起10次调用</strong></p>
<figure><figcaption></figcaption></figure>
<p><strong>解决方案</strong></p>
<ul>
<li>设计计数器，记录调用次数，用于控制业务执行次数。<strong>以用户id作为key，使用此时作为value</strong></li>
<li>在<strong>调用前获取次数，判断是否超过限定次数</strong>，不超过次数的情况下，每次调用计数+1，业务调用失败，计数-1</li>
<li>设定10min为一个周期，<strong>一个周期结束后，自动清空周期内使用次数</strong></li>
</ul>`,r:{minutes:2.44,words:733},y:"a",t:"数据类型实践案例",i:"file",O:6},["/redis/数据类型实践案例.html","/redis/数据类型实践案例.md",":md"]],["v-7ccef86f","/redis/%E8%AE%A4%E8%AF%86NoSQL%E5%92%8CRedis.html",{c:["redis"],g:["redis基础"],e:`<h1> 认识NoSQL和Redis</h1>
<h2> 一、NoSQL</h2>
<figure><figcaption></figcaption></figure>
<p>NoSQL：Not-Only SQL，泛指非关系型数据库，<strong>作为关系型数据库的补充</strong>，，非关系型数据库一般不会用，font&gt;</p>
<p>NoSQL特征：<strong>可扩容、可伸缩、大数据量下高性能、灵活的数据类型、高可用</strong></p>
<h3> NoSQL的分类</h3>
<p>NoSQL数据库主要有以下四类。这些类别中的每一个都有其独特的属性和局限性。没有特定的数据库可以更好地解决所有问题。</p>`,r:{minutes:6.7,words:2010},y:"a",t:"认识NoSQL和Redis",i:"file",O:2},["/redis/认识NoSQL和Redis.html","/redis/认识NoSQL和Redis.md",":md"]],["v-501b8055","/redis/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8BBitmaps%E3%80%81HyperLogLog%E3%80%81GEO.html",{c:["redis"],g:["redis高级数据类型"],e:`<h1> 高级数据类型Bitmaps、HyperLogLog、GEO</h1>
<h2> 一、Bitmaps</h2>
<figure><figcaption></figcaption></figure>
<p>对于bitmap，我们取值的时候，需要知道bit的位置，改值的时候，需要知道位置和修改结果。取值和修改的操作变得复杂了一些，但是节省了存储空间，<strong>属于时间换空间</strong>。<strong>其实redis并没有提供bitmap这种数据类型，只是提供了对string类型操作bit的接口</strong></p>
<h3> 1. Bitmaps基本操作</h3>
<p>设置指定key对应偏移量上的bit值，value只能是1或0</p>`,r:{minutes:3.5,words:1051},y:"a",t:"高级数据类型Bitmaps、HyperLogLog、GEO",i:"file",O:11},["/redis/高级数据类型Bitmaps、HyperLogLog、GEO.html","/redis/高级数据类型Bitmaps、HyperLogLog、GEO.md",":md"]],["v-1464ca76","/ccpp/",{r:{minutes:.03,words:9},y:"a",t:"c/c++",i:"laptop-code"},["/ccpp/README.md"]],["v-47deb978","/mysql/02%20MySQL%E6%A0%B8%E5%BF%83SQL/CRUD.html",{c:["mysql"],g:["mysql核心SQL"],e:`<h1> CRUD操作</h1>
<p>涉及一些的过程</p>
<h2> insert增加</h2>
<p>可以先在本地文本编辑器写，然后复制到shell运行，记录命令</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">insert into</span><span style="color: #ABB2BF"> user </span><span style="color: #C678DD">values</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">,</span><span style="color: #98C379">'zhang san'</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">22</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'male'</span><span style="color: #ABB2BF">); #不要这样写，因为后面可以会涉及字段的增删，这样写数据和字段（个数、顺序、类型）必须一一对应</span></span>
<span class="line"><span style="color: #C678DD">insert into</span><span style="color: #ABB2BF"> user(</span><span style="color: #C678DD">name</span><span style="color: #ABB2BF">, age, sex) </span><span style="color: #C678DD">values</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">'zhang san'</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">22</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'male'</span><span style="color: #ABB2BF">); #这样写即使字段顺序不一致也无所谓</span></span>
<span class="line"><span style="color: #C678DD">insert into</span><span style="color: #ABB2BF"> user(</span><span style="color: #C678DD">name</span><span style="color: #ABB2BF">, age, sex) </span><span style="color: #C678DD">values</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">'zhang san'</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">22</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'male'</span><span style="color: #ABB2BF">),(</span><span style="color: #98C379">'li si'</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">21</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'female'</span><span style="color: #ABB2BF">),(</span><span style="color: #98C379">'wang wu'</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">18</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'male'</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.01,words:604},y:"a",t:"mysql CRUD操作",i:"file",O:4},["/mysql/02 MySQL核心SQL/CRUD.html","/mysql/02 MySQL核心SQL/CRUD.md",":md"]],["v-68cfc132","/mysql/02%20MySQL%E6%A0%B8%E5%BF%83SQL/DCL%E5%B0%8F%E7%BB%93.html",{c:["mysql"],g:["mysql核心SQL"],e:`<h1> DCL语句小结</h1>
<h2> (1)授予权限grant</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">grant</span><span style="color: #ABB2BF"> 权限 </span><span style="color: #C678DD">on</span><span style="color: #ABB2BF"> 库名.* </span><span style="color: #C678DD">to</span><span style="color: #ABB2BF"> “用户名”；</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">select</span><span style="color: #ABB2BF">//查询权限</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">update</span><span style="color: #ABB2BF">//修改权限</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">insert</span><span style="color: #ABB2BF">//插入权限</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF">//删除权限</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">create</span><span style="color: #ABB2BF">//创建数据库、表的权限</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">drop</span><span style="color: #ABB2BF">//删除数据库、表的权限</span></span>
<span class="line"><span style="color: #ABB2BF">     all//所有权限</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.77,words:231},y:"a",t:"DCL语句小结",i:"file",O:8},["/mysql/02 MySQL核心SQL/DCL小结.html","/mysql/02 MySQL核心SQL/DCL小结.md",":md"]],["v-1509bd1e","/mysql/02%20MySQL%E6%A0%B8%E5%BF%83SQL/DML%E5%B0%8F%E7%BB%93.html",{c:["mysql"],g:["mysql核心SQL"],e:`<h1> DML语句小结</h1>
<p>DML数据操作语言：<strong>操纵数据，针对数据的增删改查；</strong></p>
<h2> (1)增insert：</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">insert into</span><span style="color: #ABB2BF"> 表名 </span><span style="color: #C678DD">values</span><span style="color: #ABB2BF">(数据的集合)；//添加一条数据；</span></span>
<span class="line"><span style="color: #C678DD">insert into</span><span style="color: #ABB2BF"> 表名(字段名1，字段名2，字段名3) </span><span style="color: #C678DD">values</span><span style="color: #ABB2BF">(“数据1”，“数据2”，“数据3”)； //添加指定字段数据，其他系统默认；</span></span>
<span class="line"><span style="color: #C678DD">insert into</span><span style="color: #ABB2BF"> 表名 </span><span style="color: #C678DD">values</span><span style="color: #ABB2BF">(数据集合1)，(数据集合2)，(数据集合3)；//insert进行小批量数据插入</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.72,words:1116},y:"a",t:"DML语句小结",i:"file",O:7},["/mysql/02 MySQL核心SQL/DML小结.html","/mysql/02 MySQL核心SQL/DML小结.md",":md"]],["v-5312ebd6","/mysql/02%20MySQL%E6%A0%B8%E5%BF%83SQL/mysql%E7%9A%84%E5%BA%93%E6%93%8D%E4%BD%9C.html",{c:["mysql"],g:["mysql核心SQL"],e:`<h1> MySQL核心SQL</h1>
<h2> 库操作</h2>
<p>查询数据库</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">show databases;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:.96,words:289},y:"a",t:"mysql的库操作",i:"file",O:2},["/mysql/02 MySQL核心SQL/mysql的库操作.html","/mysql/02 MySQL核心SQL/mysql的库操作.md",":md"]],["v-cb572402","/mysql/02%20MySQL%E6%A0%B8%E5%BF%83SQL/select%E6%9F%A5%E8%AF%A2.html",{c:["mysql"],g:["mysql核心SQL"],e:`<h1> select查询</h1>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">select</span><span style="color: #ABB2BF"> * </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> user; </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:6.94,words:2081},y:"a",t:"单表select查询",i:"file",O:5},["/mysql/02 MySQL核心SQL/select查询.html","/mysql/02 MySQL核心SQL/select查询.md",":md"]],["v-a056d220","/mysql/02%20MySQL%E6%A0%B8%E5%BF%83SQL/%E5%A4%9A%E8%A1%A8select-%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2.html",{c:["mysql"],g:["mysql核心SQL"],e:`<h1> 多表select-连接查询</h1>
<h2> 为什么需要连接查询</h2>
<p>当单表设计不满足范式设计时需要进行拆分，因此可能涉及到多表查询。连接查询相比单表查询<u>减少了TCP三次握手和四次挥手</u>，也<u>减少了mysql server对client sql的校验</u>过程。当然，一般满足范式三即可，范式越高表越多，连接查询效率越低。</p>
<figure><figcaption></figcaption></figure>
<h2> 概述</h2>
<figure><figcaption></figcaption></figure>
<p>左连接：指的是表1特有的数据</p>`,r:{minutes:6.98,words:2093},y:"a",t:"多表select-连接查询",i:"file",O:8},["/mysql/02 MySQL核心SQL/多表select-连接查询.html","/mysql/02 MySQL核心SQL/多表select-连接查询.md",":md"]],["v-eedfc64a","/mysql/02%20MySQL%E6%A0%B8%E5%BF%83SQL/%E6%A6%82%E8%BF%B0.html",{c:["mysql"],g:["mysql核心SQL"],e:`<h2> 结构化查询语句SQL（Structure Query Language）</h2>
<p>所有的<a href="https://iszhwei.gitee.io/mysql/MySQL%E5%9F%BA%E7%A1%80/%E7%9F%A5%E8%AF%86%E6%8B%93%E5%B1%95.html" target="_blank" rel="noopener noreferrer">关系型数据库</a>都支持SQL语句</p>
<p>SQL主要可以划分为以下 3 个类别：</p>
<ul>
<li>
<p>DDL（Data Deﬁnition Languages）语句-</p>
<p>数据定义语言，这些语句定义了不同的数据库、表、列、索引等数据库对象的定义。常用的语句关键字主要包括 <code>create、drop、alter</code>等。</p>
<ul>
<li>
</li>
</ul>
</li>
<li>
<p>DML（Data Manipulation Language）语句-</p>
<p>数据操纵语句，用于添加、删除、更新和查询数据库记录，并检查数据完整性，常用的语句关键字主要包括<code> insert、delete、update</code> 和<code>select</code> 等。</p>
<ul>
<li><strong>用的最多就是查询<code>select</code></strong></li>
</ul>
</li>
<li>
<p>DCL（Data Control Language）语句</p>
<p>数据控制语句，用于控制不同的许可和访问级别的语句。这些语句定义了数据库、表、字段、用户的。主要的语句关键字包括<code> grant、revoke</code> 等。</p>
</li>
</ul>`,r:{minutes:1.15,words:344},y:"a",t:"SQL概述",i:"file",O:1},["/mysql/02 MySQL核心SQL/概述.html","/mysql/02 MySQL核心SQL/概述.md",":md"]],["v-0c1daf9d","/mysql/02%20MySQL%E6%A0%B8%E5%BF%83SQL/%E8%A1%A8%E6%93%8D%E4%BD%9C.html",{c:["mysql"],g:["mysql核心SQL"],e:`<h1> 表操作</h1>
<p>查看表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">show tables;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:2.36,words:707},y:"a",t:"mysql的表操作",i:"file",O:3},["/mysql/02 MySQL核心SQL/表操作.html","/mysql/02 MySQL核心SQL/表操作.md",":md"]],["v-f0383c18","/linux/",{r:{minutes:.04,words:13},y:"a",t:"linux操作系统",i:"laptop-code"},["/linux/README.md"]],["v-40bd95c1","/linux/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.html",{c:["使用指南"],g:["页面配置","使用指南"],e:`<h1> 文件操作</h1>
<p>文件：狭义上的文件，指的是磁盘上数据的集合；广义上的文件指的是一类容量大、读写慢、可以长期存储的数据</p>
<p>FILE结构体是满足ISOC标准的文件流/文件缓冲区；本次学习的是<strong>遵循POSIX标准的文件读写的系统调用</strong></p>
<figure><figcaption>image-20240312103817142</figcaption></figure>
<blockquote>
<p>ISO C是国际标准化组织（ISO）为了<strong>提高C语言的移植性而设立的C语言标准</strong>。它包含两部分：C语法及语义，以及C标准函数库。ISO C主要定义了C语言的语法规则、语义以及标准库中的函数原型和功能，但并未定义函数的具体实现。它的目标是确保不同的编译器在遵循ISO C标准时，对C语言的解释和执行方式保持一致。</p>
<p>POSIX是Portable Operating System Interfaces的缩写，意为可移植操作系统接口。这是一组由IEEE制定的标准簇，<strong>旨在提升应用程序在不同UNIX系统环境之间的可移植性</strong>。POSIX标准不仅包含了ISO C的部分内容，还定义了很多系统服务接口，例如socket相关接口、pthread线程相关接口等。这些接口使得应用程序能够更方便地访问和操作系统提供的各种功能。</p>
<p><strong></strong>，而****。</p>
</blockquote>`,r:{minutes:2.29,words:688},y:"a",t:"页面配置",i:"file",O:3},["/linux/文件操作.html","/linux/文件操作.md",":md"]],["v-15be756c","/mysql/03%20MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E.html",{c:["mysql"],g:["mysql存储引擎"],e:`<h1> MySQL存储引擎</h1>
<p>mysql的一大优点就是插件式存储引擎</p>
<p>不同存储引擎主要是影响表的结构、数据以及索引的存储方式</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">show engines; #查看支持的存储引擎</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:1.65,words:494},y:"a",t:"MySQL存储引擎",i:"file",O:1},["/mysql/03 MySQL存储引擎/MySQL存储引擎.html","/mysql/03 MySQL存储引擎/MySQL存储引擎.md",":md"]],["v-18f8cde9","/mysql/01%20MySQL%E5%9F%BA%E7%A1%80/c%E8%AF%AD%E8%A8%80%E8%BF%9E%E6%8E%A5MySQL.html",{c:["mysql"],g:["c/c++连接数据库"],e:`<h1> c语言连接MySQL</h1>
<p>安装开发c/c++的库：<code>apt install libmysqlclient-dev</code></p>
<h2> 1. 连接数据库使用的头文件和库文件</h2>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;mysql/mysql.h&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">有些也在 #include </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF">mysql.h</span><span style="color: #C678DD">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">程序中使用了访问mysql的有关函数接口，需要在链接时指定库名: linux平台为 </span><span style="color: #C678DD">-</span><span style="color: #ABB2BF">lmysqlclient</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.23,words:1269},y:"a",t:"c语言连接MySQL",i:"file",O:9},["/mysql/01 MySQL基础/c语言连接MySQL.html","/mysql/01 MySQL基础/c语言连接MySQL.md",":md"]],["v-17cb7aa4","/mysql/01%20MySQL%E5%9F%BA%E7%A1%80/mysql%E7%9A%84%E5%AE%89%E8%A3%85.html",{c:["mysql"],g:["安装方法"],e:`<h1> mysql的安装</h1>
<h2> 查看当前有没有安装MySQL</h2>
<h3> 执行以下命令，如果执行后什么都没有返回，则进入MySQL的安装步骤</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">dpkg</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-l</span><span style="color: #ABB2BF"> | </span><span style="color: #61AFEF">grep</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">mysql</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:5.08,words:1523},y:"a",t:"mysql5.7的安装",i:"file",O:1},["/mysql/01 MySQL基础/mysql的安装.html","/mysql/01 MySQL基础/mysql的安装.md",":md"]],["v-0dd7df9c","/mysql/01%20MySQL%E5%9F%BA%E7%A1%80/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E8%AE%BE%E8%AE%A1.html",{c:["mysql"],g:["mysql基础"],e:`<h1> 关系型数据库表设计</h1>
<h2> 一对一</h2>
<p>主要是通过外键实现</p>
<p><strong>父表</strong>：被依赖/关联的表</p>
<p><strong>子表</strong>：设置外键的表</p>
<div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #abb2bf">#用户表 User  父表</span></span>
<span class="line"><span style="color: #abb2bf">uid  name age sex</span></span>
<span class="line"><span style="color: #abb2bf">1100 zhang 20 M</span></span>
<span class="line"><span style="color: #abb2bf">1000 liu 19 F</span></span>
<span class="line"><span style="color: #abb2bf">2000 wang 21 M</span></span>
<span class="line"><span style="color: #abb2bf"></span></span>
<span class="line"><span style="color: #abb2bf">#身份信息 Info 子表</span></span>
<span class="line"><span style="color: #abb2bf">cardid addrinfo</span></span>
<span class="line"><span style="color: #abb2bf">131331 aaaaa</span></span>
<span class="line"><span style="color: #abb2bf">646465 bbbbb</span></span>
<span class="line"><span style="color: #abb2bf">894946 ccccc</span></span>
<span class="line"><span style="color: #abb2bf"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.05,words:315},y:"a",t:"关系型数据库表设计",i:"file",O:6},["/mysql/01 MySQL基础/关系型数据库表设计.html","/mysql/01 MySQL基础/关系型数据库表设计.md",":md"]],["v-067342a0","/mysql/01%20MySQL%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",{c:["mysql"],g:["mysql基础"],e:`<h1> 基本数据类型</h1>
<h2> 数值类型</h2>
<figure><figcaption>image-20240406204529908</figcaption></figure>
<h3> 选取适当的数据类型</h3>
<ul>
<li>比如age TINYINT;  不要写成age int</li>
</ul>
<h3> 选数据类型两个原则</h3>
<ul>
<li>是否越界	（text类型评论发送不了全文）</li>
<li>精度是否足够（float 7; double 15）</li>
</ul>
<h3> INT(7) 什么意思</h3>
<p>int底层内存存储的数据大小固定不变（INT 类型总是占用 4 个字节的存储空间，无论括号中的数字是多少），<strong>括号内数字是一个显示时显示的宽度</strong>；即，与显示和格式化有关，与数据的实际存储或值域无关</p>`,r:{minutes:2.36,words:709},y:"a",t:"基本数据类型",i:"file",O:3},["/mysql/01 MySQL基础/基本数据类型.html","/mysql/01 MySQL基础/基本数据类型.md",":md"]],["v-c8a2e14a","/mysql/01%20MySQL%E5%9F%BA%E7%A1%80/%E5%AE%8C%E6%95%B4%E6%80%A7%E7%BA%A6%E6%9D%9F.html",{c:["mysql"],g:["mysql基础"],e:`<h1> MySQL完整性约束</h1>
<h2> 主键约束</h2>
<p><code>primary key</code>不能重复；不能为空；能唯一标识一条记录</p>
<h2> 自增键约束</h2>
<p><code>auto_increment</code>，不能用于字符串</p>
<figure><figcaption></figcaption></figure>
<h2> 唯一键约束</h2>
<p><code>unique</code>保证索引不重复-唯一索引；可以为空；可以用<code>not null</code>约束；<code>default</code> 设置默认值</p>`,r:{minutes:1.15,words:344},y:"a",t:"完整性约束/约束条件",i:"file",O:5},["/mysql/01 MySQL基础/完整性约束.html","/mysql/01 MySQL基础/完整性约束.md",":md"]],["v-a87f8e4c","/mysql/01%20MySQL%E5%9F%BA%E7%A1%80/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0.html",{c:["mysql"],g:["mysql基础"],e:`<h1> 常用函数</h1>
<h2> 字符串函数</h2>
<h2> 数值函数</h2>
<h2> 时间和日期函数</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">NOW</span><span style="color: #ABB2BF">()：返回当前的日期和时间</span></span>
<span class="line"><span style="color: #ABB2BF">UNIX_TIMESTAMP(</span><span style="color: #C678DD">data</span><span style="color: #ABB2BF">)：返回日期date的UNIX时间戳</span></span>
<span class="line"><span style="color: #ABB2BF">CURRENT_TIMESTAMP、</span><span style="color: #56B6C2">CURRENT_TIMESTAMP</span><span style="color: #ABB2BF">() ：当前时间</span></span>
<span class="line"><span style="color: #ABB2BF">CURDATE()：当前日期</span></span>
<span class="line"><span style="color: #ABB2BF">CURTIME()：当前时间</span></span>
<span class="line"><span style="color: #C678DD">DATE_FORMAT</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">date</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">"%y-%m-%d"</span><span style="color: #ABB2BF">)：格式化日期时间等</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.5,words:150},y:"a",t:"常用函数",i:"file",O:8},["/mysql/01 MySQL基础/常用函数.html","/mysql/01 MySQL基础/常用函数.md",":md"]],["v-1df5d4d6","/mysql/01%20MySQL%E5%9F%BA%E7%A1%80/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E4%B8%8E%E6%8E%88%E6%9D%83.html",{c:["mysql"],g:["mysql基础"],e:`<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">查看用户信息： </span><span style="color: #C678DD">select</span><span style="color: #ABB2BF"> user,host,plugin </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">mysql</span><span style="color: #ABB2BF">.</span><span style="color: #D19A66">user</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">创建用户示例： </span><span style="color: #C678DD">create</span><span style="color: #ABB2BF"> user </span><span style="color: #98C379">'stu'</span><span style="color: #ABB2BF">@</span><span style="color: #98C379">'localhost'</span><span style="color: #ABB2BF"> identified </span><span style="color: #C678DD">by</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'123456'</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">创建用户指定加密方式 示例：</span><span style="color: #C678DD">create</span><span style="color: #ABB2BF"> user </span><span style="color: #98C379">'stu1'</span><span style="color: #ABB2BF">@</span><span style="color: #98C379">'localhost'</span><span style="color: #ABB2BF"> identified </span><span style="color: #C678DD">WITH</span><span style="color: #ABB2BF"> mysql_native_password </span><span style="color: #C678DD">by</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'123456'</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">更新用户密码，指定加密方式，注意密码强度大小写数字：</span></span>
<span class="line"><span style="color: #C678DD">ALTER</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">user</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'root'</span><span style="color: #ABB2BF">@</span><span style="color: #98C379">'localhost'</span><span style="color: #ABB2BF"> IDENTIFIED </span><span style="color: #C678DD">WITH</span><span style="color: #ABB2BF"> mysql_native_password </span><span style="color: #C678DD">BY</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'123456'</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">授权用户对那些数据库的那些表可以进行操作 示例：</span></span>
<span class="line"><span style="color: #C678DD">GRANT</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">SELECT</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">ON</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">database_name</span><span style="color: #ABB2BF">.</span><span style="color: #D19A66">table_name</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">TO</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'user_name'</span><span style="color: #ABB2BF">@</span><span style="color: #98C379">'localhost'</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #C678DD">GRANT</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">INSERT</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">ON</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">database_name</span><span style="color: #ABB2BF">.</span><span style="color: #D19A66">table_name</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">TO</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'user_name'</span><span style="color: #ABB2BF">@</span><span style="color: #98C379">'localhost'</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #C678DD">GRANT</span><span style="color: #ABB2BF"> ALL </span><span style="color: #C678DD">ON</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">database_name</span><span style="color: #ABB2BF">.</span><span style="color: #D19A66">table_name</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">TO</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'user_name'</span><span style="color: #ABB2BF">@</span><span style="color: #98C379">'localhost'</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #C678DD">GRANT</span><span style="color: #ABB2BF"> ALL PRIVILEGES </span><span style="color: #C678DD">ON</span><span style="color: #ABB2BF"> *.* </span><span style="color: #C678DD">TO</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'user_name'</span><span style="color: #ABB2BF">@</span><span style="color: #98C379">'%'</span><span style="color: #ABB2BF">; </span><span style="color: #7F848E; font-style: italic">-- * 表示任意所有库、所有表，%表示任意地址</span></span>
<span class="line"><span style="color: #C678DD">GRANT</span><span style="color: #ABB2BF"> REPLICATION SLAVE </span><span style="color: #C678DD">ON</span><span style="color: #ABB2BF"> *.* </span><span style="color: #C678DD">to</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'mslave'</span><span style="color: #ABB2BF">@</span><span style="color: #98C379">'192.168.131.1'</span><span style="color: #ABB2BF">;#复制权限</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">删除用户：</span><span style="color: #C678DD">drop</span><span style="color: #ABB2BF"> user </span><span style="color: #98C379">'name'</span><span style="color: #ABB2BF">@</span><span style="color: #98C379">'localhost'</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.81,words:244},y:"a",t:"用户管理与授权",i:"file",O:10},["/mysql/01 MySQL基础/用户管理与授权.html","/mysql/01 MySQL基础/用户管理与授权.md",":md"]],["v-2648a679","/mysql/01%20MySQL%E5%9F%BA%E7%A1%80/%E7%9F%A5%E8%AF%86%E6%8B%93%E5%B1%95.html",{c:["mysql"],g:["mysql基础"],e:`<h1> 知识拓展</h1>
<h2> 什么是关系型数据库？</h2>
<p>**关系型数据库（RDBMS）**是建立在关系模型基础上的数据库系统。关系模型是一种数据模型，它表示数据之间的联系，包括一对一、一对多和多对多的关系。在关系型数据库中，数据以表格的形式存储，每个表格称为一个“关系”，每个关系由行（记录或元组）和列（字段或属性）组成。</p>
<p>每个关系都有一个唯一的标识符，称为“主键”，用于唯一标识关系中的每一行数据。主键可以是单列或多列的组合，其值能够唯一地标识关系中的每一行数据。</p>
<h2> 常见的数据库有哪些？</h2>
<ul>
<li>关系型数据库
<ul>
<li>MySQL、Oracle、MariaDB(MySQL作者担心MySQL收购后收费写的)</li>
<li>安卓开发使用的SQList（进程类的数据库，不同进程访问不同的SQList；Mysql是基于C/S，多个进程访问同一个MySQL数据库）</li>
<li>金融行业使用的DB2</li>
</ul>
</li>
<li>非关系型数据库 key-value
<ul>
<li>NoSQL、Redis</li>
<li>HBase（大数据分析列式数据库）</li>
</ul>
</li>
</ul>`,r:{minutes:1.5,words:450},y:"a",t:"知识拓展",i:"file",O:2},["/mysql/01 MySQL基础/知识拓展.html","/mysql/01 MySQL基础/知识拓展.md",":md"]],["v-cc05253e","/mysql/01%20MySQL%E5%9F%BA%E7%A1%80/%E8%8C%83%E5%BC%8F%E8%AE%BE%E8%AE%A1.html",{c:["mysql"],g:["mysql基础"],e:`<h1> 范式设计</h1>
<h2> 范式设计好处</h2>
<ol>
<li>主要是为了<strong>减少数据冗余</strong></li>
<li>如果冗余太多，那么数据插入、删除、更新的时候，要对多条记录的同样的数据进行更新删除，可能会产生问题</li>
</ol>
<h2> 第一范式（1NF）</h2>
<blockquote>
<p>满足第一范式才被称为关系型数据库。<strong>每一列保持原子特性</strong>，不能再分割。</p>
</blockquote>
则设计成<strong>一对多</strong>的实体关系。例如地址字段，可以再细分为省，市，区等不可再分割（即原子特性）的字段`,r:{minutes:2.87,words:860},y:"a",t:"范式设计",i:"file",O:7},["/mysql/01 MySQL基础/范式设计.html","/mysql/01 MySQL基础/范式设计.md",":md"]],["v-84ceb2f4","/mysql/01%20MySQL%E5%9F%BA%E7%A1%80/%E8%BF%90%E7%AE%97%E7%AC%A6.html",{c:["mysql"],g:["mysql基础"],e:`<h1> MySQL运算符</h1>
<h2> 算数运算符</h2>
<figure><figcaption>image-20240406210003709</figcaption></figure>
<p><strong>运算后的结果如果需要存储在表内</strong>，需要注意</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">update</span><span style="color: #ABB2BF"> user </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF"> age </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> age + </span><span style="color: #D19A66">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:.91,words:272},y:"a",t:"mysql运算符",i:"file",O:4},["/mysql/01 MySQL基础/运算符.html","/mysql/01 MySQL基础/运算符.md",":md"]],["v-32ca78ec","/mysql/04%20MYSQL%E7%B4%A2%E5%BC%95/InnoDB%E7%9A%84%E4%B8%BB%E9%94%AE%E5%92%8C%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95%E6%A0%91.html",{c:["mysql"],g:["mysql索引"],e:`<h1> InnoDB的主键和二级索引树</h1>
<h2> 主键</h2>
<p>​	</p>
<figure><figcaption></figcaption></figure>
<ul>
<li>主键树中叶子节点key是主键值，data是主键所在行的数据</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">select</span><span style="color: #ABB2BF"> * </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> student; #在有序链表中进行全文搜索</span></span>
<span class="line"><span style="color: #C678DD">select</span><span style="color: #ABB2BF"> * </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> stduent </span><span style="color: #C678DD">where</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">uid</span><span style="color: #56B6C2">=</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">; #等值搜索，从根节点开始在B+树上进行二分搜索</span></span>
<span class="line"><span style="color: #C678DD">select</span><span style="color: #ABB2BF"> * </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> stduent </span><span style="color: #C678DD">where</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">uid</span><span style="color: #56B6C2">&lt;</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">; #范围查询，在有序链表中查找</span></span>
<span class="line"><span style="color: #C678DD">select</span><span style="color: #ABB2BF"> * </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> stduent </span><span style="color: #C678DD">where</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">name</span><span style="color: #56B6C2">=</span><span style="color: #98C379">'liuxiang'</span><span style="color: #ABB2BF">; #没有索引，在有序链表上进行整表搜索</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.56,words:469},y:"a",t:"InnoDB的主键和二级索引树",i:"file",O:4},["/mysql/04 MYSQL索引/InnoDB的主键和二级索引树.html","/mysql/04 MYSQL索引/InnoDB的主键和二级索引树.md",":md"]],["v-f2fadc9e","/mysql/04%20MYSQL%E7%B4%A2%E5%BC%95/InnoDB%E8%87%AA%E9%80%82%E5%BA%94%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95.html",{c:["mysql"],g:["mysql索引"],e:`<h1> InnoDB自适应哈希索引</h1>
<p><strong>自适应哈希索引作用</strong>：MySQL Server为<u>避免频繁回表</u>，</p>
<ul>
<li>自动创建的</li>
<li>也是只能等值查询</li>
<li>是InnoDB对B+树二级索引的一个优化措施</li>
</ul>
<p>假如name是有索引的，我们不断使用如下的方式查询，那就得先访问name的二级索引树，从二级索引树上取出主键uid，然后<strong>回表</strong>，用这个uid去主键索引树上取得对应的数据</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">select</span><span style="color: #ABB2BF"> * </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> student </span><span style="color: #C678DD">where</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">name</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"zhangsan"</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #C678DD">select</span><span style="color: #ABB2BF"> * </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> student </span><span style="color: #C678DD">where</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">name</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"gaoyang"</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #C678DD">select</span><span style="color: #ABB2BF"> * </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> student </span><span style="color: #C678DD">where</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">name</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"linfeng"</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.95,words:886},y:"a",t:"InnoDB自适应哈希索引",i:"file",O:6},["/mysql/04 MYSQL索引/InnoDB自适应哈希索引.html","/mysql/04 MYSQL索引/InnoDB自适应哈希索引.md",":md"]],["v-08c9d541","/mysql/04%20MYSQL%E7%B4%A2%E5%BC%95/MySQL%E4%BC%98%E5%8C%96%E4%B9%8B%E6%85%A2%E6%97%A5%E5%BF%97%E6%9F%A5%E8%AF%A2.html",{c:["mysql"],g:["mysql日志"],e:`<h1> MySQL优化之慢日志查询</h1>
<p><u>对于SQL和索引的优化问题，我们会使用explain去分析SQL语句</u>。但是真正的企业级项目有，我们不可能从头开始一条一条explain去分析。我们从什么地方可以获取那些运行时间长，耗性能的SQL？？</p>
<p>我们可以打开<strong>慢查询日志</strong></p>
<h2> 慢查询使用方法</h2>
<p><u>根据<strong>具体的业务</strong>和<strong>并发量</strong>来，设置好后<strong>开启业务</strong>，压测后打开慢查询日志，就会看到超过执行时间的SQL，然后使用explain分析这些耗时的SQL语句</u></p>`,r:{minutes:3.74,words:1123},y:"a",t:"MySQL优化之慢日志查询",i:"file",O:8},["/mysql/04 MYSQL索引/MySQL优化之慢日志查询.html","/mysql/04 MYSQL索引/MySQL优化之慢日志查询.md",":md"]],["v-976bf48a","/mysql/04%20MYSQL%E7%B4%A2%E5%BC%95/MySQL%E7%B4%A2%E5%BC%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html",{c:["mysql"],g:["mysql索引"],e:`<h1> MySQL索引常见问题</h1>
<h2> 问题1：用联合索引优化using filesort</h2>
<figure><figcaption></figcaption></figure>
<p>首先，要给userid加索引（<strong>一般过滤条件的字段需要加索引</strong>），！</p>
<p>这样的话，<u>在二级索引树上用userid过滤出来的数据中，addtime就已经是有序的了</u></p>
<figure><figcaption></figcaption></figure>
。用userid<strong>选择出来的数据越多，耗费的排序性能差的越大</strong>`,r:{minutes:4.56,words:1369},y:"a",t:"MySQL索引常见问题",i:"file",O:7},["/mysql/04 MYSQL索引/MySQL索引常见问题.html","/mysql/04 MYSQL索引/MySQL索引常见问题.md",":md"]],["v-19f8f8e4","/mysql/04%20MYSQL%E7%B4%A2%E5%BC%95/%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95.html",{c:["mysql"],g:["mysql索引"],e:`<h1> 哈希索引</h1>
<h2> 查看索引类型</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">show indexes </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> student;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:3.54,words:1063},y:"a",t:"哈希索引",i:"file",O:5},["/mysql/04 MYSQL索引/哈希索引.html","/mysql/04 MYSQL索引/哈希索引.md",":md"]],["v-4b2179bb","/mysql/04%20MYSQL%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95%E5%9F%BA%E7%A1%80.html",{c:["mysql"],g:["mysql索引"],e:`<h1> 索引基础</h1>
<h2> 索引是什么</h2>
<p>索引：是存储引擎提高查询的<strong>数据结构</strong></p>
<p>索引的核心/目的：<strong>提高查询的速度</strong></p>
<h2> 索引的好处和坏处</h2>
<p>当表中的数据量到达几十万甚至上百万的时候，SQL查询所花费的时间会很长，导致业务超时出错，此时就需要用索引来加速SQL查询。</p>
<p>由于索引也是需要存储成<strong>索引文件</strong>的，因此对索引的使用也会<strong>涉及。如果索引创建过多，使用不当，会造成SQL查询时，进行大量无用的磁盘I/O操作，降低了SQL的查询效率，适得其反</strong>，因此掌握良好的索引创建原则非常重要！</p>`,r:{minutes:3.44,words:1032},y:"a",t:"索引基础",i:"file",O:1},["/mysql/04 MYSQL索引/索引基础.html","/mysql/04 MYSQL索引/索引基础.md",":md"]],["v-4d1339f4","/mysql/04%20MYSQL%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E5%88%86%E6%9E%90.html",{c:["mysql"],g:["mysql索引"],e:`<h1> 索引的使用和分析</h1>
<h2> 索引的创建和删除</h2>
<p>创建表的时候指定索引字段，会自动给 primary key 和 unique 创建索引。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">CREATE</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">TABLE</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">index1</span><span style="color: #ABB2BF">(id </span><span style="color: #C678DD">INT</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  </span><span style="color: #C678DD">name</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">VARCHAR</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">20</span><span style="color: #ABB2BF">),</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  sex ENUM(</span><span style="color: #98C379">'male'</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'female'</span><span style="color: #ABB2BF">),</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  </span><span style="color: #C678DD">INDEX</span><span style="color: #ABB2BF"> (id)); #普通索引，单列索引</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  </span></span>
<span class="line"><span style="color: #C678DD">CREATE</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">TABLE</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">index1</span><span style="color: #ABB2BF">(id </span><span style="color: #C678DD">INT</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  </span><span style="color: #C678DD">name</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">VARCHAR</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">20</span><span style="color: #ABB2BF">),</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  sex ENUM(</span><span style="color: #98C379">'male'</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'female'</span><span style="color: #ABB2BF">),</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  </span><span style="color: #C678DD">INDEX</span><span style="color: #ABB2BF">(id, </span><span style="color: #C678DD">name</span><span style="color: #ABB2BF">));#普通索引，多列索引</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  </span></span>
<span class="line"><span style="color: #C678DD">CREATE</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">TABLE</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">index1</span><span style="color: #ABB2BF">(id </span><span style="color: #C678DD">INT</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  </span><span style="color: #C678DD">name</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">VARCHAR</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">20</span><span style="color: #ABB2BF">),</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  sex ENUM(</span><span style="color: #98C379">'male'</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'female'</span><span style="color: #ABB2BF">),</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  </span><span style="color: #C678DD">INDEX</span><span style="color: #ABB2BF">(id, </span><span style="color: #C678DD">name</span><span style="color: #ABB2BF">),</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">INDEX</span><span style="color: #ABB2BF">(sex));#创建多个索引</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  </span></span>
<span class="line"><span style="color: #C678DD">CREATE</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">TABLE</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">index1</span><span style="color: #ABB2BF">(id </span><span style="color: #C678DD">INT</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  </span><span style="color: #C678DD">name</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">VARCHAR</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">20</span><span style="color: #ABB2BF">),</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  sex ENUM(</span><span style="color: #98C379">'male'</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'female'</span><span style="color: #ABB2BF">),</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  </span><span style="color: #C678DD">INDEX</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'index_name'</span><span style="color: #ABB2BF"> (id)); #还可以自定义一个索引名</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.53,words:1359},y:"a",t:"索引的使用和分析",i:"file",O:2},["/mysql/04 MYSQL索引/索引的使用和分析.html","/mysql/04 MYSQL索引/索引的使用和分析.md",":md"]],["v-b30276bc","/mysql/04%20MYSQL%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html",{c:["mysql"],g:["mysql索引"],e:`<h1> 索引的底层实现原理</h1>
<p><mark>数据库索引是<strong>存储在磁盘上</strong>的，当数据量大时，就不能把整个索引全部加载到内存了，只能<strong>逐一加载每一个磁盘块（对应索引树的节点</strong>），<u>索引树越低，越“矮胖”，磁盘IO次数就少</u></mark></p>
<h2> AVL平衡二叉树索引</h2>
<figure><figcaption></figcaption></figure>
<p>不管是，增加，删除，还是等值查找，<strong>时间复杂度都是O(logn)</strong>，n 是数据页的数目。并且<strong>支持范围查找</strong>。</p>`,r:{minutes:7.02,words:2106},y:"a",t:"索引的底层实现原理",i:"file",O:3},["/mysql/04 MYSQL索引/索引的底层实现原理.html","/mysql/04 MYSQL索引/索引的底层实现原理.md",":md"]],["v-1776ebf2","/mysql/05%20MySQL%E4%BA%8B%E5%8A%A1/MySQL%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB.html",{c:["mysql"],g:["事务"],e:`<h1> MySQL事务的隔离级别</h1>
<h2> 隔离级别概念</h2>
<p>事务的隔离级别就是<strong>对事务并发的控制</strong></p>
<p>MySQL支持的四种隔离级别是：</p>
<ol>
<li>
<p><strong>TRANSACTION_READ_UNCOMMITTED：未提交读</strong>。说明在提交前事务A可以看到事务B的变化。这样，和都是可能发生的。</p>
</li>
<li>
<p><strong>TRANSACTION_READ_COMMITTED：已提交读（oracle默认）</strong>，说明读取未提交的数据是不允许的（防止脏读）。在这个级别和可能发生的。</p>
</li>
<li>
<p><strong>TRANSACTION_REPEATABLE_READ：可重复读（MySQL默认）</strong>，说明事务保证能够<u>再次读取相同的数据而不会失败，即使其他的事务把这个数据改了</u>，你也不会看到前后两次查询的数据的不同，<u>完全可以保证两次查询的结果是一样的</u>，但是仍然会出现。</p>
</li>
<li>
<p><strong>TRANSACTION_SERIALIZABLE：串行化</strong>，是最高的事务隔离级别，它防止脏读，不可重复读和幻读。串行执行，，一般不会用</p>
</li>
</ol>`,r:{minutes:4.44,words:1331},y:"a",t:"MySQL事务的隔离级别",i:"file",O:3},["/mysql/05 MySQL事务/MySQL事务的隔离级别.html","/mysql/05 MySQL事务/MySQL事务的隔离级别.md",":md"]],["v-51f2dcf6","/mysql/05%20MySQL%E4%BA%8B%E5%8A%A1/%E4%BA%8B%E5%8A%A1%E5%B9%B6%E5%8F%91%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98(%E8%84%8F%E8%AF%BB%E3%80%81%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB%E5%92%8C%E5%B9%BB%E8%AF%BB).html",{c:["mysql"],g:["事务"],e:`<h1> 事务并发存在的问题(脏读、不可重复读和幻读)</h1>
<p>事务处理如果，<strong>并发执行事务</strong>时通常会发生以下问题：</p>
<ul>
<li>
<p>脏读（Dirty Read）：。</p>
<ul>
<li>例如当事务A和事务B并发执行时，当事务A更新后，事务B查询读取到A尚未提交的数据，此时如果事务A rollback了，那事务B读到的数据就不是数据库所存放的数据了，而是无效的脏数据（<mark>脏读必须杜绝，因为事务没有commit</mark>；<u>而不可重复读和幻读不一定出问题，因为事务<strong>已经commit</strong></u>）</li>
</ul>
</li>
<li>
<p>不可重复读（NonRepeatable Read）：一个事务的操作导致另一个事务 。</p>
<ul>
<li>
<p>例如当事务A和事务B并发执行时，当事务B查询读取数据后，事务A 更改事务B查询到的数据，此时事务B再次去读该数据，发现前后两次读的数据不一样（事务B读取了事务A已commit的数据）</p>
</li>
<li>
</li>
</ul>
</li>
<li>
<p>幻读（Phantom Read）：一个事务的操作导致另一个事务前后。</p>
<ul>
<li>例如 当事务A和事务B并发执行时，当事务B查询读取数据后，事务A或者了一条满足事务B查询条件的记录，此时事务B再去查询，<u>发现查询到前一次不存在的记录，或者前一次查询的一些记录不见了</u>（事务B读取了事务A新增加的数据或者读到事务A删除的数据）</li>
</ul>
</li>
</ul>`,r:{minutes:3.88,words:1163},y:"a",t:"事务并发存在的问题(脏读、不可重复读和幻读)",i:"file",O:3},["/mysql/05 MySQL事务/事务并发存在的问题(脏读、不可重复读和幻读).html","/mysql/05 MySQL事务/事务并发存在的问题(脏读、不可重复读和幻读).md",":md"]],["v-0359a68f","/mysql/05%20MySQL%E4%BA%8B%E5%8A%A1/%E4%BA%8B%E5%8A%A1%E7%9A%84ACID%E7%89%B9%E6%80%A7.html",{c:["mysql"],g:["事务"],e:`<h1> 事务的ACID特性</h1>
<h2> ACID特性</h2>
<p>每一个事务必须满足下面的4个特性：</p>
<ul>
<li>
<p><strong>原子性（Atomic）</strong>：事务是一个不可分割的整体，事务必须具有原子特性。当修改数据时，<u>要么全执行，要么全不执行</u>，即不允许部分事务完成</p>
</li>
<li>
<p><strong>一致性（Consistency）</strong>：事务执行之前和执行之后，数据库<u><strong>数据</strong>必须保持一致性状态</u>。数据库的一致性状态必须由用户来负责，由<strong>并发</strong>控制机制实现。拿银行转账来说，只有让一个用户的余额减少，又让一个用户的余额增加才能构成一个完整的事务</p>
</li>
<li>
<p><strong>隔离性（Isolation）</strong>：当两个或者多个<strong>事务并发执行时</strong>，为了保证数据的安全性，将<u>一个事物内部的操作</u>与其它事务的操作隔离起来，<u>不被其它正在执行的事务所看到</u>，使得并发执行的各个事务之间不能互相影响。隔离级别：数据的安全性和事务的并发性。<u>隔离越严格，安全性越高，并发性越低</u>（就是并发控制，保证数据安全）</p>
</li>
<li>
<p><strong>持久性（Durability）</strong>：<u>事务完成（<strong>事务commit成功</strong>）以后</u>，DBMS保证它对数据库中的数据的修改是永久性的，<u>即使数据库因为故障出错，也应该能够恢复数据</u></p>
</li>
</ul>`,r:{minutes:2.84,words:853},y:"a",t:"事务的ACID特性",i:"file",O:2},["/mysql/05 MySQL事务/事务的ACID特性.html","/mysql/05 MySQL事务/事务的ACID特性.md",":md"]],["v-558f976c","/mysql/05%20MySQL%E4%BA%8B%E5%8A%A1/%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%A6%82%E5%BF%B5.html",{c:["mysql"],g:["事务"],e:`<h1> 事务的概念</h1>
<h2> 定义</h2>
<blockquote>
<p><strong>InnoDB支持事务，而MyISAM不支持事务</strong></p>
</blockquote>
<p>一个事务是由<u>一条或者多条对数据库操作的SQL语句</u>所组成的<strong>一个不可分割的单元</strong>，<u>只有当事务中的所有操作都正常执行完了，整个事务才会被提交给数据库；如果有部分事务处理失败，那么事务就要回退到最初的状态</u>，因此，<strong>事务要么全部执行成功，要么全部失败</strong>。</p>
<p>所以记住事务的几个基本概念，如下：</p>`,r:{minutes:2.42,words:726},y:"a",t:"事务的概念",i:"file",O:1},["/mysql/05 MySQL事务/事务的概念.html","/mysql/05 MySQL事务/事务的概念.md",":md"]],["v-167ae4a4","/mysql/07%20MySQL%E4%BC%98%E5%8C%96/sql%E4%BC%98%E5%8C%96.html",{c:["mysql"],g:["mysql优化"],e:`<h1> sql优化</h1>
<h2> 一、大批量插入数据</h2>
<p>当使用load 命令导入数据的时候，适当的设置可以提高导入的效率</p>
<figure><figcaption></figcaption></figure>
<h3> 1） 主键顺序插入</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">load</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">data</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">local</span><span style="color: #ABB2BF"> infile </span><span style="color: #98C379">'/root/data1.log'</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">into</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">table</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">\`tb_user\`</span><span style="color: #ABB2BF"> fields terminated </span><span style="color: #C678DD">by</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">','</span><span style="color: #ABB2BF"> lines terminated </span><span style="color: #C678DD">by</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'\\n'</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:4.41,words:1322},y:"a",t:"sql优化",i:"file",O:1},["/mysql/07 MySQL优化/sql优化.html","/mysql/07 MySQL优化/sql优化.md",":md"]],["v-fb0c9a20","/mysql/07%20MySQL%E4%BC%98%E5%8C%96/SQL%E5%92%8C%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93.html",{c:["mysql"],g:["mysql优化"],e:`<h1> SQL和索引优化总结</h1>
<p>首先我们需要知道MySQL主要是从以下3个方面进行优化：</p>
<ul>
<li>SQL语句和索引</li>
<li>应用优化（引入缓存、连接池）</li>
<li>配置参数优化</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 一、SQL语句和索引的优化</h2>
<p>当数据量比较大，若SQL语句写的不合适，会导致SQL的执行效率低，我们需要等待很长时间才能拿到结果</p>
<figure><figcaption></figcaption></figure>
<p>针对性优化的时候，</p>`,r:{minutes:7.05,words:2114},y:"a",t:"SQL和索引优化总结",i:"file",O:2},["/mysql/07 MySQL优化/SQL和索引优化总结.html","/mysql/07 MySQL优化/SQL和索引优化总结.md",":md"]],["v-403714d4","/mysql/08%20MySQL%E6%97%A5%E5%BF%97/MySQL%E9%87%8D%E5%81%9A%E6%97%A5%E5%BF%97redo%20log.html",{c:["mysql"],g:["mysql日志"],e:`<h1> MySQL重做日志redo log</h1>
<p>在事务的ACID特性中，原子性（A）、一致性（C）、持久性（D）由undo log和redo log实现，隔离性（I）由锁+MVCC实现</p>
<p><strong>undo log</strong>：<u>事务还没有commit，中途执行异常，可以使用undo log把数据恢复到事务执行前的状态，确保事务的原子性</u>
<strong>redo log</strong>：<u>事务commit成功，，此时若发生异常，就要使用redo log重新执行这一事务的SQL，<strong>确保事务的持久性</strong></u>（只要事务commit成功，不管发生什么异常事件，只要下一次MySQL服务正常进行，那上一次commit的数据一定要恢复回来）</p>`,r:{minutes:7.27,words:2180},y:"a",t:"MySQL重做日志redo log",i:"file",O:3},["/mysql/08 MySQL日志/MySQL重做日志redo log.html","/mysql/08 MySQL日志/MySQL重做日志redo log.md",":md"]],["v-f10dc5a4","/mysql/08%20MySQL%E6%97%A5%E5%BF%97/Server%20%E5%B1%82%E5%9B%9B%E4%B8%AA%E6%97%A5%E5%BF%97.html",{c:["mysql"],g:["mysql日志","数据备份"],e:`<h1> Server 层四个日志</h1>
<h2> 一、MySQL Server层日志简介</h2>
<p>一个mysql client发起一个连接请求，处理请求的过程如下图所示：</p>
<p>![](Server 层四个日志.assets/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQnVnTWFrZXItc2hlbg==,size_20,color_FFFFFF,t_70,g_se,x_16.png)</p>
<p>MySQL日志是在MySQL server上生成的，不管更改哪个存储引擎，这些日志都是需要有的，包括：</p>`,r:{minutes:9.03,words:2708},y:"a",t:"Server层四个日志",i:"file",O:3},["/mysql/08 MySQL日志/Server 层四个日志.html","/mysql/08 MySQL日志/Server 层四个日志.md",":md"]],["v-4dda2b40","/mysql/10%20MySQL%E9%9B%86%E7%BE%A4/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86.html",{c:["mysql"],g:["mysql集群"],e:`<h1> 主从复制原理</h1>
<p>在实际生产环境中，<u>如果对MySQL数据库的读和写都在一台数据库服务器中操作，无论是在安全性、高可用性，还是高并发等各个方面都是不能满足实际需求的，一般要通过数据库集群的<strong>主从复制机制来数据</strong>，再通过<strong>读写分离来提升数据库的负载能力</strong></u></p>
<h2> 主从复制概念</h2>
<p><strong>主库对外提供数据的增删改查服务，主库中涉及到数据的修改都会写binlog</strong></p>
<p>从库用来数据的同步和备份，，<strong>相当于就是主库的所有修改通过主从复制机制体现在从库上</strong></p>`,r:{minutes:5.02,words:1506},y:"a",t:"主从复制原理",i:"file",O:1},["/mysql/10 MySQL集群/主从复制原理.html","/mysql/10 MySQL集群/主从复制原理.md",":md"]],["v-1015e72b","/mysql/10%20MySQL%E9%9B%86%E7%BE%A4/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E5%8E%9F%E7%90%86.html",{c:["mysql"],g:["mysql集群"],e:`<h1> 读写分离原理</h1>
<h2> 读写分离概念</h2>
<p>基于的读写分离，是我们在单机环境下，数据库的性能到瓶颈了（），可以通过读写分离，提高后台服务性能()。存储这一块的增删改查的并发的处理能力，<strong>主库专门负责相对少的写操作，从库专门负责相对多的读操作，主库的数据更改通过主从复制同步到从库</strong></p>
<p>读写分离就是在主服务器上修改，数据会同步到从服务器，从服务器只能提供读取数据，不能写入，实现备份的同时也实现了数据库性能的优化，以及提升了服务器安全</p>
<figure><figcaption></figcaption></figure>
`,r:{minutes:4.22,words:1266},y:"a",t:"读写分离原理",i:"file",O:3},["/mysql/10 MySQL集群/读写分离原理.html","/mysql/10 MySQL集群/读写分离原理.md",":md"]],["v-afe3b5ec","/mysql/10%20MySQL%E9%9B%86%E7%BE%A4/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E9%85%8D%E7%BD%AE%E5%AE%9E%E8%B7%B5.html",{c:["mysql"],g:["mysql集群"],e:`<h1> 读写分离配置实践</h1>
<h2> 一、环境准备</h2>
<p>master（虚拟机centos7，NAT模式，固定ip）：192.168.131.129
slave（win10，路由器局域网，DHCP协议）：192.168.31.27</p>
<ol>
<li>
</li>
<li>
</li>
</ol>
<h3> 1.查看主从复制状态</h3>
<p>读写分离基于主从复制，查看主从复制状态</p>
<figure><figcaption></figcaption></figure>
<h3> 2. 查看JDK版本</h3>
<div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #abb2bf">java -version</span></span>
<span class="line"><span style="color: #abb2bf"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:10.33,words:3098},y:"a",t:"读写分离配置实践",i:"file",O:4},["/mysql/10 MySQL集群/读写分离配置实践.html","/mysql/10 MySQL集群/读写分离配置实践.md",":md"]],["v-ab0fa402","/mysql/10%20MySQL%E9%9B%86%E7%BE%A4/%E9%85%8D%E7%BD%AE%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%AE%9E%E8%B7%B5.html",{c:["mysql"],g:["mysql集群"],e:`<h1> 配置主从复制实践</h1>
<h2> 一、检测通信</h2>
<p>查看master（centos7）和slave（win10）的ip地址，并检测是否可以<strong>相互通信</strong></p>
<blockquote>
<p>我自己用的是ubuntu 22.04(master，192.168.216.136)和centos7(slave，192.168.216.137)</p>
</blockquote>
<figure><figcaption></figcaption></figure>
<p>到这里我们知道，master的ip为192.168.131.129，slave的ip为192.168.0.6，并且可以相互通信</p>`,r:{minutes:8.67,words:2601},y:"a",t:"配置主从复制实践",i:"file",O:2},["/mysql/10 MySQL集群/配置主从复制实践.html","/mysql/10 MySQL集群/配置主从复制实践.md",":md"]],["v-3ef06b8b","/mysql/06%20MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/MySQL%20MVCC%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%88%E8%84%8F%E8%AF%BB%E5%92%8C%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB%E8%A7%A3%E5%86%B3%E5%8E%9F%E7%90%86%EF%BC%89.html",{c:["mysql"],g:["mysql MVCC","mysql日志"],e:`<h1> MySQL MVCC多版本并发控制（脏读和不可重复读解决原理）</h1>
<h2> 一、MVCC概念</h2>
<p>MVCC是多版本并发控制（Multi-Version Concurrency Control），<u>是MySQL中基于<strong>乐观锁</strong>理论实现隔离级别的方式，用于实现已提交读和可重复读隔离级别</u>，也经常称为多版本数据库。MVCC机制会生成一个数据请求时间点的一致性数据快照 （Snapshot)， 并用这个快照来提供一定级别 （语句级或事务级） 的一致性读取。从用户的角度来看，好象是数据库可以提供同一数据的多个版本（系统版本号和事务版本号）</p>`,r:{minutes:9.7,words:2910},y:"a",t:"MySQL MVCC多版本并发控制（脏读和不可重复读解决原理）",i:"file",O:5},["/mysql/06 MySQL的锁机制/MySQL MVCC多版本并发控制（脏读和不可重复读解决原理）.html","/mysql/06 MySQL的锁机制/MySQL MVCC多版本并发控制（脏读和不可重复读解决原理）.md",":md"]],["v-a01dbb18","/mysql/06%20MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/MySQL%20%E6%84%8F%E5%90%91%E5%85%B1%E4%BA%AB%E9%94%81%E3%80%81%E6%84%8F%E5%90%91%E6%8E%92%E4%BB%96%E9%94%81.html",{c:["mysql"],g:["mysql锁机制"],e:`<h1> MySQL 意向共享锁、意向排他锁</h1>
<p>![image-20240420193947369](MySQL 意向共享锁、意向排他锁.assets/image-20240420193947369.png)</p>
<h2> 一、InnoDB表级锁</h2>
<p>我们知道，InnoDB是支持行锁，但不是每次都获取行锁，如果不使用索引的，那还是获取的表锁。而且有的时候，我们希望直接去使用表锁</p>
<h3> 适合使用表索的情况</h3>
<p>在绝大部分情况下都应该使用行锁，因为事务的并发效率比表锁更高，但个别情况下也使用表级锁：</p>
<ul>
<li>
<p>事务需要<strong>更新大部分或全部数据，表又比较大</strong>，如果使用默认的行锁，给大部分行都加锁（此时不如直接加表锁），不仅这个事务执行效率低，而且可能造成其他事务长时间等待和锁冲突</p>
</li>
<li>
<p><strong>事务涉及多个表</strong>，比较复杂，如果都用行锁，很可能引起死锁，造成大量事务回滚</p>
</li>
</ul>`,r:{minutes:3.61,words:1083},y:"a",t:"MySQL意向共享锁、意向排他锁",i:"file",O:6},["/mysql/06 MySQL的锁机制/MySQL 意向共享锁、意向排他锁.html","/mysql/06 MySQL的锁机制/MySQL 意向共享锁、意向排他锁.md",":md"]],["v-329074fa","/mysql/06%20MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/MySQL%E5%9B%9E%E6%BB%9A%E6%97%A5%E5%BF%97undo%20log.html",{c:["mysql"],g:["mysql日志","mysql MVCC"],e:`<h1> MySQL回滚日志undo log</h1>
<h2> 一、引入 undo log</h2>
<p>![](MySQL回滚日志undo log.assets/image-20240420132938427.png)</p>
<p>一般数据库引擎默认工作在事务的中间两个隔离级别：</p>
<ol>
<li>TRANSACTION_READ_COMMITTED，已提交读，oracle默认工作级别。不允许读取未commit的数据，这个级别仍然允许不可重复读和幻读产生。</li>
<li>TRANSACTION_REPEATABLE_READ，可重复读，MySQL默认工作级别。保证事务再次读取是依然得到相同的数据，部分解决了幻读，但幻读是仍然会出现的</li>
</ol>`,r:{minutes:5.94,words:1783},y:"a",t:"MySQL回滚日志undo log",i:"file",O:4},["/mysql/06 MySQL的锁机制/MySQL回滚日志undo log.html","/mysql/06 MySQL的锁机制/MySQL回滚日志undo log.md",":md"]],["v-1029a01f","/mysql/06%20MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/MySQL%E9%97%B4%E9%9A%99%E9%94%81%EF%BC%88%E5%B9%BB%E8%AF%BB%E8%A7%A3%E5%86%B3%E5%8E%9F%E7%90%86%EF%BC%89.html",{c:["mysql"],g:["mysql锁机制"],e:`<h1> MySQL间隙锁（幻读解决原理）</h1>
<h2> 一、间隙锁概念</h2>
<ol>
<li>当我们用范围条件而不是相等条件检索数据， 并请求共享或排他锁时，InnoDB 会给符合条件的已有数据记录的索引项加锁；对于键值在条件范围内但并不存在的记录，叫做“间隙（GAP)” ，InnoDB 也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁</li>
<li>举例来说， 假如 user 表中只有 101 条记录， 其userid 的值分别是 1,2,…,100,101， 下面的 SQL： select * from user where userid &gt; 100 for update;是一个范围条件的检索，InnoDB 不仅会对符合条件的 userid 值为 101 的记录加锁，也会对userid 大 于 101（但是这些记录并不存在）的"间隙"加锁，防止其它事务在表的末尾增加数据</li>
<li>InnoDB <strong></strong> ，对于上面的例子，要是不使用间隙锁，如果其他事务插入了 userid 大于 100 的任何记录，那么本事务如果再次执行上述语句，就会发生幻读</li>
</ol>`,r:{minutes:7.82,words:2346},y:"a",t:"MySQL间隙锁（幻读解决原理）",i:"file",O:3},["/mysql/06 MySQL的锁机制/MySQL间隙锁（幻读解决原理）.html","/mysql/06 MySQL的锁机制/MySQL间隙锁（幻读解决原理）.md",":md"]],["v-664794b6","/mysql/06%20MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/%E6%8E%92%E5%AE%83%E9%94%81%E5%92%8C%E5%85%B1%E4%BA%AB%E9%94%81.html",{c:["mysql"],g:["mysql锁机制"],e:`<h1> 排它锁和共享锁</h1>
<p><strong>排它锁</strong>（Exclusive），又称为<strong>X锁，写锁</strong>
<strong>共享锁</strong>（Shared），又称为<strong>S锁，读锁</strong></p>
，但是<p>对事务加X和S锁之间有以下的关系：</p>
<ul>
<li>
<p>一个事务对数据对象A<strong>加了 S 锁</strong>，可以对A进行但，加锁期间但</p>
</li>
<li>
<p>一个事务对数据对象A<strong>加了 X 锁</strong>，就可以对A进行，加锁期间其它事务</p>
</li>
</ul>`,r:{minutes:5.11,words:1533},y:"a",t:"排它锁和共享锁",i:"file",O:2},["/mysql/06 MySQL的锁机制/排它锁和共享锁.html","/mysql/06 MySQL的锁机制/排它锁和共享锁.md",":md"]],["v-1743001b","/mysql/06%20MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/%E6%AD%BB%E9%94%81.html",{c:["mysql"],g:["mysql锁机制"],e:`<h1> 死锁</h1>
<h2> 数据库中的死锁</h2>
<p><strong>MyISAM 表锁是 deadlock free 的</strong>， 这是因为 MyISAM 不支持事务，<u>只支持表锁，而且总是一次获得所需的全部锁，要么全部满足，要么等待，因此不会出现死锁</u>。</p>
<figure><figcaption></figcaption></figure>
<p>在 InnoDB 中，除单个 SQL 组成的事务外，锁是逐步获得的，即锁的粒度比较小（行锁），这就决定了在 InnoDB 中发生死锁是可能的</p>
<p><strong>死锁问题一般都是我们自己的应用造成的，和多线程编程的死锁情况相似</strong>，大部分都是由于我们多个线程在获取多个锁资源的时候，<strong>获取的顺序不同而导致的死锁问题</strong>。因此我们应用在对数据库的多个表做更新的时候，不同的代码段，<strong>应对这些表按，以防止锁冲突导致死锁问题</strong></p>`,r:{minutes:2.64,words:791},y:"a",t:"死锁",i:"file",O:3},["/mysql/06 MySQL的锁机制/死锁.html","/mysql/06 MySQL的锁机制/死锁.md",":md"]],["v-25bb8896","/mysql/06%20MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/%E8%A1%A8%E7%BA%A7%E9%94%81%E5%92%8C%E8%A1%8C%E7%BA%A7%E9%94%81.html",{c:["mysql"],g:["mysql锁机制"],e:`<h1> 表级锁和行级锁</h1>
<p><strong>事务隔离级别的实现原理</strong>：简单来说就是<u>各种锁机制和MVCC</u>多版本并发控制</p>
<p>我们学习知识的时候，需要了解知识点出现的原因，什么情况下能用到这个知识</p>
<p>我们说到事务，就得说到事务的ACID特性，<u>为什么需要隔离性呢？因为事务要能够允许并发执行，并发执行为了同时保证数据的<strong>安全性，一致性</strong>和<strong>并发的效率</strong>，就需要设置事务的隔离级别</u></p>
<h2> 一、事务隔离机制的选择</h2>
<figure><figcaption>image-20240419183553280</figcaption></figure>`,r:{minutes:3.07,words:920},y:"a",t:"表级锁和行级锁",i:"file",O:1},["/mysql/06 MySQL的锁机制/表级锁和行级锁.html","/mysql/06 MySQL的锁机制/表级锁和行级锁.md",":md"]],["v-5dfb342e","/mysql/06%20MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/%E8%AE%B0%E5%BD%95%E9%94%81_%E9%97%B4%E9%9A%99%E9%94%81%E5%8F%AF%E4%BB%A5%E9%98%B2%E6%AD%A2%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C%E8%80%8C%E5%AF%BC%E8%87%B4%E7%9A%84%E5%B9%BB%E8%AF%BB%E5%90%97.html",{c:["mysql"],g:["mysql锁机制"],e:`<h1> 记录锁+间隙锁可以防止删除操作而导致的幻读吗？</h1>
<h2> MySQL 是怎么解决幻读的？</h2>
<p>MySQL InnoDB 引擎的默认隔离级别虽然是「可重复读」，但是它很大程度上避免幻读现象（并不是完全解决了），解决的方案有两种：</p>
<ul>
<li>针对<strong>快照读</strong>（普通 select 语句），是<strong>通过 MVCC 方式解决了幻读</strong>，<u>因为可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，即使中途有其他事务插入了一条数据，是查询不出来这条数据的，所以就很好了避免幻读问题。</u></li>
<li>针对<strong>当前读</strong>（select … for update 等语句），是<strong>通过 next-key lock（记录锁+间隙锁）方式解决了幻读</strong>，因为当执行 select … for update 语句的时候，会加上 next-key lock，<u>如果有其他事务在 next-key lock 锁范围内插入了一条记录，那么这个插入语句就会被阻塞，无法成功插入，所以就很好了避免幻读问题</u>。</li>
</ul>`,r:{minutes:3.57,words:1071},y:"a",t:"记录锁+间隙锁可以防止删除操作而导致的幻读吗？",i:"file",O:9},["/mysql/06 MySQL的锁机制/记录锁_间隙锁可以防止删除操作而导致的幻读吗.html","/mysql/06 MySQL的锁机制/记录锁+间隙锁可以防止删除操作而导致的幻读吗.html","/mysql/06%20MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/%E8%AE%B0%E5%BD%95%E9%94%81+%E9%97%B4%E9%9A%99%E9%94%81%E5%8F%AF%E4%BB%A5%E9%98%B2%E6%AD%A2%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C%E8%80%8C%E5%AF%BC%E8%87%B4%E7%9A%84%E5%B9%BB%E8%AF%BB%E5%90%97.html","/mysql/06 MySQL的锁机制/记录锁+间隙锁可以防止删除操作而导致的幻读吗.md","/mysql/06%20MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/%E8%AE%B0%E5%BD%95%E9%94%81+%E9%97%B4%E9%9A%99%E9%94%81%E5%8F%AF%E4%BB%A5%E9%98%B2%E6%AD%A2%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C%E8%80%8C%E5%AF%BC%E8%87%B4%E7%9A%84%E5%B9%BB%E8%AF%BB%E5%90%97.md"]],["v-416fc51c","/mysql/06%20MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/%E9%94%81%E7%9A%84%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE.html",{c:["mysql"],g:["mysql锁机制"],e:`<h1> 锁的优化建议</h1>
<ul>
<li>
<p>在能正确完成业务的前提下，为确保效率，<u>尽量使用较低的隔离级别（必须避免脏读）</u></p>
</li>
<li>
<p>设计合理的索引并**引访问数据，使加锁更准确，减少锁冲突的机会，提高并发能力**</p>
</li>
<li>
<p>选择合理的事务大小，<strong>发生锁冲突的概率小</strong>（<u>事务越大，包含的SQL越多，可能包含更多的表资源和行资源的锁，增大了锁冲突的概率</u>）</p>
</li>
<li>
<p>不同的程序访问一组表时，应尽量约定<strong>以相同的访问各表</strong>，对一个表而言，尽可能<strong>以固定的顺序存取表中的行</strong>。这样可以大大减少死锁的机会</p>
</li>
<li>
<p><strong>尽量用访问数据，这样可以避免对并发插入的影响</strong>（）</p>
</li>
<li>
<p><strong>不要申请超过实际需要的锁级别</strong></p>
</li>
<li>
<p><strong>除非必须，查询时不要显示加锁</strong>（）</p>
</li>
</ul>`,r:{minutes:1.31,words:392},y:"a",t:"锁的优化建议",i:"file",O:3},["/mysql/06 MySQL的锁机制/锁的优化建议.html","/mysql/06 MySQL的锁机制/锁的优化建议.md",":md"]],["v-125a45f0","/mysql/11%20%E6%8B%93%E5%B1%95/SQL%E7%9A%84%E5%AE%8C%E6%95%B4%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.html",{c:["mysql"],g:["mysql拓展"],e:`<h1> SQL的完整处理流程</h1>
<p>mysql client和 mysql server进行通信的时候，如果走完所有的MySQL Server模块，需要依次经过连接器、解析器、优化器、执行器、存储引擎</p>
<ol>
<li><strong>连接器</strong>：使用<strong>TCP加密的ssl通信协议</strong>，<u>管理连接，控制最大连接量，检测连接时长（长时间不通信会断开，释放连接资源），权限验证（账号密码等），查询缓存（两次同样的select之间有更新操作，缓存会清空）</u></li>
<li><strong>解析器</strong>：生成语法树，<u>解析SQL词法以及语法分</u>析</li>
<li><strong>优化器</strong>：<u>生成执行计划，选择索引</u>（explain可查看）</li>
<li><strong>执行器</strong>：<u>调用存储引擎提供的相应API接口进行数据的读写</u></li>
<li><strong>存储引擎</strong>：<u>读写磁盘数据，构建B+树索引，事务日志（undo log/redo log），锁机制，隔离级别…</u></li>
</ol>`,r:{minutes:1.48,words:445},y:"a",t:"SQL的完整处理流程",i:"file",O:1},["/mysql/11 拓展/SQL的完整处理流程.html","/mysql/11 拓展/SQL的完整处理流程.md",":md"]],["v-73d634fe","/mysql/11%20%E6%8B%93%E5%B1%95/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%AE%9E%E8%B7%B5.html",{c:["mysql"],g:["mysql拓展"],e:`<h1> 分库分表实践</h1>
<h2> 一、为什么要分库分表</h2>
<p>数据库架构演变</p>
<p>刚开始多数项目用单机数据库就够了，随着服务器流量越来越大，面对的请求也越来越多，我们做了数据库读写分离， 使用多个从库副本（Slave）负责读，使用主库（Master）负责写，master和slave通过主从复制实现数据同步更新，保持数据一致。slave 从库可以水平扩展，所以更多的读请求不成问题</p>
<p>但是当用户量级上升，写请求越来越多，怎么保证数据库的负载足够？增加一个Master是不能解决问题的， 因为数据要保存一致性，写操作需要2个master之间同步，相当于是重复了，而且架构设计更加复杂</p>`,r:{minutes:7.13,words:2138},y:"a",t:"分库分表实践",i:"file",O:2},["/mysql/11 拓展/分库分表实践.html","/mysql/11 拓展/分库分表实践.md",":md"]],["v-fb24ca0e","/mysql/12%20%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E9%A1%B9.html",{c:["mysql"],g:["mysql连接池"],e:`<h1> 加载配置项</h1>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#ifndef</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_CONNECTIONPOOL_H</span></span>
<span class="line"><span style="color: #C678DD">#define</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_CONNECTIONPOOL_H</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;string&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;queue&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;mutex&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;atomic&gt;</span><span style="color: #ABB2BF">   </span><span style="color: #7F848E; font-style: italic">//atomic_int  原子类型</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"connection.h"</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::string;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::queue;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::mutex;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ConnectionPool</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">static</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ConnectionPool</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getConnectionPool</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">ConnectionPool</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">~ConnectionPool</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #C678DD">public:</span><span style="color: #7F848E; font-style: italic"> //测试的时候可以先变成共有的</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">loadConfigFile</span><span style="color: #ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">	string _ip;</span><span style="color: #7F848E; font-style: italic"> // mysql的ip地址</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">unsigned</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">short</span><span style="color: #ABB2BF"> _port;</span><span style="color: #7F848E; font-style: italic"> // mysql的端口号 3306</span></span>
<span class="line"><span style="color: #ABB2BF">	string _username;</span><span style="color: #7F848E; font-style: italic"> // mysql登录用户名</span></span>
<span class="line"><span style="color: #ABB2BF">	string _password;</span><span style="color: #7F848E; font-style: italic"> // mysql登录密码</span></span>
<span class="line"><span style="color: #ABB2BF">	string _dbname;</span><span style="color: #7F848E; font-style: italic"> // 连接的数据库名称</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _initSize;</span><span style="color: #7F848E; font-style: italic"> // 连接池的初始连接量</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _maxSize;</span><span style="color: #7F848E; font-style: italic"> // 连接池的最大连接量</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _maxIdleTime;</span><span style="color: #7F848E; font-style: italic"> // 连接池最大空闲时间</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _connectionTimeout;</span><span style="color: #7F848E; font-style: italic"> // 连接池获取连接的超时时间</span></span>
<span class="line"><span style="color: #ABB2BF">    </span></span>
<span class="line"><span style="color: #ABB2BF">    queue</span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF">Connection</span><span style="color: #56B6C2">*</span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> _connectionQue;</span><span style="color: #7F848E; font-style: italic">  // 存储mysql连接的队列</span></span>
<span class="line"><span style="color: #ABB2BF">    mutex _queueMutex;</span><span style="color: #7F848E; font-style: italic">  // 维护连接队列的线程安全互斥锁</span></span>
<span class="line"><span style="color: #ABB2BF">    std::atomic_int _connectionCnt;</span><span style="color: #7F848E; font-style: italic"> // 记录连接所创建的connection连接的总数量 </span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#endif</span><span style="color: #7F848E; font-style: italic"> //_CONNECTIONPOOL_H</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.07,words:621},y:"a",t:"加载配置项",i:"file",O:4},["/mysql/12 连接池/加载配置项.html","/mysql/12 连接池/加载配置项.md",":md"]],["v-379adba2","/mysql/12%20%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95.html",{c:["mysql"],g:["mysql连接池"],e:`<h1> 连接池压力测试</h1>
<h2> 连接池代码</h2>
<h3> <code>mysql.cnf</code>配置文件</h3>
<div class="language-ini line-numbers-mode" data-ext="ini"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">#数据库连接池的配置文件，下面和宏一样就不要加多余的空格了</span></span>
<span class="line"><span style="color: #C678DD">ip</span><span style="color: #ABB2BF">=</span><span style="color: #98C379">127.0.0.1</span></span>
<span class="line"><span style="color: #C678DD">port</span><span style="color: #ABB2BF">=</span><span style="color: #98C379">3306</span></span>
<span class="line"><span style="color: #C678DD">username</span><span style="color: #ABB2BF">=</span><span style="color: #98C379">root</span></span>
<span class="line"><span style="color: #C678DD">password</span><span style="color: #ABB2BF">=</span><span style="color: #98C379">147258</span></span>
<span class="line"><span style="color: #C678DD">dbname</span><span style="color: #ABB2BF">=</span><span style="color: #98C379">chat</span></span>
<span class="line"><span style="color: #C678DD">initSize</span><span style="color: #ABB2BF">=</span><span style="color: #98C379">10</span></span>
<span class="line"><span style="color: #C678DD">maxSize</span><span style="color: #ABB2BF">=</span><span style="color: #98C379">1024</span></span>
<span class="line"><span style="color: #98C379">// 连接池最大空闲时间默认单位是秒</span></span>
<span class="line"><span style="color: #C678DD">maxIdleTime</span><span style="color: #ABB2BF">=</span><span style="color: #98C379">60</span></span>
<span class="line"><span style="color: #98C379">// 连接池获取连接的超时时间单位是毫秒</span></span>
<span class="line"><span style="color: #C678DD">connectionTimeOut</span><span style="color: #ABB2BF">=</span><span style="color: #98C379">100</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:6.41,words:1922},y:"a",t:"连接池压力测试",i:"file",O:8},["/mysql/12 连接池/压力测试.html","/mysql/12 连接池/压力测试.md",":md"]],["v-2247d511","/mysql/12%20%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B%E9%83%A8%E5%88%86%E5%AE%9E%E7%8E%B0.html",{c:["mysql"],g:["mysql连接池"],e:`<h1> 数据库编程部分的实现</h1>
<h2> 在VS上使用MySQL的头文件和库文件的配置</h2>
<ol>
<li>
<p>右键项目 - C/C++ - 常规 - 附加包含目录，填写mysql.h头文件的路径</p>
</li>
<li>
<p>右键项目 - 链接器 - 常规 - 附加库目录，填写libmysql.lib的路径</p>
</li>
<li>
<p>右键项目 - 链接器 - 输入 - 附加依赖项，填写libmysql.lib库的名字</p>
</li>
<li>
<p>把libmysql.dll动态链接库（Linux下后缀名是.so库）放在工程目录下</p>
</li>
</ol>`,r:{minutes:1.7,words:511},y:"a",t:"数据库编程部分的实现",i:"file",O:2},["/mysql/12 连接池/数据库编程部分实现.html","/mysql/12 连接池/数据库编程部分实现.md",":md"]],["v-874c376e","/mysql/12%20%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E6%9C%80%E5%A4%A7%E7%A9%BA%E9%97%B2%E6%97%B6%E9%97%B4%E5%9B%9E%E6%94%B6%E8%BF%9E%E6%8E%A5%E6%89%AB%E6%8F%8F%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0.html",{c:["mysql"],g:["mysql连接池"],e:`<h1> 最大空闲时间回收连接扫描线程的实现</h1>
<p>给对象添加一个属性-记录时间</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">/*</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * 实现MySQL数据库的操作</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#ifndef</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_CONNECTION_H</span></span>
<span class="line"><span style="color: #C678DD">#define</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_CONNECTION_H</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;string&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;mysql/mysql.h&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;ctime&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::string;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Connection</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	// 刷新一下连接的起始的空闲时间点</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">refreshAliveTime</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">        _aliveTime </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">clock</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	// 返回存活的时间</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">clock_t</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getAliveTime</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">clock</span><span style="color: #ABB2BF">() </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> _aliveTime;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">    MYSQL</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> _conn;</span><span style="color: #7F848E; font-style: italic">    //表示和MySQL的一条连接</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">clock_t</span><span style="color: #ABB2BF"> _aliveTime;</span><span style="color: #7F848E; font-style: italic"> // 记录进入空闲状态后的起始存活时间</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#endif</span><span style="color: #7F848E; font-style: italic">  // _CONNECTION_H</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.03,words:1208},y:"a",t:"最大空闲时间回收连接扫描线程的实现",i:"file",O:3},["/mysql/12 连接池/最大空闲时间回收连接扫描线程的实现.html","/mysql/12 连接池/最大空闲时间回收连接扫描线程的实现.md",":md"]],["v-5e84d900","/mysql/12%20%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E6%A6%82%E8%BF%B0.html",{c:["mysql"],g:["mysql连接池"],e:`<h1> 概述</h1>
<h2> 关键技术点</h2>
<p>MySQL数据库编程、单例模式、queue队列容器、C++11多线程编程、线程互斥、线程同步通信和
unique_lock、基于CAS的原子整形、智能指针shared_ptr、lambda表达式、生产者-消费者线程模型</p>
<h2> 项目背景</h2>
<p><u>索引和数据都是存储在磁盘</u>上，提高MySQL数据库（<u>基于C/S设计，服务器应用相当于MySQL Client，通过既定的API将SQL语句发送给MySQL Server，然后执行处理流程CRUD,然后再通过结果返回给服务器应用</u>）的访问瓶颈：</p>`,r:{minutes:4.87,words:1461},y:"a",t:"概述",i:"file",O:1},["/mysql/12 连接池/概述.html","/mysql/12 连接池/概述.md",":md"]],["v-51fa1311","/mysql/12%20%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E6%B6%88%E8%B4%B9%E8%80%85%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0.html",{c:["mysql"],g:["mysql连接池"],e:`<h1> 消费者线程的实现</h1>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">//消费者线程函数，从队列中获取连接</span></span>
<span class="line"><span style="color: #E5C07B">shared_ptr</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">Connection</span><span style="color: #ABB2BF">&gt; </span><span style="color: #E5C07B">ConnectionPool</span><span style="color: #ABB2BF">::</span><span style="color: #61AFEF">getConnection</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">    unique_lock</span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF">mutex</span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">lock</span><span style="color: #ABB2BF">(_queueMutex);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">_connectionQue</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">()) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">cond</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">wait_for</span><span style="color: #ABB2BF">(lock, std::</span><span style="color: #E5C07B">chrono</span><span style="color: #ABB2BF">::</span><span style="color: #61AFEF">milliseconds</span><span style="color: #ABB2BF">(_connectionTimeout));</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">_connectionQue</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">()) {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #61AFEF">LOG</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"获取空闲连接超时了...获取连接失败!"</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        } </span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span></span>
<span class="line"><span style="color: #ABB2BF">    shared_ptr</span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF">Connection</span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">sp</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">_connectionQue</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">front</span><span style="color: #ABB2BF">());</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">_connectionQue</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">pop</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">_connectionQue</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">()) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">cond</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">notify_all</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.98,words:593},y:"a",t:"消费者线程的实现",i:"file",O:6},["/mysql/12 连接池/消费者线程的实现.html","/mysql/12 连接池/消费者线程的实现.md",":md"]],["v-47e7636c","/mysql/12%20%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E7%94%9F%E4%BA%A7%E8%80%85%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0.html",{c:["mysql"],g:["mysql连接池"],e:`<h1> 生产者线程的实现</h1>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#ifndef</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_CONNECTIONPOOL_H</span></span>
<span class="line"><span style="color: #C678DD">#define</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_CONNECTIONPOOL_H</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;string&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;queue&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;mutex&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;atomic&gt;</span><span style="color: #ABB2BF">   </span><span style="color: #7F848E; font-style: italic">//atomic_int  原子类型</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;memory&gt;</span><span style="color: #ABB2BF">	</span><span style="color: #7F848E; font-style: italic">//shared_ptr</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;thread&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;condition_variable&gt;</span><span style="color: #ABB2BF">	</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;functional&gt;</span><span style="color: #ABB2BF">	</span><span style="color: #7F848E; font-style: italic">//bind</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"connection.h"</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::string;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::queue;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::mutex;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::thread;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::atomic_int;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::shared_ptr;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::bind;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::condition_variable;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::unique_lock;</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ConnectionPool</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	// 获取连接池对象实例</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">static</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ConnectionPool</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getConnectionPool</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	// 给外部提供接口，从连接池中获取一个可用的空闲连接</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">shared_ptr</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">Connection</span><span style="color: #ABB2BF">&gt; </span><span style="color: #61AFEF">getConnection</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">ConnectionPool</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">~ConnectionPool</span><span style="color: #ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#ifdef</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">TEST_LOAD_CONFIG_FILE</span></span>
<span class="line"><span style="color: #C678DD">public:</span><span style="color: #7F848E; font-style: italic"> //测试的时候可以先变成共有的</span></span>
<span class="line"><span style="color: #C678DD">#endif</span><span style="color: #7F848E; font-style: italic">	//TEST_LOAD_CONFIG_FILE</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">loadConfigFile</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">	</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	// 运行在独立的线程中，专门负责生产新连接</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	//之所以写成成员函数而不是全局函数，是因为可以更好访问成员变量</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">produceConnectionTask</span><span style="color: #ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">	string _ip;</span><span style="color: #7F848E; font-style: italic"> // mysql的ip地址</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">unsigned</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">short</span><span style="color: #ABB2BF"> _port;</span><span style="color: #7F848E; font-style: italic"> // mysql的端口号 3306</span></span>
<span class="line"><span style="color: #ABB2BF">	string _username;</span><span style="color: #7F848E; font-style: italic"> // mysql登录用户名</span></span>
<span class="line"><span style="color: #ABB2BF">	string _password;</span><span style="color: #7F848E; font-style: italic"> // mysql登录密码</span></span>
<span class="line"><span style="color: #ABB2BF">	string _dbname;</span><span style="color: #7F848E; font-style: italic"> // 连接的数据库名称</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _initSize;</span><span style="color: #7F848E; font-style: italic"> // 连接池的初始连接量</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _maxSize;</span><span style="color: #7F848E; font-style: italic"> // 连接池的最大连接量</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _maxIdleTime;</span><span style="color: #7F848E; font-style: italic"> // 连接池最大空闲时间</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _connectionTimeout;</span><span style="color: #7F848E; font-style: italic"> // 连接池获取连接的超时时间</span></span>
<span class="line"><span style="color: #ABB2BF">    </span></span>
<span class="line"><span style="color: #ABB2BF">    queue</span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF">Connection</span><span style="color: #56B6C2">*</span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> _connectionQue;</span><span style="color: #7F848E; font-style: italic">  // 存储mysql连接的队列</span></span>
<span class="line"><span style="color: #ABB2BF">    mutex _queueMutex;</span><span style="color: #7F848E; font-style: italic">  // 维护连接队列的线程安全互斥锁</span></span>
<span class="line"><span style="color: #ABB2BF">    atomic_int _connectionCnt;</span><span style="color: #7F848E; font-style: italic"> // 记录连接所创建的connection连接的总数量 </span></span>
<span class="line"><span style="color: #ABB2BF">	condition_variable cond;</span><span style="color: #7F848E; font-style: italic">	// 设置条件变量，用于连接生产线程和连接消费线程的通信</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#endif</span><span style="color: #7F848E; font-style: italic"> //_CONNECTIONPOOL_H</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3,words:899},y:"a",t:"生产者线程的实现",i:"file",O:5},["/mysql/12 连接池/生产者线程的实现.html","/mysql/12 连接池/生产者线程的实现.md",":md"]],["v-f00ce0e0","/mysql/12%20%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5.html",{c:["mysql"],g:["mysql连接池"],e:`<h1> 连接池单例模式实践</h1>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">//饿汉式 线程安全的单例</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ConnectionPool</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">static</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ConnectionPool</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getConnectionPool</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">ConnectionPool</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">~ConnectionPool</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 线程安全的懒汉单例函数接口</span></span>
<span class="line"><span style="color: #E5C07B">ConnectionPool</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ConnectionPool</span><span style="color: #ABB2BF">::</span><span style="color: #61AFEF">getConnectionPool</span><span style="color: #ABB2BF">() {</span><span style="color: #7F848E; font-style: italic"> //静态函数的实现，不写static</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">static</span><span style="color: #ABB2BF"> ConnectionPool pool;</span><span style="color: #7F848E; font-style: italic"> //静态局部变量的初始化，编译器会生成lock和unlock</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">pool;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.83,words:1149},y:"a",t:"连接池单例模式实践",i:"file",O:3},["/mysql/12 连接池/连接池单例模式实践.html","/mysql/12 连接池/连接池单例模式实践.md",":md"]],["v-18b96408","/mysql/09%20%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/mysqldump%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD.html",{c:["mysql"],g:["数据备份"],e:`<h1> mysqldump数据备份</h1>
<p>在远程服务器，所以我们一般都是通过命令mysqldump进行备份</p>
<figure><figcaption></figcaption></figure>
<p>导出建库建表的SQL：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">mysqldump</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-u</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">用户名</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-p111111</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">--all-databases</span><span style="color: #ABB2BF"> &gt; </span><span style="color: #98C379">~/all.sql</span><span style="color: #ABB2BF">          </span><span style="color: #7F848E; font-style: italic"># 导出所有的库</span></span>
<span class="line"><span style="color: #61AFEF">mysqldump</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-u</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">用户名</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-p111111</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">--databases</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">school</span><span style="color: #ABB2BF"> &gt; </span><span style="color: #98C379">~/school.sql</span><span style="color: #ABB2BF">    </span><span style="color: #7F848E; font-style: italic"># 导出school库</span></span>
<span class="line"><span style="color: #61AFEF">mysqldump</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-u</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">用户名</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-p111111</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">--databases</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">db1</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">db2</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">db3</span><span style="color: #ABB2BF"> &gt; </span><span style="color: #98C379">~/dbs.sql</span><span style="color: #ABB2BF">    </span><span style="color: #7F848E; font-style: italic"># 导出多个库</span></span>
<span class="line"><span style="color: #61AFEF">mysqldump</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-u</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">用户名</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-p111111</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">school</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">stu</span><span style="color: #ABB2BF"> &gt; </span><span style="color: #98C379">~/stu.sql</span><span style="color: #ABB2BF">               </span><span style="color: #7F848E; font-style: italic"># 导出school库下的stu表</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.91,words:573},y:"a",t:"mysqldump数据备份",i:"file",O:2},["/mysql/09 数据备份/mysqldump数据备份.html","/mysql/09 数据备份/mysqldump数据备份.md",":md"]],["v-0072b68a","/algo/01%20%E6%95%B0%E7%BB%84/344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.html",{c:["数据结构与算法"],g:["数组","双指针","字符串"],e:`<p><a href="https://leetcode.cn/problems/reverse-string/" target="_blank" rel="noopener noreferrer">leetcode344. 反转字符串</a></p>
<p><strong>题目描述</strong>：编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>s</code> 的形式给出。</p>
<p>不要给另外的数组分配额外的空间，你必须<strong>原地修改输入数组</strong>、使用 O(1) 的额外空间解决这一问题。</p>
<blockquote>
<p>**原地算法（in-place algorithm）**基本上不需要额外辅助的数据结构,然而,允许少量额外的辅助变量来转换数据的算法。当算法运行时，输入的数据通常会被要输出的部分覆盖掉，</p>
</blockquote>`,r:{minutes:.97,words:290},y:"a",t:"leetcode 344. 反转字符串",i:"code",O:7},["/algo/01 数组/344.反转字符串.html","/algo/01 数组/344.反转字符串.md",":md"]],["v-4a6b903e","/algo/01%20%E6%95%B0%E7%BB%84/905.%20%E6%8C%89%E5%A5%87%E5%81%B6%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84.html",{c:["数据结构与算法"],g:["数组","双指针"],e:`<p><a href="https://leetcode.cn/problems/sort-array-by-parity/" target="_blank" rel="noopener noreferrer">Leetcode 905. 按奇偶排序数组</a></p>
<p><strong>题目描述</strong>：整形数组，把偶数调整到数组的左边，把奇数调整到数组的右边</p>
<!--more-->
<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">ajustArray</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #E06C75"> </span><span style="color: #E06C75; font-style: italic">arr</span><span style="color: #C678DD">[]</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> </span><span style="color: #C678DD">int</span><span style="color: #E06C75"> </span><span style="color: #E06C75; font-style: italic">len</span><span style="color: #ABB2BF">)</span><span style="color: #7F848E; font-style: italic">   // 整形数组，把偶数调整到数组的左边，把奇数调整到数组的右边</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> left </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> right </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> len </span><span style="color: #C678DD">-</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(left </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> right) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(left </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> right </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> (</span><span style="color: #E06C75">arr</span><span style="color: #ABB2BF">[right] </span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">0x</span><span style="color: #D19A66">01</span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">) {</span><span style="color: #7F848E; font-style: italic">//位操作一定加括号</span></span>
<span class="line"><span style="color: #ABB2BF">            right</span><span style="color: #C678DD">--</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(left </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> right </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> (</span><span style="color: #E06C75">arr</span><span style="color: #ABB2BF">[left] </span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">0x</span><span style="color: #D19A66">01</span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">            left</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(left </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> right) {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #61AFEF">std::swap</span><span style="color: #ABB2BF">(</span><span style="color: #E06C75">arr</span><span style="color: #ABB2BF">[left],</span><span style="color: #E06C75">arr</span><span style="color: #ABB2BF">[right]);</span></span>
<span class="line"><span style="color: #ABB2BF">            left</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">            right</span><span style="color: #C678DD">--</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">arr</span><span style="color: #ABB2BF">[</span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> {</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">};  </span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">srand</span><span style="color: #ABB2BF">(</span><span style="color: #61AFEF">time</span><span style="color: #ABB2BF">(nullptr));</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">; i</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E06C75">arr</span><span style="color: #ABB2BF">[i] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">rand</span><span style="color: #ABB2BF">()</span><span style="color: #C678DD">%</span><span style="color: #D19A66">100</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(auto i : arr) {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">" "</span><span style="color: #ABB2BF"> ;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">ajustArray</span><span style="color: #ABB2BF">(arr, </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(auto i : arr) {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">" "</span><span style="color: #ABB2BF"> ;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">} </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.88,words:265},y:"a",t:"Leetcode 905. 按奇偶排序数组",i:"code",O:6},["/algo/01 数组/905. 按奇偶排序数组.html","/algo/01 数组/905. 按奇偶排序数组.md",":md"]],["v-92d2378e","/algo/01%20%E6%95%B0%E7%BB%84/LeetCode%20209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html",{c:["数据结构与算法"],g:["数组","双指针","滑动窗口"],u:!1,e:`<p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/" target="_blank" rel="noopener noreferrer">LeetCode 209.长度最小的子数组</a></p>
<p><strong>题目描述：<strong>给定</strong>正整数</strong>数组nums和<strong>正整数</strong>target，找<strong>和&gt;=target</strong>的<strong>长度最小</strong>的**连续子数组；**找到返回其长度，找不到返回0；</p>`,r:{minutes:.96,words:289},y:"a",t:"LeetCode 209.长度最小的子数组",i:"code",O:4},["/algo/01 数组/LeetCode 209.长度最小的子数组.html","/algo/01 数组/LeetCode 209.长度最小的子数组.md",":md"]],["v-3945022c","/algo/01%20%E6%95%B0%E7%BB%84/LeetCode%2027.%20%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html",{c:["数据结构与算法"],g:["数组","双指针"],e:`<p><a href="https://leetcode.cn/problems/remove-element/" target="_blank" rel="noopener noreferrer">LeetCode 27. 移除元素</a></p>
<p>**题目描述：**数组nums中<u>原地</u>移除值为val的元素，返回新数组长度</p>
<p>双指针：一层查找，一层覆盖</p>
<!--more-->
<p>双指针：一层查找，一层覆盖</p>
<blockquote>
<ul>
<li>
<p>通过这道题大致了解<code>erase()</code>的大致实现</p>
</li>
<li>
<p>由这道题可知<code>erase()</code>函数的时间复杂度应是<code>O(n)</code></p>
</li>
</ul>
</blockquote>`,r:{minutes:1.64,words:493},y:"a",t:"LeetCode 27. 移除元素",i:"code",O:2},["/algo/01 数组/LeetCode 27. 移除元素.html","/algo/01 数组/LeetCode 27. 移除元素.md",":md"]],["v-0edaacb7","/algo/01%20%E6%95%B0%E7%BB%84/LeetCode%2059.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5%E2%85%A1.html",{c:["数据结构与算法"],g:["数组"],e:`<p><a href="https://leetcode.cn/problems/spiral-matrix-ii/" target="_blank" rel="noopener noreferrer">LeetCode 59.螺旋矩阵Ⅱ</a></p>
<p>**题目描述：**给定正整数n，将1到n²按顺时针顺序填入n×n的正方形矩阵，返回该矩阵。</p>
<figure><figcaption>img</figcaption></figure>
<ul>
<li><strong>循环不变量</strong>：考虑每一圈的四条边按<strong>左闭右开</strong>进行处理</li>
</ul>`,r:{minutes:1.35,words:406},y:"a",t:"LeetCode 59.螺旋矩阵Ⅱ",i:"code",O:5},["/algo/01 数组/LeetCode 59.螺旋矩阵Ⅱ.html","/algo/01 数组/LeetCode 59.螺旋矩阵Ⅱ.md",":md"]],["v-8fe9fd22","/algo/01%20%E6%95%B0%E7%BB%84/LeetCode%20704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html",{c:["数据结构与算法"],g:["二分查找","数组"],e:`<p><a href="https://leetcode.cn/problems/binary-search/" target="_blank" rel="noopener noreferrer">LeetCode 704.二分查找</a></p>
<p><strong>题目描述</strong>：有序数组nums，查找target，成功返回下标，失败返回-1</p>
<!--more-->
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">binarySearch</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt; </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">target</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> left </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> right </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(left </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> right) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> middle </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> left </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> (right </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> left) </span><span style="color: #56B6C2">/</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[middle] </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> target) {</span></span>
<span class="line"><span style="color: #ABB2BF">            left </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> middle </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">( </span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[middle] </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> target) {</span><span style="color: #7F848E; font-style: italic">// 注意==，而不是=</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> middle;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #ABB2BF">            right </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> middle;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">-</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.6,words:180},y:"a",t:"LeetCode 704.二分查找",i:"code",O:1},["/algo/01 数组/LeetCode 704.二分查找.html","/algo/01 数组/LeetCode 704.二分查找.md",":md"]],["v-69d65be6","/algo/01%20%E6%95%B0%E7%BB%84/LeetCode%20977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.html",{c:["数据结构与算法"],g:["数组","双指针"],e:`<p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/submissions/" target="_blank" rel="noopener noreferrer">LeetCode 977.有序数组的平方</a></p>
<p>**题目描述：**非递减数组nums，将各元素平方按非递减顺序排列，返回新数组</p>
<ul>
<li>思路：
<ul>
<li>nums元素组成可能为：①全正；②全负；③有正有负；</li>
<li>对于有正有负的情况，需要比较负数平方与正数平方，才能决定在新数组中的位置</li>
<li>用一个指针扫描负数，一个指针扫描正数，①②可合并到③（一个指针始终未更新）</li>
</ul>
</li>
</ul>`,r:{minutes:.96,words:288},y:"a",t:"LeetCode 977.有序数组的平方",i:"code",O:3},["/algo/01 数组/LeetCode 977.有序数组的平方.html","/algo/01 数组/LeetCode 977.有序数组的平方.md",":md"]],["v-a277331a","/algo/01%20%E6%95%B0%E7%BB%84/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%80%BB%E7%BB%93.html",{c:["数据结构与算法"],g:["数组","二分查找"],e:`<h1> 二分查找总结</h1>
<h2> 使用条件：</h2>
<p>线性表是有序表</p>
<blockquote>
<p>二分查找要求数据结构必须是顺序表，也就是类似于数组的<u>连续存储</u>，因为只有这样<u>才能一下定位出数组的中间位置（直接使用类似a[len / 2]）</u>，然后就可以把数组一分为二，进行后面的操作。
但是对于<u>链表，由于存储是离散的，不能像数组一样，快速定位中间位置，来把链表一分为二，所以一般的二分查找不能直接应用于链表</u></p>
</blockquote>
<!--more-->
<h2> 基础版</h2>
<h3> 左闭右闭</h3>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">binary_search</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt; </span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">target</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> start</span><span style="color: #C678DD">=</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">, end</span><span style="color: #C678DD">=</span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">()</span><span style="color: #56B6C2">-</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic"> //注意end</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(start </span><span style="color: #C678DD">&lt;=</span><span style="color: #ABB2BF"> end) {</span><span style="color: #7F848E; font-style: italic">	//注意循环条件</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> mid </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> start</span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF">(end</span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF">start)</span><span style="color: #56B6C2">/</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">	//计算中间下标</span></span>
<span class="line"><span style="color: #ABB2BF">    	</span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[mid] </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> target)</span><span style="color: #7F848E; font-style: italic"> 	//如果找到了，就返回下标</span></span>
<span class="line"><span style="color: #ABB2BF">        	</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> mid;</span></span>
<span class="line"><span style="color: #ABB2BF">    	</span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[mid] </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> target) start</span><span style="color: #C678DD">=</span><span style="color: #ABB2BF">mid</span><span style="color: #56B6C2">+</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">	//如果发现这个数比目标数字小，就说明左半边都没有，直接从mid+1开始</span></span>
<span class="line"><span style="color: #ABB2BF">    	</span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> end</span><span style="color: #C678DD">=</span><span style="color: #ABB2BF">mid</span><span style="color: #56B6C2">-</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">	//如果发现这个数比目标数字大，就说明右半边都没有，直接从mid-1开始</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.28,words:985},y:"a",t:"二分查找总结",i:"file",O:2},["/algo/01 数组/二分查找总结.html","/algo/01 数组/二分查找总结.md",":md"]],["v-2e7fb111","/algo/01%20%E6%95%B0%E7%BB%84/%E6%95%B0%E7%BB%84%E5%9F%BA%E7%A1%80.html",{c:["数据结构与算法"],g:["数组","基础知识"],e:`<h1> 数组基础</h1>
<p><strong>特点</strong>：内存是<u>连续</u>的</p>
<ul>
<li>
<p><strong>优点</strong></p>
<ul>
<li><u>下标访问（随机访问）</u>时间复杂度是<code>O(1)</code></li>
<li><u>末尾位置增加/删除</u>元素时间复杂度是<code>O(1)</code></li>
<li><u>访问</u>元素前后相邻位置的元素非常方便</li>
</ul>
</li>
<li>
<p><strong>缺点</strong></p>
<ul>
<li>
<p>非末尾位置增加/删除元素需要进行大量的数据移动<code>O(n)</code></p>
</li>
<li>
<p>搜索的时间复杂度</p>
<ul>
<li>无序数组-线性搜索<code>O(n)</code></li>
<li>有序数组-二分搜索<code>O(logn)</code></li>
</ul>
</li>
<li>
<p>数组扩容消耗比较大</p>
<ul>
<li>扩容</li>
</ul>
</li>
</ul>
</li>
</ul>`,r:{minutes:2.29,words:687},y:"a",t:"数组基础",i:"file",O:1},["/algo/01 数组/数组基础.html","/algo/01 数组/数组基础.md",":md"]],["v-75ce370a","/algo/01%20%E6%95%B0%E7%BB%84/%E6%9F%A5%E6%89%BEN%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E5%85%AC%E5%85%B1%E5%85%83%E7%B4%A0.html",{c:["数据结构与算法"],g:["数组"],e:`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;vector&gt;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;unordered_set&gt;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cout;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::endl;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cin;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::vector;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::unordered_set;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> //因为set比数组占用的空间大，并且set把数值映射到key都要做hash计算，速度也比数组慢</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> //如果数组数值范围可控可以使用数组做hash</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> M </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">20</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">   //数值的范围</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt; </span><span style="color: #61AFEF">getIntersection3</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums1</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums2</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">     unordered_set</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> result_set;</span><span style="color: #7F848E; font-style: italic">  //给结果去重</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">hashTable</span><span style="color: #ABB2BF">[M] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> {</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">};</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> num : nums1) {</span></span>
<span class="line"><span style="color: #ABB2BF">         </span><span style="color: #E5C07B">hashTable</span><span style="color: #ABB2BF">[num] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">     }</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> num : nums2) {</span></span>
<span class="line"><span style="color: #ABB2BF">         </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">hashTable</span><span style="color: #ABB2BF">[num] </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">             </span><span style="color: #E5C07B">result_set</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">insert</span><span style="color: #ABB2BF">(num);</span></span>
<span class="line"><span style="color: #ABB2BF">         }</span></span>
<span class="line"><span style="color: #ABB2BF">     }</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">vector</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">result_set</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">begin</span><span style="color: #ABB2BF">(), </span><span style="color: #E5C07B">result_set</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">end</span><span style="color: #ABB2BF">());</span></span>
<span class="line"><span style="color: #ABB2BF"> }</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">vec</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i : vec) {</span></span>
<span class="line"><span style="color: #ABB2BF">         cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">' '</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">     }</span></span>
<span class="line"><span style="color: #ABB2BF">     cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF"> }</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">     vector</span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF">vector</span><span style="color: #C678DD">&lt;int&gt;&gt;</span><span style="color: #ABB2BF"> arr </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> { {</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">4</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">6</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">7</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">8</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">9</span><span style="color: #ABB2BF">},{</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">4</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">6</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">7</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">9</span><span style="color: #ABB2BF">},{</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">4</span><span style="color: #ABB2BF">,  </span><span style="color: #D19A66">4</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">4</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">6</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">6</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">7</span><span style="color: #ABB2BF">},{</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">4</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">6</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">7</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">8</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">9</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">},{</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">4</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">4</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">6</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">8</span><span style="color: #ABB2BF">} };</span></span>
<span class="line"><span style="color: #ABB2BF">     vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> ret </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getIntersection3</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">arr</span><span style="color: #ABB2BF">[</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">],</span><span style="color: #E5C07B">arr</span><span style="color: #ABB2BF">[</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">]);</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">arr</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">(); </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">i) {</span></span>
<span class="line"><span style="color: #ABB2BF">         ret </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getIntersection3</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">arr</span><span style="color: #ABB2BF">[i], ret);</span></span>
<span class="line"><span style="color: #ABB2BF">     }</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(ret);</span></span>
<span class="line"><span style="color: #ABB2BF"> }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.01,words:303},y:"a",t:"查找N个数组的公共元素",i:"file",O:13},["/algo/01 数组/查找N个数组的公共元素.html","/algo/01 数组/查找N个数组的公共元素.md",":md"]],["v-1f0c41ec","/algo/01%20%E6%95%B0%E7%BB%84/%E6%9F%A5%E6%89%BE%E4%B8%89%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E5%85%AC%E5%85%B1%E5%85%83%E7%B4%A0.html",{c:["数据结构与算法"],g:["数组"],e:`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;vector&gt;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;unordered_set&gt;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cout;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::endl;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cin;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::vector;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::unordered_set;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> //因为set比数组占用的空间大，并且set把数值映射到key都要做hash计算，速度也比数组慢</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> //如果数组数值范围可控可以使用数组做hash</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> M </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">20</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">   //数值的范围</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt; </span><span style="color: #61AFEF">getIntersection3</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums1</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums2</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">     unordered_set</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> result_set;</span><span style="color: #7F848E; font-style: italic">  //给结果去重</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">hashTable</span><span style="color: #ABB2BF">[M] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> {</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">};</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> num : nums1) {</span></span>
<span class="line"><span style="color: #ABB2BF">         </span><span style="color: #E5C07B">hashTable</span><span style="color: #ABB2BF">[num] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">     }</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> num : nums2) {</span></span>
<span class="line"><span style="color: #ABB2BF">         </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">hashTable</span><span style="color: #ABB2BF">[num] </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">             </span><span style="color: #E5C07B">result_set</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">insert</span><span style="color: #ABB2BF">(num);</span></span>
<span class="line"><span style="color: #ABB2BF">         }</span></span>
<span class="line"><span style="color: #ABB2BF">     }</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">vector</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">result_set</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">begin</span><span style="color: #ABB2BF">(), </span><span style="color: #E5C07B">result_set</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">end</span><span style="color: #ABB2BF">());</span></span>
<span class="line"><span style="color: #ABB2BF"> }</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">  </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">vec</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i : vec) {</span></span>
<span class="line"><span style="color: #ABB2BF">         cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">' '</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">     }</span></span>
<span class="line"><span style="color: #ABB2BF">     cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF"> }</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">       vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> v1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> { </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">4</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">8</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">9</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">11</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">13</span><span style="color: #ABB2BF"> };</span></span>
<span class="line"><span style="color: #ABB2BF">       vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> v2 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> { </span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">6</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">7</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">7</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">8</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">9</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">12</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">12</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">13</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">13</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">14</span><span style="color: #ABB2BF"> };</span></span>
<span class="line"><span style="color: #ABB2BF">       vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> v3 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> { </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">4</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">6</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">7</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">7</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">8</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">9</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">14</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">14</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">17</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">18</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">20</span><span style="color: #ABB2BF"> };</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">       //print(v1);</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">       //print(v2);</span></span>
<span class="line"><span style="color: #ABB2BF">   </span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">       //vector&lt;int&gt; ret = getIntersection(v1, v2);</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">       //print(ret);</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">       //vector&lt;int&gt; ret2 = getIntersection2(v1, v2);</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">       //print(ret2);</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">       //vector&lt;int&gt; ret3 = getIntersection3(v1, v2);</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">       //print(ret3);</span></span>
<span class="line"><span style="color: #ABB2BF">   </span></span>
<span class="line"><span style="color: #ABB2BF">       cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"----------------三个有序数组的各个元素为"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">       </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(v1);</span></span>
<span class="line"><span style="color: #ABB2BF">       </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(v2);</span></span>
<span class="line"><span style="color: #ABB2BF">       </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(v3);</span></span>
<span class="line"><span style="color: #ABB2BF">       vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> temp </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getIntersection2</span><span style="color: #ABB2BF">(v1, v2);</span></span>
<span class="line"><span style="color: #ABB2BF">       vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> ret4 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getIntersection2</span><span style="color: #ABB2BF">(temp, v3);</span></span>
<span class="line"><span style="color: #ABB2BF">       </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(ret4);</span></span>
<span class="line"><span style="color: #ABB2BF">       </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">   }</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.15,words:346},y:"a",t:"查找三个数组的公共元素",i:"file",O:12},["/algo/01 数组/查找三个数组的公共元素.html","/algo/01 数组/查找三个数组的公共元素.md",":md"]],["v-98398990","/algo/01%20%E6%95%B0%E7%BB%84/%E6%9F%A5%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E5%85%AC%E5%85%B1%E5%85%83%E7%B4%A0.html",{c:["数据结构与算法"],g:["数组","双指针","哈希"],e:`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;vector&gt;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;unordered_set&gt;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cout;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::endl;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cin;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::vector;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::unordered_set;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> //查找两个有序数组的公共部分</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> //不去重版本</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt; </span><span style="color: #61AFEF">getIntersection</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums1</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums2</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">     vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> result;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> p1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> p2 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(p1 </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">nums1</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">() </span><span style="color: #56B6C2">||</span><span style="color: #ABB2BF"> p2 </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">nums2</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">()) {</span></span>
<span class="line"><span style="color: #ABB2BF">         </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">nums1</span><span style="color: #ABB2BF">[p1] </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">nums2</span><span style="color: #ABB2BF">[p2]) {</span></span>
<span class="line"><span style="color: #ABB2BF">             </span><span style="color: #E5C07B">result</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push_back</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">nums1</span><span style="color: #ABB2BF">[p1]);</span></span>
<span class="line"><span style="color: #ABB2BF">             </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">p1;</span></span>
<span class="line"><span style="color: #ABB2BF">             </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">p2;</span></span>
<span class="line"><span style="color: #ABB2BF">         }   </span></span>
<span class="line"><span style="color: #ABB2BF">         </span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">nums1</span><span style="color: #ABB2BF">[p1] </span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">nums2</span><span style="color: #ABB2BF">[p2]) {</span></span>
<span class="line"><span style="color: #ABB2BF">             </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">p2;</span></span>
<span class="line"><span style="color: #ABB2BF">         }   </span></span>
<span class="line"><span style="color: #ABB2BF">         </span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #ABB2BF">             </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">p1;</span></span>
<span class="line"><span style="color: #ABB2BF">         }   </span></span>
<span class="line"><span style="color: #ABB2BF">     }   </span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> result;</span></span>
<span class="line"><span style="color: #ABB2BF"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">vec</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i : vec) {</span></span>
<span class="line"><span style="color: #ABB2BF">         cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">' '</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">     }</span></span>
<span class="line"><span style="color: #ABB2BF">     cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF"> }</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">     vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> v1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> { </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">4</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">8</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">9</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">11</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">13</span><span style="color: #ABB2BF"> };</span></span>
<span class="line"><span style="color: #ABB2BF">     vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> v2 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> { </span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">6</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">7</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">7</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">8</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">9</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">12</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">12</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">13</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">13</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">14</span><span style="color: #ABB2BF"> };</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(v1);</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(v2);</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">     vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> ret </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getIntersection</span><span style="color: #ABB2BF">(v1, v2);</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(ret);</span></span>
<span class="line"><span style="color: #ABB2BF">     vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> ret2 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getIntersection2</span><span style="color: #ABB2BF">(v1, v2);</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(ret2);</span></span>
<span class="line"><span style="color: #ABB2BF">     vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> ret3 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getIntersection3</span><span style="color: #ABB2BF">(v1, v2);</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(ret3);</span></span>
<span class="line"><span style="color: #ABB2BF"> }   </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.47,words:442},y:"a",t:"查找两个有序数组的公共部分",i:"file",O:11},["/algo/01 数组/查找两个数组的公共元素.html","/algo/01 数组/查找两个数组的公共元素.md",":md"]],["v-752e9b82","/algo/01%20%E6%95%B0%E7%BB%84/%E6%9F%A5%E6%89%BE%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E5%85%83%E7%B4%A0.html",{c:["数据结构与算法"],g:["数组"],e:`<h1> <a href="https://leetcode.cn/problems/majority-element/" target="_blank" rel="noopener noreferrer">169. 多数元素 - 力扣（LeetCode）</a></h1>
<p>给定一个大小为 <code>n</code> 的数组 <code>nums</code> ，返回其中的多数元素。多数元素是指在数组中出现次数 <strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素。</p>
<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>
<h2> 方法一</h2>`,r:{minutes:.77,words:232},y:"a",t:"查找出现次数超过一半的元素",i:"file",O:14},["/algo/01 数组/查找出现次数超过一半的元素.html","/algo/01 数组/查找出现次数超过一半的元素.md",":md"]],["v-c01690d8","/algo/01%20%E6%95%B0%E7%BB%84/%E6%9F%A5%E6%89%BE%E6%9C%80%E5%A4%A7%E5%92%8C%E6%AC%A1%E5%A4%A7%E7%9A%84%E5%85%83%E7%B4%A0.html",{c:["数据结构与算法"],g:["数组"],e:`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;vector&gt;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;climits&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #7F848E; font-style: italic">//INT_MIN</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cout;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::endl;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::vector;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">find1and2big</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">big1</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">big2</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">         </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">     }</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">     big1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> INT_MIN;</span></span>
<span class="line"><span style="color: #ABB2BF">     big2 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> INT_MIN;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> num : nums) {</span></span>
<span class="line"><span style="color: #ABB2BF">         </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(num </span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> big1) {</span></span>
<span class="line"><span style="color: #ABB2BF">             big2 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> big1;</span></span>
<span class="line"><span style="color: #ABB2BF">             big1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> num;</span></span>
<span class="line"><span style="color: #ABB2BF">         }</span></span>
<span class="line"><span style="color: #ABB2BF">         </span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(num </span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> big2 </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> num </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> big1) {</span></span>
<span class="line"><span style="color: #ABB2BF">             big2 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> num;</span></span>
<span class="line"><span style="color: #ABB2BF">         }</span></span>
<span class="line"><span style="color: #ABB2BF">     }</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(big2 </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> INT_MIN) {</span></span>
<span class="line"><span style="color: #ABB2BF">         cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"数组中所有元素都相同或数组大小小于2，无法找到次大值"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">     }</span></span>
<span class="line"><span style="color: #ABB2BF"> }</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">     vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> vec </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> {</span><span style="color: #D19A66">12</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">13</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">34</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">};</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i : vec) {</span></span>
<span class="line"><span style="color: #ABB2BF">         cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">' '</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">     }</span></span>
<span class="line"><span style="color: #ABB2BF">     cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> big1, big2;</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #61AFEF">find1and2big</span><span style="color: #ABB2BF">(vec, big1, big2);</span></span>
<span class="line"><span style="color: #ABB2BF">     cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> big1 </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">' '</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> big2 </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF"> }                                                                            </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.64,words:193},y:"a",t:"查找最大和次大的元素",i:"file",O:13},["/algo/01 数组/查找最大和次大的元素.html","/algo/01 数组/查找最大和次大的元素.md",":md"]],["v-152dfd8d","/algo/02%20%E9%93%BE%E8%A1%A8/234.%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8.html",{c:["数据结构与算法"],g:["链表","数组","双指针"],e:`<p><a href="https://leetcode.cn/problems/palindrome-linked-list/" target="_blank" rel="noopener noreferrer">Leetcode 234. 回文链表</a></p>
<p><strong>题目描述</strong>：给你一个单链表的头节点 <code>head</code> ，请你判断该链表是否为回文链表。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<!--more-->
<h2> 方法一：数组+双指针</h2>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">/**</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * struct ListNode {</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     int val;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode *next;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode() : val(0), next(nullptr) {}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode(int x) : val(x), next(nullptr) {}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode(int x, ListNode *next) : val(x), next(next) {}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * };</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Solution</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">isPalindrome</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">ListNode</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">head</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">        vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> vec;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> p </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> head; p </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">; p </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">p</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">) {</span><span style="color: #7F848E; font-style: italic">//O(n)</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">vec</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push_back</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">p</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">val</span><span style="color: #ABB2BF">);</span><span style="color: #7F848E; font-style: italic">	//空间复杂度O(n)</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">,  j </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vec</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">() </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> j; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">i, </span><span style="color: #C678DD">--</span><span style="color: #ABB2BF">j) {</span><span style="color: #7F848E; font-style: italic">	//O(n/2)</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vec</span><span style="color: #ABB2BF">[i] </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vec</span><span style="color: #ABB2BF">[j]) {</span></span>
<span class="line"><span style="color: #ABB2BF">                </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">            }</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">true</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.5,words:749},y:"a",t:"Leetcode 234. 回文链表",i:"code",O:13},["/algo/02 链表/234.回文链表.html","/algo/02 链表/234.回文链表.md",":md"]],["v-735dfe06","/algo/02%20%E9%93%BE%E8%A1%A8/LeetCode%20203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.html",{c:["数据结构与算法"],g:["链表","虚拟头结点"],e:`<p><a href="https://leetcode.cn/problems/remove-linked-list-elements/" target="_blank" rel="noopener noreferrer">LeetCode 203.移除链表元素</a></p>
<p><strong>题目描述</strong>：给定链表头节点head和整数val，删除所有值为val的节点 ，返回新的头节点</p>
<!--more-->
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">/**</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * struct ListNode {</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     int val;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode *next;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode() : val(0), next(nullptr) {}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode(int x) : val(x), next(nullptr) {}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode(int x, ListNode *next) : val(x), next(next) {}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * };</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Solution</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">ListNode</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">removeElements</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">ListNode</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">head</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">val</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">       ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> dummyHead </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">ListNode</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">, head);</span></span>
<span class="line"><span style="color: #ABB2BF">       ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> cur </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> dummyHead;</span></span>
<span class="line"><span style="color: #ABB2BF">       </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">cur</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">           </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">cur</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E5C07B">next</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">val</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> val) {</span><span style="color: #7F848E; font-style: italic">	//cur-&gt;next-&gt;val不是cur-&gt;next.val</span></span>
<span class="line"><span style="color: #ABB2BF">               ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> temp </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">cur</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">               </span><span style="color: #E5C07B">cur</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">cur</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E5C07B">next</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">               </span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF"> temp;</span></span>
<span class="line"><span style="color: #ABB2BF">               temp </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">           }</span></span>
<span class="line"><span style="color: #ABB2BF">           </span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #ABB2BF">               cur </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">cur</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">           }</span></span>
<span class="line"><span style="color: #ABB2BF">       }</span></span>
<span class="line"><span style="color: #ABB2BF">       head </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">dummyHead</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">       </span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF"> dummyHead;</span></span>
<span class="line"><span style="color: #ABB2BF">       dummyHead </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">       </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> head;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.96,words:287},y:"a",t:"LeetCode 203.移除链表元素",i:"code",O:1},["/algo/02 链表/LeetCode 203.移除链表元素.html","/algo/02 链表/LeetCode 203.移除链表元素.md",":md"]],["v-d977ced4","/algo/02%20%E9%93%BE%E8%A1%A8/leetcode%2021.%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8.html",{c:["数据结构与算法"],g:["链表","虚拟头结点","双指针"],e:`<p><a href="https://leetcode.cn/problems/merge-two-sorted-lists/" target="_blank" rel="noopener noreferrer">21. 合并两个有序链表</a></p>
<p>**题目表述：**将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。<u>新链表是通过拼接给定的两个链表的所有节点组成的。</u></p>
<blockquote>
<p>注意：读清题意，不是用新的链表</p>
</blockquote>
<!--more-->
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">/**</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * struct ListNode {</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     int val;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode *next;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode() : val(0), next(nullptr) {}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode(int x) : val(x), next(nullptr) {}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode(int x, ListNode *next) : val(x), next(next) {}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * };</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Solution</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">ListNode</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">mergeTwoLists</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">ListNode</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">list1</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">ListNode</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">list2</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">        ListNode </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">dummyHead </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">ListNode</span><span style="color: #ABB2BF">(</span><span style="color: #56B6C2">-</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        ListNode </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">res </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> dummyHead;</span></span>
<span class="line"><span style="color: #ABB2BF">        ListNode </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">p1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> list1;</span></span>
<span class="line"><span style="color: #ABB2BF">        ListNode </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">p2 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> list2;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(p1 </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> p2 </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">            // ListNode* newNode = nullptr;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">p1</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">val</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">p2</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">val</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">                //newNode = new ListNode(p1-&gt;val,nullptr);</span></span>
<span class="line"><span style="color: #ABB2BF">                </span><span style="color: #E5C07B">res</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> p1;</span></span>
<span class="line"><span style="color: #ABB2BF">                p1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">p1</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">	//记得让p1往前走一位</span></span>
<span class="line"><span style="color: #ABB2BF">            }</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">                // newNode = new ListNode(p2-&gt;val, nullptr);</span></span>
<span class="line"><span style="color: #ABB2BF">                </span><span style="color: #E5C07B">res</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> p2;</span></span>
<span class="line"><span style="color: #ABB2BF">                p2 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">p2</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">            }</span></span>
<span class="line"><span style="color: #ABB2BF">            res </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">res</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">//让新链表的指针往前走一位</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">            // res-&gt;next = newNode;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">            // res = res-&gt;next;</span></span>
<span class="line"><span style="color: #ABB2BF">        } </span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(p1 </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">) {</span><span style="color: #7F848E; font-style: italic">	//if判断哪个还有剩，不需要while遍历后面的所有的结点</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">            // ListNode* newNode = new ListNode(p1-&gt;val);</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">            // res-&gt;next = newNode;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">            // res = res-&gt;next;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">res</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> p1;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(p2 </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">            // ListNode* newNode = new ListNode(p2-&gt;val);</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">            // res-&gt;next = newNode;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">            // res = res-&gt;next;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">res</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> p2;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> head </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">dummyHead</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF"> dummyHead;</span></span>
<span class="line"><span style="color: #ABB2BF">        dummyHead </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> head;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.21,words:362},y:"a",t:"leetcode 21. 合并两个有序链表",i:"code",O:3},["/algo/02 链表/leetcode 21. 合并两个有序链表.html","/algo/02 链表/leetcode 21. 合并两个有序链表.md",":md"]],["v-64506cc7","/algo/02%20%E9%93%BE%E8%A1%A8/leetcode141.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8(%E5%88%A4%E6%96%AD%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF).html",{c:["数据结构与算法"],g:["链表","双指针"],e:`<p><a href="https://leetcode.cn/problems/linked-list-cycle/" target="_blank" rel="noopener noreferrer">leetcode 141. 环形链表 (<strong>判断链表是否有环</strong>)</a></p>
<p>判断链表是否包含环属于经典问题了，解决方案也是用：</p>
<p>每当慢指针 <code>slow</code> 前进一步，快指针 <code>fast</code> 就前进两步。如果 <code>fast</code> 最终遇到空指针，说明链表中没有环；如果 <code>fast</code> 最终和 <code>slow</code> 相遇，那肯定是 <code>fast</code> 超过了 <code>slow</code> 一圈（<strong>相对静止</strong>），说明链表中含有环。</p>`,r:{minutes:.93,words:278},y:"a",t:"leetcode 141. 环形链表 (判断链表是否有环)",i:"code",O:9},["/algo/02 链表/leetcode141.环形链表(判断链表是否有环).html","/algo/02 链表/leetcode141.环形链表(判断链表是否有环).md",":md"]],["v-13ade0aa","/algo/02%20%E9%93%BE%E8%A1%A8/Leetcode142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II(%E6%9F%A5%E6%89%BE%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3%E5%9C%B0%E5%9D%80).html",{c:["数据结构与算法"],g:["链表","双指针"],e:`<p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/" target="_blank" rel="noopener noreferrer">Leetcode 142. 环形链表 II (查找环的入口地址)</a></p>
<p>**题目描述：**给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 <em>如果链表无环，则返回 <code>null</code>。</em></p>
<!--more-->
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">/**</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * struct ListNode {</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     int val;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode *next;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode(int x) : val(x), next(NULL) {}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * };</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Solution</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">ListNode</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #61AFEF">detectCycle</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">ListNode</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #E06C75; font-style: italic">head</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">       ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> fast </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> head;</span></span>
<span class="line"><span style="color: #ABB2BF">	    ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> slow </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> head;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">        // 快指针到尾部时停止</span></span>
<span class="line"><span style="color: #ABB2BF">	    </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(fast </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">fast</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">        // 慢指针走一步，快指针走两步</span></span>
<span class="line"><span style="color: #ABB2BF">		    fast </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">fast</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E5C07B">next</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">		    slow </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">slow</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">        // 快慢指针相遇，说明含有环</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(fast </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF">  slow) {</span></span>
<span class="line"><span style="color: #ABB2BF">			    slow </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> head;</span></span>
<span class="line"><span style="color: #ABB2BF">                </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(fast </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> slow) {</span></span>
<span class="line"><span style="color: #ABB2BF">                    fast </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">fast</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">                    slow </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">slow</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">                }</span></span>
<span class="line"><span style="color: #ABB2BF">                </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> slow;</span></span>
<span class="line"><span style="color: #ABB2BF">		    }</span></span>
<span class="line"><span style="color: #ABB2BF">	    }</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	    // 不包含环</span></span>
<span class="line"><span style="color: #ABB2BF">	    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">; </span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.8,words:241},y:"a",t:"Leetcode 142. 环形链表 II (查找环的入口地址)",i:"code",O:10},["/algo/02 链表/Leetcode142.环形链表II(查找环的入口地址).html","/algo/02 链表/Leetcode142.环形链表II(查找环的入口地址).md",":md"]],["v-641d44d2","/algo/02%20%E9%93%BE%E8%A1%A8/leetcode160.%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8(%E5%88%A4%E6%96%AD%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E7%9B%B8%E4%BA%A4).html",{c:["数据结构与算法"],g:["链表","双指针"],e:`<p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/" target="_blank" rel="noopener noreferrer">leetcode 160. 相交链表 (<strong>判断链表是否相交</strong>)</a></p>
<p>**题目描述：**给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 <code>null</code> 。</p>
<!--more-->`,r:{minutes:1.69,words:508},y:"a",t:"leetcode 160. 相交链表 (判断链表是否相交)",i:"code",O:11},["/algo/02 链表/leetcode160.相交链表(判断链表是否相交).html","/algo/02 链表/leetcode160.相交链表(判断链表是否相交).md",":md"]],["v-8a944abe","/algo/02%20%E9%93%BE%E8%A1%A8/Leetcode19.%20%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B9.html",{c:["数据结构与算法"],g:["链表","双指针"],e:`<p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="noopener noreferrer">Leetcode 19. 删除链表的倒数第 N 个结点</a></p>
<p>**题目描述：**给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p>
<p>**关键：**fast首先走n + 1步 ，为什么是n+1呢，因为只有这样同时移动的时候slow才能指向删除节点的上一个节点（方便做删除操作）</p>
<!--more-->`,r:{minutes:1.39,words:416},y:"a",t:"Leetcode 19. 删除链表的倒数第 N 个结点",i:"code",O:7},["/algo/02 链表/Leetcode19. 删除链表的倒数第N个结点.html","/algo/02 链表/Leetcode19. 删除链表的倒数第N个结点.md",":md"]],["v-703548b8","/algo/02%20%E9%93%BE%E8%A1%A8/leetcode206.%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.html",{c:["数据结构与算法"],g:["链表"],e:`<p><a href="https://leetcode.cn/problems/reverse-linked-list/" target="_blank" rel="noopener noreferrer">leetcode 206. 反转链表</a></p>
<p>**题目描述：**给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p>
<!--more-->
<p>方法一：虚拟头结点+头插法</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Solution</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">ListNode</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">reverseList</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">ListNode</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">head</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(head </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> dummyHead </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">ListNode</span><span style="color: #ABB2BF">(</span><span style="color: #56B6C2">-</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">, head);</span></span>
<span class="line"><span style="color: #ABB2BF">        ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> p1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> dummyHead;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">( p1 </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">p1</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">) {</span><span style="color: #7F848E; font-style: italic">    //头插</span></span>
<span class="line"><span style="color: #ABB2BF">            ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> temp </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">p1</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">p1</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">dummyHead</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">dummyHead</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> p1;</span></span>
<span class="line"><span style="color: #ABB2BF">            p1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> temp;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(p1 </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">) {</span><span style="color: #7F848E; font-style: italic">//最后一个结点</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">p1</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">dummyHead</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">head</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> p1;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.83,words:249},y:"a",t:"leetcode 206. 反转链表",i:"code",O:12},["/algo/02 链表/leetcode206.反转链表.html","/algo/02 链表/leetcode206.反转链表.md",":md"]],["v-711b4cec","/algo/02%20%E9%93%BE%E8%A1%A8/Leetcode23.%20%E5%90%88%E5%B9%B6%20K%20%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8.html",{c:["数据结构与算法"],g:["链表","分治思想","双指针","优先队列"],e:`<p><a href="https://leetcode.cn/problems/merge-k-sorted-lists/" target="_blank" rel="noopener noreferrer">Leetcode 23. 合并 K 个升序链表</a></p>
<p>**题目描述：**给你一个链表数组，每个链表都已经按升序排列。请你将所有链表合并到一个升序链表中，返回合并后的链表。</p>
<!--more-->
<h3> 分治思想</h3>
<h4> 方法一：顺序合并</h4>
<p><strong>两两合并</strong>，用一个变量res 来维护以及合并的链表，第 i 次循环把第 i 个链表和res合并，答案保存到 res 中。</p>`,r:{minutes:3.72,words:1117},y:"a",t:"Leetcode 23. 合并 K 个升序链表",i:"code",O:5},["/algo/02 链表/Leetcode23. 合并 K 个升序链表.html","/algo/02 链表/Leetcode23. 合并 K 个升序链表.md",":md"]],["v-fb458a48","/algo/02%20%E9%93%BE%E8%A1%A8/leetcode61.%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8.html",{c:["数据结构与算法"],g:["链表","双指针"],e:`<p><a href="https://leetcode.cn/problems/rotate-list/" target="_blank" rel="noopener noreferrer">Leetcode 61. 旋转链表</a></p>
<p>给你一个链表的头节点 <code>head</code> ，旋转链表，将链表每个节点向右移动 <code>k</code> 个位置。</p>
<!--more-->
<figure><figcaption>img</figcaption></figure>
<p><strong>思路</strong>：</p>
<ol>
<li>计算链表长度</li>
<li>找到 k取模链表长度 (k % length) 开始的子链表</li>
<li>拼接子链表和原链表(被截取后的部分)</li>
</ol>`,r:{minutes:.95,words:285},y:"a",t:"Leetcode 61.旋转链表.md",i:"code",O:14},["/algo/02 链表/leetcode61.旋转链表.html","/algo/02 链表/leetcode61.旋转链表.md",":md"]],["v-67248f78","/algo/02%20%E9%93%BE%E8%A1%A8/LeetCode707.html",{c:["数据结构与算法"],g:["链表"],e:`<p><a href="https://leetcode.cn/problems/design-linked-list/" target="_blank" rel="noopener noreferrer">LeetCode 707.设计链表</a></p>
<p><strong>题目描述</strong>：在链表类中实现这些功能：</p>
<ol>
<li>get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。</li>
<li>addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。</li>
<li>addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。</li>
<li>addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。</li>
<li>deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。</li>
</ol>`,r:{minutes:3.12,words:937},y:"a",t:"LeetCode 707.设计链表",i:"code",O:2},["/algo/02 链表/LeetCode707.html","/algo/02 链表/LeetCode707.md",":md"]],["v-db839be2","/algo/02%20%E9%93%BE%E8%A1%A8/leetcode86.%20%E5%88%86%E9%9A%94%E9%93%BE%E8%A1%A8%EF%BC%88%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%86%E8%A7%A3%EF%BC%89.html",{c:["数据结构与算法"],g:["链表","双指针"],e:`<p><a href="https://leetcode.cn/problems/partition-list/" target="_blank" rel="noopener noreferrer">leetcode 86. 分隔链表（<strong>链表的分解</strong>）</a></p>
<p>给你一个链表的头节点 <code>head</code> 和一个特定值 <code>x</code> ，请你对链表进行分隔，使得所有 <strong>小于</strong> <code>x</code> 的节点都出现在 <strong>大于或等于</strong> <code>x</code> 的节点之前。</p>`,r:{minutes:1.68,words:505},y:"a",t:"leetcode 86. 分隔链表（链表的分解）",i:"code",O:4},["/algo/02 链表/leetcode86. 分隔链表（链表的分解）.html","/algo/02 链表/leetcode86. 分隔链表（链表的分解）.md",":md"]],["v-16787a3c","/algo/02%20%E9%93%BE%E8%A1%A8/Leetcode876.%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E7%BB%93%E7%82%B9.html",{c:["数据结构与算法"],g:["双指针","链表"],e:`<p><a href="https://leetcode.cn/problems/middle-of-the-linked-list/" target="_blank" rel="noopener noreferrer">Leetcode 876. 链表的中间结点</a></p>
<p>**题目描述：**给你单链表的头结点 <code>head</code> ，请你找出并返回链表的中间结点。<u>如果有两个中间结点，则返回第二个中间结点。</u></p>
<!--more-->
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">/**</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * struct ListNode {</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     int val;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode *next;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode() : val(0), next(nullptr) {}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode(int x) : val(x), next(nullptr) {}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode(int x, ListNode *next) : val(x), next(next) {}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * };</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Solution</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">ListNode</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">middleNode</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">ListNode</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">head</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">        ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> dummyHead </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">ListNode</span><span style="color: #ABB2BF">(</span><span style="color: #56B6C2">-</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">, head);</span></span>
<span class="line"><span style="color: #ABB2BF">        ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> fast </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> dummyHead;</span></span>
<span class="line"><span style="color: #ABB2BF">        ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> slow </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> dummyHead;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(fast</span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">fast</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">            fast </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">fast</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E5C07B">next</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">            slow </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">slow</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(fast </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">fast</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">            slow </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">slow</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> slow;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.91,words:272},y:"a",t:"Leetcode 876. 链表的中间结点",i:"code",O:8},["/algo/02 链表/Leetcode876.链表的中间结点.html","/algo/02 链表/Leetcode876.链表的中间结点.md",":md"]],["v-a323322a","/algo/02%20%E9%93%BE%E8%A1%A8/leetcode92.%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8II.html",{c:["数据结构与算法"],g:["链表","双指针"],e:`<p><a href="https://leetcode.cn/problems/reverse-linked-list-ii/" target="_blank" rel="noopener noreferrer">leetcode 92. 反转链表 II</a></p>
<p>给你单链表的头指针 <code>head</code> 和两个整数 <code>left</code> 和 <code>right</code> ，其中 <code>left &lt;= right</code> 。请你反转从位置 <code>left</code> 到位置 <code>right</code> 的链表节点，返回 <strong>反转后的链表</strong> 。</p>`,r:{minutes:1.8,words:539},y:"a",t:"leetcode 92. 反转链表 II",i:"code",O:13},["/algo/02 链表/leetcode92.反转链表II.html","/algo/02 链表/leetcode92.反转链表II.md",":md"]],["v-4e6f8416","/algo/02%20%E9%93%BE%E8%A1%A8/%E6%9F%A5%E6%89%BE%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B9.html",{c:["数据结构与算法"],g:["链表","双指针"],e:`<h1> 查找链表中倒数第N个结点</h1>
<!--more-->
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #E5C07B">ListNode</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">findFromEnd</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">ListNode</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">list</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">n</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">	ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> fast </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> list;</span></span>
<span class="line"><span style="color: #ABB2BF">	ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> slow </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> list;</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(fast </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> n</span><span style="color: #C678DD">--</span><span style="color: #ABB2BF">) {</span><span style="color: #7F848E; font-style: italic">	//先走N步</span></span>
<span class="line"><span style="color: #ABB2BF">		fast </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">fast</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(fast) {</span><span style="color: #7F848E; font-style: italic">	//当fast为空时 slow刚好指在目标元素上</span></span>
<span class="line"><span style="color: #ABB2BF">		fast </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">fast</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">		slow </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">slow</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> slow;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.46,words:138},y:"a",t:"查找链表中倒数第N个结点",i:"code",O:6},["/algo/02 链表/查找链表中倒数第N个结点.html","/algo/02 链表/查找链表中倒数第N个结点.md",":md"]],["v-ebfa549c","/algo/02%20%E9%93%BE%E8%A1%A8/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E9%97%AE%E9%A2%98.html",{c:["数据结构与算法"],g:["链表","循环链表"],e:`<h1> 约瑟夫环问题</h1>
<h2> 情景一</h2>
<p>约瑟夫环是一个数学的应用问题：已知<code>n</code>个人（以编号<code>1，2，3...n</code>分别表示）围坐在一张圆桌周围，从
编号为<code>k</code>的人开始报数，数到<code>m</code>的那个人出列，它的下一个人又从<code>1</code>开始报数，数到<code>m</code>的那个人又出列，
依此规律重复下去，直到圆桌周围的人全部出列，输出人的出列顺序。</p>
<!--more-->
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cout;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">struct</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Node</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _data;</span></span>
<span class="line"><span style="color: #ABB2BF">    Node</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> _next;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">Node</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">data</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">Node</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">) : </span><span style="color: #61AFEF">_data</span><span style="color: #ABB2BF">(data), </span><span style="color: #61AFEF">_next</span><span style="color: #ABB2BF">(next) {}</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">josephRing</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">n</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">k</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">m</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    //创建循环链表</span></span>
<span class="line"><span style="color: #ABB2BF">    Node</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> head </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Node</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    Node</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> p </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> head;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;=</span><span style="color: #ABB2BF"> n; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">i) {</span></span>
<span class="line"><span style="color: #ABB2BF">        Node</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> newNode </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Node</span><span style="color: #ABB2BF">(i);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">p</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">_next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> newNode;</span></span>
<span class="line"><span style="color: #ABB2BF">        p </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">p</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">_next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">p</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">_next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> head;</span><span style="color: #7F848E; font-style: italic">    //p指向尾结点</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    //先走k步</span></span>
<span class="line"><span style="color: #ABB2BF">    Node</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> q </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> head;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> k; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">i) {</span></span>
<span class="line"><span style="color: #ABB2BF">        p </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> q;</span></span>
<span class="line"><span style="color: #ABB2BF">        q </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">q</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">_next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span><span style="color: #7F848E; font-style: italic">   //结束后q指向第K个人</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> m; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">i) {</span></span>
<span class="line"><span style="color: #ABB2BF">            p </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> q;</span></span>
<span class="line"><span style="color: #ABB2BF">            q </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">q</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">_next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span><span style="color: #7F848E; font-style: italic">//q指向第m人</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">q</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">_data</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">" "</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">( p </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> q) {</span><span style="color: #7F848E; font-style: italic">//只剩最后一个结点</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF"> q;</span></span>
<span class="line"><span style="color: #ABB2BF">            cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">p</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">_next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">q</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">_next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        	</span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF"> q;</span></span>
<span class="line"><span style="color: #ABB2BF">        	q </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">p</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">_next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">josephRing</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">8</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">josephRing</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">8</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.1,words:630},y:"a",t:"约瑟夫环问题",i:"code",O:15},["/algo/02 链表/约瑟夫环问题.html","/algo/02 链表/约瑟夫环问题.md",":md"]],["v-08a1ce30","/algo/02%20%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E5%9F%BA%E7%A1%80.html",{c:["数据结构与算法"],g:["基础知识","链表"],e:`<h1> 链表基础知识</h1>
<p><strong>特点</strong>：每一个<u>节点</u>都是在堆内存上<u>独立</u>new出来的，节点<u>内存不连续</u></p>
<ul>
<li>优点
<ul>
<li>内存利用率高，不需要大块连续内存</li>
<li>插入和删除节点不需要移动其它节点，时间复杂度O(1)</li>
<li>不需要专门进行扩容操作</li>
</ul>
</li>
<li>缺点
<ul>
<li>内存占用量大，每一个节点多出存放地址的空间</li>
<li>节点内存不连续，无法进行内存随机访问</li>
<li>链表搜索效率不高，只能从头节点开始逐节点遍历</li>
</ul>
</li>
</ul>`,r:{minutes:4.54,words:1363},y:"a",t:"链表基础知识",i:"file",O:1},["/algo/02 链表/链表基础.html","/algo/02 链表/链表基础.md",":md"]],["v-24f2d5ba","/network/",{r:{minutes:.05,words:15},y:"a",t:"计算机网络",i:"laptop-code"},["/network/README.md"]],["v-450e8862","/network/TCP%E5%92%8CUDP%E7%9A%84%E5%8C%BA%E5%88%AB.html",{c:["使用指南"],g:["页面配置","使用指南"],e:`<h1> tcp（传输控制协议）与udp（用户数据报协议）的区别：</h1>
<p>1.二者的区别本质上就是tcp提供的一些控制功能，控制就 需要有一些状态 而维护状态就需要连接，所以tcp是面向连接的而udp是不需要连接的。
2.Tcp提供的控制首先就是可靠传输，而udp是尽最大努力交付，不保证可靠交付数据
3.为了重传的效率更高二者分片也不同，tcp的数据大小如果大于MSS大小，则会在传输层进行分片，，如果中途丢失了一个分片，传输丢失的这个分片即可， udp的数据大小如果大于mtu大小，则会在ip层进行分片
4.TCP还有拥塞控制和流量控制 udp则没有
5.要实现这么多控制所以tcp首部长度较长，会有一定的开销，首部在没有使用选项字段时是20个字节，udp首部只有8个字节<br>
6.Udp既然没那么多控制功能，也是有好处的 udp支持一对一，一对多，多对多的通信 而tcp则是一对一的两点服务<br>
7.最后就是二者的传输方式   TCP 是流式传输，没有边界，但保证顺序和可靠。UDP 是一个包一个包的发送，是有边界的，但可能会丢包和乱序。</p>`,r:{minutes:1.53,words:458},y:"a",t:"TCP和UDP的区别",i:"file",O:3},["/network/TCP和UDP的区别.html","/network/TCP和UDP的区别.md",":md"]],["v-74d93789","/algo/%E5%A0%86/%E4%B8%8A%E6%BB%A4.html",{c:["使用指南"],g:["页面配置","使用指南"],e:`<h1> 上滤操作</h1>
<p>用于往堆内插入数据</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">//nums 待插入的数组</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//pos 待插入的下标</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//val 待插入的值</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">upAdjust</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">pos</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">val</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(pos </span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">) {</span><span style="color: #7F848E; font-style: italic"> //最多计算到根节点</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> parent </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> (pos </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">) </span><span style="color: #56B6C2">/</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(val </span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[parent]) {</span><span style="color: #7F848E; font-style: italic">	//如果本身为大根堆，调整使用&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[pos] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[parent];</span></span>
<span class="line"><span style="color: #ABB2BF">        	pos </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> parent;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">break</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">   	//把val放到i的位置</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[pos] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> val;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.57,words:171},y:"a",t:"上滤",i:"file",O:3},["/algo/堆/上滤.html","/algo/堆/上滤.md",":md"]],["v-155542a2","/algo/03%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/1.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html",{c:["数据结构与算法"],g:["哈希","双指针"],e:`<p><a href="https://leetcode.cn/problems/two-sum/" target="_blank" rel="noopener noreferrer">1. 两数之和</a></p>
<p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>`,r:{minutes:1.34,words:403},y:"a",t:"leetcode 1. 两数之和",i:"code",O:10},["/algo/03 哈希算法/1. 两数之和.html","/algo/03 哈希算法/1. 两数之和.md",":md"]],["v-6e9dbc4c","/algo/03%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/128.%20%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97.html",{c:["数据结构与算法"],g:["哈希"],e:`<p><a href="https://leetcode.cn/problems/longest-consecutive-sequence/" target="_blank" rel="noopener noreferrer">128. 最长连续序列</a></p>
<p>给定一个未排序的整数数组 <code>nums</code> ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</p>
<p>请你设计并实现时间复杂度为 <code>O(n)</code> 的算法解决此问题。</p>
<p><strong>示例 1：</strong></p>
<div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #abb2bf">输入：nums = [100,4,200,1,3,2]</span></span>
<span class="line"><span style="color: #abb2bf">输出：4</span></span>
<span class="line"><span style="color: #abb2bf">解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4。</span></span>
<span class="line"><span style="color: #abb2bf"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.92,words:277},y:"a",t:"leetcode 128. 最长连续序列",i:"code",O:7},["/algo/03 哈希算法/128. 最长连续序列.html","/algo/03 哈希算法/128. 最长连续序列.md",":md"]],["v-cdbdf9f8","/algo/03%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/15.%20%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html",{c:["数据结构与算法"],g:["哈希","双指针"],e:`<p><a href="https://leetcode.cn/problems/3sum/" target="_blank" rel="noopener noreferrer">15. 三数之和</a></p>
<p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请</p>`,r:{minutes:4.02,words:1207},y:"a",t:"leetcode 15. 三数之和",i:"code",O:12},["/algo/03 哈希算法/15. 三数之和.html","/algo/03 哈希算法/15. 三数之和.md",":md"]],["v-21edb74e","/algo/03%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/167.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%20II%20-%20%E8%BE%93%E5%85%A5%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84.html",{c:["数据结构与算法"],g:["哈希","二分查找","双指针"],e:`<p><a href="https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/" target="_blank" rel="noopener noreferrer">167. 两数之和 II - 输入有序数组</a></p>
<p>给你一个下标从 <strong>1</strong> 开始的整数数组 <code>numbers</code> ，该数组已按 <strong>非递减顺序排列</strong> ，请你从数组中找出满足相加之和等于目标数 <code>target</code> 的两个数。如果设这两个数分别是 <code>numbers[index1]</code> 和 <code>numbers[index2]</code> ，则 <code>1 &lt;= index1 &lt; index2 &lt;= numbers.length</code> 。</p>`,r:{minutes:1.96,words:589},y:"a",t:"leetcode 167. 两数之和 II - 输入有序数组",i:"code",O:11},["/algo/03 哈希算法/167. 两数之和 II - 输入有序数组.html","/algo/03 哈希算法/167. 两数之和 II - 输入有序数组.md",":md"]],["v-525b6569","/algo/03%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/202.%20%E5%BF%AB%E4%B9%90%E6%95%B0.html",{c:["数据结构与算法"],g:["哈希","双指针"],e:`<p><a href="https://leetcode.cn/problems/happy-number/" target="_blank" rel="noopener noreferrer">leetcode 202. 快乐数</a></p>
<p>编写一个算法来判断一个数 <code>n</code> 是不是快乐数。</p>
<p><strong>「快乐数」</strong> 定义为：</p>
<ul>
<li>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。</li>
<li>然后重复这个过程直到这个数变为 1，也可能是 <strong>无限循环</strong> 但始终变不到 1。</li>
<li>如果这个过程 <strong>结果为</strong> 1，那么这个数就是快乐数。</li>
</ul>`,r:{minutes:1.83,words:550},y:"a",t:"leetcode 202. 快乐数",i:"code",O:9},["/algo/03 哈希算法/202. 快乐数.html","/algo/03 哈希算法/202. 快乐数.md",":md"]],["v-30fc6476","/algo/03%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/217.%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0.html",{c:["数据结构与算法"],g:["哈希表"],e:`<p><a href="https://leetcode.cn/problems/contains-duplicate/" target="_blank" rel="noopener noreferrer">leetcode 217. 存在重复元素</a></p>
<p><strong>题目描述</strong>：给定一个整数数组，判断是否存在重复元素。</p>
<p>如果任意一值在数组中出现至少两次，函数返回 true 。如果数组中每个元素都不相同，则返回 false 。</p>
<!--more-->
<h2> 方法一</h2>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Solution</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">containsDuplicate</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">        unordered_set</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> set;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">auto</span><span style="color: #ABB2BF"> i : nums) {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">set</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">find</span><span style="color: #ABB2BF">(i) </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">set</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">end</span><span style="color: #ABB2BF">()) {</span></span>
<span class="line"><span style="color: #ABB2BF">                </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">true</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">            }</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #ABB2BF">                </span><span style="color: #E5C07B">set</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">insert</span><span style="color: #ABB2BF">(i);</span></span>
<span class="line"><span style="color: #ABB2BF">            }</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.82,words:247},y:"a",t:"Leetcode 217.存在重复元素",i:"code",O:3},["/algo/03 哈希算法/217.存在重复元素.html","/algo/03 哈希算法/217.存在重复元素.md",":md"]],["v-30a803f7","/algo/03%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/219.%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%20II.html",{c:["数据结构与算法"],g:["哈希表"],e:`<p><a href="https://leetcode.cn/problems/contains-duplicate-ii/" target="_blank" rel="noopener noreferrer">leetcode 219. 存在重复元素 II</a></p>
<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，判断数组中是否存在两个 <strong>不同的索引</strong> <code>i</code> 和 <code>j</code> ，满足 <code>nums[i] == nums[j]</code> 且 <code>abs(i - j) &lt;= k</code> 。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>`,r:{minutes:.63,words:188},y:"a",t:"leetcode 219. 存在重复元素 II",i:"code",O:4},["/algo/03 哈希算法/219.存在重复元素 II.html","/algo/03 哈希算法/219.存在重复元素 II.md",":md"]],["v-115ac7e7","/algo/03%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/220.%20%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%20III.html",{c:["数据结构与算法"],g:["哈希表","二分查找","滑动窗口"],e:`<p><a href="https://leetcode.cn/problems/contains-duplicate-iii/" target="_blank" rel="noopener noreferrer">leetcode 220. 存在重复元素 III</a></p>
<p>给你一个整数数组 <code>nums</code> 和两个整数 <code>indexDiff</code> 和 <code>valueDiff</code> 。</p>
<p>找出满足下述条件的下标对 <code>(i, j)</code>：</p>
<ul>
<li><code>i != j</code>,</li>
<li><code>abs(i - j) &lt;= indexDiff</code></li>
<li><code>abs(nums[i] - nums[j]) &lt;= valueDiff</code></li>
</ul>`,r:{minutes:3.57,words:1070},y:"a",t:"leetcode 220. 存在重复元素 III",i:"code",O:5},["/algo/03 哈希算法/220. 存在重复元素 III.html","/algo/03 哈希算法/220. 存在重复元素 III.md",":md"]],["v-534e82f8","/algo/03%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.html",{c:["数据结构与算法"],g:["哈希","数组","字符串"],e:`<p><a href="https://leetcode.cn/problems/valid-anagram/" target="_blank" rel="noopener noreferrer">242. 有效的字母异位词</a></p>
<p>给定两个字符串 <code>s</code> 和 <code>t</code> ，编写一个函数来判断 <code>t</code> 是否是 <code>s</code> 的字母异位词。</p>
<p>**注意：**若 <code>s</code> 和 <code>t</code> 中每个字符出现的次数都相同，则称 <code>s</code> 和 <code>t</code> 互为字母异位词。</p>`,r:{minutes:.67,words:200},y:"a",t:"leetcode 242. 有效的字母异位词",i:"code",O:1},["/algo/03 哈希算法/242.有效的字母异位词.html","/algo/03 哈希算法/242.有效的字母异位词.md",":md"]],["v-e58201ee","/algo/03%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/349.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86.html",{c:["数据结构与算法"],g:["哈希","数组"],e:`<p><a href="https://leetcode.cn/problems/intersection-of-two-arrays/" target="_blank" rel="noopener noreferrer">349. 两个数组的交集（有相同的数字）</a></p>
<p>给定两个数组 <code>nums1</code> 和 <code>nums2</code> ，返回 <em>它们的交集</em> 。输出结果中的每个元素一定是 <strong>唯一</strong> 的。我们可以 <strong>不考虑输出结果的顺序</strong> 。</p>
<p><strong>示例 1：</strong></p>`,r:{minutes:1.2,words:361},y:"a",t:"leetcode 349. 两个数组的交集（有相同的数字）",i:"code",O:2},["/algo/03 哈希算法/349.两个数组的交集.html","/algo/03 哈希算法/349.两个数组的交集.md",":md"]],["v-21b182ee","/algo/03%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/383.%20%E8%B5%8E%E9%87%91%E4%BF%A1.html",{c:["数据结构与算法"],g:["哈希"],e:`<p><a href="https://leetcode.cn/problems/ransom-note/" target="_blank" rel="noopener noreferrer">383. 赎金信</a></p>
<p>给你两个字符串：<code>ransomNote</code> 和 <code>magazine</code> ，判断 <code>ransomNote</code> 能不能由 <code>magazine</code> 里面的字符构成。</p>
<p>如果可以，返回 <code>true</code> ；否则返回 <code>false</code> 。</p>`,r:{minutes:.55,words:164},y:"a",t:"leetcode 383. 赎金信",i:"code",O:8},["/algo/03 哈希算法/383. 赎金信.html","/algo/03 哈希算法/383. 赎金信.md",":md"]],["v-deb0c8ec","/algo/03%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/594.%20%E6%9C%80%E9%95%BF%E5%92%8C%E8%B0%90%E5%AD%90%E5%BA%8F%E5%88%97.html",{c:["数据结构与算法"],g:["哈希","双指针"],e:`<p><a href="https://leetcode.cn/problems/longest-harmonious-subsequence/" target="_blank" rel="noopener noreferrer">leetcode 594. 最长和谐子序列</a></p>
<p>和谐数组是指一个数组里元素的最大值和最小值之间的差别 <strong>正好是 <code>1</code></strong> 。</p>
<p>现在，给你一个整数数组 <code>nums</code> ，请你在所有可能的子序列中找到最长的和谐子序列的长度。</p>
<p>数组的子序列是一个由数组派生出来的序列，它可以通过删除一些元素或不删除元素、且不改变其余元素的顺序而得到。</p>`,r:{minutes:1.34,words:402},y:"a",t:"leetcode 594. 最长和谐子序列",i:"code",O:6},["/algo/03 哈希算法/594. 最长和谐子序列.html","/algo/03 哈希算法/594. 最长和谐子序列.md",":md"]],["v-aa555d4e","/others/git%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%A1%E7%90%86/%E5%90%84%E9%98%B6%E6%AE%B5%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9%E5%9B%9E%E9%80%80%E6%92%A4%E9%94%80%E6%93%8D%E4%BD%9C.html",{c:["git"],g:["git"],e:`<h1> 各阶段代码修改回退撤销操作</h1>
<figure><figcaption></figcaption></figure>
<h2> 一、还没有add/commit，<strong>放弃工作区的修改</strong></h2>
<p>ubuntu客户端查看工作区状态，没有需要提交的文件</p>
<figure><figcaption></figcaption></figure>
<p>修改main.cpp</p>
<figure><figcaption></figcaption></figure>
<p>git status查看工作区状态，</p>
<figure><figcaption></figcaption></figure>`,r:{minutes:3.74,words:1121},y:"a",t:"各阶段代码修改回退撤销操作",i:"file",O:3},["/others/git的分布式管理/各阶段代码修改回退撤销操作.html","/others/git的分布式管理/各阶段代码修改回退撤销操作.md",":md"]],["v-971795b6","/others/git%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%A1%E7%90%86/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html",{c:["git"],g:["git"],e:`<h1> 基本概念和环境搭建</h1>
<h2> 一、不使用版本控制工具带来的问题</h2>
<p>大家在开发项目的过程中，如果直接在本地系统上维护源码目录，经常会碰见下面的问题：</p>
<ol>
<li>
把源代码的目录或文件，写了好久的代码没了！</li>
<li>按需求添加新功能，写了好多代码，但净是，<strong>想回到之前的版本</strong>，开始大面积删除或者屏蔽代码，很崩溃，如果此时有个代码版本管理工具，该多好！</li>
<li>新功能添加完了，编译运行一切很顺利，功能也正常，但有时候运行会出现以前没见过的运行错误，非必现的，<strong>想查看和之前代码的差异</strong>，看看都在哪些源文件中修改了代码，该怎么办？</li>
<li>团队开发项目，但是项目成员都不在一起，<strong>各自写的代码该如何添加到一块</strong>，还能避免错误，不会出现谁把谁的代码给覆盖了？</li>
</ol>`,r:{minutes:3.82,words:1146},y:"a",t:"基本概念和环境搭建",i:"file",O:1},["/others/git的分布式管理/基本概念和环境搭建.html","/others/git的分布式管理/基本概念和环境搭建.md",":md"]],["v-093d475d","/others/git%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%A1%E7%90%86/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%A5%E5%8F%8A%E5%8E%9F%E7%90%86.html",{c:["git"],g:["git"],e:`<h1> 常用命令以及原理</h1>
<p><strong>项目负责人创建新的项目后，项目组成员会clone项目到本地进行开发</strong></p>
<figure><figcaption></figcaption></figure>
<p><strong>windows客户端先clone代码</strong></p>
<figure><figcaption></figcaption></figure>
<figure><figcaption>在这里插入图片描述</figcaption></figure>
<p><code>git clone</code>之后，</p>
<ol>
<li>会把远程仓库的文件<strong>拉取一份到本地仓库</strong>，</li>
<li>然后给<strong>远程仓库起了个名字，默认就叫origin（名字可在config中改）</strong>，</li>
<li><u>然后在本地仓库生成默认分支master，与远程的master<strong>分支对应</strong></u></li>
</ol>`,r:{minutes:2.68,words:803},y:"a",t:"常用命令以及原理",i:"file",O:2},["/others/git的分布式管理/常用命令以及原理.html","/others/git的分布式管理/常用命令以及原理.md",":md"]],["v-6d1b8ec2","/others/git%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%A1%E7%90%86/%E6%8E%A8%E9%80%81%E4%BB%A3%E7%A0%81%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3.html",{c:["git"],g:["git"],e:`<h1> 推送代码冲突解决</h1>
<p>有如下场景：</p>
<p>小张和啊亮，两个人本地都获取了V1版本的代码，然后，然后将V3 push到了远程，git server发现V3就是基于V1版本修改的，于是git server将版本更新到V3</p>
<p>接着小张将本地基于V1的代码更改为V2后，也push到远程，此时，于是会报错，产生冲突（<strong>如果不报错，啊亮提交的V3就全没了</strong>）</p>
<figure><figcaption>在这里插入图片描述</figcaption></figure>
<h2> 一、无需手动解决的冲突</h2>
<figure><figcaption></figcaption></figure>`,r:{minutes:3.12,words:937},y:"a",t:"推送代码冲突解决",i:"file",O:4},["/others/git的分布式管理/推送代码冲突解决.html","/others/git的分布式管理/推送代码冲突解决.md",":md"]],["v-2a84a2a1","/others/git%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%A1%E7%90%86/%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86.html",{c:["git"],g:["git"],e:`<h1> 本地分支管理</h1>
<p>作为开发人员，我们</p>
<figure><figcaption></figcaption></figure>
<ul>
<li><code>git branch</code>：查看本地分支</li>
<li><code>git branch -r</code>：查看remote分支</li>
<li><code>git remote</code>：查看remote分支</li>
<li><code>git branch -a</code>：查看本地分支以及remote分支</li>
</ul>
<p>小张在Windows操作，发现冒泡排序的效率太低，希望能改成快速排序。小张可以直接在本地master分支上进行代码修改，<u>为了避免自己修改了master，然后push的时候和别人产生冲突，小张决定建立一个新的分支，在新分支上写自己的代码</u></p>`,r:{minutes:4.45,words:1335},y:"a",t:"本地分支管理",i:"file",O:5},["/others/git的分布式管理/本地分支管理.html","/others/git的分布式管理/本地分支管理.md",":md"]],["v-17abcac0","/others/git%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%A1%E7%90%86/%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86.html",{c:["git"],g:["git"],e:`<h1> 远程分支管理</h1>
<p>我们在github上创建一个代码仓库，默认就拉了一个master主干分支，我们在master主干分支上开发了一期项目以后，<u>再进行二期开发的时候，可以再拉一个dev分支出来，大家都在dev分支上开发，此时<strong>项目管理员可以把master分支的写权限关掉</strong></u></p>
<p>因为一期功能开发验证完成，很稳定，我们不会直接在以前的分支上继续进行开发，否则可能影响已经稳定运行的版本，此时管理员应设置<u>允许拉取master代码，不允许再push代码到master分支</u></p>
<p>一般远程分支的创建都是由项目管理员来创建的，其它员工没有创建远程分支的权限，而且每一个远程分支的读写权限也都是由管理员来控制的</p>`,r:{minutes:2,words:601},y:"a",t:"远程分支管理",i:"file",O:6},["/others/git的分布式管理/远程分支管理.html","/others/git的分布式管理/远程分支管理.md",":md"]],["v-1a50115e","/algo/04%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.html",{c:["数据结构与算法"],g:["排序算法"],e:`<p>把⼩的元素往前调或者把⼤的元素往后调，⽐较是相邻的两个元素⽐较，交换也发⽣在这两个元素之间。</p>
<ul>
<li>外循环表示需要<code>N-1轮</code>循环</li>
<li>内循环表示<code>每轮循环需要比较的次数</code></li>
<li>如果前面的元素比后面的大，则交换</li>
</ul>
<!--more-->
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">//bubbleSort.h</span></span>
<span class="line"><span style="color: #C678DD">#ifndef</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_BUBBLE_SORT_H_</span></span>
<span class="line"><span style="color: #C678DD">#define</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_BUBBLE_SORT_H_</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;vector&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::vector; </span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::swap;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">bubbleSort</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #C678DD">#endif</span><span style="color: #7F848E; font-style: italic"> //_BUBBLE_SORT_H_</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.98,words:295},y:"a",t:"冒泡排序",i:"file",O:1},["/algo/04 排序算法/冒泡排序.html","/algo/04 排序算法/冒泡排序.md",":md"]],["v-53acd735","/algo/04%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F.html",{c:["数据结构与算法"],g:["排序算法"],e:`<h1> 基数排序</h1>
<p>将整数按位数切割成不同的数字，然后按每个位数分别比较,从最低位开始排序。</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;vector&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;string&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;cstdlib&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;ctime&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;climits&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cout;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::endl;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::vector;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//只有正整数和0</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">radixSort</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">()) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> maxNum </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> INT_MIN;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> num : nums) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(num </span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> maxNum) {</span></span>
<span class="line"><span style="color: #ABB2BF">            maxNum </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> num;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> maxNunLen </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> std::</span><span style="color: #61AFEF">to_string</span><span style="color: #ABB2BF">(maxNum).</span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> mod </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> div </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    vector</span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF">vector</span><span style="color: #C678DD">&lt;int&gt;&gt;</span><span style="color: #ABB2BF"> bucket;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> maxNunLen; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">i, mod </span><span style="color: #C678DD">*=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">, div </span><span style="color: #C678DD">*=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">bucket</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">resize</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> j </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; j </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">(); </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">j) {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> index </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> (</span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[j] </span><span style="color: #56B6C2">%</span><span style="color: #ABB2BF"> mod) </span><span style="color: #56B6C2">/</span><span style="color: #ABB2BF"> div;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">bucket</span><span style="color: #ABB2BF">[index].</span><span style="color: #61AFEF">push_back</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[j]);</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> count </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">auto</span><span style="color: #ABB2BF"> vec : bucket) {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> num : vec) {</span></span>
<span class="line"><span style="color: #ABB2BF">                </span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[count</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> num;</span></span>
<span class="line"><span style="color: #ABB2BF">            }</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">bucket</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">clear</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//nums含有负数</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">radixSort2</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> maxNum </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> INT_MIN;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> num : nums) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #61AFEF">abs</span><span style="color: #ABB2BF">(num) </span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> maxNum) {</span><span style="color: #7F848E; font-style: italic">     //正负数中长的数字</span></span>
<span class="line"><span style="color: #ABB2BF">            maxNum </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">abs</span><span style="color: #ABB2BF">(num);</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> maxNunLen </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> std::</span><span style="color: #61AFEF">to_string</span><span style="color: #ABB2BF">(maxNum).</span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> mod </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> div </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    vector</span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF">vector</span><span style="color: #C678DD">&lt;int&gt;&gt;</span><span style="color: #ABB2BF"> bucket;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> maxNunLen; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">i, mod </span><span style="color: #C678DD">*=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">, div </span><span style="color: #C678DD">*=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">bucket</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">resize</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">20</span><span style="color: #ABB2BF">);</span><span style="color: #7F848E; font-style: italic">  //更改桶的数量</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> j </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; j </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">(); </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">j) {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> index </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> (</span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[j] </span><span style="color: #56B6C2">%</span><span style="color: #ABB2BF"> mod) </span><span style="color: #56B6C2">/</span><span style="color: #ABB2BF"> div </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic"> //-10~9 映射到下标0~19</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">bucket</span><span style="color: #ABB2BF">[index].</span><span style="color: #61AFEF">push_back</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[j]);</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> count </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">auto</span><span style="color: #ABB2BF"> vec : bucket) {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> num : vec) {</span></span>
<span class="line"><span style="color: #ABB2BF">                </span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[count</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> num;</span></span>
<span class="line"><span style="color: #ABB2BF">            }</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">bucket</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">clear</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> num : nums) {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> num </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">' '</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getTestDate</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">srand</span><span style="color: #ABB2BF">(</span><span style="color: #61AFEF">time</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">));</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">i) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push_back</span><span style="color: #ABB2BF">(</span><span style="color: #61AFEF">rand</span><span style="color: #ABB2BF">()</span><span style="color: #56B6C2">%</span><span style="color: #D19A66">99</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getTestDate2</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">srand</span><span style="color: #ABB2BF">(</span><span style="color: #61AFEF">time</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">));</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">i) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push_back</span><span style="color: #ABB2BF">(</span><span style="color: #61AFEF">rand</span><span style="color: #ABB2BF">()</span><span style="color: #56B6C2">%</span><span style="color: #D19A66">199</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">100</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">    vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> nums1;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">getTestDate</span><span style="color: #ABB2BF">(nums1);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(nums1);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">radixSort</span><span style="color: #ABB2BF">(nums1);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(nums1);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span></span>
<span class="line"><span style="color: #ABB2BF">    vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> nums2 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> {</span><span style="color: #56B6C2">-</span><span style="color: #D19A66">1234</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">7</span><span style="color: #ABB2BF">, </span><span style="color: #56B6C2">-</span><span style="color: #D19A66">89</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">256</span><span style="color: #ABB2BF">};</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(nums2);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">radixSort2</span><span style="color: #ABB2BF">(nums2);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(nums2);</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.36,words:407},y:"a",t:"基数排序",i:"file",O:8},["/algo/04 排序算法/基数排序.html","/algo/04 排序算法/基数排序.md",":md"]],["v-00fc7494","/algo/04%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%A0%86%E6%8E%92%E5%BA%8F.html",{c:["数据结构与算法"],g:["排序算法"],e:`<h1> 堆排序</h1>
<p><strong>堆排序 = 建堆 +排序（交换）</strong></p>
<!--more-->
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">//heapSort.h</span></span>
<span class="line"><span style="color: #C678DD">#ifndef</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_HEAP_SORT_H_</span></span>
<span class="line"><span style="color: #C678DD">#define</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_HEAP_SORT_H_</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;vector&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cout;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::endl;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::vector;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::swap;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">heapify</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">N</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">parent</span><span style="color: #ABB2BF">);</span><span style="color: #7F848E; font-style: italic"> //大顶堆,下沉</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">heapSort</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#endif</span><span style="color: #7F848E; font-style: italic"> //_HEAP_SORT_H_</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.23,words:370},y:"a",t:"🍖堆排序",O:7},["/algo/04 排序算法/堆排序.html","/algo/04 排序算法/堆排序.md",":md"]],["v-380a6c84","/algo/04%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.html",{c:["数据结构与算法"],g:["排序算法"],e:`<p>希尔排序是插入排序(gap = 1)的升级版，插入排序的gap = n/2，n/4，……</p>
<!--more-->
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#ifndef</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_SHELL_SORT_H_</span></span>
<span class="line"><span style="color: #C678DD">#define</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_SHELL_SORT_H_</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;vector&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::vector;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::swap;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">shellSortCore</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt; </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">gap</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">pos</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">shellSort</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">); </span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#endif</span><span style="color: #7F848E; font-style: italic"> //_SHELLSORT_H_</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.62,words:185},y:"a",t:"希尔排序",i:"file",O:5},["/algo/04 排序算法/希尔排序.html","/algo/04 排序算法/希尔排序.md",":md"]],["v-4b65c060","/algo/04%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.html",{c:["数据结构与算法"],g:["排序算法"],e:`<p>将⼀个⼤的⽆序数组有序，我们可以<u>把⼤的数组分成两个，然后对这两个数组分别进⾏排序，之后在把这两个数组</u>
<u>合并成⼀个有序的数组。</u>由于两个⼩的数组都是有序的，所以在合并的时候是很快的。
通过递归的⽅式将⼤的数组⼀直分割，直到数组的⼤⼩为 1，此时只有⼀个元素，那么该数组就是有序的了，之后
再把两个数组⼤⼩为1的合并成⼀个⼤⼩为2的，再把两个⼤⼩为2的合并成4的 … 直到全部⼩的数组合并起来。</p>
<p>该算法是采⽤<strong>分治法</strong>（Divide and Conquer）的⼀个⾮常典型的应⽤。将已有序的⼦序列合并，得到完全有序的序列；即先使每个⼦序列有序，再使⼦序列段间有序。<u>若将两个有序表合并成⼀个有序表，称为2-路归并</u>。</p>`,r:{minutes:2.12,words:637},y:"a",t:"归并排序",i:"file",O:6},["/algo/04 排序算法/归并排序.html","/algo/04 排序算法/归并排序.md",":md"]],["v-0cc447aa","/algo/04%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.html",{c:["数据结构与算法"],g:["排序算法"],e:`<!--more-->
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">//insertSort.h</span></span>
<span class="line"><span style="color: #C678DD">#ifndef</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_INSERT_SORT_H_</span></span>
<span class="line"><span style="color: #C678DD">#define</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_INSERT_SORT_H_</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;vector&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::vector;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::swap;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">insertSort</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt; </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#endif</span><span style="color: #7F848E; font-style: italic"> //_INSERT_SORT_H_</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.46,words:137},y:"a",t:"插入排序",i:"file",O:3},["/algo/04 排序算法/插入排序.html","/algo/04 排序算法/插入排序.md",":md"]],["v-64dd32fe","/algo/04%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E6%A1%B6%E6%8E%92%E5%BA%8F.html",{c:["使用指南"],g:["页面配置","使用指南"],r:{minutes:.25,words:75},y:"a",t:"页面配置",i:"file",O:3},["/algo/04 排序算法/桶排序.html","/algo/04 排序算法/桶排序.md",":md"]],["v-85d8c71c","/algo/04%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F.html",{c:["数据结构与算法"],g:["排序算法"],e:`<h1> 计数排序</h1>
<h2> 计数排序应用场景</h2>
<p>计数排序只适用于**的序列的排序**，若待排序列的数据较分散，则会造成空间浪费，并且计数排序只适用于<strong>整型排序</strong>，不适用与浮点型排序。</p>
<h2> 步骤</h2>
<ol>
<li>先找出序列中最大值和最小值，计算出计数数组的范围</li>
<li>遍历序列，统计出现的次数</li>
<li>为了使排序具有稳定性（保证相同值的前后顺序），计数数组累计求和，累计和就是该元素要存放的位置</li>
<li>倒叙遍历序列，查找该元素存放的位置（）</li>
</ol>
<h2> 代码实现</h2>`,r:{minutes:1.9,words:570},y:"a",t:"计数排序",i:"file",O:9},["/algo/04 排序算法/计数排序.html","/algo/04 排序算法/计数排序.md",":md"]],["v-64c90a94","/algo/04%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.html",{c:["数据结构与算法"],g:["排序算法"],e:`<ul>
<li>外循环，依次选择前N-1个位置，存放最小的数据</li>
<li>内循环，需要指定待比较数据的位置</li>
</ul>
<!--more-->
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">//selectSort.h</span></span>
<span class="line"><span style="color: #C678DD">#ifndef</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_SELECT_SORT_H_</span></span>
<span class="line"><span style="color: #C678DD">#define</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_SELECT_SORT_H_</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;vector&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::vector;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::swap;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">selectSort</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt; </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #C678DD">#endif</span><span style="color: #7F848E; font-style: italic">	//_SELECT_SOTR_H_</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.59,words:176},y:"a",t:"选择排序",i:"file",O:2},["/algo/04 排序算法/选择排序.html","/algo/04 排序算法/选择排序.md",":md"]],["v-155d00d3","/algo/04%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%EF%BC%88%E7%AE%80%E5%8D%95%EF%BC%89%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.html",{c:["数据结构与算法"],g:["排序算法"],e:`<p>关键在于找一个基准（一般选第一个元素）</p>
<ul>
<li>小于基准的放左边，大于的放右边</li>
<li>递归</li>
</ul>
<!--more-->
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">//quickSort.h</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#ifndef</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_QUICK_SORT_H_</span></span>
<span class="line"><span style="color: #C678DD">#define</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_QUICK_SORT_H_</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;vector&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::vector;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::swap;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">quickSort</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt; </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">begin</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">end</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#endif</span><span style="color: #7F848E; font-style: italic"> //_QUICK_SORT_H_</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.69,words:207},y:"a",t:"（简单）快速排序",i:"file",O:4},["/algo/04 排序算法/（简单）快速排序.html","/algo/04 排序算法/（简单）快速排序.md",":md"]],["v-f1165cc2","/algo/%E6%A0%88/%E6%96%B0%E5%BB%BA%20Markdown.html",{c:["使用指南"],g:["页面配置","使用指南"],e:`<!--more-->
<h2> 顺序栈的实现</h2>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;stdexcept&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;cstring&gt;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cout;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">SeqStack</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">SeqStack</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">cap</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">        :</span><span style="color: #61AFEF">_top</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">        ,</span><span style="color: #61AFEF">_cap</span><span style="color: #ABB2BF">(cap)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        _pstack </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">[_cap]();</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">~SeqStack</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">delete[]</span><span style="color: #ABB2BF"> _pstack;</span><span style="color: #7F848E; font-style: italic">//不要用delete</span></span>
<span class="line"><span style="color: #ABB2BF">        _pstack </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">push</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">val</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(_top </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> _cap) {</span><span style="color: #7F848E; font-style: italic"> //栈满了</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #61AFEF">expand</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">2</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">_cap);</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">_pstack</span><span style="color: #ABB2BF">[_top] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> val;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">_top;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">pop</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(_top </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">){</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">throw</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Stack is empty!!!"</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">--</span><span style="color: #ABB2BF">_top;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">top</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(_top </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">throw</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Stack is empty!!!"</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_pstack</span><span style="color: #ABB2BF">[_top</span><span style="color: #56B6C2">-</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">];</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> _top </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;    </span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">expand</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">size</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">int</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> newStack </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">[size];</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">memcpy</span><span style="color: #ABB2BF">(newStack, _pstack, _top</span><span style="color: #56B6C2">*</span><span style="color: #C678DD">sizeof</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">));</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">delete[]</span><span style="color: #ABB2BF"> _pstack;</span><span style="color: #7F848E; font-style: italic">   //这里也是delete[]</span></span>
<span class="line"><span style="color: #ABB2BF">        _pstack </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> newStack;</span></span>
<span class="line"><span style="color: #ABB2BF">        _cap </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> size;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> _pstack;</span><span style="color: #7F848E; font-style: italic">   //指向数据域</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _top;</span><span style="color: #7F848E; font-style: italic">  //指向栈顶,也是栈的大小</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _cap;</span><span style="color: #7F848E; font-style: italic">    //栈的容量</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    SeqStack s;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">s</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">12</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">s</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">17</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">s</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">100</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">s</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">78</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    //cout &lt;&lt; s.top() &lt;&lt; endl;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    //s.pop();</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    //cout &lt;&lt; s.top() &lt;&lt; endl;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    //s.pop();</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    //cout &lt;&lt; s.top() &lt;&lt; endl;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    //s.pop();</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    //cout &lt;&lt; s.top() &lt;&lt; endl;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    //s.pop();</span></span>
<span class="line"><span style="color: #ABB2BF">    </span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(</span><span style="color: #56B6C2">!</span><span style="color: #E5C07B">s</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">()) {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">s</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">top</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">s</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">pop</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.88,words:265},y:"a",t:"页面配置",i:"file",O:3},["/algo/栈/新建 Markdown.html","/algo/栈/新建 Markdown.md",":md"]],["v-eeb8a63a","/algo/%E9%98%9F/%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.html",{c:["数据结构与算法"],g:["队列"],e:`<h1> 232.用栈实现队列</h1>
<p><a href="https://leetcode.cn/problems/implement-queue-using-stacks/" target="_blank" rel="noopener noreferrer">leetcode 232.用栈实现队列</a></p>
<p>使用栈实现队列的下列操作：</p>
<p>push(x) -- 将一个元素放入队列的尾部。
pop() -- 从队列首部移除元素。
peek() -- 返回队列首部的元素。
empty() -- 返回队列是否为空。</p>
<p>示例:</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">MyQueue queue </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">MyQueue</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E5C07B">queue</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #E5C07B">queue</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #E5C07B">queue</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">peek</span><span style="color: #ABB2BF">();</span><span style="color: #7F848E; font-style: italic">  // 返回 1</span></span>
<span class="line"><span style="color: #E5C07B">queue</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">pop</span><span style="color: #ABB2BF">();</span><span style="color: #7F848E; font-style: italic">   // 返回 1</span></span>
<span class="line"><span style="color: #E5C07B">queue</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">();</span><span style="color: #7F848E; font-style: italic"> // 返回 false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.26,words:378},y:"a",t:"leetcode 232.用栈实现队列",i:"code",O:2},["/algo/队/两个栈实现队列.html","/algo/队/两个栈实现队列.md",":md"]],["v-c84ce682","/algo/%E9%98%9F/%E6%96%B0%E5%BB%BA%20Markdown.html",{c:["使用指南"],g:["页面配置","使用指南"],e:`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cout;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//对头指针_front与队尾指针_rear在进行变化的时候，需要考虑边界条件</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Queue</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">Queue</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">sz</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    : </span><span style="color: #61AFEF">_size</span><span style="color: #ABB2BF">(sz)</span></span>
<span class="line"><span style="color: #ABB2BF">    , </span><span style="color: #61AFEF">_front</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    , </span><span style="color: #61AFEF">_rear</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    , </span><span style="color: #61AFEF">_data</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">[_size]())</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Queue(int = 10)"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> _front </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> _rear;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">full</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> _front </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> (_rear </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">)</span><span style="color: #56B6C2">%</span><span style="color: #ABB2BF"> _size;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">push</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">value</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #56B6C2">!</span><span style="color: #61AFEF">full</span><span style="color: #ABB2BF">())</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">_data</span><span style="color: #ABB2BF">[_rear</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> value;</span></span>
<span class="line"><span style="color: #ABB2BF">            _rear </span><span style="color: #C678DD">%=</span><span style="color: #ABB2BF"> _size;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">else</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">            cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"The queue is full"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">pop</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #56B6C2">!</span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">())</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">_front;</span></span>
<span class="line"><span style="color: #ABB2BF">            _front </span><span style="color: #C678DD">%=</span><span style="color: #ABB2BF"> _size;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">else</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">            cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"The queue is empty"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">front</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">const</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_data</span><span style="color: #ABB2BF">[_front];</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">back</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">const</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_data</span><span style="color: #ABB2BF">[(_rear </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> _size)</span><span style="color: #56B6C2">%</span><span style="color: #ABB2BF">_size];</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getFront</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">const</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> _front;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getRear</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">const</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> _rear;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">~Queue</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"~Queue()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(_data)</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">[]</span><span style="color: #ABB2BF"> _data;</span></span>
<span class="line"><span style="color: #ABB2BF">            _data </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _size;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _front;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _rear;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">_data;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">argc</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">char</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">**</span><span style="color: #E06C75; font-style: italic">argv</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    Queue que;</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"此时队列是否为空?"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">que</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">que</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"此时队列是否为满?"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">que</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">full</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> idx </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">; idx </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">12</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">idx)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">que</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push</span><span style="color: #ABB2BF">(idx);</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"此时队列是否为满?"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">que</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">full</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"打印队列头尾"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"队头元素"</span><span style="color: #ABB2BF">  </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">que</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">front</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"对头指针"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">que</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">getFront</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"队尾元素"</span><span style="color: #ABB2BF">  </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">que</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">back</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"对尾指针"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">que</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">getRear</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(</span><span style="color: #56B6C2">!</span><span style="color: #E5C07B">que</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">())</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">que</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">front</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">que</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">pop</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"此时队列是否为空?"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">que</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.11,words:333},y:"a",t:"页面配置",i:"file",O:3},["/algo/队/新建 Markdown.html","/algo/队/新建 Markdown.md",":md"]],["v-038e0b34","/ccpp/00%20%E5%9F%BA%E7%A1%80%E5%BF%85%E5%A4%87/%E5%8F%8D%E6%B1%87%E7%BC%96%E5%B0%8F%E7%BB%93.html",{c:["c/c++"],g:["反汇编"],e:`<h1> 反汇编小结</h1>
<p>记录一下常用的反汇编指令方便查看</p>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">objdump </span><span style="color: #C678DD">-</span><span style="color: #ABB2BF">M intel </span><span style="color: #C678DD">-</span><span style="color: #ABB2BF">d </span><span style="color: #C678DD">-</span><span style="color: #ABB2BF">C binary_file</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:.9,words:271},y:"a",t:"反汇编小结",i:"file",O:4},["/ccpp/00 基础必备/反汇编小结.html","/ccpp/00 基础必备/反汇编小结.md",":md"]],["v-403c82cd","/ccpp/00%20%E5%9F%BA%E7%A1%80%E5%BF%85%E5%A4%87/%E6%8C%87%E4%BB%A4%E8%A7%92%E5%BA%A6%E5%A0%86%E6%A0%88%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B.html",{c:["c/c++"],g:["操作系统","堆栈"],e:`<h2> 栈空间</h2>
<figure><figcaption>image-20240130155633380</figcaption></figure>
<!--more-->
<p>栈空间是从高地址向低地址扩充，堆地址是从低地址向高地址扩充。</p>
<p><u>堆栈</u>是一种具有一定规则的，我们可以按照一定的规则进行添加和删除数据。它使用的是<strong>先进后出</strong>的原则。在x86等汇编集合中堆栈与弹栈的操作指令分别为：</p>
<ul>
<li>
<p><code>PUSH</code>：将目标内存推入栈顶。</p>
</li>
<li>
<p><code>POP</code>：从栈顶中移除目标。</p>
</li>
</ul>`,r:{minutes:9.79,words:2936},y:"a",t:"指令角度理解堆栈调用过程",i:"file",O:2},["/ccpp/00 基础必备/指令角度堆栈调用过程.html","/ccpp/00 基础必备/指令角度堆栈调用过程.md",":md"]],["v-5aef7a82","/ccpp/00%20%E5%9F%BA%E7%A1%80%E5%BF%85%E5%A4%87/%E7%BC%96%E8%AF%91%E5%99%A8%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3c__%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BC%96%E8%AF%91%E5%92%8C%E9%93%BE%E6%8E%A5.html",{c:["c/c++"],g:["操作系统","编译链接"],e:`<h1> 编译器角度理解c++代码的编译和链接</h1>
<p>c/c++这种<strong>本地编译型语言</strong>的编译过程</p>
<figure><figcaption>image-20231230103243664</figcaption></figure>
<h2> <strong>重点</strong>：</h2>
<ol>
<li><strong><code>*.o</code>文件的组成格式是什么样的？</strong></li>
<li><strong>可执行文件的组成格式是什么样的？</strong></li>
<li><strong>链接的两个步骤做的是什么事情？</strong></li>
<li><strong>符号表中的符号怎么理解？</strong></li>
<li><strong>符号何时分配虚拟地址？</strong></li>
</ol>`,r:{minutes:8.41,words:2522},y:"a",t:"编译器角度理解c++代码的编译和链接",i:"file",O:3},["/ccpp/00 基础必备/编译器角度理解c__代码的编译和链接.html","/ccpp/00 基础必备/编译器角度理解c++代码的编译和链接.html","/ccpp/00%20%E5%9F%BA%E7%A1%80%E5%BF%85%E5%A4%87/%E7%BC%96%E8%AF%91%E5%99%A8%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3c++%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BC%96%E8%AF%91%E5%92%8C%E9%93%BE%E6%8E%A5.html","/ccpp/00 基础必备/编译器角度理解c++代码的编译和链接.md","/ccpp/00%20%E5%9F%BA%E7%A1%80%E5%BF%85%E5%A4%87/%E7%BC%96%E8%AF%91%E5%99%A8%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3c++%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BC%96%E8%AF%91%E5%92%8C%E9%93%BE%E6%8E%A5.md"]],["v-4d611284","/ccpp/00%20%E5%9F%BA%E7%A1%80%E5%BF%85%E5%A4%87/%E8%BF%9B%E7%A8%8B%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4.html",{c:["c/c++"],g:["操作系统","虚拟内存"],e:`<p>任何的编程语言都会产生两种东西：<strong>指令和数据</strong>。c++代码编译链接之后产生一个可执行文件<code>***.exe</code>存储在<u>磁盘</u>上，运行时会把程序从磁盘加载到内存（虚拟）中，</p>
<!--more-->
<p><strong>产生几个问题</strong>：</p>
<ol>
<li><u>运行时把可执行程序的哪些东西加载到内存中？</u></li>
<li><u>加载到内存后是如何存放的？</u></li>
<li><u>内存空间有没有区域划分？划分后是什么样的？？</u></li>
</ol>
<p><strong>前提条件</strong>：</p>`,r:{minutes:3.16,words:947},y:"a",t:"进程虚拟地址空间",i:"file",O:1},["/ccpp/00 基础必备/进程虚拟地址空间.html","/ccpp/00 基础必备/进程虚拟地址空间.md",":md"]],["v-66aab0b0","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/bool.html",{c:["c/c++"],g:["c++基础"],e:`<h1> bool</h1>
<figure><figcaption>1681304077461-c2f9d32f-49d2-4aaf-9f81-1c3da4cd2450</figcaption></figure>
<!--more-->
<p>在C++中，还添加了一种基本类型，就是bool类型，用来表示true和false。true和false是字面值，可以通过转换变为int类型，true为1，false为0.</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> x </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">true</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">// 1</span></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> y </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">// 0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.73,words:220},y:"a",t:"bool",i:"file",O:9},["/ccpp/02 c__基础/bool.html","/ccpp/02 c++基础/bool.html","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/bool.html","/ccpp/02 c++基础/bool.md","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/bool.md"]],["v-1073124a","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/c__%E5%88%9D%E6%8E%A2.html",{c:["c/c++"],g:["c++基础"],e:`<!--more-->
<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span><span style="color: #7F848E; font-style: italic">//C++头文件没有加.h，因为C++头文件都是用模板写的，</span></span>
<span class="line"><span style="color: #ABB2BF">                   </span><span style="color: #7F848E; font-style: italic">//而模板有个特点：必须要知道所有实现之后才能正常编译</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">using namespace std;</span><span style="color: #7F848E; font-style: italic">//命名空间</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//函数的声明</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//函数声明可以有多次，函数定义只能有一次</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">test</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">test</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">test</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">test</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">test</span><span style="color: #ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">test</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #E06C75"> </span><span style="color: #E06C75; font-style: italic">argc</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> </span><span style="color: #C678DD">char</span><span style="color: #E06C75"> </span><span style="color: #C678DD">**</span><span style="color: #E06C75; font-style: italic">argv</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    /* &amp;10;//error,字面值常量,右值，不能取地址 */</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    /* &amp;"Hello, world";//ok */</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #7F848E; font-style: italic">//cout,标准输出</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #7F848E; font-style: italic">//&lt;&lt;,输出流运算符</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #7F848E; font-style: italic">//"Hello world",字符串常量</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #7F848E; font-style: italic">//endl end of line</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Hello world"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    operator</span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF">(cout, </span><span style="color: #98C379">"Hello world"</span><span style="color: #ABB2BF">).</span><span style="color: #E06C75">operator</span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF">(endl);</span><span style="color: #7F848E; font-style: italic">//运算符重载</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> number </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #7F848E; font-style: italic">//cin，标准输入</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #7F848E; font-style: italic">//&gt;&gt;，输入流运算符</span></span>
<span class="line"><span style="color: #ABB2BF">    cin </span><span style="color: #C678DD">&gt;&gt;</span><span style="color: #ABB2BF"> number;</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"number = "</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> number </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.89,words:267},y:"a",t:"c++初探",i:"file",O:1},["/ccpp/02 c__基础/c__初探.html","/ccpp/02 c++基础/c++初探.html","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/c++%E5%88%9D%E6%8E%A2.html","/ccpp/02 c++基础/c++初探.md","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/c++%E5%88%9D%E6%8E%A2.md"]],["v-3cc85216","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/const.html",{c:["c/c++"],g:["c++基础"],e:`<h1> const</h1>
<figure><figcaption>1681302938745-c100c3cc-4cb4-4f9d-a1cb-94d6bd99e2ad</figcaption></figure>
<!--more-->
<h2> const关键字修饰变量</h2>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> number1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">//const关键字修饰的变量称为常量</span></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> number2 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">20</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> val;</span><span style="color: #7F848E; font-style: italic">//error  常量必须要进行初始化</span></span>
<span class="line"><span style="color: #ABB2BF">number1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">30</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">//error   常量不能被赋值（初始化后不可修改）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:11.17,words:3350},y:"a",t:"const",i:"file",O:3},["/ccpp/02 c__基础/const.html","/ccpp/02 c++基础/const.html","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/const.html","/ccpp/02 c++基础/const.md","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/const.md"]],["v-ba4c1c2a","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/inline%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0.html",{c:["c/c++"],g:["c++基础"],e:`<h1> inline内联函数</h1>
<figure><figcaption>1681304109194-2447f7ce-8687-48ed-932c-a4679599e78c</figcaption></figure>
<!--more-->
<p>在C++中，通常定义以下函数来求取两个整数的最大值</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">max</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">x</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">y</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> x </span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> y </span><span style="color: #C678DD">?</span><span style="color: #ABB2BF"> x </span><span style="color: #C678DD">:</span><span style="color: #ABB2BF"> y;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:8.28,words:2485},y:"a",t:"inline内联函数",i:"file",O:10},["/ccpp/02 c__基础/inline内联函数.html","/ccpp/02 c++基础/inline内联函数.html","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/inline%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0.html","/ccpp/02 c++基础/inline内联函数.md","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/inline%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0.md"]],["v-c97d844a","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/new%E3%80%81delete.html",{c:["c/c++"],g:["c++基础"],e:`<h1> new/delete关键字</h1>
<figure><figcaption>1681303112683-41ec0262-0bfb-46e8-a571-0e4cd626492a</figcaption></figure>
<!--more-->
<p>在C语言中，我们写程序时，总是会有动态开辟内存的需求，每到这个时候我们就会想到用<code>malloc/free </code>去从堆里面动态申请出来一段内存给我们用。但对这一块申请出来的内存，往往还需要我们对它进行稍许的“加工”后<strong>即初始化</strong> 才能为我们所用，<u>虽然C语言为我们提供了<code>calloc</code>来开辟一段初始化好（0)的一段内存，但，它同样束手无策</u>。同时，为了保持良好的编程习惯，我们也都应该对申请出来的内存作<u>手动进行初始化</u>。于是到了C++中就有了new/delete, new []/delete[] 。用它们便可实现动态的内存管理。</p>`,r:{minutes:15.07,words:4520},y:"a",t:"new/delete关键字",i:"file",O:4},["/ccpp/02 c__基础/new、delete.html","/ccpp/02 c++基础/new、delete.html","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/new%E3%80%81delete.html","/ccpp/02 c++基础/new、delete.md","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/new%E3%80%81delete.md"]],["v-6ef0e0ae","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/string.html",{c:["c/c++"],g:["c++基础"],e:`<h1> string</h1>
<figure><figcaption></figcaption></figure>
<!--more-->
<h2> c风格字符串</h2>
<p>两种定义字符串方式：</p>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">//1.数组定义</span></span>
<span class="line"><span style="color: #C678DD">char</span><span style="color: #ABB2BF"> str1</span><span style="color: #C678DD">[]</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> {</span><span style="color: #98C379">'h'</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'e'</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'l'</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'l'</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'o'</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'</span><span style="color: #56B6C2">\\0</span><span style="color: #98C379">'</span><span style="color: #ABB2BF">};</span><span style="color: #7F848E; font-style: italic">//局部变量，栈空间</span></span>
<span class="line"><span style="color: #C678DD">char</span><span style="color: #ABB2BF"> str2</span><span style="color: #C678DD">[]</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"hello"</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">	//结尾自动包含\\0,等价于str1</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//2.指针定义</span></span>
<span class="line"><span style="color: #C678DD">char*</span><span style="color: #ABB2BF"> str3 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"world"</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">	//文字常量区</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:8.51,words:2553},y:"a",t:"string",i:"file",O:12},["/ccpp/02 c__基础/string.html","/ccpp/02 c++基础/string.html","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/string.html","/ccpp/02 c++基础/string.md","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/string.md"]],["v-f8fc3194","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90.html",{c:["c/c++"],g:["c++基础","内存对齐"],e:`<h1> 内存对齐</h1>
<h2> 对齐规则</h2>
<p>对齐规则是<strong>按照成员的，依次安排内存，其为大小的整数倍，，最后的大小为的整数倍</strong></p>
<h2> 为什么要内存对齐？</h2>
<p>1.平台原因(移植原因)：不是所有的硬件平台都能访问任意地址上的任意数据的；某些硬件平台只能在某些地址处取某些特定类型的数据，否则抛出硬件异常。
2.性能原因：数据结构(尤其是栈)应该尽可能地在自然边界上对齐。原因在于，为了访问未对齐的内存，处理器需要作两次内存访问；而对齐的内存访问仅需要一次访问。
解释二
原因有这么几点：
<strong>1、的读取不是连续的，而是的，块的大小只能是1、2、4、8、16 ... 字节；</strong>
<strong>2、总线周期来，因此；</strong>
<strong>3、，否则会。</strong></p>`,r:{minutes:3.04,words:913},y:"a",t:"内存对齐",i:"file",O:13},["/ccpp/02 c__基础/内存对齐.html","/ccpp/02 c++基础/内存对齐.html","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90.html","/ccpp/02 c++基础/内存对齐.md","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90.md"]],["v-14c9e918","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD.html",{c:["c/c++"],g:["c++基础"],e:`<h1> 函数重载</h1>
<figure><figcaption></figcaption></figure>
<!--more-->
<p>在实际开发中，有时候需要实现几个功能类似的函数，只是细节有所不同。如交换两个变量的值，但这两种变量可以有多种类型，short, int, float等。<u>在C语言中</u>，必须要设计出不同名的函数，其原型类似于：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">swap1</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">short</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">short</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">swap2</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">swap3</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">float</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">float</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:11.13,words:3339},y:"a",t:"函数重载",i:"file",O:7},["/ccpp/02 c__基础/函数重载.html","/ccpp/02 c++基础/函数重载.html","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD.html","/ccpp/02 c++基础/函数重载.md","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD.md"]],["v-1155c5a0","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.html",{c:["c/c++"],g:["c++基础"],e:`<h1> 命名空间</h1>
<figure><figcaption>image-20240101150131801</figcaption></figure>
<!--more-->
<h2> 为什么要使用命名空间？</h2>
<p>一个大型的工程往往是由若干个人独立完成的，不同的人分别完成不同的部分，最后再组合成一个完整的程序。由于各个头文件是由不同的人设计的，有可能在不同的头文件中用了相同的名字来命名所定义的类或函数，这样在程序中就会出现名字冲突。不仅如此，有可能我们自己定义的名字会与C++库中的名字发生冲突。</p>
<p>名字冲突就是在同一个作用域中有两个或多个同名的实体，<u>为了解决 ，C++中引入了<strong>命名空间</strong></u>，所谓命名空间就是一个可以由用户自己定义的作用域，在不同的作用域中可以定义相同名字的变量，互不干扰，系统能够区分它们。</p>`,r:{minutes:8.92,words:2675},y:"a",t:"命名空间",i:"file",O:2},["/ccpp/02 c__基础/命名空间.html","/ccpp/02 c++基础/命名空间.html","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.html","/ccpp/02 c++基础/命名空间.md","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.md"]],["v-636256d6","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%AE%89%E5%85%A8.html",{c:["c/c++"],g:["c++基础"],e:`<h1> 异常安全--当出现异常时，要保证程序是安全的(<strong>预判错误</strong>)</h1>
<figure><figcaption>1681304184845-87c43f84-fc0b-472f-ac86-2c5c6dfa9716</figcaption></figure>
<!--more-->
<p><u>程序的错误大致可以分为三种，分别是<strong>语法错误</strong>、<strong>逻辑错误</strong>和<strong>运行时错误</strong></u>：</p>
<ol>
<li>语法错误在<strong>编译</strong>和<strong>链接</strong>阶段就能发现，只有 100% 符合语法规则的代码才能生成可执行程序。语法错误是最容易发现、最容易定位、最容易排除的错误，程序员最不需要担心的就是这种错误。</li>
<li>逻辑错误是说我们编写的<u>代码思路有问题</u>，不能够达到最终的目标，这种错误可以<u>通过调试来解决。</u></li>
<li>运行时错误是指程序在运行期间发生的错误，例如<strong>除数为 0、内存分配失败、数组越界、文件不存在</strong>等。<strong></strong>。</li>
</ol>`,r:{minutes:13.4,words:4020},y:"a",t:"异常安全--当出现异常时，要保证程序是安全的(预判错误)",i:"file",O:3},["/ccpp/02 c__基础/异常安全.html","/ccpp/02 c++基础/异常安全.html","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%AE%89%E5%85%A8.html","/ccpp/02 c++基础/异常安全.md","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%AE%89%E5%85%A8.md"]],["v-51ee3d17","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E5%BC%95%E7%94%A8.html",{c:["c/c++"],g:["c++基础"],e:`<h1> 引用</h1>
<figure><figcaption></figcaption></figure>
<!--more-->
<h2> 什么是引用？</h2>
<p>在理解引用概念前，先回顾一下变量名。 <u>变量名实质就是一段连续<strong>内存空间的别名</strong></u>。那一段连续的内存空间只能取一个别名吗？ 显然不是，引用的概念油然而生。在C++中，<u>引用是一个已定义变量的<strong>别名</strong></u>。其语法是：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">类型 </span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">引用名 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> 目标变量名；</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">test0</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> a </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">ref1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> a;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">ref2;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:12.45,words:3734},y:"a",t:"引用",i:"file",O:5},["/ccpp/02 c__基础/引用.html","/ccpp/02 c++基础/引用.html","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E5%BC%95%E7%94%A8.html","/ccpp/02 c++基础/引用.md","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E5%BC%95%E7%94%A8.md"]],["v-132402e1","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2.html",{c:["c/c++"],g:["c++基础"],e:`<h1> 强制转换</h1>
<figure><figcaption></figcaption></figure>
<!--more-->
<p>类型转换有c风格的，当然还有c++风格的。c风格的转换的格式很简单</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">TYPE a </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> （TYPE）EXPRESSION;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:6.89,words:2067},y:"a",t:"强制转换",i:"file",O:6},["/ccpp/02 c__基础/强制转换.html","/ccpp/02 c++基础/强制转换.html","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2.html","/ccpp/02 c++基础/强制转换.md","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2.md"]],["v-01408bc4","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0.html",{c:["c/c++"],g:["c++基础"],e:`<h1> 默认参数</h1>
<figure><figcaption>1681304023862-96f676ac-4269-4aa5-bf35-9cf222f1743c</figcaption></figure>
<ol>
<li>
</li>
<li>
</li>
<li>
</li>
<li>
</li>
</ol>
<!--more-->
<h2> 默认参数的目的</h2>
<p>C++可以给函数定义默认参数值。通常，调用函数时，要为函数的每个参数给定对应的实参</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">func1</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">x</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">y</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">func1</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">x</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">y</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"x = "</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> x </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"y = "</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> y </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.68,words:1404},y:"a",t:"默认参数",i:"file",O:8},["/ccpp/02 c__基础/默认参数.html","/ccpp/02 c++基础/默认参数.html","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0.html","/ccpp/02 c++基础/默认参数.md","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0.md"]],["v-f103c4b8","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/do-while(0).html",{c:["c/c++"],g:["do-while(0)"],e:`<h1> do-while(0)</h1>
<h2> 为了代码<strong>分块</strong>，比仅仅使用{}更直观些。例如在<code>cocos2d-x</code>代码中</h2>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">do</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    CCImage</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> pImage </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> new </span><span style="color: #61AFEF">CCImage</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">CC_BREAK_IF</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">NULL</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> pImage);</span></span>
<span class="line"><span style="color: #ABB2BF">    bRet </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">pImage</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #61AFEF">initWithString</span><span style="color: #ABB2BF">(text, (</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">)</span><span style="color: #E5C07B">dimensions</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">width</span><span style="color: #ABB2BF">, (</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">)</span><span style="color: #E5C07B">dimensions</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">height</span><span style="color: #ABB2BF">, eAlign, fontName, (</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">)fontSize);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">CC_BREAK_IF</span><span style="color: #ABB2BF">(</span><span style="color: #56B6C2">!</span><span style="color: #ABB2BF">bRet);</span></span>
<span class="line"><span style="color: #ABB2BF">    bRet </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">initWithImage</span><span style="color: #ABB2BF">(pImage);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">CC_SAFE_RELEASE</span><span style="color: #ABB2BF">(pImage);</span></span>
<span class="line"><span style="color: #ABB2BF">} </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF"> (</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.96,words:889},y:"a",t:"do-while(0)",i:"file",O:12},["/ccpp/01 c语言基础/do-while(0).html","/ccpp/01 c语言基础/do-while(0).md",":md"]],["v-fd4b7500","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/malloc%E3%80%81free%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0.html",{c:["c/c++"],g:["c语言基础"],e:`<h1> malloc、free的底层实现</h1>
<h2> 前言</h2>
<p>从<strong>操作系统角度</strong>来看，进程分配内存有2种方式，分别由2个系统调用完成：<code>brk</code>和<code>mmap</code>（不考虑共享内存）。</p>
<ul>
<li><code>brk</code>是将<strong>数据段(.data)<strong>的</strong>最高地址指针_edata</strong></li>
<li><code>mmap</code>是在进程的虚拟地址空间中（堆和栈中间，称为<strong>文件映射区域</strong>的地方）<strong>找一块空闲的虚拟内存</strong>。</li>
</ul>`,r:{minutes:9.15,words:2744},y:"a",t:"malloc、free的底层实现",i:"file",O:13},["/ccpp/01 c语言基础/malloc、free的底层实现.html","/ccpp/01 c语言基础/malloc、free的底层实现.md",":md"]],["v-332dfae6","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/scanf.html",{c:["c/c++"],g:["c基础"],e:`<h1> scanf</h1>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#define</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_CRT_SECURE_NO_WARNINGS</span><span style="color: #7F848E; font-style: italic">	//放在文件最上端；vs studio要写这个，linux不需要</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color: #61AFEF">scanf</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"</span><span style="color: #D19A66">%d</span><span style="color: #98C379">"</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">i2</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.84,words:252},y:"a",t:"scanf",i:"file",O:9},["/ccpp/01 c语言基础/scanf.html","/ccpp/01 c语言基础/scanf.md",":md"]],["v-062c257f","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/%E5%85%B3%E9%94%AE%E5%AD%97.html",{c:["c/c++"],g:["c基础"],e:`<p>知道关键字有哪些，这里列出避免大家后面命名变量名时， 和我们关键字重名。</p>
<table>
<thead>
<tr>
<th>auto</th>
<th>double</th>
<th>int</th>
<th>struct</th>
<th>else</th>
<th>break</th>
<th>long</th>
<th>switch</th>
</tr>
</thead>
<tbody>
<tr>
<td>case</td>
<td>enum</td>
<td>register</td>
<td>typedef</td>
<td>char</td>
<td>extern</td>
<td>return</td>
<td>union</td>
</tr>
<tr>
<td>const</td>
<td>float</td>
<td>short</td>
<td>unsigned</td>
<td>continue</td>
<td>for</td>
<td>signed</td>
<td>void</td>
</tr>
<tr>
<td>default</td>
<td>goto</td>
<td>sizeof</td>
<td>volatile</td>
<td>do</td>
<td>if</td>
<td>while</td>
<td>static</td>
</tr>
</tbody>
</table>`,r:{minutes:.44,words:131},y:"a",t:"关键字",i:"file",O:3},["/ccpp/01 c语言基础/关键字.html","/ccpp/01 c语言基础/关键字.md",":md"]],["v-70779923","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/%E5%89%8D%E8%A8%80.html",{c:["c/c++"],g:["c基础"],e:`<h1> 前言</h1>
<!--more-->
<h2> 为什么叫c语言</h2>
<blockquote>
<p>详细请看wd_C语言</p>
</blockquote>
<p>其实是因为先有高级语言ALGOL 60，简称 A 语言，后来经过简化，变为 BCPL 语言，简称 B 语言，而 <u>C 语言是在 B 语言的基础之上发展而来的</u>，所以就称为 C 语言。所以<u>世界上第一个 C 语言的编译器是用 B语言编写的。</u></p>
<h2> UNIX和c语言的发展史</h2>
<ul>
<li>
<p>1965年为了<u>解决大型机连接终端数量不够用的问题</u>(当时大型主机至多能提供 30 台终端（30 个键盘、显示器)，连接一台电脑)，<strong>贝尔实验室</strong> 加入了 <strong>麻省理工学院</strong> 以及 <strong>通用电气</strong> 合作的计划</p>
</li>
<li>
<p>1969 年前后这个项目进度缓慢，资金短缺，贝尔实验室退出了研究</p>
</li>
<li>
<p>1969 年从这个项目中退出的 <strong>Ken Thompson</strong> 当时在实验室无聊时，为了让一台空闲的电脑上能够运行 “星际旅行（Space Travel）” 游行，在 8 月份左右趁着其妻子探亲的时间，用了 <strong>1 个月的时间</strong>，使用<u>汇编</u>写出了 <strong>Unix 操作系统的原型</strong></p>
</li>
<li>
<p>1970 年，美国贝尔实验室的 <strong>Ken Thompson</strong> ，以 BCPL 语言为基础，设计出很简单且很接近硬件的 B 语言（取 BCPL 的首字母），并且他用 <strong><u>B 语言</u> 写了第一个 UNIX 操作系统</strong></p>
</li>
<li>
<p>1971 年，同样酷爱 “星际旅行（Space Travel）” 的 <strong>Dennis M.Ritchie</strong> 为了能早点儿玩上游戏，加入了 <strong>Thompson</strong> 的开发项目，合作开发 UNIX，<strong>他的主要工作是改造 B语言，因为 B 语言 的跨平台性较差</strong></p>
</li>
<li>
<p>1972 年， <strong><u>Dennis M.Ritchie（丹尼斯·里奇）</u> 在 B 语言 的基础上最终设计出了</strong>一种新的语言，他取了 CPL 的第二个字母作为这种语言的名字，这就是 <strong>C 语言</strong></p>
</li>
<li>
<p>1973 年初， C 语言的主体完成， <strong>Thompson 和 Ritchie</strong> 迫不及待地开始用它完全重写了现在大名鼎鼎的 <strong>Unix 操作系统</strong></p>
</li>
</ul>`,r:{minutes:7.58,words:2273},y:"a",t:"前言",i:"file",O:1},["/ccpp/01 c语言基础/前言.html","/ccpp/01 c语言基础/前言.md",":md"]],["v-198bd17a","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/%E5%8F%98%E9%87%8F.html",{c:["c/c++"],g:["c基础"],e:`<h1> 变量</h1>
<p><strong>变量：有名字的内存空间</strong></p>
<!--more-->
<h2> 变量命名(标识符)的规定：</h2>
<ul>
<li>由字母、 数字和下划线三种字符组成，</li>
<li>第一个字符必须为字母或下划线</li>
<li>不能与关键字重名</li>
</ul>
<p>注意：</p>
<ul>
<li>区分大小写，</li>
<li>
 ，</li>
<li>应注意做到“见名知意” ， 即选有含意的英文单词 （或其缩写） 作标识符。</li>
</ul>
<h2> 数据类型</h2>
<ol>
<li><strong>内存大小</strong></li>
<li><strong>解释方式</strong></li>
</ol>`,r:{minutes:.61,words:183},y:"a",t:"变量",i:"file",O:6},["/ccpp/01 c语言基础/变量.html","/ccpp/01 c语言基础/变量.md",":md"]],["v-a688fcfc","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/%E5%AD%97%E7%AC%A6.html",{c:["c/c++"],g:["c基础"],e:`<ul>
<li>字面值界定符<code>'</code></li>
</ul>
<p>字符字面值的表示方法：</p>
<figure><figcaption>image-20231230175915108</figcaption></figure>
`,r:{minutes:.29,words:87},y:"a",t:"字符",i:"file",O:10},["/ccpp/01 c语言基础/字符.html","/ccpp/01 c语言基础/字符.md",":md"]],["v-505a1229","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/%E5%B8%B8%E9%87%8F.html",{c:["c/c++"],g:["c基础"],e:`<p>基本数据类型有常量和变量， 首先我们先来看一下常量， <strong>在程序运行过程中,其值不能被改变的量</strong>称为<strong>常量</strong></p>
<!--more-->
<figure><figcaption>image-20231230130126412</figcaption></figure>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//#define PI 3	</span></span>
<span class="line"><span style="color: #C678DD">#define</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">PI</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">0x</span><span style="color: #D19A66">123</span><span style="color: #ABB2BF">	</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">/*</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">1. 宏定义一般大写</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">2. 字面值常量  --&gt;magic number</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">   符号常量</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #7F848E; font-style: italic">//printf("PI = %d\\n", 3);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">printf</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"PI = </span><span style="color: #D19A66">%d</span><span style="color: #56B6C2">\\n</span><span style="color: #98C379">"</span><span style="color: #ABB2BF">, PI);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #7F848E; font-style: italic">//3 = 4</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #7F848E; font-style: italic">//PI = 4	//常量不可改变值</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.71,words:212},y:"a",t:"常量",i:"file",O:4},["/ccpp/01 c语言基础/常量.html","/ccpp/01 c语言基础/常量.md",":md"]],["v-1c610f8b","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",{c:["c/c++"],g:["c基础"],e:`<h1> 数据类型</h1>
<figure><figcaption>image-20231230124538132</figcaption></figure>
<!--more-->
<p><mark>数据类型作用：</mark></p>
<ol>
<li><mark><strong>内存大小</strong></mark></li>
<li><mark><strong>解释方式</strong></mark></li>
</ol>
`,r:{minutes:.32,words:96},y:"a",t:"数据类型",i:"file",O:2},["/ccpp/01 c语言基础/数据类型.html","/ccpp/01 c语言基础/数据类型.md",":md"]],["v-573fd3b5","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/%E6%95%B4%E5%9E%8B.html",{c:["c/c++"],g:["c基础"],e:`<h1> 整型（integer）</h1>
<figure><figcaption>image-20231230140401166</figcaption></figure>
<!--more-->
<h2> 有符号整型</h2>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">char</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">short</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">long</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:.61,words:182},y:"a",t:"整型（integer）",i:"file",O:7},["/ccpp/01 c语言基础/整型.html","/ccpp/01 c语言基础/整型.md",":md"]],["v-63c16f9b","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/%E6%B5%AE%E7%82%B9%E6%95%B0.html",{c:["c/c++"],g:["c基础"],e:`<h1> 浮点数</h1>
<blockquote>
<p>使用浮点数直接使用 double 即可</p>
</blockquote>
<!--more-->
<h2> 浮点数字面值表示方法</h2>
<ol>
<li>小数形式：0.123</li>
<li>指数形式：3e-3（为3 * 10<sup>-3</sup> ，即0.003）</li>
</ol>
<p>注意：</p>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//#define PI 3.14</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//#define PI 0.314E1</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//#define PI 0.314e1</span></span>
<span class="line"><span style="color: #C678DD">#define</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">PI</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">31.4</span><span style="color: #E06C75">e</span><span style="color: #ABB2BF">-</span><span style="color: #D19A66">1</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//#define PI 31.4E0.5 e后面只能写整数</span></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">printf</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"PI = </span><span style="color: #D19A66">%f</span><span style="color: #56B6C2">\\n</span><span style="color: #98C379">"</span><span style="color: #ABB2BF">,PI);</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.61,words:484},y:"a",t:"浮点数",i:"file",O:10},["/ccpp/01 c语言基础/浮点数.html","/ccpp/01 c语言基础/浮点数.md",":md"]],["v-a253b292","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/%E8%A1%A5%E7%A0%81.html",{c:["c/c++"],g:["c基础"],e:`<h1> 补码</h1>
<h2> 为什么需要补码</h2>
<p>计算机的 CPU 是无法做减法操作 的，只能做加法，其实 <mark>CPU 中有一个逻辑单元叫加法器</mark>，计算机所做的<u><em>减法，乘法，除法</em>，都是由科学家将其变化为<strong>加法</strong></u>。</p>
<!--more-->
<h2> 补码的实现</h2>
<figure><figcaption>img</figcaption></figure>
<figure><figcaption>在这里插入图片描述</figcaption></figure>
<blockquote>
<p><u>负数</u>快速求机器数的方法</p>
<p>-2 + 12 = 10</p>
<p><strong></strong></p>
</blockquote>`,r:{minutes:.67,words:201},y:"a",t:"补码",i:"file",O:8},["/ccpp/01 c语言基础/补码.html","/ccpp/01 c语言基础/补码.md",":md"]],["v-35cd92ed","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2.html",{c:["c/c++"],g:["c基础"],e:`<ol>
<li>八进制字面值   023
<ul>
<li>以0作为八进制数的前缀</li>
<li>数码取值为0～7</li>
<li>八进制数通常是无符号数。</li>
</ul>
</li>
<li>十进制字面值	456</li>
<li>十六进制字面值	0x456</li>
</ol>
<!--more-->
<figure><figcaption>image-20231230134403043</figcaption></figure>
`,r:{minutes:.47,words:140},y:"a",t:"8进制、10进制、16进制及进制转换",i:"file",O:5},["/ccpp/01 c语言基础/进制转换.html","/ccpp/01 c语言基础/进制转换.md",":md"]],["v-2a2097b4","/ccpp/04%20%E6%A8%A1%E6%9D%BF/STL%E5%90%91%E9%87%8F%E5%AE%B9%E5%99%A8vector%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0.html",{c:["c/c++"],g:["模板实践","STL"],e:`<h1> STL向量容器vector简单实现</h1>
<h2> 什么是容器</h2>
<p><strong>就是<u>保存其他对象的对象</u>。而且，这种“对象”<u>还有处理“其他对象”的方法</u></strong></p>
<p>C++采用基于<strong>模版</strong>的方式处理容器，STL中的容器提供了多种数据结构。</p>
<p><strong>它可以像数组一样被操作，由于它的特性我们完全可以将vector 看作动态数组。</strong></p>
<h2> 特点</h2>
<ol>
<li>随机访问</li>
<li>线性顺序结构。可以指定一块连续的空间，也可以不预先指定大小，空间可自动扩展，也可以像数组一样被操作，即支持[ ]操作符和vector.at()，因此可看做动态数组，通常体现在追加数据push_back()和删除末尾数据pop_back()。</li>
<li>当分配空间不够时，vector会申请一块更大的内存块（以2的倍数增长），然后将原来的数据拷贝到新内存块中并将原内存块中的对象销毁，最后释放原来的内存空间。因此如果vector保存的数据量很大时会很消耗性能，因此在<u>预先知道它大小时性能最优</u>。</li>
<li>节省空间。因为它是连续存储，在存储数据的区域是没有浪费的，但实际上大多数时候是存不满的，因此实际上未存储的区域是浪费的。</li>
<li>在内部进行插入和删除的操作效率低。由于vector内部按顺序表结构设计，因此这样的操作基本上是**<strong>，它被设计成</strong>**。</li>
</ol>`,r:{minutes:3.04,words:912},y:"a",t:"STL向量容器vector简单实现",i:"file",O:4},["/ccpp/04 模板/STL向量容器vector简单实现.html","/ccpp/04 模板/STL向量容器vector简单实现.md",":md"]],["v-4ee2bd74","/ccpp/04%20%E6%A8%A1%E6%9D%BF/%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E4%B8%8E%E6%A8%A1%E6%9D%BF%E5%87%BD%E6%95%B0.html",{c:["c/c++"],g:["模板"],e:`<h1> 函数模板与模板函数</h1>
<h2> 为什么要定义模板？</h2>
<ol>
<li>
<p>简化程序，少写代码，维持结构的清晰，大大提高程序的效率。</p>
</li>
<li>
<p>解决强类型语言的<strong>严格性</strong>和<strong>灵活性</strong>之间的冲突。</p>
<ol>
<li>带参数的宏定义(原样替换)</li>
<li>函数重载(函数名字相同，参数不同)</li>
<li>模板(将数据类型作为参数)</li>
</ol>
</li>
<li>
<p><strong>强类型语言程序设计</strong>：C/C++/Java等，有严格的类型检查，如int a = 10，<u>在编译时候明确变量的类</u>
<u>型，如果有问题就可以在编译时发现错误，安全，但是不够灵活</u>，<strong></strong>。</p>
</li>
<li>
<p><strong>弱类型程序语言设计</strong>：js/python等，虽然也有类型，但是在使用的时候直接使用let/var number,<u>不知道变量具体类型，由编译器解释变量类型，属于解释型语言。如果有错，到运行时才发现，虽然灵活，但是不安全。</u></p>
</li>
</ol>`,r:{minutes:6.46,words:1939},y:"a",t:"函数模板与模板函数",i:"file",O:1},["/ccpp/04 模板/函数模板与模板函数.html","/ccpp/04 模板/函数模板与模板函数.md",":md"]],["v-93ba2c5c","/ccpp/04%20%E6%A8%A1%E6%9D%BF/%E5%8F%AF%E5%8F%98%E6%A8%A1%E6%9D%BF%E5%8F%82%E6%95%B0.html",{c:["c/c++"],g:["模板"],e:`<h1> 可变模板参数</h1>
<p>是新增的最强大的特性之一，它对参数进行了高度的泛化，它能表示**<strong>、</strong>**的参数。</p>
<h2> 模板参数包</h2>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">template</span><span style="color: #ABB2BF">&lt;typename… </span><span style="color: #C678DD">Args</span><span style="color: #ABB2BF">&gt; </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">tuple</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">//tuple是元组的意思，其模板参数就是模板参数包</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:2.24,words:673},y:"a",t:"可变模板参数",i:"file",O:3},["/ccpp/04 模板/可变模板参数.html","/ccpp/04 模板/可变模板参数.md",":md"]],["v-97506104","/ccpp/04%20%E6%A8%A1%E6%9D%BF/%E5%AE%B9%E5%99%A8%E7%A9%BA%E9%97%B4%E9%80%82%E9%85%8D%E5%99%A8allocator%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0.html",{c:["使用指南"],g:["页面配置","使用指南"],e:`<h1> 容器空间适配器allocator简单实现</h1>
<h2> 容器为什么需要空间配置器，不用空间配置器会怎么样？</h2>
<p>我们还是<a href="/ccpp/04%20%E6%A8%A1%E6%9D%BF/STL%E5%90%91%E9%87%8F%E5%AE%B9%E5%99%A8vector%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0.html#%E7%AE%80%E5%8D%95%E7%89%88" target="blank">前面简单实现的vector容器</a>，用Test来实例化：</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Test</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">Test</span><span style="color: #ABB2BF">(){cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Test()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">~Test</span><span style="color: #ABB2BF">(){cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"~Test"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;}</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.06,words:1217},y:"a",t:"容器空间适配器allocator简单实现",i:"file",O:5},["/ccpp/04 模板/容器空间适配器allocator的简单实现.html","/ccpp/04 模板/容器空间适配器allocator的简单实现.md",":md"]],["v-ca1f584c","/ccpp/04%20%E6%A8%A1%E6%9D%BF/%E7%B1%BB%E6%A8%A1%E6%9D%BF%E4%B8%8E%E6%A8%A1%E6%9D%BF%E7%B1%BB.html",{c:["c/c++"],g:["模板"],e:`<h1> 类模板与模板类</h1>
<p><strong>类模板：仅仅的类的抽象</strong></p>
<p><strong>类模板的实例化就是</strong></p>
<p><u>使用与函数模板也差不多，只是要</u>，直接使用例子看类模板。</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">//类模板</span></span>
<span class="line"><span style="color: #C678DD">template</span><span style="color: #ABB2BF"> &lt;</span><span style="color: #C678DD">typename</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">kSize</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">&gt;</span><span style="color: #7F848E; font-style: italic">//类型参数T与非类型参数kSize</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Stack</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #61AFEF">Stack</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  : </span><span style="color: #61AFEF">_top</span><span style="color: #ABB2BF">(</span><span style="color: #56B6C2">-</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  , </span><span style="color: #61AFEF">_data</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF">[kSize]())</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  {</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  }</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #61AFEF">~Stack</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">full</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">push</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">t</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">pop</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">top</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _top;</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;T </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">_data;</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;};</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//类模板在类外面定义成员函数时候需要注意，模板是有类型的，需要使用参数加类型</span></span>
<span class="line"><span style="color: #C678DD">template</span><span style="color: #ABB2BF"> &lt;</span><span style="color: #C678DD">typename</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">kSize</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">Stack&lt;</span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">kSize</span><span style="color: #ABB2BF">&gt;::</span><span style="color: #56B6C2">~</span><span style="color: #61AFEF">Stack</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(_data)</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  {</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">[]</span><span style="color: #ABB2BF"> _data;</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp; &nbsp;_data </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"><span style="color: #C678DD">template</span><span style="color: #ABB2BF"> &lt;</span><span style="color: #C678DD">typename</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">kSize</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Stack</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">kSize</span><span style="color: #ABB2BF">&gt;::</span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">const</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">-</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> _top;</span><span style="color: #7F848E; font-style: italic">//_top = -1</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"><span style="color: #C678DD">template</span><span style="color: #ABB2BF"> &lt;</span><span style="color: #C678DD">typename</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">kSize</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Stack</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">kSize</span><span style="color: #ABB2BF">&gt;::</span><span style="color: #61AFEF">full</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">const</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> _top </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> kSize </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"><span style="color: #C678DD">template</span><span style="color: #ABB2BF"> &lt;</span><span style="color: #C678DD">typename</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">kSize</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Stack</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">kSize</span><span style="color: #ABB2BF">&gt;::</span><span style="color: #61AFEF">push</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">t</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #56B6C2">!</span><span style="color: #61AFEF">full</span><span style="color: #ABB2BF">())</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  {</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="color: #E5C07B">_data</span><span style="color: #ABB2BF">[</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">_top] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> t;</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  }</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #C678DD">else</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  {</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp; &nbsp;cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"The Stack is full, cannot push any data"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"><span style="color: #C678DD">template</span><span style="color: #ABB2BF"> &lt;</span><span style="color: #C678DD">typename</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">kSize</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Stack</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">kSize</span><span style="color: #ABB2BF">&gt;::</span><span style="color: #61AFEF">pop</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #56B6C2">!</span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">())</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  {</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="color: #C678DD">--</span><span style="color: #ABB2BF">_top;</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  }</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #C678DD">else</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  {</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp; &nbsp;cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"The Stack is empty"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"><span style="color: #C678DD">template</span><span style="color: #ABB2BF"> &lt;</span><span style="color: #C678DD">typename</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">kSize</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #E5C07B">T</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Stack</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">kSize</span><span style="color: #ABB2BF">&gt;::</span><span style="color: #61AFEF">top</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">const</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_data</span><span style="color: #ABB2BF">[_top];</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">test</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;Stack</span><span style="color: #C678DD">&lt;int</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">8</span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> st;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">test1</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;Stack</span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF">string</span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> st;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.6,words:481},y:"a",t:"类模板与模板类",i:"file",O:2},["/ccpp/04 模板/类模板与模板类.html","/ccpp/04 模板/类模板与模板类.md",":md"]],["v-733883fe","/ccpp/05%20%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/string%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0.html",{c:["c/c++"],g:["运算符重载","迭代器"],e:`<h1> string迭代器的实现</h1>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">string str1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"hello world!"</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">//str1叫容器吗？</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:4.17,words:1252},y:"a",t:"string迭代器的实现",i:"file",O:4},["/ccpp/05 运算符重载/string迭代器的实现.html","/ccpp/05 运算符重载/string迭代器的实现.md",":md"]],["v-0aad1b8c","/ccpp/05%20%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/vector%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0.html",{c:["c/c++"],g:["运算符重载","迭代器"],e:`<h1> vector迭代器的实现</h1>
<p><strong>泛型算法：给所有容器都可以使用，参数接受的都是容器的迭代器。</strong></p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">//容器的空间配置器</span></span>
<span class="line"><span style="color: #C678DD">template</span><span style="color: #ABB2BF"> &lt;</span><span style="color: #C678DD">typename</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #C678DD">struct</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Allocator</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">T</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">allocate</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">size</span><span style="color: #ABB2BF">)</span><span style="color: #7F848E; font-style: italic">//只负责内存开辟</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (T</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)</span><span style="color: #61AFEF">malloc</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">sizeof</span><span style="color: #ABB2BF">(T) </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> size);</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">deallocate</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #E06C75; font-style: italic">p</span><span style="color: #ABB2BF">)</span><span style="color: #7F848E; font-style: italic">//只负责内存释放</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #61AFEF">free</span><span style="color: #ABB2BF">(p);</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">construct</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #E06C75; font-style: italic">p</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">val</span><span style="color: #ABB2BF">)</span><span style="color: #7F848E; font-style: italic">//已经开辟好的内存上，负责对象构造</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> (p) </span><span style="color: #61AFEF">T</span><span style="color: #ABB2BF">(val);</span><span style="color: #7F848E; font-style: italic">//定位new，指定内存上构造val，T(val)拷贝构造</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">destroy</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #E06C75; font-style: italic">p</span><span style="color: #ABB2BF">)</span><span style="color: #7F848E; font-style: italic">//只负责对象析构</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #E5C07B">p</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #61AFEF">~T</span><span style="color: #ABB2BF">();</span><span style="color: #7F848E; font-style: italic">//~T()代表了T类型的析构函数</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">template</span><span style="color: #ABB2BF"> &lt;</span><span style="color: #C678DD">typename</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">typename</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Alloc</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> Allocator&lt;</span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF">&gt;&gt;</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #7F848E; font-style: italic">//向量容器</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">vector</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">size</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">)</span><span style="color: #7F848E; font-style: italic">//构造</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">		//_first = new T[size];</span></span>
<span class="line"><span style="color: #ABB2BF">		_first </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">allocate</span><span style="color: #ABB2BF">(size);</span></span>
<span class="line"><span style="color: #ABB2BF">		_last </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> _first;</span></span>
<span class="line"><span style="color: #ABB2BF">		_end </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> _first </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> size;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">~vector</span><span style="color: #ABB2BF">()</span><span style="color: #7F848E; font-style: italic">//析构</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">		//delete[]_first;</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">for</span><span style="color: #ABB2BF"> (T </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">p</span><span style="color: #C678DD">=</span><span style="color: #ABB2BF">_first; p</span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF">_last; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">p)</span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">destroy</span><span style="color: #ABB2BF">(p);</span><span style="color: #7F848E; font-style: italic">//把_first指针指向的数组的有效元素析构</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">deallocate</span><span style="color: #ABB2BF">(_first);</span><span style="color: #7F848E; font-style: italic">//释放堆上的数组内存</span></span>
<span class="line"><span style="color: #ABB2BF">		_first </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> _last </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> _end </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">vector</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF">&gt; </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">rhs</span><span style="color: #ABB2BF">)</span><span style="color: #7F848E; font-style: italic">//拷贝构造</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> size </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">rhs</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_end</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">rhs</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_first</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">//空间大小</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">		//_first = new T[size];</span></span>
<span class="line"><span style="color: #ABB2BF">		_first </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">allocate</span><span style="color: #ABB2BF">(size);</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> len </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">rhs</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_last</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">rhs</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_first</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">//有效元素</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">for</span><span style="color: #ABB2BF"> (</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i</span><span style="color: #C678DD">=</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; i</span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF">len; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">i)</span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">			//_first[i] = rhs._first[i];</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">construct</span><span style="color: #ABB2BF">(_first</span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF">i, </span><span style="color: #E5C07B">rhs</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_first</span><span style="color: #ABB2BF">[i]);</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"><span style="color: #ABB2BF">		_last </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> _first </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> len;</span></span>
<span class="line"><span style="color: #ABB2BF">		_end </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> _first </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> size;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">operator</span><span style="color: #ABB2BF">=(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF">&gt; </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">rhs</span><span style="color: #ABB2BF">)</span><span style="color: #7F848E; font-style: italic">//赋值运算符重载</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">rhs)</span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">		//delete[]_first;</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">for</span><span style="color: #ABB2BF"> (T </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">p</span><span style="color: #C678DD">=</span><span style="color: #ABB2BF">_first; p</span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF">_last; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">p)</span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">destory</span><span style="color: #ABB2BF">(p);</span><span style="color: #7F848E; font-style: italic">//把_first指针指向的数组的有效元素析构</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">deallocate</span><span style="color: #ABB2BF">(_first);</span><span style="color: #7F848E; font-style: italic">//释放堆上的数组内存</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> size </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">rhs</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_end</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">rhs</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_first</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">//空间大小</span></span>
<span class="line"><span style="color: #ABB2BF">		_first </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">allocate</span><span style="color: #ABB2BF">(size);</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> len </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">rhs</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_last</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">rhs</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_first</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">//有效元素</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">for</span><span style="color: #ABB2BF"> (</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i</span><span style="color: #C678DD">=</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; i</span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF">len; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">i)</span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">construct</span><span style="color: #ABB2BF">(_first</span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF">i, </span><span style="color: #E5C07B">rhs</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_first</span><span style="color: #ABB2BF">[i]);</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"><span style="color: #ABB2BF">		_last </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> _first </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> len;</span></span>
<span class="line"><span style="color: #ABB2BF">		_end </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> _first </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> size;</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">push_back</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">val</span><span style="color: #ABB2BF">)</span><span style="color: #7F848E; font-style: italic">//尾插</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #61AFEF">full</span><span style="color: #ABB2BF">())</span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #61AFEF">expand</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">		//*_last++ = val;</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">construct</span><span style="color: #ABB2BF">(_last, val);</span><span style="color: #7F848E; font-style: italic">//_last指针指向的内存构造一个值为val的对象</span></span>
<span class="line"><span style="color: #ABB2BF">		_last</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">pop_back</span><span style="color: #ABB2BF">()</span><span style="color: #7F848E; font-style: italic">//尾删</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">()) </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">		//--_last;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">		//不仅要把_last指针--，还需要析构删除的元素</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">--</span><span style="color: #ABB2BF">_last;</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">destroy</span><span style="color: #ABB2BF">(_last);</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">back</span><span style="color: #ABB2BF">()</span><span style="color: #C678DD">const</span><span style="color: #7F848E; font-style: italic">//返回容器末尾元素值</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">(_last </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">full</span><span style="color: #ABB2BF">()</span><span style="color: #C678DD">const</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> _last </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> _end;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">()</span><span style="color: #C678DD">const</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> _first </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> _last;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">()</span><span style="color: #C678DD">const</span><span style="color: #7F848E; font-style: italic">//返回容器中元素个数</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> _last </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> _first;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">T</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">operator</span><span style="color: #ABB2BF">[](</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">index</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (index </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">||</span><span style="color: #ABB2BF"> index </span><span style="color: #C678DD">&gt;=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">())</span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #C678DD">throw</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"OutOfRangeException"</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_first</span><span style="color: #ABB2BF">[index];</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	//迭代器一般实现成容器的嵌套类型</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">iterator</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #61AFEF">iterator</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #E06C75; font-style: italic">ptr</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">			:</span><span style="color: #61AFEF">_ptr</span><span style="color: #ABB2BF">(ptr){}</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">operator</span><span style="color: #ABB2BF">!=(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">iterator</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">it</span><span style="color: #ABB2BF">)</span><span style="color: #C678DD">const</span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> _ptr </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">it</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_ptr</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">operator</span><span style="color: #ABB2BF">++()</span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #ABB2BF">			_ptr</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #E5C07B">T</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">operator</span><span style="color: #ABB2BF">*()</span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">_ptr;</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">T</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">operator</span><span style="color: #ABB2BF">*()</span><span style="color: #C678DD">const</span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">_ptr;</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">		T </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">_ptr;</span></span>
<span class="line"><span style="color: #ABB2BF">	};</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">iterator</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">begin</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">iterator</span><span style="color: #ABB2BF">(_first);</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">iterator</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">end</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">iterator</span><span style="color: #ABB2BF">(_last);</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">	T </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">_first;</span><span style="color: #7F848E; font-style: italic">//起始数组位置</span></span>
<span class="line"><span style="color: #ABB2BF">	T </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">_last;</span><span style="color: #7F848E; font-style: italic">//指向最后一个有效元素后继位置</span></span>
<span class="line"><span style="color: #ABB2BF">	T </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">_end;</span><span style="color: #7F848E; font-style: italic">//指向数组空间的后继位置</span></span>
<span class="line"><span style="color: #ABB2BF">	Alloc _allocator;</span><span style="color: #7F848E; font-style: italic">//定义容器的空间配置器对象</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">expand</span><span style="color: #ABB2BF">()</span><span style="color: #7F848E; font-style: italic">//扩容</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> size </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> _end </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> _first;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">		//T *ptmp = new T[2*size];</span></span>
<span class="line"><span style="color: #ABB2BF">		T </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">ptmp </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">allocate</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">2</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">size);</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">for</span><span style="color: #ABB2BF"> (</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i</span><span style="color: #C678DD">=</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; i</span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF">size; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">i)</span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">construct</span><span style="color: #ABB2BF">(ptmp</span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF">i, </span><span style="color: #E5C07B">_first</span><span style="color: #ABB2BF">[i]);</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">			//ptmp[i] = _first[i];</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">		//delete[]_first;</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">for</span><span style="color: #ABB2BF"> (T </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">p</span><span style="color: #C678DD">=</span><span style="color: #ABB2BF">_first; p</span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF">_last; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">p)</span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">destroy</span><span style="color: #ABB2BF">(p);</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">deallocate</span><span style="color: #ABB2BF">(_first);</span></span>
<span class="line"><span style="color: #ABB2BF">		_first </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> ptmp;</span></span>
<span class="line"><span style="color: #ABB2BF">		_last </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> _first </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> size;</span></span>
<span class="line"><span style="color: #ABB2BF">		_end </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> _first </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">2</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">size;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">	vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> vec;</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">for</span><span style="color: #ABB2BF"> (</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i</span><span style="color: #C678DD">=</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; i</span><span style="color: #C678DD">&lt;</span><span style="color: #D19A66">20</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">i)</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #E5C07B">vec</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push_back</span><span style="color: #ABB2BF">(</span><span style="color: #61AFEF">rand</span><span style="color: #ABB2BF">()</span><span style="color: #56B6C2">%</span><span style="color: #D19A66">100</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> size </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vec</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">();</span><span style="color: #7F848E; font-style: italic">//[]重载针对vector有意义</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">for</span><span style="color: #ABB2BF"> (</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i</span><span style="color: #C678DD">=</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; i</span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF">size; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">i)</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vec</span><span style="color: #ABB2BF">[i] </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">" "</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">//底层是数组，O(1)</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	vector&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;::iterator it </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vec</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">begin</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	//auto it = vec.begin();</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">for</span><span style="color: #ABB2BF"> (; it</span><span style="color: #C678DD">!=</span><span style="color: #E5C07B">vec</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">end</span><span style="color: #ABB2BF">(); </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">it)</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">it </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">" "</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> val : vec)</span><span style="color: #7F848E; font-style: italic">//底层还是通过容器的迭代器来实现遍历的</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> val </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">" "</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.85,words:856},y:"a",t:"vector迭代器的实现",i:"file",O:5},["/ccpp/05 运算符重载/vector迭代器的实现.html","/ccpp/05 运算符重载/vector迭代器的实现.md",":md"]],["v-6a78bf1e","/ccpp/05%20%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/%E5%89%96%E6%9E%90new%E5%92%8Cdelete%E5%AE%9E%E4%B9%A0%E5%8E%9F%E7%90%86.html",{c:["使用指南"],g:["运算符重载","new/delete"],e:`<h1> 剖析new与delete实现原理</h1>
<p>[new/delete关键字 | 张威的编程学习笔记 (gitee.io)](https://iszhwei.gitee.io/ccpp/02 c__基础/new、delete.html)</p>
<h2> 我们先来看一下：malloc与new、delete与free区别</h2>
<ol>
<li>malloc与new的区别：</li>
</ol>
<p>①malloc<strong>按字节</strong>开辟内存的；new开辟内存时需要指定类型；
②malloc开辟内存<strong>返回的都是void *** ，new相当于运算符重载函数，返回值自动转为</strong>指定的类型的指针。**
③malloc<strong>只负责开辟内存</strong>空间，new不仅仅也有malloc功能，<strong>还可以进行数据的初始化</strong>。
④malloc开辟内存<strong>失败返回nullptr</strong>指针；new<strong>抛出的是bad_alloc类型的异常</strong>。
⑤malloc开辟<strong>单个元素内存与数组内存是一样的，都是给字节数</strong>；new开辟时对<strong>单个元素内存后面不需要[]，而数组需要[]并给上元素个数</strong>。</p>`,r:{minutes:5.66,words:1698},y:"a",t:"剖析new和delete实现原理",i:"file",O:7},["/ccpp/05 运算符重载/剖析new和delete实习原理.html","/ccpp/05 运算符重载/剖析new和delete实习原理.md",":md"]],["v-7d06c0d6","/ccpp/05%20%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/%E5%8F%8B%E5%85%83.html",{c:["c/c++"],g:["类和对象"],e:`<h1> 友元friend</h1>
<p>作用：访问类中的私有成员</p>
<p>友元的形式可以分为<strong>友元函数</strong>和<strong>友元类</strong>。</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> 类名 </span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> &nbsp; &nbsp;//...</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">friend</span><span style="color: #ABB2BF"> 函数原型;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">friend</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> 类名;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> &nbsp; &nbsp;//...</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.13,words:340},y:"a",t:"友元",i:"file",O:1},["/ccpp/05 运算符重载/友元.html","/ccpp/05 运算符重载/友元.md",":md"]],["v-f0f10ec2","/ccpp/05%20%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/%E5%A4%8D%E6%95%B0%E7%B1%BBCComplex.html",{c:["c/c++"],g:["运算符重载"],e:`<h1> 复数类CComplex</h1>
<p>运算符重载：运算符<u>不仅能实现原有的功能，而且能实现在函数中指定的新的功能</u>。本质还是<strong>函数重载</strong>或<strong>函数多态</strong></p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">//格式</span></span>
<span class="line"><span style="color: #ABB2BF">函数类型 operator 运算符名称(形参表) {</span></span>
<span class="line"><span style="color: #ABB2BF">	对运算符的重载处理</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.91,words:872},y:"a",t:"复数类CComplex",i:"file",O:1},["/ccpp/05 运算符重载/复数类CComplex.html","/ccpp/05 运算符重载/复数类CComplex.md",":md"]],["v-253e305c","/ccpp/05%20%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD%E5%AE%9E%E7%8E%B0string%E7%B1%BB.html",{c:["c/c++"],g:["运算符重载"],e:`<h1> 运算符重载实现string类</h1>
<h2> 注意事项</h2>
<ul>
<li>
<p><strong>等号赋值</strong>的四步走</p>
<ol>
<li>防止自己给自己赋值</li>
<li>释放之前所占的外部资源</li>
<li>申请新的空间然后将数据拷贝进去</li>
<li>返回*this</li>
</ol>
</li>
<li>
<p><strong>析构函数</strong>执行后记得要把<u>指针变量指向nullptr，避免野指针的出现</u>。</p>
<div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #abb2bf">String str1;</span></span>
<span class="line"><span style="color: #abb2bf">str.~String();</span></span>
<span class="line"><span style="color: #abb2bf">str.~String();</span></span>
<span class="line"><span style="color: #abb2bf"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>str在第二次调用析构函数后。</p>
</li>
</ul>`,r:{minutes:2.03,words:609},y:"a",t:"运算符重载实现string类",i:"file",O:2},["/ccpp/05 运算符重载/运算符重载实现string类.html","/ccpp/05 运算符重载/运算符重载实现string类.md",":md"]],["v-62b6f00d","/ccpp/05%20%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%A4%B1%E6%95%88%E7%9A%84%E5%BA%95%E5%B1%82%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86.html",{c:["c/c++"],g:["运算符重载","迭代器"],e:`<h1> 迭代器失效的底层核心原理</h1>
<h2> 迭代器失效问题</h2>
<p><strong>对容器的操作，称为。</strong></p>
<h2> 迭代器失效情况</h2>
<ol>
<li>
<p>当容器调用**<code>erase()</code><strong>方法后，</strong><strong>到</strong>**的所有迭代器全部失效。</p>
</li>
<li>
<p>当容器调用**<code>insert()</code><strong>方法后，</strong><strong>到</strong>**的所有迭代器全部失效。</p>
</li>
<li>
<p>如果容器**<strong>，在其他地方重新又开辟了一块内存。原来容器底层的内存上所保存的迭代器</strong>**了。</p>
</li>
<li>
<p><strong>不同容器的迭代器，是不能进行比较运算的</strong>。</p>
</li>
</ol>`,r:{minutes:7.91,words:2373},y:"a",t:"迭代器失效的底层核心原理",i:"file",O:6},["/ccpp/05 运算符重载/迭代器失效的底层核心原理.html","/ccpp/05 运算符重载/迭代器失效的底层核心原理.md",":md"]],["v-02dd1ab7","/ccpp/05%20%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/%E9%87%8D%E8%BD%BDnew%E5%92%8Cdelete%E8%BF%90%E7%AE%97%E7%AC%A6%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%B1%A0.html",{c:["c/c++"],g:["运算符重载","对象池","new/delete"],e:`<h1> 重载new和delete运算符实现一个对象池</h1>
<p>[new/delete关键字 | 张威的编程学习笔记 (github.io)](https://iszhwei.github.io/ccpp/02 c__基础/new、delete.html)</p>
<p>当我们需要，<strong><strong>会使得我们的程序进程的</strong></strong>。</p>
<p>通过****一个对象池，提高程序的效率和减少不必要的开销。</p>
<h2> 使用队列的push和pop入队和出队操作模拟一个简单对象池的实现的例子</h2>
<figure><figcaption>image-20240410192158623</figcaption></figure>`,r:{minutes:2.32,words:697},y:"a",t:"重载new和delete运算符实现一个对象池",i:"file",O:8},["/ccpp/05 运算符重载/重载new和delete运算符实现一个对象池.html","/ccpp/05 运算符重载/重载new和delete运算符实现一个对象池.md",":md"]],["v-5e6716c0","/ccpp/07%20%E5%A4%9A%E6%80%81/%E5%93%AA%E4%BA%9B%E5%87%BD%E6%95%B0%E4%B8%8D%E8%83%BD%E8%A2%AB%E8%AE%BE%E7%BD%AE%E4%B8%BA%E8%99%9A%E5%87%BD%E6%95%B0.html",{c:["c/c++"],g:["多态"],e:`<h2> 成为虚函数的条件</h2>
<p><strong>1.要成为虚函数，函数地址就要记录在虚函数表中，即<u>虚函数能产生函数地址，存储在vftable中</u>。</strong>
<strong>2.<u>vfptr指针需要依赖对象，对象必须存在</u>。</strong>（vfptr-&gt;vftable-&gt;虚函数地址	）</p>
<h2> 哪些函数不能被设置为虚函数？</h2>
<ol>
<li><strong>普通函数（非成员函数）</strong>：定义<u>虚函数的主要目的是为了重写达到多态</u>，所以普通函数声明为虚函数没有意义，因此编译器在****就绑定了它。</li>
<li><strong>静态成员函数</strong>：静态成员函数对于每个类都只有一份代码，所有对象都可以共享这份代码，他**<strong>，所以它也没有动态绑定的必要。(静态函数发生在</strong>**，虚函数体现多态发生在运行时)
<ul>
<li>不可能出现 <code>static + virtual</code> 或 <code>virtual + static</code></li>
</ul>
</li>
<li><strong>内联成员函数</strong>：内联函数本就<u>是为了<strong>减少函数调用的代价</strong>，所以在代码中直接展开</u>。<u>但虚函数<strong>一定要创建虚函数表</strong>，这两者不可能统一</u>。另外，内联函数在****，而虚函数在<u>运行时才动态绑定</u>。</li>
<li><strong>构造函数</strong>：这个原因很简单，主要从语义上考虑。因为构造函数本来是为了初始化对象成员才产生的，然而虚函数的目的是为了在完全不了解细节的情况下也能正确处理对象，两者根本不能“ 好好相处 ”。因为****</li>
<li><strong>友元函数</strong>：<u>当我们把一个函数声明为一个类的友元函数时，它只是一个可以访问类内成员的<strong>普通函数</strong>，并不是这个类的成员函数</u>，自然也不能在自己的类内将它声明为虚函数。(<strong></strong>，比如在自己类里面设置为虚函数，但是作为另一个类的友元)</li>
</ol>`,r:{minutes:2.4,words:721},y:"a",t:"哪些函数不能被设置为虚函数？",i:"file",O:4},["/ccpp/07 多态/哪些函数不能被设置为虚函数.html","/ccpp/07 多态/哪些函数不能被设置为虚函数.md",":md"]],["v-72de4250","/ccpp/07%20%E5%A4%9A%E6%80%81/%E5%A4%9A%E6%80%81%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E5%8E%9F%E7%90%86.html",{c:["c/c++"],g:["多态"],e:`<h1> 多态的定义和原理</h1>
<h2> 多态的定义</h2>
<p>多态性（polymorphism）是面向对象设计语言的基本特征之一。仅仅是将数据和函数捆绑在一起，进行类的封装，使用一些简单的继承，还不能算是真正应用了面向对象的设计思想。<u>多态性是面向对象的精髓</u>。多态性可以简单地概括为“<strong>一个接口，多种方法</strong>”。</p>
<p>通常是指对于。</p>
<h2> 为什么用多态</h2>
<p><u>封装可以隐藏实现细节，使得<strong>代码模块化</strong>；继承可以<strong>扩展</strong>已存在的代码模块（类）。它们的目的都是为了<strong>代码重用</strong></u>。而<u>多态除了代码的<strong>复用性</strong>外，还可以<strong>解决项目中紧偶合的问题，提高程序的可扩展性</strong>。</u></p>`,r:{minutes:4.31,words:1292},y:"a",t:"多态的定义和原理",i:"file",O:6},["/ccpp/07 多态/多态的定义和原理.html","/ccpp/07 多态/多态的定义和原理.md",":md"]],["v-e3980572","/ccpp/07%20%E5%A4%9A%E6%80%81/%E5%B8%A6%E8%99%9A%E5%87%BD%E6%95%B0%E7%9A%84%E5%A4%9A%E5%9F%BA%E6%B4%BE%E7%94%9F.html",{c:["c/c++"],g:["多态"],e:`<h1> 带虚函数的多基派生</h1>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cout;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Base1</span><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">Base1</span><span style="color: #ABB2BF">() </span></span>
<span class="line"><span style="color: #ABB2BF">    : </span><span style="color: #61AFEF">_iBase1</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">virtual</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">f</span><span style="color: #ABB2BF">() </span></span>
<span class="line"><span style="color: #ABB2BF">    {   </span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Base1::f()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;   </span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">virtual</span><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">g</span><span style="color: #ABB2BF">() </span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Base1::g()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">virtual</span><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">h</span><span style="color: #ABB2BF">() </span></span>
<span class="line"><span style="color: #ABB2BF">    {   </span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Base1::h()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _iBase1;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Base2</span><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">Base2</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    : </span><span style="color: #61AFEF">_iBase2</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">100</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">virtual</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">f</span><span style="color: #ABB2BF">() </span></span>
<span class="line"><span style="color: #ABB2BF">    {   </span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Base2::f()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">virtual</span><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">g</span><span style="color: #ABB2BF">() </span></span>
<span class="line"><span style="color: #ABB2BF">    {   </span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Base2::g()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">virtual</span><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">h</span><span style="color: #ABB2BF">() </span></span>
<span class="line"><span style="color: #ABB2BF">    {   </span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Base2::h()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;   </span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _iBase2;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Base3</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">Base3</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    : </span><span style="color: #61AFEF">_iBase3</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">1000</span><span style="color: #ABB2BF">) </span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">virtual</span><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">f</span><span style="color: #ABB2BF">() </span></span>
<span class="line"><span style="color: #ABB2BF">    {   </span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Base3::f()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">virtual</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">g</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {   </span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Base3::g()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">virtual</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">h</span><span style="color: #ABB2BF">() </span></span>
<span class="line"><span style="color: #ABB2BF">    {   </span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Base3::h()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _iBase3;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Derived</span></span>
<span class="line"><span style="color: #ABB2BF">: </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Base1</span></span>
<span class="line"><span style="color: #ABB2BF">, </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Base2</span></span>
<span class="line"><span style="color: #ABB2BF">, </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Base3</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">Derived</span><span style="color: #ABB2BF">() </span></span>
<span class="line"><span style="color: #ABB2BF">    : </span><span style="color: #61AFEF">_iDerived</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">10000</span><span style="color: #ABB2BF">) </span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">f</span><span style="color: #ABB2BF">() </span></span>
<span class="line"><span style="color: #ABB2BF">    {   </span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Derived::f()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">virtual</span><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">g1</span><span style="color: #ABB2BF">() </span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Derived::g1()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;    </span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _iDerived;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() </span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    Derived d;</span></span>
<span class="line"><span style="color: #ABB2BF">    Base2 </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">pBase2 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">d;</span></span>
<span class="line"><span style="color: #ABB2BF">    Base3 </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">pBase3 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">d;</span></span>
<span class="line"><span style="color: #ABB2BF">    Derived </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">pDerived </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">d;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">pBase2</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #61AFEF">f</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"sizeof(d) = "</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">sizeof</span><span style="color: #ABB2BF">(d) </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"&amp;Derived = "</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">d </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"pBase2 = "</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> pBase2 </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"pBase3 = "</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> pBase3 </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//结论：多重继承（带虚函数）</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//1. 每个基类都有自己的虚函数表</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//2. 派生类如果有自己的虚函数，会被加入到第一个虚函数表之中</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//3. 内存布局中，其基类的布局按照基类被声明时的顺序进行排列</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//4. 派生类会覆盖基类的虚函数，只有第一个虚函数表中存放的是</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//   真实的被覆盖的函数的地址；其它的虚函数表中存放的并不是真实的</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//   对应的虚函数的地址，而只是一条跳转指令</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.95,words:1186},y:"a",t:"带虚函数的多基派生",i:"file",O:14},["/ccpp/07 多态/带虚函数的多基派生.html","/ccpp/07 多态/带虚函数的多基派生.md",":md"]],["v-54b6e5ba","/ccpp/07%20%E5%A4%9A%E6%80%81/%E6%B5%8B%E8%AF%95%E8%99%9A%E8%A1%A8%E7%9A%84%E5%AD%98%E5%9C%A8.html",{c:["c/c++"],g:["多态"],e:`<h1> 测试虚表的存在</h1>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cout;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Base</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">Base</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">base</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    : </span><span style="color: #61AFEF">_base</span><span style="color: #ABB2BF">(base)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Base(long = 0)"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">virtual</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">f</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"virtual void Base::f()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">virtual</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">g</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"virtual void Base::g()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">virtual</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">h</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"virtual void Base::h()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">~Base</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"~Base()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> _base;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Derived</span></span>
<span class="line"><span style="color: #ABB2BF">: </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Base</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">Derived</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">base</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">derived</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    : </span><span style="color: #61AFEF">Base</span><span style="color: #ABB2BF">(base)</span></span>
<span class="line"><span style="color: #ABB2BF">    , </span><span style="color: #61AFEF">_derived</span><span style="color: #ABB2BF">(derived)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Derived(long = 0)"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">virtual</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">f</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"virtual void Derived::f()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">virtual</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">g</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"virtual void Derived::g()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">virtual</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">h</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"virtual void Derived::h()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">~Derived</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"~Derived()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> _derived;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">argc</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">char</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">**</span><span style="color: #E06C75; font-style: italic">argv</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    //虚表是存在的，虚表存在于只读段,对于普通的单继承而言，一个类</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    //只有一张虚表</span></span>
<span class="line"><span style="color: #ABB2BF">    Derived </span><span style="color: #61AFEF">derived</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">20</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">printf</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"对象derived的地址 : </span><span style="color: #D19A66">%p</span><span style="color: #56B6C2">\\n</span><span style="color: #98C379">"</span><span style="color: #ABB2BF">, </span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">derived);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">printf</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"对象derived的地址 : </span><span style="color: #D19A66">%p</span><span style="color: #56B6C2">\\n</span><span style="color: #98C379">"</span><span style="color: #ABB2BF">, (</span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)</span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">derived);</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    /* printf("虚表的地址 : %p\\n", *(long *)&amp;derived);//ok */</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">printf</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"虚表的地址 : </span><span style="color: #D19A66">%p</span><span style="color: #56B6C2">\\n</span><span style="color: #98C379">"</span><span style="color: #ABB2BF">, (</span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)</span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">derived);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">printf</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"虚函数的地址 : </span><span style="color: #D19A66">%p</span><span style="color: #56B6C2">\\n</span><span style="color: #98C379">"</span><span style="color: #ABB2BF">, (</span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)</span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">derived);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">typedef</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> (*</span><span style="color: #E06C75">Function</span><span style="color: #ABB2BF">)();</span></span>
<span class="line"><span style="color: #ABB2BF">    Function pf;</span></span>
<span class="line"><span style="color: #ABB2BF">    pf </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF">  (Function)</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">((</span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)</span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">derived);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">pf</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">printf</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"第一个虚函数的地址 : </span><span style="color: #D19A66">%p</span><span style="color: #56B6C2">\\n</span><span style="color: #98C379">"</span><span style="color: #ABB2BF">, pf);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    pf </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF">  (Function)</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">((</span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)</span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">derived </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">pf</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">printf</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"第二个虚函数的地址 : </span><span style="color: #D19A66">%p</span><span style="color: #56B6C2">\\n</span><span style="color: #98C379">"</span><span style="color: #ABB2BF">, pf);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    pf </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF">  (Function)</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">((</span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)</span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">derived </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">pf</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">printf</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"第三个虚函数的地址 : </span><span style="color: #D19A66">%p</span><span style="color: #56B6C2">\\n</span><span style="color: #98C379">"</span><span style="color: #ABB2BF">, pf);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    Derived </span><span style="color: #61AFEF">derived2</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">100</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">200</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">printf</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"对象derived2的地址 : </span><span style="color: #D19A66">%p</span><span style="color: #56B6C2">\\n</span><span style="color: #98C379">"</span><span style="color: #ABB2BF">, </span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">derived2);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">printf</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"对象derived2的地址 : </span><span style="color: #D19A66">%p</span><span style="color: #56B6C2">\\n</span><span style="color: #98C379">"</span><span style="color: #ABB2BF">, (</span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)</span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">derived2);</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    /* printf("虚表的地址 : %p\\n", *(long *)&amp;derived2);//ok */</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">printf</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"虚表的地址 : </span><span style="color: #D19A66">%p</span><span style="color: #56B6C2">\\n</span><span style="color: #98C379">"</span><span style="color: #ABB2BF">, (</span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)</span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">derived2);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">printf</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"虚函数的地址 : </span><span style="color: #D19A66">%p</span><span style="color: #56B6C2">\\n</span><span style="color: #98C379">"</span><span style="color: #ABB2BF">, (</span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)</span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">derived2);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"打印数据成员_base = "</span><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF">   (</span><span style="color: #C678DD">long</span><span style="color: #ABB2BF">)</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">((</span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)</span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">derived </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"打印数据成员_derived = "</span><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF">   (</span><span style="color: #C678DD">long</span><span style="color: #ABB2BF">)</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">((</span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)</span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">derived </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.55,words:465},y:"a",t:"测试虚表的存在",i:"file",O:13},["/ccpp/07 多态/测试虚表的存在.html","/ccpp/07 多态/测试虚表的存在.md",":md"]],["v-5ed5a75a","/ccpp/07%20%E5%A4%9A%E6%80%81/%E7%BA%AF%E8%99%9A%E5%87%BD%E6%95%B0%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB.html",{c:["使用指南"],g:["页面配置","使用指南"],e:`<h1> 纯虚函数和抽象类</h1>
<h2> 纯虚函数</h2>
<p>纯虚函数是一种<strong>特殊的虚函数</strong>，。这就是纯虚函数的作用。纯虚函数的格式如下：</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> 类名</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #C678DD">virtual</span><span style="color: #ABB2BF"> 返回类型 函数名(参数包) </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.41,words:1322},y:"a",t:"纯虚函数和抽象类",i:"file",O:7},["/ccpp/07 多态/纯虚函数和抽象类.html","/ccpp/07 多态/纯虚函数和抽象类.md",":md"]],["v-7c62f63c","/ccpp/07%20%E5%A4%9A%E6%80%81/%E7%BB%A7%E6%89%BF%E5%A4%9A%E6%80%81%E4%B8%8E%E8%99%9A%E5%87%BD%E6%95%B0%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.html",{c:["c/c++"],g:["多态"],e:`<h1> 继承多态与虚函数案例分析</h1>
<h2> 题目一：猫狗叫声问题</h2>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">//动物基类  泛指  类-》抽象一个实体的类型</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Animal</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">Animal</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">string</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">name</span><span style="color: #ABB2BF">):</span><span style="color: #61AFEF">_name</span><span style="color: #ABB2BF">(name){}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	//纯虚函数</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">virtual</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">bark</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #C678DD">protected:</span></span>
<span class="line"><span style="color: #ABB2BF">	string _name;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//动物实体类</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Cat</span><span style="color: #ABB2BF"> : </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Animal</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">Cat</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">string</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">name</span><span style="color: #ABB2BF">):</span><span style="color: #61AFEF">Animal</span><span style="color: #ABB2BF">(name){}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">bark</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> _name </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"bark:miao miao!"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Dog</span><span style="color: #ABB2BF"> : </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Animal</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">Dog</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">string</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">name</span><span style="color: #ABB2BF">):</span><span style="color: #61AFEF">Animal</span><span style="color: #ABB2BF">(name){}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">bark</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> _name </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"bark:wang wang!"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Pig</span><span style="color: #ABB2BF"> : </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Animal</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">Pig</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">string</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">name</span><span style="color: #ABB2BF">):</span><span style="color: #61AFEF">Animal</span><span style="color: #ABB2BF">(name){}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">bark</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> _name </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"bark:heng heng!"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">	Animal </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">p1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Cat</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"加菲猫"</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">	Animal </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">p2 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Dog</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"二哈"</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">p11 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> (</span><span style="color: #C678DD">int</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)p1;</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">p22 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> (</span><span style="color: #C678DD">int</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)p2;</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> tmp </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">p11</span><span style="color: #ABB2BF">[</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">];</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">p11</span><span style="color: #ABB2BF">[</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">p22</span><span style="color: #ABB2BF">[</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">];</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">p22</span><span style="color: #ABB2BF">[</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> tmp;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">p1</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #61AFEF">bark</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">p2</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #61AFEF">bark</span><span style="color: #ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF"> p1;</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF"> p2;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:5.59,words:1677},y:"a",t:"继承多态与虚函数案例分析",i:"file",O:8},["/ccpp/07 多态/继承多态与虚函数案例分析.html","/ccpp/07 多态/继承多态与虚函数案例分析.md",":md"]],["v-7ef7d845","/ccpp/07%20%E5%A4%9A%E6%80%81/%E8%99%9A%E5%87%BD%E6%95%B0.html",{c:["c/c++"],g:["多态"],e:`<h1> 虚函数</h1>
<h2> 虚函数的定义</h2>
<p>虚函数就是在<u>基类中<strong>被声明为<code>virtual</code></strong>，并在一个或多个<strong>派生类中被重新定义的成员函数</strong></u>。</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">// 类内部</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> 类名 </span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">virtual</span><span style="color: #ABB2BF"> 返回类型 函数名(参数表)</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  {</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> &nbsp; &nbsp; &nbsp; &nbsp;//...</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  }</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//类之外</span></span>
<span class="line"><span style="color: #C678DD">virtual</span><span style="color: #ABB2BF"> 返回类型 类名::函数名(参数表)</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> &nbsp; &nbsp;//...</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.65,words:1096},y:"a",t:"虚函数",i:"file",O:1},["/ccpp/07 多态/虚函数.html","/ccpp/07 多态/虚函数.md",":md"]],["v-68c3f3ca","/ccpp/07%20%E5%A4%9A%E6%80%81/%E8%99%9A%E5%87%BD%E6%95%B0%E7%9A%84%E8%AE%BF%E9%97%AE.html",{c:["c/c++"],g:["多态"],e:`<h1> 虚函数的访问</h1>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Base</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">Base</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">data</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">):</span><span style="color: #61AFEF">ma</span><span style="color: #ABB2BF">(data){}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">virtual</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">show</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Base::show()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #C678DD">protected:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> ma;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Derive</span><span style="color: #ABB2BF"> : </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Base</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">Derive</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">data</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">):</span><span style="color: #61AFEF">Base</span><span style="color: #ABB2BF">(data), </span><span style="color: #61AFEF">mb</span><span style="color: #ABB2BF">(data){}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">show</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Derive::show()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> mb;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.71,words:1113},y:"a",t:"虚函数的访问",i:"file",O:3},["/ccpp/07 多态/虚函数的访问.html","/ccpp/07 多态/虚函数的访问.md",":md"]],["v-849483e2","/ccpp/07%20%E5%A4%9A%E6%80%81/%E8%99%9A%E5%9F%BA%E7%B1%BB%E5%92%8C%E8%99%9A%E7%BB%A7%E6%89%BF.html",{c:["c/c++"],g:["继承"],e:`<h1> 虚基类和虚继承</h1>
<h2> 定义</h2>
<p><strong>虚基类</strong>:被虚继承的类，就称为虚基类。</p>
<h2> virtual作用：</h2>
<ol>
<li>
<p>virtual修饰了<u>成员方法</u>是虚函数。</p>
</li>
<li>
<p>可以修饰<u>继承方式</u>，是虚继承。被虚继承的类就称为虚基类。</p>
</li>
</ol>
<h2> 语法</h2>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Baseclass</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Subclass</span><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">: </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF">/</span><span style="color: #C678DD">private</span><span style="color: #ABB2BF">/</span><span style="color: #C678DD">protected</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">virtual</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Baseclass</span><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span><span style="color: #ABB2BF"> &nbsp; &nbsp;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> &nbsp; &nbsp;//...</span></span>
<span class="line"><span style="color: #C678DD">private:</span><span style="color: #ABB2BF"> &nbsp; </span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> &nbsp; &nbsp;//...</span></span>
<span class="line"><span style="color: #C678DD">protected:</span><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> &nbsp; &nbsp;//...</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//其中Baseclass称之为Subclass的虚基类, 而不是说Baseclass就是虚基类</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.67,words:1100},y:"a",t:"虚基类和虚继承",i:"file",O:10},["/ccpp/07 多态/虚基类和虚继承.html","/ccpp/07 多态/虚基类和虚继承.md",":md"]],["v-0e539496","/ccpp/07%20%E5%A4%9A%E6%80%81/%E8%99%9A%E6%8B%9F%E7%BB%A7%E6%89%BF%E6%97%B6%E6%B4%BE%E7%94%9F%E7%B1%BB%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E6%9E%90%E6%9E%84.html",{c:["c/c++"],g:["多态"],e:`<h1> 虚拟继承时派生类对象的构造和析构</h1>
<p>在普通的继承体系中，比如A派生出B，B派生出C，则创建C对象时，在C类构造函数的初始化列表中
用B类构造函数，然后在B类构造函数初始化列表中调用A类的构造函数，即可完成对象的创建操作。但。</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">A</span><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">A</span><span style="color: #ABB2BF">() </span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  {   </span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp; &nbsp;cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"A()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  }</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #61AFEF">A</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">ia</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  : </span><span style="color: #61AFEF">_ia</span><span style="color: #ABB2BF">(ia)</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  {   </span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp; &nbsp;cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"A(int)"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">f</span><span style="color: #ABB2BF">() </span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  {   </span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp; &nbsp;cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"A::f()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  }</span></span>
<span class="line"><span style="color: #C678DD">protected:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _ia;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">B</span></span>
<span class="line"><span style="color: #ABB2BF">: </span><span style="color: #C678DD">virtual</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">A</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">B</span><span style="color: #ABB2BF">() </span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  {   </span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp; &nbsp;cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"B()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  }</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #61AFEF">B</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">ia</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">ib</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  : </span><span style="color: #61AFEF">A</span><span style="color: #ABB2BF">(ia)</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  , </span><span style="color: #61AFEF">_ib</span><span style="color: #ABB2BF">(ib)</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  {   </span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp; &nbsp;cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"B(int,int)"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  }</span></span>
<span class="line"><span style="color: #C678DD">protected:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _ib;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">C</span></span>
<span class="line"><span style="color: #ABB2BF">: </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">B</span><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #61AFEF">C</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">ia</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">ib</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">ic</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  : </span><span style="color: #61AFEF">B</span><span style="color: #ABB2BF">(ia, ib)</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  , </span><span style="color: #61AFEF">_ic</span><span style="color: #ABB2BF">(ic)</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  {   </span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp; &nbsp;cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"C(int,int,int)"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;  </span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">show</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">const</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  {</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp; &nbsp;cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"_ia: "</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> _ia </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"_ib: "</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> _ib </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"_ic: "</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> _ic </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  }</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _ic;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">test</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;C </span><span style="color: #61AFEF">c</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">20</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">30</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #E5C07B">c</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">show</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.41,words:724},y:"a",t:"虚拟继承时派生类对象的构造和析构",i:"file",O:11},["/ccpp/07 多态/虚拟继承时派生类对象的构造和析构.html","/ccpp/07 多态/虚拟继承时派生类对象的构造和析构.md",":md"]],["v-600c7550","/ccpp/07%20%E5%A4%9A%E6%80%81/%E8%99%9A%E6%9E%90%E6%9E%84.html",{c:["c/c++"],g:["多态"],e:`<h1> 虚析构</h1>
<p>虽然构造函数不能被定义成虚函数，但<strong>析构函数可以定义为虚函数</strong>，一般来说，如果类中定义了虚函数，析构函数也应被定义为虚析构函数，尤其是类内有申请的动态内存，需要清理和释放的时候。</p>
<h2> <strong>什么时候需要把基类的析构函数必须实现成虚函数？</strong></h2>
<h3> 示例一：基类的指针(引用)指向的时候</h3>
<p>基类的指针(引用)指向的时候，delete调用析构函数的时候，必须发生动态绑定，<u>否则会导致派生类的析构函数无法调用</u>。</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Base</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">Base</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">data</span><span style="color: #ABB2BF">) :</span><span style="color: #61AFEF">ma</span><span style="color: #ABB2BF">(data)</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Base()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">~Base</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"~Base()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">virtual</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">show</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"call Base::show()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #C678DD">protected:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> ma;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Derive</span><span style="color: #ABB2BF"> : </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Base</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">Derive</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">data</span><span style="color: #ABB2BF">):</span><span style="color: #61AFEF">Base</span><span style="color: #ABB2BF">(data), </span><span style="color: #61AFEF">mb</span><span style="color: #ABB2BF">(data),</span><span style="color: #61AFEF">ptr</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">(data))</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Derive()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">~Derive</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF"> ptr;</span></span>
<span class="line"><span style="color: #ABB2BF">		cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"~Derive() "</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> mb;</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">ptr;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">	Base </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">pb </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Derive</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">pb</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #61AFEF">show</span><span style="color: #ABB2BF">();</span><span style="color: #7F848E; font-style: italic">//动态绑定pb Base*   *pb Derive</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF"> pb;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.32,words:997},y:"a",t:"虚析构",i:"file",O:5},["/ccpp/07 多态/虚析构.html","/ccpp/07 多态/虚析构.md",":md"]],["v-f51389fa","/ccpp/07%20%E5%A4%9A%E6%80%81/%E9%9D%99%E6%80%81%E7%BB%91%E5%AE%9A%E5%92%8C%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A.html",{c:["c/c++"],g:["多态"],e:`<h1> 静态绑定和动态绑定</h1>
<h2> 静态绑定</h2>
<p>静态指的是<u>编译时期</u></p>
<p>绑定即<u>函数调用</u></p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;typeinfo&gt;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">namespace</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">std</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Base</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">Base</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">data</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">): </span><span style="color: #61AFEF">ma</span><span style="color: #ABB2BF">(data){}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">show</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Base::show()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">show</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Base::show(int)"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #C678DD">protected:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> ma;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Derive</span><span style="color: #ABB2BF"> : </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Base</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">Derive</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">data</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">20</span><span style="color: #ABB2BF">):</span><span style="color: #61AFEF">Base</span><span style="color: #ABB2BF">(data),</span><span style="color: #61AFEF">mb</span><span style="color: #ABB2BF">(data){}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">show</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Derive::show()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> mb;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">	Derive </span><span style="color: #61AFEF">d</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">50</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">	Base </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">pb </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">d;</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">pb</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #61AFEF">show</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">pb</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #61AFEF">show</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">	</span></span>
<span class="line"><span style="color: #ABB2BF">	cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">sizeof</span><span style="color: #ABB2BF">(Base) </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span><span style="color: #7F848E; font-style: italic">//4</span></span>
<span class="line"><span style="color: #ABB2BF">	cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">sizeof</span><span style="color: #ABB2BF">(Derive) </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span><span style="color: #7F848E; font-style: italic">//8</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> typeid(pb).</span><span style="color: #61AFEF">name</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span><span style="color: #7F848E; font-style: italic">//class Base *	//该指针的类型，定义的是Base*,所以打印也是Base*</span></span>
<span class="line"><span style="color: #ABB2BF">	cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> typeid(</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">pb).</span><span style="color: #61AFEF">name</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span><span style="color: #7F848E; font-style: italic">//class Base		//解引用，表示指针指向的类型</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.96,words:1189},y:"a",t:"静态绑定和🍔动态绑定",i:"file",O:2},["/ccpp/07 多态/静态绑定和动态绑定.html","/ccpp/07 多态/静态绑定和动态绑定.md",":md"]],["v-5f9477f2","/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/this.html",{c:["c/c++"],g:["类和对象"],e:`<p><u>类可以实例无数的对象，每个对象都有自己的成员变量，但是共享一套成员方法代码（存储在.text）</u>。类的成员方法一经<u>，会给的<strong>非静态成员函数</strong>都加一个this指针，接收调用该方法的对象的地址（即<strong>this指针的作用就是区分不同对象的</strong>(<strong>接收调用该方法的对象的地址</strong>)</u></p>
<!--more-->
<figure><figcaption></figcaption></figure>
<ol>
<li>this指针<strong>指向本身</strong></li>
<li>this指针隐藏在**（非静态）成员函数<strong>的</strong>第一个参数的位置**</li>
<li>被const修饰<code>类类型 * const this</code> ，即<strong>指针常量</strong></li>
</ol>`,r:{minutes:1.54,words:462},y:"a",t:"this指针",i:"file",O:4},["/ccpp/03 类和对象/this.html","/ccpp/03 类和对象/this.md",":md"]],["v-31530dfb","/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.html",{c:["c/c++"],g:["类和对象"],e:`<h1> 拷贝构造函数</h1>
<figure><figcaption>img</figcaption></figure>
<p>C++中经常会使用一个变量初始化另一个变量，如</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> x </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> y </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> x;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.81,words:1144},y:"a",t:"拷贝构造函数",i:"file",O:3},["/ccpp/03 类和对象/拷贝构造函数.html","/ccpp/03 类和对象/拷贝构造函数.md",":md"]],["v-3bc3bfaf","/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%92%8C%E8%B5%8B%E5%80%BC%E9%87%8D%E8%BD%BD%E7%9A%84%E5%AE%9E%E8%B7%B5.html",{c:["c/c++"],g:["类和对象"],e:`<h1> 拷贝构造和赋值重载的实践</h1>
<p><strong>这个类的对象的成员变量有占用外部资源，所以我们要重写它的拷贝构造函数和赋值函数。</strong></p>
<h2> 实现String类型</h2>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">namespace</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">std</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">String</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">String</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">char*</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">str</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">)</span><span style="color: #7F848E; font-style: italic">//普通构造函数</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (str </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #ABB2BF">			m_data </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">char</span><span style="color: #ABB2BF">[</span><span style="color: #61AFEF">strlen</span><span style="color: #ABB2BF">(str) </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">];</span><span style="color: #7F848E; font-style: italic">//'\\0'要算上 </span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #61AFEF">strcpy</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">m_data</span><span style="color: #ABB2BF">, str);</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">else</span><span style="color: #7F848E; font-style: italic">//用户传进来的字符串是空的话 ，为了让其他方法不用判空 </span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #ABB2BF">			m_data </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">char</span><span style="color: #ABB2BF">[</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">];</span><span style="color: #7F848E; font-style: italic">//new char;开辟1个字节大小的空间 </span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">m_data </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'</span><span style="color: #56B6C2">\\0</span><span style="color: #98C379">'</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">//0</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">String</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">String</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">other</span><span style="color: #ABB2BF">)</span><span style="color: #7F848E; font-style: italic">//拷贝构造函数，深拷贝 </span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		m_data </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">char</span><span style="color: #ABB2BF">[</span><span style="color: #61AFEF">strlen</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">other</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">m_data</span><span style="color: #ABB2BF">) </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">];</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #61AFEF">strcpy</span><span style="color: #ABB2BF">(m_data, </span><span style="color: #E5C07B">other</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">m_data</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">~String</span><span style="color: #ABB2BF">(void)</span><span style="color: #7F848E; font-style: italic">//析构函数</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF">[]m_data;</span></span>
<span class="line"><span style="color: #ABB2BF">		m_data </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">//防止野指针的出现 </span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	//使用String&amp;是为了支持连续的operator=赋值操作</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">String</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">operator</span><span style="color: #ABB2BF">=(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">String</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">other</span><span style="color: #ABB2BF">)</span><span style="color: #7F848E; font-style: italic">//赋值重载函数，深拷贝 </span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">other)</span><span style="color: #7F848E; font-style: italic">//防止自赋值 </span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">//str1</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF">[]m_data;</span><span style="color: #7F848E; font-style: italic">//释放当前的外部资源 </span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">		m_data </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">char</span><span style="color: #ABB2BF">[</span><span style="color: #61AFEF">strlen</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">other</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">m_data</span><span style="color: #ABB2BF">) </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">];</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #61AFEF">strcpy</span><span style="color: #ABB2BF">(m_data, </span><span style="color: #E5C07B">other</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">m_data</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">//str1</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">char</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> m_data;</span><span style="color: #7F848E; font-style: italic">//用于保存字符串</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	//用带const char*参数的构造函数</span></span>
<span class="line"><span style="color: #ABB2BF">	String str1;</span><span style="color: #7F848E; font-style: italic">//调用默认的构造，形参是nullptr </span></span>
<span class="line"><span style="color: #ABB2BF">	String </span><span style="color: #61AFEF">str2</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"hello"</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">	String str3 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"world"</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">//str2 </span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	//调用拷贝构造函数</span></span>
<span class="line"><span style="color: #ABB2BF">	String str4 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> str3;</span></span>
<span class="line"><span style="color: #ABB2BF">	String </span><span style="color: #61AFEF">str5</span><span style="color: #ABB2BF">(str3);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	//调用赋值重载函数</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	/*</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	str1 = str2</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	str1.operator=(str2) =&gt; str1</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	str3 = str1</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	*/</span></span>
<span class="line"><span style="color: #ABB2BF">	str3 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> str1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> str2;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.79,words:836},y:"a",t:"拷贝构造和赋值重载的实践",i:"file",O:6},["/ccpp/03 类和对象/拷贝构造和赋值重载的实践.html","/ccpp/03 类和对象/拷贝构造和赋值重载的实践.md",":md"]],["v-3a9cf65c","/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/%E6%8C%87%E5%90%91%E7%B1%BB%E5%9E%8B%E6%88%90%E5%91%98%E7%9A%84%E6%8C%87%E9%92%88.html",{c:["c/c++"],g:["类和对象"],e:`<h1> 指向类型成员的指针</h1>
<h2> 普通成员变量</h2>
<p><strong>普通成员变量：我们定义指针指向类的成员变量，。而且。</strong></p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Test</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">func</span><span style="color: #ABB2BF">()</span><span style="color: #7F848E; font-style: italic">//普通成员方法</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"call Test::func"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">static</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">static_func</span><span style="color: #ABB2BF">()</span><span style="color: #7F848E; font-style: italic">//静态成员方法</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Test::static_func"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> ma;</span><span style="color: #7F848E; font-style: italic">//普通成员变量</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.59,words:478},y:"a",t:"指向类型成员的指针",i:"file",O:3},["/ccpp/03 类和对象/指向类型成员的指针.html","/ccpp/03 类和对象/指向类型成员的指针.md",":md"]],["v-10e1c6eb","/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0.html",{c:["c/c++"],g:["类和对象"],e:`<h1> 构造函数、初始化列表和析构函数</h1>
<figure><figcaption>img</figcaption></figure>
<!--more-->
<h2> 构造函数</h2>
<h3> 构造函数的特点：</h3>
<ul>
<li><strong>函数的名字<u>与类名相同</u></strong></li>
<li><u><strong>没有返回值</strong></u></li>
<li><strong><u>没有返回类型</u>，即使是void也不能有</strong></li>
<li>构造函数在对象创建时<u>自动调用</u>，用以<strong>完成对象及其他操作(如为指针成员等)</strong>；</li>
<li>如果程序员<u>没有显式定义它，系统会提供一个默认构造函数</u>。</li>
</ul>`,r:{minutes:6.12,words:1836},y:"a",t:"构造函数、初始化列表和析构函数",i:"file",O:2},["/ccpp/03 类和对象/构造函数和析构函数.html","/ccpp/03 类和对象/构造函数和析构函数.md",":md"]],["v-451c83e2","/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E6%88%90%E5%91%98%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96.html",{c:["c/c++"],g:["类和对象"],e:`<h1> 特殊数据成员的初始化</h1>
<p>在C++的类中，有4种比较特殊的数据成员，他们分别是<strong>常量成员、引用成员、类对象成员和静态成员</strong>，他们的初始化与普通数据成员有所不同。</p>
<h2> 常量数据成员</h2>
<p>当数据成员用const关键字进行修饰以后，就成为常量成员。一经初始化，该数据成员便具有“只读属
性”，在程序中无法对其值修改。事实上，在构造函数体内初始化const数据成员是非法的，它们<strong>只能在</strong>
<strong>构造函数初始化列表中进行初始化</strong>。如：</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Point</span><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> &nbsp; &nbsp;//错误写法</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #61AFEF">Point</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">ix</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">iy</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  {</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp; &nbsp;_ix </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> ix;</span><span style="color: #7F848E; font-style: italic">//error, 这是赋值语句，const成员不能修改</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp; &nbsp;_iy </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> iy;</span><span style="color: #7F848E; font-style: italic">//error</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp; &nbsp;_iz </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> _ix;</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  }</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> &nbsp; &nbsp;//正确写法</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #61AFEF">Point</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">ix</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">iy</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  : </span><span style="color: #61AFEF">_ix</span><span style="color: #ABB2BF">(ix)</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  , </span><span style="color: #61AFEF">_iy</span><span style="color: #ABB2BF">(iy)</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  , </span><span style="color: #61AFEF">_iz</span><span style="color: #ABB2BF">(_ix)</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  {</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp; &nbsp;</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  }</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _ix;</span><span style="color: #7F848E; font-style: italic">	//常量数据成员,必须在初始化列表中进行</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _iy;</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF"> _iz;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.33,words:1300},y:"a",t:"特殊数据成员的初始化",i:"file",O:7},["/ccpp/03 类和对象/特殊数据成员的初始化.html","/ccpp/03 类和对象/特殊数据成员的初始化.md",":md"]],["v-6577db5e","/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/%E7%89%B9%E6%AE%8A%E7%9A%84%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0.html",{c:["c/c++"],g:["类和对象"],e:`<h1> 特殊的成员函数</h1>
<figure><figcaption>img</figcaption></figure>
<p>除了特殊的数据成员以外，C++类中还有两种特殊的成员函数：静态成员函数和 const 成员函数。我们
先来看看静态成员函数。</p>
<h2> 静态成员函数</h2>
<p>成员函数也可以定义成静态的，<strong>静态成员函数的特点:</strong></p>
<ol>
<li>
<p><mark>静态的成员函数的第一个参数位置<strong>没有this指针</strong></mark></p>
</li>
<li>
<p><mark>静态的成员函数<strong>不能访问非静态</strong>的数据成员和非静态的成员函数</mark></p>
</li>
<li>
<p><mark><strong>非静态的成员函数</strong><strong>静态的</strong>数据成员和静态的成员函数</mark></p>
</li>
<li>
<p><mark>静态成员函数可以使用<strong>类名加作用符的形式进行调用</strong>（静态成员函数的特殊用法）</mark></p>
</li>
</ol>`,r:{minutes:4.05,words:1216},y:"a",t:"特殊的成员函数",i:"file",O:8},["/ccpp/03 类和对象/特殊的成员函数.html","/ccpp/03 类和对象/特殊的成员函数.md",":md"]],["v-e41f0618","/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1.html",{c:["c/c++"],g:["类和对象"],e:`<h1> 类和对象</h1>
<figure><figcaption>img</figcaption></figure>
<!--more-->
<h2> 什么是OOP思想？</h2>
<p>面向对象的程序设计语言必须有描述对象及其相互之间关系的语言成分。这些程序设计语言可以归纳为以下几类：<strong>系统中一切事物皆为对象；对象是属性及其操作的封装体；对象可按其性质划分为类，对象成为类的实例；实例关系和继承关系是对象之间的静态关系；消息传递是对象之间动态联系的唯一形式，也是计算的唯一形式；方法是消息的序列。</strong></p>
<h2> oop编程方法：</h2>
<ol>
<li>先确定有哪些实体，根据实体的属性和行为抽象出 ADT(abstract data type)</li>
<li>类（属性-&gt;成员变量，行为-&gt;成员方法）实例化得到对象</li>
</ol>`,r:{minutes:4.49,words:1347},y:"a",t:"类和对象",i:"file",O:1},["/ccpp/03 类和对象/类和对象.html","/ccpp/03 类和对象/类和对象.md",":md"]],["v-3eca3d30","/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/%E7%BB%84%E7%BB%87%E5%AF%B9%E8%B1%A1.html",{c:["c/c++"],g:["类和对象"],e:`<h1> <strong>对象</strong>的组织</h1>
<figure><figcaption></figcaption></figure>
<p>有了自己定义的类，或者使用别人定义好的类创建对象，其机制与使用int等创建普通变量几乎完全一致，同样可以创建const对象、创建指向对象的指针、创建对象数组，还可使用new和delete等创建动态对象。</p>
<h2> const对象</h2>
<p>类对象也可以声明为const对象，一般来说，<u>能作用于const对象的成员函数除了和**<strong>，便只有</strong>**了，<strong>因为const对象只能被、以及</strong>，</u>。</p>`,r:{minutes:3.8,words:1140},y:"a",t:"对象的组织",i:"file",O:10},["/ccpp/03 类和对象/组织对象.html","/ccpp/03 类和对象/组织对象.md",":md"]],["v-1da04370","/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6%E5%87%BD%E6%95%B0.html",{c:["c/c++"],g:["类和对象"],e:`<h1> 赋值运算符函数</h1>
<figure><figcaption>img</figcaption></figure>
<h2> 形式</h2>
<p>赋值运算是一种很常见的运算，比如：</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> x </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">, y </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">x </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> y;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.4,words:1020},y:"a",t:"赋值运算符函数",i:"file",O:5},["/ccpp/03 类和对象/赋值运算符函数.html","/ccpp/03 类和对象/赋值运算符函数.md",":md"]],["v-0cf00a94","/ccpp/06%20%E7%BB%A7%E6%89%BF/%E5%A4%9A%E5%9F%BA%E7%BB%A7%E6%89%BF.html",{c:["c/c++"],g:["继承"],e:`<h1> 多基继承</h1>
<h2> 形式</h2>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> 派生类 </span></span>
<span class="line"><span style="color: #ABB2BF">: </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF">/</span><span style="color: #C678DD">protected</span><span style="color: #ABB2BF">/</span><span style="color: #C678DD">private</span><span style="color: #ABB2BF"> 基类1</span></span>
<span class="line"><span style="color: #ABB2BF">, ...</span></span>
<span class="line"><span style="color: #ABB2BF">, </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF">/</span><span style="color: #C678DD">protected</span><span style="color: #ABB2BF">/</span><span style="color: #C678DD">private</span><span style="color: #ABB2BF"> 基类N</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.54,words:1062},y:"a",t:"多基继承",i:"file",O:6},["/ccpp/06 继承/多基继承.html","/ccpp/06 继承/多基继承.md",":md"]],["v-2f0a2344","/ccpp/06%20%E7%BB%A7%E6%89%BF/%E6%B4%BE%E7%94%9F%E6%96%B9%E5%BC%8F%E5%AF%B9%E5%9F%BA%E7%B1%BB%E6%88%90%E5%91%98%E7%9A%84%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90.html",{c:["c/c++"],g:["继承"],e:`<h1> 派生方式对基类成员的访问权限</h1>
<h2> 访问限定表</h2>
<p>派生（继承）方式有3种，分别是</p>
<ol>
<li>public（公有）继承</li>
<li>protected（保护型）继承</li>
<li>private（私有）继承</li>
</ol>
<figure><figcaption>image-20240413153213559</figcaption></figure>
<h2> 总结：派生类的访问权限规则如下：</h2>
<p>1．不管以什么继承方式，<strong><strong>都</strong>不能访问基类的私有成员</strong>。
2．不管以什么继承方式，<strong>除了基类的私有成员不可以访问外，其他的都可以访问</strong>。
3．不管以什么继承方式，除了<strong>公有继承基类中的公有成员</strong>可以访问外，其他的一律不能访问</p>`,r:{minutes:1.35,words:406},y:"a",t:"派生方式对基类成员的访问权限",i:"file",O:2},["/ccpp/06 继承/派生方式对基类成员的访问权限.html","/ccpp/06 继承/派生方式对基类成员的访问权限.md",":md"]],["v-7eb7ea5a","/ccpp/06%20%E7%BB%A7%E6%89%BF/%E6%B4%BE%E7%94%9F%E7%B1%BB%E5%AF%B9%E8%B1%A1%E9%97%B4%E7%9A%84%E5%A4%8D%E5%88%B6%E6%8E%A7%E5%88%B6.html",{c:["c/c++"],g:["继承"],e:`<h1> 派生类对象间的复制控制</h1>
<p>从前面的知识，我们知道，<strong>基类的拷贝构造函数和operator=运算符函数不能被派生类继承</strong>，那么在执行派生类对象间的复制操作时，就需要注意以下几种情况:</p>
<ol>
<li>如果用户<strong>定义了<u>基类的</u>拷贝构造函数</strong>，而的拷贝构造函数，那么在用一个派生类对象初始化新的派生类对象时，两对象间的**执行缺省的行为**（只拷贝值），而两对象间的**执行用户定义的基类拷贝构造函数**。</li>
</ol>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;string.h&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cout;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Base</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">Base</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    : </span><span style="color: #61AFEF">_pbase</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Base()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">Base</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">char</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #E06C75; font-style: italic">pbase</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    : </span><span style="color: #61AFEF">_pbase</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">char</span><span style="color: #ABB2BF">[</span><span style="color: #61AFEF">strlen</span><span style="color: #ABB2BF">(pbase) </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">]())</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Base(const char *)"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">strcpy</span><span style="color: #ABB2BF">(_pbase, pbase);</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">Base</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Base</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">rhs</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    : </span><span style="color: #61AFEF">_pbase</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">char</span><span style="color: #ABB2BF">[</span><span style="color: #61AFEF">strlen</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">rhs</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_pbase</span><span style="color: #ABB2BF">) </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">]())</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Base(const Base &amp;)"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">strcpy</span><span style="color: #ABB2BF">(_pbase, </span><span style="color: #E5C07B">rhs</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_pbase</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">Base</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;operator</span><span style="color: #ABB2BF">=(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Base</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">rhs</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Base &amp;operator=(const Base &amp;)"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">rhs)</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">[]</span><span style="color: #ABB2BF"> _pbase;</span></span>
<span class="line"><span style="color: #ABB2BF">            _pbase </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">            _pbase </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">char</span><span style="color: #ABB2BF">[</span><span style="color: #61AFEF">strlen</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">rhs</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_pbase</span><span style="color: #ABB2BF">) </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">]();</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #61AFEF">strcpy</span><span style="color: #ABB2BF">(_pbase, </span><span style="color: #E5C07B">rhs</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_pbase</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF">  </span><span style="color: #56B6C2">*</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">~Base</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"~Base()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(_pbase)</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">[]</span><span style="color: #ABB2BF"> _pbase;</span></span>
<span class="line"><span style="color: #ABB2BF">            _pbase </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">;;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">friend</span><span style="color: #ABB2BF"> std::</span><span style="color: #E5C07B">ostream</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;operator</span><span style="color: #ABB2BF">&lt;&lt;(std::</span><span style="color: #E5C07B">ostream</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">os</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Base</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">rhs</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">char</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">_pbase;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">std::</span><span style="color: #E5C07B">ostream</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;operator</span><span style="color: #ABB2BF">&lt;&lt;(std::</span><span style="color: #E5C07B">ostream</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">os</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Base</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">rhs</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">rhs</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_pbase</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        os </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">rhs</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_pbase</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> os;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Derived</span></span>
<span class="line"><span style="color: #ABB2BF">: </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Base</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">Derived</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">char</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #E06C75; font-style: italic">pbase</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    : </span><span style="color: #61AFEF">Base</span><span style="color: #ABB2BF">(pbase)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Derived(const char *)"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">~Derived</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"~Derived()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">friend</span><span style="color: #ABB2BF"> std::</span><span style="color: #E5C07B">ostream</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;operator</span><span style="color: #ABB2BF">&lt;&lt;(std::</span><span style="color: #E5C07B">ostream</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">os</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Derived</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">rhs</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">std::</span><span style="color: #E5C07B">ostream</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;operator</span><span style="color: #ABB2BF">&lt;&lt;(std::</span><span style="color: #E5C07B">ostream</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">os</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Derived</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">rhs</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> Base </span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">ref </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> rhs;</span></span>
<span class="line"><span style="color: #ABB2BF">    os </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> ref;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> os;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">argc</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">char</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">**</span><span style="color: #E06C75; font-style: italic">argv</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    Derived </span><span style="color: #61AFEF">d1</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"hello"</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"d1 = "</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> d1 </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF">endl </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    Derived d2 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> d1;</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"d1 = "</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> d1 </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"d2 = "</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> d2 </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF">endl </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    Derived </span><span style="color: #61AFEF">d3</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"world"</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"d3 = "</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> d3 </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    d3 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> d1;</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"d1 = "</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> d1 </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"d3 = "</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> d3 </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.1,words:1231},y:"a",t:"派生类对象间的复制控制",i:"file",O:7},["/ccpp/06 继承/派生类对象间的复制控制.html","/ccpp/06 继承/派生类对象间的复制控制.md",":md"]],["v-11fe42b7","/ccpp/06%20%E7%BB%A7%E6%89%BF/%E6%B4%BE%E7%94%9F%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E8%BF%87%E7%A8%8B.html",{c:["c/c++"],g:["继承"],e:`<h1> 派生类的构造和销毁过程</h1>
<ol>
<li><strong>构造函数和析构函数是不能继承的</strong>，为了对数据成员进行初始化，<strong>派生类必须。</strong></li>
<li>由于派生类对象通过<u>继承而包含了基类数据成员</u>，因此，<strong>创建派生类对象时，系统首先通过派生类的构造函数来调用</strong></li>
<li>而<strong>后对</strong>。</li>
</ol>
<h2> 形式</h2>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">派生类名(总参数表): 基类构造函数(参数表)</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    //函数体</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.91,words:1472},y:"a",t:"派生类的构造和销毁过程",i:"file",O:3},["/ccpp/06 继承/派生类的构造过程.html","/ccpp/06 继承/派生类的构造过程.md",":md"]],["v-103be5d9","/ccpp/06%20%E7%BB%A7%E6%89%BF/%E7%BB%A7%E6%89%BF%E4%B8%AD%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html",{c:["c/c++"],g:["继承"],e:`<h1> 继承中的类型转换</h1>
<figure><figcaption>image-20240414114736980</figcaption></figure>
<p>派生类适应于基类，派生类的对象适应于基类对象，派生类对象的指针和引用也适应于基类对象的指针和引用</p>
<ul>
<li><strong>可以把给基类的对象</strong></li>
<li><strong>可以把绑定到派生类的对象</strong>（只能访问基类的部分）</li>
<li><strong>可以声明指向派生类的对象 (向上转型)</strong>（解引用只能访问基类的部分）</li>
</ul>
<p>也就是说<strong>如果函数的对象或者基类对象的引用或者基类对象的指针类型，在进行函数调用时，相应的</strong>。</p>`,r:{minutes:1.65,words:495},y:"a",t:"继承中的类型转换",i:"file",O:5},["/ccpp/06 继承/继承中的类型转换.html","/ccpp/06 继承/继承中的类型转换.md",":md"]],["v-7e0a1cbb","/ccpp/06%20%E7%BB%A7%E6%89%BF/%E7%BB%A7%E6%89%BF%E7%9A%84%E6%9C%AC%E8%B4%A8%E5%92%8C%E5%8E%9F%E7%90%86.html",{c:["c/c++"],g:["继承"],e:`<h1> 继承的本质和原理</h1>
<h2> 继承的本质</h2>
<p><strong>：</strong></p>
<ol>
<li>
<p>代码复用</p>
</li>
<li>
<p><strong></strong></p>
</li>
</ol>
<p>类和类的关系：</p>
<p>组合： a part of ... ... 一部分的关系</p>
<p>继承： a kind of ... ... 一种的关系</p>
<h2> 形式</h2>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> 派生类 </span></span>
<span class="line"><span style="color: #ABB2BF">: </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF">/</span><span style="color: #C678DD">protected</span><span style="color: #ABB2BF">/</span><span style="color: #C678DD">private</span><span style="color: #ABB2BF"> 基类</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.35,words:406},y:"a",t:"继承的本质和原理",i:"file",O:1},["/ccpp/06 继承/继承的本质和原理.html","/ccpp/06 继承/继承的本质和原理.md",":md"]],["v-210e34fe","/ccpp/06%20%E7%BB%A7%E6%89%BF/%E8%8F%B1%E5%BD%A2%E7%BB%A7%E6%89%BF%E9%97%AE%E9%A2%98.html",{c:["c/c++"],g:["继承"],e:`<h1> 菱形继承问题</h1>
<p><strong>多重继承：可以复用多个基类的代码到派生类中。</strong></p>
<p>但是多重继承中也会出现问题：我们来看一个经典的问题：</p>
 A为B、C的基类，B从A单继承而来，C从A也是单继承而来；D是B和C多继承而来，D有两个基类分别为B和C。<strong>A称为D的间接基类，D也有A的数据。</strong><pre><code>   假设A中有ma变量，B从A继承来并且有自己的mb，C从A继承来并且有自己的mc，D从B与C多继承而来，从B继承来了ma与mb，从C继承来了ma与mc，D也有自己的属性md；那么就出现了问题，&lt;font color='red'&gt;我们的**间接基类D有多份ma属性**，这就是菱形继承问题&lt;/font&gt;。
</code></pre>`,r:{minutes:3.86,words:1159},y:"a",t:"菱形继承问题",i:"file",O:8},["/ccpp/06 继承/菱形继承问题.html","/ccpp/06 继承/菱形继承问题.md",":md"]],["v-eb58d93a","/ccpp/06%20%E7%BB%A7%E6%89%BF/%E9%87%8D%E8%BD%BD%EF%BC%8C%E9%9A%90%E8%97%8F%EF%BC%8C%E9%87%8D%E5%86%99%EF%BC%88%E8%A6%86%E7%9B%96%EF%BC%89.html",{c:["c/c++"],g:["继承"],e:`<h1> 重载，隐藏，重写（覆盖）</h1>
<h2> （1）重载（overload）</h2>
<p>[函数重载 | 张威的编程学习笔记 (gitee.io)](https://iszhwei.gitee.io/ccpp/02 c__基础/函数重载.html)</p>
<ol>
<li>在<strong>同⼀作用域当中</strong>的同名成员函数才存在重载关系</li>
<li><strong>函数名相同</strong>，<strong>参数列表不同</strong>（类型、数目、顺序）</li>
<li><strong>返回值不同不能区分函数</strong>。<strong></strong>。</li>
</ol>`,r:{minutes:3.73,words:1118},y:"a",t:"重载，隐藏，重写（覆盖）",i:"file",O:4},["/ccpp/06 继承/重载，隐藏，重写（覆盖）.html","/ccpp/06 继承/重载，隐藏，重写（覆盖）.md",":md"]],["v-7c6a87cc","/ccpp/11%20%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/valgrind.html",{c:["c/c++"],g:["内存泄漏"],e:`<p>valgrind</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">" 安装方式：</span></span>
<span class="line"><span style="color: #61AFEF">$ sudo apt install valgrind</span></span>
<span class="line"><span style="color: #61AFEF">    </span></span>
<span class="line"><span style="color: #61AFEF">"</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">使用方式:</span></span>
<span class="line"><span style="color: #61AFEF">" 编译代码时，需要加上-g</span></span>
<span class="line"><span style="color: #61AFEF">$ valgrind --tool=memcheck --leak-check=full ./test</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.32,words:96},y:"a",t:"valgrind",i:"file",O:3},["/ccpp/11 资源管理/valgrind.html","/ccpp/11 资源管理/valgrind.md",":md"]],["v-43124686","/ccpp/12%20%E6%97%A5%E5%BF%97/log4cpp.html",{c:["c/c++"],g:["日志"],e:`<h1> log4cpp的使用</h1>
<p>log4cpp开发文档：<a href="https://log4cpp.sourceforge.net/api/index.html" target="_blank" rel="noopener noreferrer">Main Page (sourceforge.net)</a></p>
<h2> 安装</h2>
<p>Log4cpp的主页为：<a href="https://sourceforge.net/projects/log4cpp/" target="_blank" rel="noopener noreferrer">Log library for C++ download | SourceForge.net</a></p>`,r:{minutes:10.66,words:3199},y:"a",t:"log4cpp库的使用",i:"file",O:1},["/ccpp/12 日志/log4cpp.html","/ccpp/12 日志/log4cpp.md",":md"]],["v-55ae1b9a","/ccpp/09%20%E6%A0%87%E5%87%86%E5%BA%93STL/STL%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8%EF%BC%9Avector%E3%80%81deque%E3%80%81list.html",{c:["c/c++"],g:["STL"],e:`<h1> STL顺序容器：vector、deque、list</h1>
<h2> 我们经常提到STL，那么STL究竟是什么呢？</h2>
<p><strong>STL：其英文全称为standard template libaray，即标准模板库</strong>。我们根据需要直接实例化这些模板，提高了我们使用的效率。</p>
<h2> 一、vector容器</h2>
<p><strong>。 容器中对象的构造析构，内存的开辟释放通过空间配置器allocator实现：allocate(内存开辟)、deallocate(内存释放)、construct(对象构造)、destroy(对象析构)。</strong></p>`,r:{minutes:10.49,words:3148},y:"a",t:"STL顺序容器：vector、deque、list",i:"file",O:1},["/ccpp/09 标准库STL/STL顺序容器：vector、deque、list.html","/ccpp/09 标准库STL/STL顺序容器：vector、deque、list.md",":md"]],["v-8365f3e8","/ccpp/09%20%E6%A0%87%E5%87%86%E5%BA%93STL/%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88.html",{c:["c/c++"],g:["STL"],e:`<h1> 函数对象与函数指针</h1>
<h2> 一、函数对象与函数指针</h2>
<p><strong>函数对象:</strong> <strong>拥有<code>operator()</code>重载函数的对象即函数对象，函数对象，但在C++里为函数对象。</strong></p>
<h3> 问题一：什么是函数对象呢？</h3>
<p>例如：我们C语言进行函数调用与C++中两个函数调用。</p>
<figure><figcaption>在这里插入图片描述</figcaption></figure>
<p>看起来它们好像一模一样()，但是
<strong>这里我们就把()运算符重载函数的对象，称作，或者称作</strong></p>`,r:{minutes:4.35,words:1306},y:"a",t:"函数对象与函数指针",i:"file",O:5},["/ccpp/09 标准库STL/函数对象与函数指针.html","/ccpp/09 标准库STL/函数对象与函数指针.md",":md"]],["v-62b566a8","/ccpp/09%20%E6%A0%87%E5%87%86%E5%BA%93STL/%E5%AE%B9%E5%99%A8%E9%80%82%E9%85%8D%E5%99%A8%EF%BC%9A%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E3%80%81%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97.html",{c:["c/c++"],g:["STL"],e:`<h1> 容器适配器：栈、队列、优先级队列</h1>
<h2> 一、容器适配器</h2>
<p><strong>什么是容器适配器？</strong></p>
：<strong>适配器底层没有自己的数据结构，它是另外一个容器的封装，它的方法全部由底层依赖的容器进行实现的；它没有实现自己的迭代器，不能使用迭代器遍历。</strong><p><strong>来看这个例子：我们使用容器适配器来实现一个栈。</strong></p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">template</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">typename</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">typename</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Container</span><span style="color: #C678DD">=</span><span style="color: #ABB2BF">deque&lt;</span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF">&gt;&gt;</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Stack</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">push</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">val</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #E5C07B">con</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push_back</span><span style="color: #ABB2BF">(val);</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">pop</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #E5C07B">con</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">pop_back</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">top</span><span style="color: #ABB2BF">()</span><span style="color: #C678DD">const</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">con</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">back</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">	Container con;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.46,words:1039},y:"a",t:"容器适配器：栈、队列、优先级队列",i:"file",O:2},["/ccpp/09 标准库STL/容器适配器：栈、队列、优先级队列.html","/ccpp/09 标准库STL/容器适配器：栈、队列、优先级队列.md",":md"]],["v-4b15d926","/ccpp/09%20%E6%A0%87%E5%87%86%E5%BA%93STL/%E6%97%A0%E5%BA%8F%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8%E3%80%81%E6%9C%89%E5%BA%8F%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8.html",{c:["c/c++"],g:["页面配置","使用指南"],e:`<h1> 无序关联容器、有序关联容器</h1>
<h2> 一、无序关联容器</h2>
<p>关联容器分为：<strong>无序关联容器</strong>与<strong>有序关联容器</strong>，简单对比下：</p>
<figure><figcaption>在这里插入图片描述</figcaption></figure>
<p><strong>无序关联容器：底层为，里面，。</strong></p>
<h3> 1.1单重集合与多重集合</h3>
<p><strong>set:集合，存储的是</strong>
<strong>unordered_set：单重集合：不允许key重复。</strong>
<strong>unordered_multiset：多重集合：允许key重复。</strong>
包含的头文件：</p>`,r:{minutes:6.06,words:1819},y:"a",t:"无序关联容器、有序关联容器",i:"file",O:3},["/ccpp/09 标准库STL/无序关联容器、有序关联容器.html","/ccpp/09 标准库STL/无序关联容器、有序关联容器.md",":md"]],["v-2c413a2b","/ccpp/09%20%E6%A0%87%E5%87%86%E5%BA%93STL/%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95%E4%B8%8E%E7%BB%91%E5%AE%9A%E5%99%A8.html",{c:["c/c++"],g:["STL"],e:`<h1> 泛型算法与绑定器</h1>
<h2> 一、泛型算法</h2>
<p>使用STL库中提供的泛型算法需要引入：<code>#include &lt;algorithm&gt;</code>
<strong>泛型算法：template + 迭代器 + 函数对象</strong>；用模板实现的，接收的是容器的迭代器，还可以更改运算结果（通过函数对象更改结果）。</p>
<p>特点：</p>
<ol>
<li>
<p><strong>泛型算法的参数接受的都是。</strong>(遍历各种容器)</p>
</li>
<li>
<p><strong>泛型算法的参数还可以接受。</strong></p>
</li>
</ol>`,r:{minutes:2.84,words:853},y:"a",t:"泛型算法与绑定器",i:"file",O:6},["/ccpp/09 标准库STL/泛型算法与绑定器.html","/ccpp/09 标准库STL/泛型算法与绑定器.md",":md"]],["v-7c5d97b0","/ccpp/09%20%E6%A0%87%E5%87%86%E5%BA%93STL/%E8%BF%AD%E4%BB%A3%E5%99%A8iterator.html",{c:["c/c++"],g:["STL"],e:`<h1> 迭代器iterator</h1>
<ol>
<li>
<p><strong>普通的正向迭代器iterator</strong>：打印元素时从，。</p>
</li>
<li>
<p><strong>常量的正向迭代器const_iterator</strong>：打印元素时从第一个打到最后一个，。</p>
</li>
<li>
<p><strong>反向迭代器reverse_iterator</strong>：打印元素时从，<strong>既可读也可以修改</strong>。</p>
</li>
<li>
<p><strong>常量的反向迭代器const_reverse_iterator</strong>：打印元素时从最后一个打印到第一个，<strong>只能读而不能写。</strong></p>
</li>
</ol>`,r:{minutes:1.91,words:572},y:"a",t:"迭代器iterator",i:"file",O:4},["/ccpp/09 标准库STL/迭代器iterator.html","/ccpp/09 标准库STL/迭代器iterator.md",":md"]],["v-0d61d626","/ccpp/16%20%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/%E4%B8%8D%E5%B8%A6%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E7%9A%84%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88.html",{c:["c/c++"],g:["智能指针"],e:`<h1> 不带引用计数的智能指针</h1>
<h2> 1. 基础知识</h2>
<h3> 裸指针</h3>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> p </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">p </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">30</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF"> p;</span></span>
<span class="line"><span style="color: #ABB2BF">	</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.89,words:1467},y:"a",t:"不带引用计数的智能指针",i:"file",O:1},["/ccpp/16 智能指针/不带引用计数的智能指针.html","/ccpp/16 智能指针/不带引用计数的智能指针.md",":md"]],["v-778f0618","/ccpp/16%20%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AE%BF%E9%97%AE%E5%85%B1%E4%BA%AB%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98.html",{c:["c/c++"],g:["智能指针"],e:`<h1> 多线程访问共享对象的线程安全问题</h1>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">handler01</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">A</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">q</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">	std::</span><span style="color: #E5C07B">this_thread</span><span style="color: #ABB2BF">::</span><span style="color: #61AFEF">sleep_for</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">std</span><span style="color: #ABB2BF">::</span><span style="color: #E5C07B">chrono</span><span style="color: #ABB2BF">::</span><span style="color: #61AFEF">seconds</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">));</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">q</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #61AFEF">testA</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">	A</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> p </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">A</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">	thread </span><span style="color: #61AFEF">t1</span><span style="color: #ABB2BF">(handler01, p);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF"> p;</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">t1</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">join</span><span style="color: #ABB2BF">();</span><span style="color: #7F848E; font-style: italic">  // 等待线程t1执行完才会往下走</span></span>
<span class="line"><span style="color: #ABB2BF">	</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.23,words:369},y:"a",t:"多线程访问共享对象的线程安全问题",i:"file",O:3},["/ccpp/16 智能指针/多线程访问共享对象的线程安全问题.html","/ccpp/16 智能指针/多线程访问共享对象的线程安全问题.md",":md"]],["v-29824dbc","/ccpp/16%20%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/%E5%B8%A6%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E7%9A%84%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88.html",{c:["c/c++"],g:["智能指针"],e:`<h1> 带引用计数的智能指针</h1>
<p>shared_ptr和weak_ptr；</p>
<p><strong>带引用计数的好处：。</strong></p>
<h2> 带引用计数的智能指针是怎么解决多个指针持有一个资源的？</h2>
<ul>
<li><strong>带引用计数：</strong></li>
<li>当1个智能指针<u>引用这个资源的时候，这个资源相应的引用计数就加1，当这个智能指针出作用域，不再使用这个资源的时候，这个资源的引用计数就减1。</u></li>
<li>当引用计数减1不为0的时候，这个智能指针不使用这个资源了，但是还有其他智能指针在使用这个资源，这个智能指针不能析构这个资源，只能直接走人。</li>
<li>当引用计数减1<u>为0的时候，说明当前智能指针是最后使用这个资源的智能指针，所以它要负责这个资源的释放</u>。（完美的解决了智能指针的浅拷贝—就是多个智能指针多次释放同一个资源）</li>
</ul>`,r:{minutes:5.53,words:1659},y:"a",t:"带引用计数的智能指针",i:"file",O:2},["/ccpp/16 智能指针/带引用计数的智能指针.html","/ccpp/16 智能指针/带引用计数的智能指针.md",":md"]],["v-6c9710e8","/ccpp/16%20%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%A0%E9%99%A4%E5%99%A8.html",{c:["c/c++"],g:["智能指针","lambda"],e:`<h1> 自定义删除器</h1>
<ul>
<li>并不是说所有资源的释放都是delete指针 进行释放的。</li>
<li>比如说，用智能指针来托管数组的资源，delete就得加个中括号[]了，</li>
<li>如果用智能指针管理的是文件资源，或者是其他资源，释放的方式不是delete。</li>
</ul>
<p>作用：<strong>能保证资源的绝对释放</strong></p>
<p><code>unique_ptr shared_ptr</code>都可以提供自定义删除器，本质上也就是智能指针<strong>第二参数给函数对象类</strong>，在类的operator()运算符重载资源释放工作，用法见下方代码：</p>`,r:{minutes:1.29,words:386},y:"a",t:"自定义删除器",i:"file",O:4},["/ccpp/16 智能指针/自定义删除器.html","/ccpp/16 智能指针/自定义删除器.md",":md"]],["v-16792cec","/ccpp/10%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Pimpl.html",{c:["c/c++"],g:["设计模式"],e:`<h1> Pimpl</h1>
<p>PIMPL（Private Implementation 或Pointer to Implementation）是通过一个，将指针所指向的类的内部。PIMPL又称作“<strong>编译防火墙</strong>”，它的实现中就用到了<strong>嵌套类</strong>。PIMPL设计模式有如下优点：</p>
<ol>
<li>
<p>提高编译速度；</p>
<ul>
<li>数据成员只有一个指针，使得每个对象占用内存较小</li>
<li>可以将实现文件编译成库文件</li>
</ul>
</li>
<li>
<p>实现信息隐藏；</p>
<ul>
<li>头文件只有接口和一个数据指针，无法推断出底层的实现</li>
</ul>
</li>
<li>
<p>减小编译依赖，可以用最小的代价平滑的升级库文件；</p>
<ul>
<li>
<p>不需要重新编译就可以替换库文件，便于软件升级</p>
<p>如果用户代码需要使用这个类，它就需要 include 这个头文件，根据 C++ 的头文件展开原则，其他的代码也需要 include 这个头文件里面涉及到的所有的头文件。因此，一旦这里面相关的代码有变动，不止变动的代码需要重新编译，用户代码也需要重新编译，这会使编译速度变得很慢。</p>
</li>
</ul>
</li>
<li>
<p>接口与实现进行解耦；</p>
</li>
<li>
<p>移动语义友好。</p>
</li>
</ol>`,r:{minutes:1.77,words:532},y:"a",t:"Pimpl",i:"file",O:1},["/ccpp/10 设计模式/Pimpl.html","/ccpp/10 设计模式/Pimpl.md",":md"]],["v-73dfb9d4","/ccpp/10%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E3%80%81%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F.html",{c:["c/c++"],g:["设计模式"],e:`<h1> 代理模式、适配器模式、装饰器模式</h1>
<p>代理模式、适配器模式、装饰器模式属于<strong>结构型设计模式</strong>，这些模式关注<strong>类和对象的组合</strong>。继承的概念被用来组合接口和定义组合对象获得新功能的方式</p>
<h2> 1、代理模式</h2>
<figure><figcaption></figcaption></figure>
<p>不是所有的客户都能访问到老板，老板的助理，即通过代理类，来控制实际对象的访问权限。</p>
<blockquote>
<p><strong>代理类和委托类是组合关系！！！</strong></p>
</blockquote>`,r:{minutes:6.21,words:1863},y:"a",t:"代理模式、适配器模式、装饰器模式",i:"file",O:4},["/ccpp/10 设计模式/代理模式、适配器模式、装饰器模式.html","/ccpp/10 设计模式/代理模式、适配器模式、装饰器模式.md",":md"]],["v-ef005662","/ccpp/10%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html",{c:["c/c++"],g:["设计模式"],e:`<h1> 单例模式</h1>
<h2> 什么是单例模式</h2>
<p>单例模式是指在整个系统生命周期内，保<u>证一个类只能产生一个实例</u>，确保该<strong>类的唯一性</strong>。</p>
<h2> 为什么需要单例模式</h2>
<ol>
<li>节省资源。一个类<u>只有一个实例，不存在多份实例</u>，节省资源。</li>
<li>方便控制。在一些操作<strong>公共资源</strong>的场景时，避免了多个对象引起的复杂操作。</li>
</ol>
<h2> 线程安全</h2>
<h3> 什么是线程安全？</h3>
<p>在拥有共享数据的多条线程并行执行的程序中，线程安全的代码会<u>通过同步机制保证各个线程都可以正常且正确的执行，不会出现数据污染等意外情况</u>。</p>`,r:{minutes:7.23,words:2169},y:"a",t:"单例模式",i:"file",O:2},["/ccpp/10 设计模式/单例模式.html","/ccpp/10 设计模式/单例模式.md",":md"]],["v-44042d12","/ccpp/10%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E3%80%81%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E3%80%81%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82.html",{c:["c/c++"],g:["设计模式"],e:`<h1> 简单工厂、工厂方法、抽象工厂</h1>
<p>属于<strong>创建型设计模式</strong></p>
<h2> 简单工厂（Simple Factory）</h2>
<ul>
<li>
<p>简单工厂（Simple Factory） 不属于标准的OOP设计模式中的一项，工厂方法和抽象工厂是属于标准的23种设计模式的；</p>
</li>
<li>
<p>在编写大型C++软件的时候，代码里面会出现，<strong>每次创建对象的时候，都需要通过new 类名称的方式来生成对象，这样一来，用户，暂且不管记不记得住，这样的设计使得代码很难维护，</strong>，不符合我们软件设计的思想，Simple Factory就是在这样的需求下诞生的。</p>
</li>
<li>
<p><strong>工厂方法主要是封装了对象的创建！</strong></p>
</li>
</ul>`,r:{minutes:6.47,words:1942},y:"a",t:"简单工厂、工厂方法、抽象工厂",i:"file",O:3},["/ccpp/10 设计模式/简单工厂、工厂方法、抽象工厂.html","/ccpp/10 设计模式/简单工厂、工厂方法、抽象工厂.md",":md"]],["v-5f0f0675","/ccpp/10%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85Observer%E6%A8%A1%E5%BC%8F.html",{c:["c/c++"],g:["设计模式"],e:`<h1> 观察者Observer模式</h1>
<ul>
<li>观察者模式是<strong>行为型模式</strong>；</li>
<li>行为型模式： 主要关注的是<strong>对象之间的通信</strong></li>
<li><strong>观察者模式</strong>又叫做<strong>观察者(Observer)监听者(Listener)模式</strong>，也叫<strong>发布(Publish)订阅(Subscribe)模式</strong></li>
<li><strong>主要关注的是对象的一对多的关系，也就是多个对象都依赖一个对象，当该对象的状态发生改变时，其它对象都能够接收到相应的通知</strong></li>
</ul>`,r:{minutes:2.45,words:734},y:"a",t:"观察者Observer模式",i:"file",O:6},["/ccpp/10 设计模式/观察者Observer模式.html","/ccpp/10 设计模式/观察者Observer模式.md",":md"]],["v-7c0c7a84","/ccpp/15%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BC%98%E5%8C%96/C__%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BC%98%E5%8C%96.html",{c:["c/c++"],g:["对象优化"],e:`<h1> C++对象的优化</h1>
<h2> 1、对象<strong>使用过程中</strong>背后调用了哪些方法？</h2>
<p>了解构造和析构的调用，以及调用顺序</p>
<h3> 用临时对象生成新对象</h3>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Test</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">Test</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">a</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">) :</span><span style="color: #61AFEF">ma</span><span style="color: #ABB2BF">(a) </span></span>
<span class="line"><span style="color: #ABB2BF">	{ cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Test(int)"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl; }</span></span>
<span class="line"><span style="color: #ABB2BF">	</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">~Test</span><span style="color: #ABB2BF">() </span></span>
<span class="line"><span style="color: #ABB2BF">	{ cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"~Test()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl; }</span></span>
<span class="line"><span style="color: #ABB2BF">	</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">Test</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Test</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">t</span><span style="color: #ABB2BF">) :</span><span style="color: #61AFEF">ma</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">t</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">ma</span><span style="color: #ABB2BF">) </span></span>
<span class="line"><span style="color: #ABB2BF">	{ cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Test(const Test&amp;)"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl; }</span></span>
<span class="line"><span style="color: #ABB2BF">	</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">Test</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">operator</span><span style="color: #ABB2BF">=(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Test</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">t</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"operator="</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">		ma </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">t</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">ma</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> ma;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">	Test t1;</span><span style="color: #7F848E; font-style: italic">//调用构造函数 </span></span>
<span class="line"><span style="color: #ABB2BF">	Test </span><span style="color: #61AFEF">t2</span><span style="color: #ABB2BF">(t1);</span><span style="color: #7F848E; font-style: italic">//调用拷贝构造函数 </span></span>
<span class="line"><span style="color: #ABB2BF">	Test t3 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> t1;</span><span style="color: #7F848E; font-style: italic">//调用拷贝构造函数，因为t3还没有生成 </span></span>
<span class="line"><span style="color: #ABB2BF">	</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	//Test(20) 显示生成临时对象，是没有名字的，所以其生存周期：所在的语句</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	//语句结束，临时对象就析构了 </span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	/*</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	C++编译器对于对象构造的优化：用临时对象生成新对象的时候，临时对象</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	就不产生了，直接构造新对象就可以了</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	*/</span></span>
<span class="line"><span style="color: #ABB2BF">	Test t4 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Test</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">20</span><span style="color: #ABB2BF">);</span><span style="color: #7F848E; font-style: italic">//和Test t4(20);没有区别的！</span></span>
<span class="line"><span style="color: #ABB2BF">	cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"--------------"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:8.04,words:2412},y:"a",t:"C++对象的优化",i:"file",O:1},["/ccpp/15 对象的优化/C__对象的优化.html","/ccpp/15 对象的优化/C++对象的优化.html","/ccpp/15%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BC%98%E5%8C%96/C++%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BC%98%E5%8C%96.html","/ccpp/15 对象的优化/C++对象的优化.md","/ccpp/15%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BC%98%E5%8C%96/C++%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BC%98%E5%8C%96.md"]],["v-5b3d8584","/ccpp/15%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BC%98%E5%8C%96/C__%E7%9A%84%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8.html",{c:["c/c++"],g:["对象优化"],e:`<h1> C++的右值引用的应用</h1>
<h2> 1、CMyStirng代码的问题分析</h2>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">CMyString</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">CMyString</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">char*</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">str</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"CMyString(const char*)"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (str </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #ABB2BF">			mptr </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">char</span><span style="color: #ABB2BF">[</span><span style="color: #61AFEF">strlen</span><span style="color: #ABB2BF">(str) </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">];</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #61AFEF">strcpy</span><span style="color: #ABB2BF">(mptr, str);</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">else</span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">			// 最少都初始化只有一个\\0的字符串，使得不需要对字符串判空操作</span></span>
<span class="line"><span style="color: #ABB2BF">			mptr </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">char</span><span style="color: #ABB2BF">[</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">];</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">mptr </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'</span><span style="color: #56B6C2">\\0</span><span style="color: #98C379">'</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">~CMyString</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"~CMyString"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF">[]mptr;</span></span>
<span class="line"><span style="color: #ABB2BF">		mptr </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	// 带左值引用参数的拷贝构造</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">CMyString</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">CMyString</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">str</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"CMyString(const CMyString&amp;)"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">		mptr </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">char</span><span style="color: #ABB2BF">[</span><span style="color: #61AFEF">strlen</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">str</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">mptr</span><span style="color: #ABB2BF">) </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">];</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #61AFEF">strcpy</span><span style="color: #ABB2BF">(mptr, </span><span style="color: #E5C07B">str</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">mptr</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	// 带左值引用参数的赋值重载函数</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">CMyString</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">operator</span><span style="color: #ABB2BF">=(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">CMyString</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">str</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"operator=(const CMyString&amp;)"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">str)</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF">[]mptr;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">		mptr </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">char</span><span style="color: #ABB2BF">[</span><span style="color: #61AFEF">strlen</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">str</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">mptr</span><span style="color: #ABB2BF">) </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">];</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #61AFEF">strcpy</span><span style="color: #ABB2BF">(mptr, </span><span style="color: #E5C07B">str</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">mptr</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">char*</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">c_str</span><span style="color: #ABB2BF">()</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> { </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> mptr; }</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">char</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> mptr;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #E5C07B">CMyString</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">GetString</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">CMyString</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">str</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">char</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> pstr </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">str</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">c_str</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">	CMyString </span><span style="color: #61AFEF">tmpStr</span><span style="color: #ABB2BF">(pstr);</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> tmpStr;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">	CMyString </span><span style="color: #61AFEF">str1</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"aaaaaaaaaaaaaaaaaaaa"</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">	CMyString str2;</span></span>
<span class="line"><span style="color: #ABB2BF">	str2 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">GetString</span><span style="color: #ABB2BF">(str1);</span></span>
<span class="line"><span style="color: #ABB2BF">	cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">str2</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">c_str</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.65,words:1396},y:"a",t:"C++的右值引用的应用",i:"file",O:2},["/ccpp/15 对象的优化/C__的右值引用.html","/ccpp/15 对象的优化/C++的右值引用.html","/ccpp/15%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BC%98%E5%8C%96/C++%E7%9A%84%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8.html","/ccpp/15 对象的优化/C++的右值引用.md","/ccpp/15%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BC%98%E5%8C%96/C++%E7%9A%84%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8.md"]],["v-45747b0a","/ccpp/15%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BC%98%E5%8C%96/move%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89%E5%92%8Cforward%E5%AE%8C%E7%BE%8E%E8%BD%AC%E5%8F%91.html",{c:["c/c++"],g:["对象优化"],e:`<h1> move移动语义和forward完美转发</h1>
<p>vector使用右值的拷贝构造函数，可以直接用临时对象拷贝构造，直接将资源移动过来。</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">//容器空间适配器</span></span>
<span class="line"><span style="color: #C678DD">template</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">typename</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #C678DD">struct</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Allocator</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #61AFEF">allocate</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">size</span><span style="color: #ABB2BF">)</span><span style="color: #7F848E; font-style: italic">//负责内存的开辟</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (T</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)</span><span style="color: #61AFEF">malloc</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">sizeof</span><span style="color: #ABB2BF">(T)</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">size);</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">deallocate</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #E06C75; font-style: italic">p</span><span style="color: #ABB2BF">)</span><span style="color: #7F848E; font-style: italic">//负责内存的释放</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #61AFEF">free</span><span style="color: #ABB2BF">(p);</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">construct</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #E06C75; font-style: italic">p</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">val</span><span style="color: #ABB2BF">)</span><span style="color: #7F848E; font-style: italic">//负责对象的构造</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">new</span><span style="color: #ABB2BF">(p) </span><span style="color: #61AFEF">T</span><span style="color: #ABB2BF">(val);</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">destroy</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #E06C75; font-style: italic">p</span><span style="color: #ABB2BF">)</span><span style="color: #7F848E; font-style: italic">//负责对象的析构</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #E5C07B">p</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #61AFEF">~T</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"><span style="color: #C678DD">template</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">typename</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF">,</span><span style="color: #C678DD">typename</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Alloc</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> Allocator&lt;</span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF">&gt;&gt;</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">vector</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">size</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		_first </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">allocate</span><span style="color: #ABB2BF">(size);</span><span style="color: #7F848E; font-style: italic">//只给数组开辟空间，不进行构造</span></span>
<span class="line"><span style="color: #ABB2BF">		_last </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> _first;</span></span>
<span class="line"><span style="color: #ABB2BF">		_end </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> _first </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> size;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">~vector</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		T </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">ptmp </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> _first;</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">for</span><span style="color: #ABB2BF"> (; ptmp </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> _last; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">ptmp)</span><span style="color: #7F848E; font-style: italic">//首先释放数组中的有效元素</span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">destroy</span><span style="color: #ABB2BF">(ptmp);</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">		//释放数组</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">deallocate</span><span style="color: #ABB2BF">(_first);</span></span>
<span class="line"><span style="color: #ABB2BF">		_first </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> _end </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> _last </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">vector</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">src</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">		//首先申请空间</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> size </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">src</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_end</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">src</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_first</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">//获取src的数组长度</span></span>
<span class="line"><span style="color: #ABB2BF">		_first </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">allocate</span><span style="color: #ABB2BF">(size);</span><span style="color: #7F848E; font-style: italic">//申请空间</span></span>
<span class="line"><span style="color: #ABB2BF">		_last </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> _first;</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> len </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">src</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_last</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">src</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_first</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">for</span><span style="color: #ABB2BF"> (</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> len; i</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">)</span><span style="color: #7F848E; font-style: italic">//拷贝数据</span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">construct</span><span style="color: #ABB2BF">(_last</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">src</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_first</span><span style="color: #ABB2BF">[i]);</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"><span style="color: #ABB2BF">		_end </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> _first </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> size;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">operator</span><span style="color: #ABB2BF">=(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">src</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">		//1,判断是否为自赋值</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">src)</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">		//2，释放原来对象占用的空间</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #56B6C2">~</span><span style="color: #61AFEF">vector</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">		//3，和拷贝构造过程一样</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> size </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">src</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_end</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">src</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_first</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">//获取src的数组长度</span></span>
<span class="line"><span style="color: #ABB2BF">		_first </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">allocate</span><span style="color: #ABB2BF">(size);</span><span style="color: #7F848E; font-style: italic">//申请空间</span></span>
<span class="line"><span style="color: #ABB2BF">		_last </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> _first;</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> len </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">src</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_last</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">src</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_first</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">for</span><span style="color: #ABB2BF"> (</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> len; i</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">construct</span><span style="color: #ABB2BF">(_last</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">src</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">_first</span><span style="color: #ABB2BF">[i]);</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"><span style="color: #ABB2BF">		_end </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> _first </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> size;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">push_back</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">val</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #61AFEF">full</span><span style="color: #ABB2BF">())</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #61AFEF">expand</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">construct</span><span style="color: #ABB2BF">(_last</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">, val);</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">pop_back</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">())</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">--</span><span style="color: #ABB2BF">_last;</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">destroy</span><span style="color: #ABB2BF">(_last);</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">back</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">())</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #C678DD">throw</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"the vector is empty"</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">(_last </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">full</span><span style="color: #ABB2BF">()</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> { </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> _last </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> _end; }</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">()</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> { </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> _first </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> _last; }</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">()</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> { </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> _last </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> _first; }</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">	T </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">_first;</span><span style="color: #7F848E; font-style: italic">//指向数组的首元素的地址</span></span>
<span class="line"><span style="color: #ABB2BF">	T </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">_last;</span><span style="color: #7F848E; font-style: italic">//指向数据最后一个有效元素的后继</span></span>
<span class="line"><span style="color: #ABB2BF">	T </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">_end;</span><span style="color: #7F848E; font-style: italic">//指向数组有效空间最后一个元素的后继</span></span>
<span class="line"><span style="color: #ABB2BF">	Alloc _allocator;</span><span style="color: #7F848E; font-style: italic">//空间适配器</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">expand</span><span style="color: #ABB2BF">()</span><span style="color: #7F848E; font-style: italic">//二倍扩容</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> len </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> _end </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> _first;</span><span style="color: #7F848E; font-style: italic">//当前的数组大小</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> size </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> len </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">//扩容之后的数组的大小</span></span>
<span class="line"><span style="color: #ABB2BF">		</span></span>
<span class="line"><span style="color: #ABB2BF">		T </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">ptmp </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">allocate</span><span style="color: #ABB2BF">(size);</span><span style="color: #7F848E; font-style: italic">//先申请大小为原来二倍的空间</span></span>
<span class="line"><span style="color: #ABB2BF">		T </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">pcur </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> _first;</span><span style="color: #7F848E; font-style: italic">//</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">for</span><span style="color: #ABB2BF"> (</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> len; i</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">construct</span><span style="color: #ABB2BF">(ptmp </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> i, </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">pcur</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">for</span><span style="color: #ABB2BF"> (</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> len; i</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">destroy</span><span style="color: #ABB2BF">(_first</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #E5C07B">_allocator</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">deallocate</span><span style="color: #ABB2BF">(_first);</span></span>
<span class="line"><span style="color: #ABB2BF">		_first </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> ptmp;</span></span>
<span class="line"><span style="color: #ABB2BF">		_end </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> _first </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> size;</span></span>
<span class="line"><span style="color: #ABB2BF">		_last </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> _first </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> len;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.71,words:1113},y:"a",t:"move移动语义和forward完美转发",i:"file",O:3},["/ccpp/15 对象的优化/move移动语义和forward完美转发.html","/ccpp/15 对象的优化/move移动语义和forward完美转发.md",":md"]],["v-25665f14","/ccpp/18%20C__11%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/C__11%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93.html",{c:["c/c++"],g:["c++11"],e:`<h1> C++11 内容总结</h1>
<h2> 1、关键字和语法</h2>
<p><strong>nullptr：</strong> 之前的<u>NULL，是一个宏定义</u>，代码上是的</p>
<p><strong>右值引用：</strong> 非常强大；</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">auto</span><span style="color: #ABB2BF">：可以根据右值，推导出右值的类型，然后左边变量的类型也就已知了</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">：给指针专用（能够和整数进行区别） </span></span>
<span class="line"><span style="color: #ABB2BF">以前用的NULL是宏定义，在代码上无法区分整数和指针地址 </span><span style="color: #E06C75">#define</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">NULL</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span></span>
<span class="line"><span style="color: #ABB2BF">（都是4字节，但是毕竟逻辑意义不一样，要区分的！）</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">for</span><span style="color: #ABB2BF"> each：可以遍历数组（底层是指针遍历），容器（底层是迭代器遍历）</span></span>
<span class="line"><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(Type val : container) </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> 底层就是通过指针或者迭代器来实现的</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">	cout</span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF">val</span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #98C379">" "</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">右值引用：move移动语义函数和forward类型完美转发函数</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">模板的一个新特性：typename... A  表示可变参（类型参数）</span></span>
<span class="line"><span style="color: #ABB2BF">表示参数可能会很多 </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.41,words:423},y:"a",t:"C++11内容总结",i:"file",O:1},["/ccpp/18 C__11知识汇总/C__11内容总结.html","/ccpp/18 C++11知识汇总/C++11内容总结.html","/ccpp/18%20C++11%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/C++11%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93.html","/ccpp/18 C++11知识汇总/C++11内容总结.md","/ccpp/18%20C++11%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/C++11%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93.md"]],["v-6ce1e1a6","/ccpp/18%20C__11%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/C__11%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B.html",{c:["c/c++"],g:["多线程"],e:`<h1> C++11多线程编程</h1>
<blockquote>
<p><strong>C++语言级别的多线程编程=》代码可以跨平台 windows/linux/mac</strong></p>
</blockquote>
<h2> 1、C++多线程介绍</h2>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">thread</span><span style="color: #ABB2BF">(线程类)</span></span>
<span class="line"><span style="color: #61AFEF">mutex</span><span style="color: #ABB2BF">(互斥锁)</span></span>
<span class="line"><span style="color: #61AFEF">condition_variable</span><span style="color: #ABB2BF">(线程间的通信，条件变量)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">智能锁：(自动的加锁解锁)</span></span>
<span class="line"><span style="color: #ABB2BF">lock_guard</span></span>
<span class="line"><span style="color: #ABB2BF">unique_lock</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">atomic 原子类型 基于CAS操作的原子类型 线程安全的</span></span>
<span class="line"></span>
<span class="line"><span style="color: #61AFEF">sleep_for</span><span style="color: #ABB2BF">(睡眠) </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:7.62,words:2285},y:"a",t:"C++11多线程编程",i:"file",O:2},["/ccpp/18 C__11知识汇总/C__11多线程编程.html","/ccpp/18 C++11知识汇总/C++11多线程编程.html","/ccpp/18%20C++11%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/C++11%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B.html","/ccpp/18 C++11知识汇总/C++11多线程编程.md","/ccpp/18%20C++11%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/C++11%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B.md"]],["v-7cc2160e","/ccpp/18%20C__11%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/C__11%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E5%90%8C%E6%AD%A5%E9%80%9A%E4%BF%A1(%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B).html",{c:["c/c++"],g:["c++11线程"],e:`<h1> C++11线程间的同步通信(生产者-消费者模型)</h1>
<h2> 1、多线程编程两个问题</h2>
<h3> 1.1、线程间的互斥</h3>
<p>竞态条件： 多线程执行的结果出现不一致的情况，由于CPU对线程不同的调用顺序，而产生不同的运行结果。</p>
<p>发生竞态条件的代码段，称为<strong>临界区代码段</strong>（只有一个线程可以进来），<strong>保证临界区代码段原子操作</strong>，</p>
<p>C++11的mutex底层实现：</p>
<p>使用<code>strace ./a.out</code>跟踪代码，使用C++11提供的mutex，Linux底层使用的也是自己的pthread_mutex互斥锁。</p>`,r:{minutes:7.54,words:2263},y:"a",t:"C++11线程间的同步通信(生产者-消费者模型)",i:"file",O:3},["/ccpp/18 C__11知识汇总/C__11线程间的同步通信(生产者-消费者模型).html","/ccpp/18 C++11知识汇总/C++11线程间的同步通信(生产者-消费者模型).html","/ccpp/18%20C++11%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/C++11%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E5%90%8C%E6%AD%A5%E9%80%9A%E4%BF%A1(%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B).html","/ccpp/18 C++11知识汇总/C++11线程间的同步通信(生产者-消费者模型).md","/ccpp/18%20C++11%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/C++11%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E5%90%8C%E6%AD%A5%E9%80%9A%E4%BF%A1(%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B).md"]],["v-6c9ca25c","/ccpp/18%20C__11%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/%E5%86%8D%E8%B0%88mtx%E5%92%8Clock_guard%E5%92%8Cunique_lock.html",{c:["c/c++"],g:["c++11"],e:`<h1> 再谈mtx和lock_guard和unique_lock</h1>
<h2> 1、mutex</h2>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">std::mutex mtx;</span></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">mtx</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">lock</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">	</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">mtx</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">unlock</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">	</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.91,words:872},y:"a",t:"再谈mtx和lock_guard和unique_lock",i:"file",O:4},["/ccpp/18 C__11知识汇总/再谈mtx和lock_guard和unique_lock.html","/ccpp/18 C++11知识汇总/再谈mtx和lock_guard和unique_lock.html","/ccpp/18%20C++11%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/%E5%86%8D%E8%B0%88mtx%E5%92%8Clock_guard%E5%92%8Cunique_lock.html","/ccpp/18 C++11知识汇总/再谈mtx和lock_guard和unique_lock.md","/ccpp/18%20C++11%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/%E5%86%8D%E8%B0%88mtx%E5%92%8Clock_guard%E5%92%8Cunique_lock.md"]],["v-2483becb","/ccpp/18%20C__11%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/%E5%9F%BA%E4%BA%8ECAS%E6%93%8D%E4%BD%9C%E7%9A%84atomic%E5%8E%9F%E5%AD%90%E7%B1%BB%E5%9E%8B.html",{c:["c/c++"],g:["c++11"],e:`<h1> 基于CAS操作的atomic原子类型</h1>
<p><strong>问题：</strong> 前面在进行卖票操作时，多线程操作不安全，票的数量Count不正确；</p>
<p><strong>解决方法：</strong> 前面是通过<strong>lock_gard互斥锁</strong>解决的；</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> count</span><span style="color: #C678DD">=</span><span style="color: #D19A66">100</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E5C07B">lock_guard</span><span style="color: #ABB2BF">&lt;std::</span><span style="color: #E5C07B">mutex</span><span style="color: #ABB2BF">&gt; </span><span style="color: #61AFEF">guard</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">mtx</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">count</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E5C07B">lock_guard</span><span style="color: #ABB2BF">&lt;std::</span><span style="color: #E5C07B">mutex</span><span style="color: #ABB2BF">&gt; </span><span style="color: #61AFEF">guard</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">mtx</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">count</span><span style="color: #C678DD">--</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.67,words:1102},y:"a",t:"页面配置",i:"基于CAS操作的atomic原子类型",O:5},["/ccpp/18 C__11知识汇总/基于CAS操作的atomic原子类型.html","/ccpp/18 C++11知识汇总/基于CAS操作的atomic原子类型.html","/ccpp/18%20C++11%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/%E5%9F%BA%E4%BA%8ECAS%E6%93%8D%E4%BD%9C%E7%9A%84atomic%E5%8E%9F%E5%AD%90%E7%B1%BB%E5%9E%8B.html","/ccpp/18 C++11知识汇总/基于CAS操作的atomic原子类型.md","/ccpp/18%20C++11%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/%E5%9F%BA%E4%BA%8ECAS%E6%93%8D%E4%BD%9C%E7%9A%84atomic%E5%8E%9F%E5%AD%90%E7%B1%BB%E5%9E%8B.md"]],["v-0ccdd78f","/ccpp/17%20bind%E7%BB%91%E5%AE%9A%E5%99%A8%E5%92%8Cfunction%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/bind1st%E5%92%8Cbind2d%E4%BD%BF%E7%94%A8.html",{c:["c/c++"],g:["bind绑定器"],e:`<h1> bind1st和bind2d使用</h1>
<ul>
<li><strong>bind1st和bind2d是STL中的；</strong></li>
<li><strong>bind1st和bind2d作用：</strong> 将二元函数对象的一个参数绑定，使其变为一元函数对象；</li>
<li><strong>缺点：</strong> 只能用于二元函数对象。</li>
<li><strong>函数对象：</strong> 对象拥有小括号<a href="https://so.csdn.net/so/search?q=%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">重载函数</a>的对象。</li>
</ul>`,r:{minutes:3.13,words:938},y:"a",t:"bind1st和bind2d使用",i:"file",O:1},["/ccpp/17 bind绑定器和function函数对象/bind1st和bind2d使用.html","/ccpp/17 bind绑定器和function函数对象/bind1st和bind2d使用.md",":md"]],["v-0413f5c0","/ccpp/17%20bind%E7%BB%91%E5%AE%9A%E5%99%A8%E5%92%8Cfunction%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/bind%E5%92%8Cfunction%E5%AE%9E%E7%8E%B0muduo%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0.html",{c:["c/c++"],g:["bind绑定器","function函数对象","线程池"],e:`<h1> bind和function实现muduo中的线程池</h1>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;typeinfo&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;string&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;memory&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;vector&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;functional&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;thread&gt;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">namespace</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">std</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">namespace</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">placeholders</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//线程类</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Thread</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">Thread</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">function</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">)&gt; </span><span style="color: #E06C75; font-style: italic">func</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">no</span><span style="color: #ABB2BF">)</span><span style="color: #7F848E; font-style: italic">//使用function接收bind</span></span>
<span class="line"><span style="color: #ABB2BF">        :</span><span style="color: #61AFEF">_func</span><span style="color: #ABB2BF">(func), </span><span style="color: #61AFEF">_no</span><span style="color: #ABB2BF">(no) {}</span></span>
<span class="line"><span style="color: #ABB2BF">    </span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">thread</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">start</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		thread </span><span style="color: #61AFEF">t</span><span style="color: #ABB2BF">(_func, _no);</span><span style="color: #7F848E; font-style: italic">// _func(_no)</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> t;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">	function</span><span style="color: #C678DD">&lt;void</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">)</span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> _func;</span><span style="color: #7F848E; font-style: italic">//存储线程处理函数</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _no;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//线程池类</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ThreadPool</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">ThreadPool</span><span style="color: #ABB2BF">() {}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">~ThreadPool</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">		//因为vector存储的是指针，所以需要手动释放资源</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">        //释放Thread对象占用的堆资源</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">for</span><span style="color: #ABB2BF"> (</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_pool</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">(); </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">i)</span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_pool</span><span style="color: #ABB2BF">[i];</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	//开启线程池</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">startPool</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">size</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">        //创建线程池</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">for</span><span style="color: #ABB2BF"> (</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> size; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">i)</span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #E5C07B">_pool</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push_back</span><span style="color: #ABB2BF">(	</span></span>
<span class="line"><span style="color: #ABB2BF">         		</span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Thread</span><span style="color: #ABB2BF">(</span><span style="color: #61AFEF">bind</span><span style="color: #ABB2BF">(</span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">ThreadPool::runInThread, </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">, _1), i));</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"><span style="color: #ABB2BF">		</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">        //将线程句柄存储起来用于等待完成</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">for</span><span style="color: #ABB2BF"> (</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> size; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">i)</span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #E5C07B">_handler</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push_back</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">_pool</span><span style="color: #ABB2BF">[i]-&gt;</span><span style="color: #61AFEF">start</span><span style="color: #ABB2BF">());</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">for</span><span style="color: #ABB2BF"> (thread</span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF"> t : _handler)</span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #E5C07B">t</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">join</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">	vector</span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF">Thread</span><span style="color: #56B6C2">*</span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> _pool;</span></span>
<span class="line"><span style="color: #ABB2BF">	vector</span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF">thread</span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> _handler;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	//把runInThread这个成员方法充当线程函数  thread   pthread_create</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">runInThread</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">id</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"call runInThread! id:"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> id </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">	ThreadPool pool;</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">pool</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">startPool</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.39,words:416},y:"a",t:"bind和function实现muduo中的线程池",i:"file",O:6},["/ccpp/17 bind绑定器和function函数对象/bind和function实现muduo中的线程池.html","/ccpp/17 bind绑定器和function函数对象/bind和function实现muduo中的线程池.md",":md"]],["v-cf2f50ee","/ccpp/17%20bind%E7%BB%91%E5%AE%9A%E5%99%A8%E5%92%8Cfunction%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/C__11%E7%BB%91%E5%AE%9A%E5%99%A8%E4%BB%8B%E7%BB%8D.html",{c:["使用指南"],g:["页面配置","使用指南"],e:`<h1> C++11绑定器介绍</h1>
<p>C++ STL的bind只能用于二元的绑定器</p>
<p><strong>C++11 bind绑定器 =&gt; 返回的结果还是一个</strong>，可以
<strong>。</strong></p>
<p><strong>C++11的bind和function比较：</strong></p>
<ul>
<li><strong>function可以直接将函数类型留下来</strong>。</li>
<li><strong>bind绑定器可以给函数绑定固定的参数。</strong></li>
</ul>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;typeinfo&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;string&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;memory&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;vector&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;functional&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;thread&gt;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">namespace</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">std</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">/*</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">C++11 bind绑定器 =&gt; 返回的结果还是一个函数对象</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">hello</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">string</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">str</span><span style="color: #ABB2BF">) { cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> str </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl; }</span></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">sum</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">a</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">b</span><span style="color: #ABB2BF">) { </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> a </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> b; }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Test</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">sum</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">a</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">b</span><span style="color: #ABB2BF">) { </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> a </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> b; }</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	//bind是函数模板 可以自动推演模板类型参数 </span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">bind</span><span style="color: #ABB2BF">(hello, </span><span style="color: #98C379">"hello bind!"</span><span style="color: #ABB2BF">)();</span><span style="color: #7F848E; font-style: italic">//bind绑定了一个"hello bind!"参数，</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	//返回的结果是绑定器，也就是函数对象, 需要调用它的()重载符号</span></span>
<span class="line"><span style="color: #ABB2BF">	cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">bind</span><span style="color: #ABB2BF">(sum, </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">20</span><span style="color: #ABB2BF">)() </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">	cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">bind</span><span style="color: #ABB2BF">(</span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">Test::sum, </span><span style="color: #61AFEF">Test</span><span style="color: #ABB2BF">(), </span><span style="color: #D19A66">20</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">30</span><span style="color: #ABB2BF">)() </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.29,words:686},y:"a",t:"C++11绑定器介绍",i:"file",O:3},["/ccpp/17 bind绑定器和function函数对象/C__11绑定器介绍.html","/ccpp/17 bind绑定器和function函数对象/C++11绑定器介绍.html","/ccpp/17%20bind%E7%BB%91%E5%AE%9A%E5%99%A8%E5%92%8Cfunction%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/C++11%E7%BB%91%E5%AE%9A%E5%99%A8%E4%BB%8B%E7%BB%8D.html","/ccpp/17 bind绑定器和function函数对象/C++11绑定器介绍.md","/ccpp/17%20bind%E7%BB%91%E5%AE%9A%E5%99%A8%E5%92%8Cfunction%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/C++11%E7%BB%91%E5%AE%9A%E5%99%A8%E4%BB%8B%E7%BB%8D.md"]],["v-474433e4","/ccpp/17%20bind%E7%BB%91%E5%AE%9A%E5%99%A8%E5%92%8Cfunction%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/function%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html",{c:["c/c++"],g:["function函数对象"],e:`<h1> function函数对象类型实现原理</h1>
<p>通过两个例子：一个是持有<strong>普通函数</strong>，一个是持有<strong>类成员方法</strong>；查看类的成员方法到底是什么。</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;typeinfo&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;string&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;functional&gt;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">namespace</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">std</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">/*</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">function函数对象类型的实现原理</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">*/</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">hello</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">string</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">str</span><span style="color: #ABB2BF">) { cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> str </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl; }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">sum</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">a</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">b</span><span style="color: #ABB2BF">) { </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> a </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> b; }</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">///</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">template</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">typename</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Fty</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">myfunction</span><span style="color: #ABB2BF"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#if</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//模板的部分偏特化</span></span>
<span class="line"><span style="color: #C678DD">template</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">typename</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">R</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">typename</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">A1</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">myfunction</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">R</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">A1</span><span style="color: #ABB2BF">)&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">PFUNC</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">R</span><span style="color: #ABB2BF">(</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)(A1);</span><span style="color: #7F848E; font-style: italic">	//需要接受外部传进来的函数类型，使用函数指针接收</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">myfunction</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">PFUNC</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">pfunc</span><span style="color: #ABB2BF">) :</span><span style="color: #61AFEF">_pfunc</span><span style="color: #ABB2BF">(pfunc) {}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">R</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">operator</span><span style="color: #ABB2BF">()(</span><span style="color: #E5C07B">A1</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">arg</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_pfunc</span><span style="color: #ABB2BF">(arg);</span><span style="color: #7F848E; font-style: italic">//hello(arg)</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #C678DD">private:</span><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">	PFUNC _pfunc;</span><span style="color: #7F848E; font-style: italic">//用于保存函数类型</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//模板的部分偏特化</span></span>
<span class="line"><span style="color: #C678DD">template</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">typename</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">R</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">typename</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">A1</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">typename</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">A2</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">myfunction</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">R</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">A1</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">A2</span><span style="color: #ABB2BF">)&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">PFUNC</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">R</span><span style="color: #ABB2BF">(</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)(A1, A2);</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">myfunction</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">PFUNC</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">pfunc</span><span style="color: #ABB2BF">) :</span><span style="color: #61AFEF">_pfunc</span><span style="color: #ABB2BF">(pfunc) {}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">R</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">operator</span><span style="color: #ABB2BF">()(</span><span style="color: #E5C07B">A1</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">arg1</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">A2</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">arg2</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_pfunc</span><span style="color: #ABB2BF">(arg1, arg2);</span><span style="color: #7F848E; font-style: italic">//hello(arg)</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">	PFUNC _pfunc;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"><span style="color: #C678DD">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//可变参模板</span></span>
<span class="line"><span style="color: #C678DD">template</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">typename</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">R</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">typename</span><span style="color: #ABB2BF">... </span><span style="color: #E5C07B">A</span><span style="color: #ABB2BF">&gt;</span><span style="color: #7F848E; font-style: italic">//一组可变参数个数</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">myfunction</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">R</span><span style="color: #ABB2BF">(A...)&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">PFUNC</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">R</span><span style="color: #ABB2BF">(</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">)(A...);</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">myfunction</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">PFUNC</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">pfunc</span><span style="color: #ABB2BF">) :</span><span style="color: #61AFEF">_pfunc</span><span style="color: #ABB2BF">(pfunc) {}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">R</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">operator</span><span style="color: #ABB2BF">()(</span><span style="color: #E5C07B">A</span><span style="color: #ABB2BF">... </span><span style="color: #E06C75; font-style: italic">arg</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_pfunc</span><span style="color: #ABB2BF">(arg...);</span><span style="color: #7F848E; font-style: italic">//hello(arg) 表示一组形参变量</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">	PFUNC _pfunc;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">	function</span><span style="color: #C678DD">&lt;void</span><span style="color: #ABB2BF">(string)</span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">func1</span><span style="color: #ABB2BF">(hello);</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">func1</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"hello world!"</span><span style="color: #ABB2BF">);</span><span style="color: #7F848E; font-style: italic">//func1.operator()("hello world!")</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	myfunction</span><span style="color: #C678DD">&lt;int</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">)</span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">func2</span><span style="color: #ABB2BF">(sum);</span></span>
<span class="line"><span style="color: #ABB2BF">	cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">func2</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">20</span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.46,words:437},y:"a",t:"function函数对象类型实现原理",i:"file",O:4},["/ccpp/17 bind绑定器和function函数对象/function函数对象类型实现原理.html","/ccpp/17 bind绑定器和function函数对象/function函数对象类型实现原理.md",":md"]],["v-2a36819d","/ccpp/17%20bind%E7%BB%91%E5%AE%9A%E5%99%A8%E5%92%8Cfunction%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/function%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%BA%94%E7%94%A8.html",{c:["c/c++"],g:["function函数对象"],e:`<h1> function函数对象类型的应用</h1>
<figure><figcaption></figcaption></figure>
<p><strong>function：函数对象类；</strong></p>
<ul>
<li>绑定器、函数对象、lambda表达式实际上都是函数对象。</li>
</ul>
<p>如果我们<u>最终得到的绑定器、函数对象、lambda表达式，这些函数对象，想在多条语句中应用 ，怎么办？</u><strong>如何将这些函数对象的类型留下来？</strong></p>
<p>源码中希望你用一个<strong>函数类型</strong>来<strong>实例化function模板</strong>。</p>`,r:{minutes:3.11,words:933},y:"a",t:"function函数对象类型的应用",i:"file",O:2},["/ccpp/17 bind绑定器和function函数对象/function函数对象类型的应用.html","/ccpp/17 bind绑定器和function函数对象/function函数对象类型的应用.md",":md"]],["v-2c027fc3","/ccpp/17%20bind%E7%BB%91%E5%AE%9A%E5%99%A8%E5%92%8Cfunction%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html",{c:["c/c++"],g:["lambda"],e:`<h1> lambda表达式</h1>
<ul>
<li><strong>C++11 函数对象的升级版 =》 lambda表达式</strong></li>
<li><strong>函数对象的缺点：</strong>（<code>需要定义一个类</code>）</li>
<li>函数对象使用在 <strong>泛型算法参数传递 比较性质/自定义操作 优先级队列 智能指针（自定义智能指针的删除器）</strong></li>
</ul>
<p><strong>lambda表达式原理：</strong> 就是函数对象更高级的实现！</p>
<h2> 1、lambda表达式语法</h2>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">[捕获外部变量](形参列表)-&gt;</span><span style="color: #C678DD">返回值{操作代码}</span></span>
<span class="line"><span style="color: #C678DD">如果lambda表达式的返回值不需要，那么"-&gt;返回值"可以省略</span></span>
<span class="line"><span style="color: #ABB2BF">    </span></span>
<span class="line"><span style="color: #C678DD">[捕获外部变量]</span></span>
<span class="line"><span style="color: #C678DD">[]：表示不捕获任何外部变量</span></span>
<span class="line"><span style="color: #C678DD">[=]：以传值的方式捕获外部的所有变量</span></span>
<span class="line"><span style="color: #C678DD">[&amp;]：以传引用的方式捕获外部的所有变量</span></span>
<span class="line"><span style="color: #C678DD">[this]：捕获外部的this指针</span></span>
<span class="line"><span style="color: #C678DD">[=,&amp;a]：以传值的方式捕获外部的所有变量，但是a变量以传引用的方式捕获</span></span>
<span class="line"><span style="color: #C678DD">[a,</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">b]：以值传递的方式捕获外部变量a和b</span></span>
<span class="line"><span style="color: #C678DD">[a,</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;b]：a以值传递捕获，b以传引用的方式捕获</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.43,words:1028},y:"a",t:"lambda表达式",i:"file",O:7},["/ccpp/17 bind绑定器和function函数对象/lambda表达式.html","/ccpp/17 bind绑定器和function函数对象/lambda表达式.md",":md"]],["v-08fdb026","/ccpp/17%20bind%E7%BB%91%E5%AE%9A%E5%99%A8%E5%92%8Cfunction%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%AE%8C%E5%85%A8%E7%89%B9%E4%BE%8B%E5%8C%96%E5%92%8C%E9%9D%9E%E5%AE%8C%E5%85%A8%E7%89%B9%E4%BE%8B%E5%8C%96.html",{c:["c/c++"],g:["类模板"],e:`<h1> 模板的完全特例化和非完全特例化</h1>
<blockquote>
<p><strong>有完全特例化，就选择对应的，有部分特例化，就匹配，没有的话，就</strong></p>
</blockquote>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">template</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">typename</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">compare</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">a</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">T</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">b</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"template compare"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> a </span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> b;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">compare</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">20</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">compare</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"aaa"</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">"bbb"</span><span style="color: #ABB2BF">);</span><span style="color: #7F848E; font-style: italic"> //T const char*</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.26,words:977},y:"a",t:"模板的完全特例化和非完全特例化",i:"file",O:3},["/ccpp/17 bind绑定器和function函数对象/模板的完全特例化和非完全特例化.html","/ccpp/17 bind绑定器和function函数对象/模板的完全特例化和非完全特例化.md",":md"]],["v-48c23000","/ccpp/19%20SGI%20STL%E4%BA%8C%E7%BA%A7%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8%E5%86%85%E5%AD%98%E6%B1%A0%E6%BA%90%E7%A0%81/reallocate.html",{c:["c/c++"],g:["SGI STL源码"],e:`<h1> reallocate</h1>
<p><strong>作用：</strong> 对内存池中的__chuck块进行<strong>扩容或缩容</strong>，一般用的比较少</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">template</span><span style="color: #ABB2BF"> &lt;</span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">threads</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">inst</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #C678DD">void*</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">__default_alloc_template</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">threads</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">inst</span><span style="color: #ABB2BF">&gt;::</span><span style="color: #61AFEF">reallocate</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">void*</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">__p</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">                                                    </span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">__old_sz</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">                                                    </span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">__new_sz</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	// 参数:chunk块的其实地址、调整前chunk块的大小、调整后chunk块的大小</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> __result;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> __copy_sz;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (__old_sz </span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> (</span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF">) _MAX_BYTES </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> __new_sz </span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> (</span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF">) _MAX_BYTES) {</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    	// __old_sz和__new_sz都大于128字节，并不是从内存池分配的内存，直接调用库函数realloc </span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF">(</span><span style="color: #61AFEF">realloc</span><span style="color: #ABB2BF">(__p, __new_sz));</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    // __old_sz和__new_sz处于同一数量区间，不用扩容或缩容</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #61AFEF">_S_round_up</span><span style="color: #ABB2BF">(__old_sz) </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_S_round_up</span><span style="color: #ABB2BF">(__new_sz)) </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF">(__p);</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    // __result指向重新分配的空间</span></span>
<span class="line"><span style="color: #ABB2BF">    __result </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">allocate</span><span style="color: #ABB2BF">(__new_sz);</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    // __copy_sz 保存最小值</span></span>
<span class="line"><span style="color: #ABB2BF">    __copy_sz </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> __new_sz </span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> __old_sz</span><span style="color: #C678DD">?</span><span style="color: #ABB2BF"> __old_sz </span><span style="color: #C678DD">:</span><span style="color: #ABB2BF"> __new_sz;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    // 从__p拷贝到__result，扩容拷贝__old_sz字节，缩容拷贝__new_sz</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">memcpy</span><span style="color: #ABB2BF">(__result, __p, __copy_sz);</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    // 归还原来的chunk块到内存池</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">deallocate</span><span style="color: #ABB2BF">(__p, __old_sz);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF">(__result);</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.9,words:270},y:"a",t:"reallocate",i:"file",O:8},["/ccpp/19 SGI STL二级空间配置器内存池源码/reallocate.html","/ccpp/19 SGI STL二级空间配置器内存池源码/reallocate.md",":md"]],["v-30a2e42b","/ccpp/19%20SGI%20STL%E4%BA%8C%E7%BA%A7%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8%E5%86%85%E5%AD%98%E6%B1%A0%E6%BA%90%E7%A0%81/SGI%20STL%E4%BA%8C%E7%BA%A7%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8%E9%87%8D%E8%A6%81%E6%88%90%E5%91%98%E8%A7%A3%E8%AF%BB.html",{c:["c/c++"],g:["SGI STL源码"],e:`<h1> SGI STL二级空间配置器重要成员解读</h1>
<p>为了。所以对于进行管理。</p>
<p>SGI STL提供了一级空间配置器和二级空间配置器，而SGI STL一级空间配置器也和STL标准模板库的实现是一样的（都是malloc/free）</p>
<p>其中<strong>一级空间配置器allocator采用malloc和free来管理内存</strong>，和C++标准库中提供的allocator是一样的，如果我们频繁对内存进行申请和释放，每次都使用malloc和free，效率就很低了
但其<strong>二级空间配置器allocator采用了基于freelist自由链表原理的 内存池机制</strong> 实现内存管理，只管理不大于128字节的小块内存分配</p>`,r:{minutes:4.47,words:1342},y:"a",t:"SGI STL二级空间配置器重要成员解读",i:"file",O:2},["/ccpp/19 SGI STL二级空间配置器内存池源码/SGI STL二级空间配置器重要成员解读.html","/ccpp/19 SGI STL二级空间配置器内存池源码/SGI STL二级空间配置器重要成员解读.md",":md"]],["v-02ca19a9","/ccpp/19%20SGI%20STL%E4%BA%8C%E7%BA%A7%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8%E5%86%85%E5%AD%98%E6%B1%A0%E6%BA%90%E7%A0%81/SGI%20STL%E7%9A%84verctor%E6%98%AF%E6%80%8E%E4%B9%88%E7%AE%A1%E7%90%86%E5%AF%B9%E8%B1%A1%E7%9A%84.html",{c:["c/c++"],g:["SGI STL源码"],e:`<h1> SGI STL的verctor是怎么管理对象的</h1>
<p>![](SGI STL的verctor是怎么管理对象的.assets/image-20240429164446966.png)</p>
<h2> SGI STL push_pack()和pop_pack()</h2>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">//stl_construct.h</span></span>
<span class="line"><span style="color: #C678DD">template</span><span style="color: #ABB2BF"> &lt;</span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_T1</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_T2</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #C678DD">inline</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_Construct</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">_T1</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">__p</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_T2</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">__value</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">  </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> ((</span><span style="color: #C678DD">void</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">) __p) </span><span style="color: #61AFEF">_T1</span><span style="color: #ABB2BF">(__value);</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">template</span><span style="color: #ABB2BF"> &lt;</span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_T1</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_T2</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #C678DD">inline</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">construct</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">_T1</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">__p</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_T2</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">__value</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">  </span><span style="color: #61AFEF">_Construct</span><span style="color: #ABB2BF">(__p, __value);</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//stl_vector.h</span></span>
<span class="line"><span style="color: #C678DD">template</span><span style="color: #ABB2BF"> &lt;</span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_Tp</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_Alloc</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">__STL_DEFAULT_ALLOCATOR</span><span style="color: #ABB2BF">(_Tp) &gt;</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF"> : </span><span style="color: #C678DD">protected</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_Vector_base</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">_Tp</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">_Alloc</span><span style="color: #ABB2BF">&gt; </span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	//...</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">push_back</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_Tp</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">__x</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">    	</span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (_M_finish </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> _M_end_of_storage) {</span></span>
<span class="line"><span style="color: #ABB2BF">      	</span><span style="color: #61AFEF">construct</span><span style="color: #ABB2BF">(_M_finish, __x);</span></span>
<span class="line"><span style="color: #ABB2BF">      	</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">_M_finish;</span></span>
<span class="line"><span style="color: #ABB2BF">    	}</span></span>
<span class="line"><span style="color: #ABB2BF">    	</span><span style="color: #C678DD">else</span></span>
<span class="line"><span style="color: #ABB2BF">      	</span><span style="color: #61AFEF">_M_insert_aux</span><span style="color: #ABB2BF">(</span><span style="color: #61AFEF">end</span><span style="color: #ABB2BF">(), __x);</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.66,words:498},y:"a",t:"SGI STL的verctor是怎么管理对象的",i:"file",O:1},["/ccpp/19 SGI STL二级空间配置器内存池源码/SGI STL的verctor是怎么管理对象的.html","/ccpp/19 SGI STL二级空间配置器内存池源码/SGI STL的verctor是怎么管理对象的.md",":md"]],["v-7e13dfea","/ccpp/19%20SGI%20STL%E4%BA%8C%E7%BA%A7%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8%E5%86%85%E5%AD%98%E6%B1%A0%E6%BA%90%E7%A0%81/%E4%B8%A4%E4%B8%AA%E9%87%8D%E8%A6%81%E7%9A%84%E5%87%BD%E6%95%B0.html",{c:["c/c++"],g:["SGI STL源码"],e:`<h1> 两个重要的辅助接口函数</h1>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">template</span><span style="color: #ABB2BF"> &lt;</span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">threads</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">inst</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">__default_alloc_template</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    //...</span></span>
<span class="line"><span style="color: #ABB2BF">    </span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    //将 __bytes 上调至最邻近的8的倍数</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">static</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">size_t</span></span>
<span class="line"><span style="color: #ABB2BF">  	</span><span style="color: #61AFEF">_S_round_up</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">__bytes</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (((__bytes) </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> (</span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF">) _ALIGN</span><span style="color: #56B6C2">-</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">) </span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">~</span><span style="color: #ABB2BF">((</span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF">) _ALIGN </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">)); </span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    //返回 __bytes 大小的chunk块位于 free-list 中的编号</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">static</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_S_freelist_index</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">__bytes</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (( (__bytes) </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> (</span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF">)_ALIGN</span><span style="color: #56B6C2">-</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">) </span><span style="color: #56B6C2">/</span><span style="color: #ABB2BF"> (</span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF">)_ALIGN </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.28,words:383},y:"a",t:"两个重要的辅助接口函数",i:"file",O:3},["/ccpp/19 SGI STL二级空间配置器内存池源码/两个重要的函数.html","/ccpp/19 SGI STL二级空间配置器内存池源码/两个重要的函数.md",":md"]],["v-4e6c7a0a","/ccpp/19%20SGI%20STL%E4%BA%8C%E7%BA%A7%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8%E5%86%85%E5%AD%98%E6%B1%A0%E6%BA%90%E7%A0%81/%E5%86%85%E5%AD%98%E5%BD%92%E8%BF%98dealloacte.html",{c:["c/c++"],g:["SGI STL源码"],e:`<h1> 内存归还dealloacte</h1>
<p>归还分配出去的<code>__chunk</code>块，并</p>
<ol>
<li>修改<code>_S_free_list</code>对应的元素（<strong>保存当前还未分配出去<code>__chunk</code>块的首地址</strong>）</li>
<li><strong>修改归还的<code>__chunk</code>块的next域</strong></li>
</ol>
<figure><figcaption></figcaption></figure>
<p>归还__p指向的__n字节chunk块到内存池</p>`,r:{minutes:1.13,words:340},y:"a",t:"内存归还dealloacte",i:"file",O:7},["/ccpp/19 SGI STL二级空间配置器内存池源码/内存归还dealloacte.html","/ccpp/19 SGI STL二级空间配置器内存池源码/内存归还dealloacte.md",":md"]],["v-a2d2b900","/ccpp/19%20SGI%20STL%E4%BA%8C%E7%BA%A7%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8%E5%86%85%E5%AD%98%E6%B1%A0%E6%BA%90%E7%A0%81/%E5%86%85%E5%AD%98%E6%B1%A0allocate%E5%88%86%E9%85%8D%E8%BF%87%E7%A8%8B.html",{c:["c/c++"],g:["SGI STL源码"],e:`<h1> 内存池allocate分配过程</h1>
<p>根据想分配的内存大小，先定位到<code>_S_free_list</code> 相应的元素<code>__my_free_list</code>（总共16个元素）</p>
<ul>
<li>
<p>如果<code>__my_free_list</code>下没有挂着空闲的chunk块，那直接从备用内存或者使用malloc申请chunk块，然后分配空间</p>
</li>
<li>
<p>如果还有空闲的chunk块，那就使得<code>_S_free_list</code> 相应的元素指向<code>__my_free_list</code>下面挂着的下一块空闲的内存块，然后把前一块内存分配出去</p>
</li>
</ul>`,r:{minutes:1.65,words:496},y:"a",t:"内存池allocate分配过程",i:"file",O:4},["/ccpp/19 SGI STL二级空间配置器内存池源码/内存池allocate分配过程.html","/ccpp/19 SGI STL二级空间配置器内存池源码/内存池allocate分配过程.md",":md"]],["v-0d093800","/ccpp/19%20SGI%20STL%E4%BA%8C%E7%BA%A7%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8%E5%86%85%E5%AD%98%E6%B1%A0%E6%BA%90%E7%A0%81/%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98%E6%B1%A0_S_refill%E6%BA%90%E7%A0%81.html",{c:["c/c++"],g:["SGI STL源码"],e:`<h1> 分配内存池_S_refill源码</h1>
<p>作用：</p>
<ol>
<li><strong>根据<code>__n</code>，在<code>_S_free_list</code>中对应位置的元素指向一个<code>__nobjs</code>（默认为20）个<code>__n</code>字节chunk块的内存池</strong></li>
<li><strong>并且把第一个<code>__chunk</code>块分配出去，并填写剩下所有<code>__chunk</code>块的next域。</strong></li>
</ol>
<p>只有从备用内存中分配出来，并挂在<code>_S_free_list</code> 下的，才会填写chunk块头的<code>_M_free_list_link</code></p>`,r:{minutes:1.88,words:563},y:"a",t:"分配内存池_S_refill源码",i:"file",O:5},["/ccpp/19 SGI STL二级空间配置器内存池源码/分配内存池_S_refill源码.html","/ccpp/19 SGI STL二级空间配置器内存池源码/分配内存池_S_refill源码.md",":md"]],["v-9ab5c6e8","/ccpp/19%20SGI%20STL%E4%BA%8C%E7%BA%A7%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8%E5%86%85%E5%AD%98%E6%B1%A0%E6%BA%90%E7%A0%81/%E5%AE%9E%E9%99%85%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98%E6%B1%A0_S_chunk_alloc%E6%BA%90%E7%A0%81.html",{c:["c/c++"],g:["SGI STL源码"],e:`<h1> 实际分配内存池_S_chunk_alloc源码</h1>
<p><code>_S_chunk_alloc(size_t __size, int&amp; __nobjs)</code>作用：到备用内存中拿<code>__nobjs</code>个<code>__size</code>字节的chunk块分配</p>
<p>如果备用内存足够，就从备用内存中拿，然后将<code>_S_start_free</code>指向分配后，空闲备用空间的首地址</p>
<p>如果备用内存不够了，就malloc申请，并让<code>_S_start_free</code> 指向malloc的首地址，让<code>_S_end_free</code>指向为malloc空间的尾地址，然后递归调用<code>_S_chunk_alloc</code>重新在备用内存中拿__nobjs个__size字节的chunk块分配</p>`,r:{minutes:7.51,words:2254},y:"a",t:"实际分配内存池_S_chunk_alloc源码",i:"file",O:6},["/ccpp/19 SGI STL二级空间配置器内存池源码/实际分配内存池_S_chunk_alloc源码.html","/ccpp/19 SGI STL二级空间配置器内存池源码/实际分配内存池_S_chunk_alloc源码.md",":md"]],["v-a8d7b886","/ccpp/19%20SGI%20STL%E4%BA%8C%E7%BA%A7%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8%E5%86%85%E5%AD%98%E6%B1%A0%E6%BA%90%E7%A0%81/%E6%80%BB%E7%BB%93.html",{c:["c/c++"],g:["SGI STL源码"],e:`<h1> 总结</h1>
<p>SGI STL二级空间配置器内存池的实现优点：</p>
<ol>
<li>对于每一个字节数的chunk块分配，都是给出一部分进行使用，另一部分作为备用，这个备用可以给当前字节数使用，也可以给其它字节数使用</li>
<li>对于备用内存池划分完chunk块以后，如果还有剩余的很小的内存块，再次分配的时候，会把这些小的内存块挂到<code>_S_free_list</code>的对应位置，再次分配出去，备用内存池使用的干干净净！</li>
<li>当指定字节数内存分配失败以后，有一个异常处理的过程，查看<code>_S_free_list</code>从<code>__size -&gt; 128</code>字节所有的chunk块，如果哪个字节数有空闲的chunk块，直接借一个出去。如果上面操作失败，还会调用<code>_S_oom_malloc</code>，其内部有一个预先设置好的malloc内存分配失败的回调函数，若分配不成功则会不停地调用次回调函数释放空间。若没设置回调函数，则直接<code>malloc throw bad_alloc</code></li>
</ol>`,r:{minutes:1.31,words:393},y:"a",t:"总结",i:"file",O:9},["/ccpp/19 SGI STL二级空间配置器内存池源码/总结.html","/ccpp/19 SGI STL二级空间配置器内存池源码/总结.md",":md"]],["v-5d0a9dce","/linux/02%20vim/vim%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8.html",{c:["linux"],g:["vim配置"],e:`<h1> amix/vimrc的配置和使用</h1>
<h2> 安装前先安装插件</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">sudo</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">apt</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">install</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-y</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">ack</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">universal-ctags</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:2.15,words:646},y:"a",t:"amix/vimrc的配置和使用",i:"file",O:3},["/linux/02 vim/vim的配置和使用.html","/linux/02 vim/vim的配置和使用.md",":md"]],["v-739b4ffd","/linux/01%20%E5%B7%A5%E5%85%B7%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/centos7%E9%85%8D%E7%BD%AE.html",{c:["linux"],g:["装机"],e:`<h1> centos7配置</h1>
<h2> 装系统过程注意事项</h2>
<ol>
<li>开启网络连接的开关</li>
<li>将配置的用户设置为管理员</li>
</ol>
<h2> 配置静态ip</h2>
<p>先保证DHCP能ping通网络，然后在修改成静态ip</p>
<p>存放修改IP地址的文件： <code>/etc/sysconfig/network-scripts/ifcfg-ens33</code></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">sudo</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">vi</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">/etc/sysconfig/network-scripts/ifcfg-ens33</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:2.61,words:784},y:"a",t:"centos7配置",i:"file",O:7},["/linux/01 工具和基本命令/centos7配置.html","/linux/01 工具和基本命令/centos7配置.md",":md"]],["v-dd2c326a","/linux/01%20%E5%B7%A5%E5%85%B7%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/netstat%E4%BD%BF%E7%94%A8.html",{c:["使用指南"],g:["linux工具和基本命令"],e:`<h1> netstat 使用方法</h1>
<p>在Linux使用过程中，需要了解当前系统开放了哪些<strong>端口</strong>，并且要查看开放这些<strong>端口的具体进程和用户</strong>，可以通过netstat命令进行简单查询</p>
<h2> netstat命令各个参数</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">-a或--all：显示所有连线中的Socket；</span></span>
<span class="line"><span style="color: #61AFEF">-A&lt;网络类型&gt;或--&lt;网络类型&gt;：列出该网络类型连线中的相关地址；</span></span>
<span class="line"><span style="color: #61AFEF">-c或--continuous：持续列出网络状态；</span></span>
<span class="line"><span style="color: #61AFEF">-C或--cache：显示路由器配置的快取信息；</span></span>
<span class="line"><span style="color: #61AFEF">-e或--extend：显示网络其他相关信息；</span></span>
<span class="line"><span style="color: #61AFEF">-F或--fib：显示FIB；</span></span>
<span class="line"><span style="color: #61AFEF">-g或--groups：显示多重广播功能群组组员名单；</span></span>
<span class="line"><span style="color: #61AFEF">-h或--help：在线帮助；</span></span>
<span class="line"><span style="color: #61AFEF">-i或--interfaces：显示网络界面信息表单；</span></span>
<span class="line"><span style="color: #61AFEF">-l或--listening：显示监控中的服务器的Socket；</span></span>
<span class="line"><span style="color: #61AFEF">-M或--masquerade：显示伪装的网络连线；</span></span>
<span class="line"><span style="color: #61AFEF">-n或--numeric：直接使用ip地址，而不通过域名服务器；</span></span>
<span class="line"><span style="color: #61AFEF">-N或--netlink或--symbolic：显示网络硬件外围设备的符号连接名称；</span></span>
<span class="line"><span style="color: #61AFEF">-o或--timers：显示计时器；</span></span>
<span class="line"><span style="color: #61AFEF">-p或--programs：显示正在使用Socket的程序识别码和程序名称；</span></span>
<span class="line"><span style="color: #61AFEF">-r或--route：显示Routing</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">Table；</span></span>
<span class="line"><span style="color: #61AFEF">-s或--statistice：显示网络工作信息统计表；</span></span>
<span class="line"><span style="color: #61AFEF">-t或--tcp：显示TCP传输协议的连线状况；</span></span>
<span class="line"><span style="color: #61AFEF">-u或--udp：显示UDP传输协议的连线状况；</span></span>
<span class="line"><span style="color: #61AFEF">-v或--verbose：显示指令执行过程；</span></span>
<span class="line"><span style="color: #61AFEF">-V或--version：显示版本信息；</span></span>
<span class="line"><span style="color: #61AFEF">-w或--raw：显示RAW传输协议的连线状况；</span></span>
<span class="line"><span style="color: #61AFEF">-x或--unix：此参数的效果和指定</span><span style="color: #61AFEF">"-A unix"</span><span style="color: #61AFEF">参数相同；</span></span>
<span class="line"><span style="color: #61AFEF">--ip或--inet：此参数的效果和指定</span><span style="color: #61AFEF">"-A inet"</span><span style="color: #61AFEF">参数相同。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.15,words:1245},y:"a",t:"页面配置",i:"file",O:3},["/linux/01 工具和基本命令/netstat使用.html","/linux/01 工具和基本命令/netstat使用.md",":md"]],["v-5481f6b5","/linux/01%20%E5%B7%A5%E5%85%B7%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/tree%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",{c:["linux"],g:["linux工具和基本命令"],e:`<h1> tree常用命令</h1>
<h2> windows 上tree查看文件名</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">tree</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">/f</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:.44,words:132},y:"a",t:"tree常用命令",i:"file",O:3},["/linux/01 工具和基本命令/tree常用命令.html","/linux/01 工具和基本命令/tree常用命令.md",":md"]],["v-70781306","/linux/01%20%E5%B7%A5%E5%85%B7%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/wget%E4%BD%BF%E7%94%A8.html",{c:["linux"],g:["linux工具和基本命令"],e:`<h1> wget使用方法</h1>
<p>基本的语法是：wget [参数列表] URL</p>
<h2> 使用<code>wget</code>下载单个文件</h2>
<p>以下的例子是从网络下载一个文件并保存在当前目录</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">wget</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">http://cn.wordpress.org/wordpress-3.1-zh_CN.zip</span><span style="color: #ABB2BF"> </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:2.7,words:810},y:"a",t:"wget使用方法",i:"file",O:3},["/linux/01 工具和基本命令/wget使用.html","/linux/01 工具和基本命令/wget使用.md",":md"]],["v-fae24824","/linux/01%20%E5%B7%A5%E5%85%B7%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/%E6%89%93%E5%8C%85%E5%92%8C%E5%8E%8B%E7%BC%A9.html",{c:["linux"],g:["linux工具和基本命令"],e:`<h1> 打包和压缩</h1>
<h2> tar的使用方法</h2>
<figure><figcaption>image-20240311104103732</figcaption></figure>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">tar</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">cfv</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">packet.tar</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">file</span><span style="color: #E5C07B">*</span><span style="color: #ABB2BF">	</span><span style="color: #7F848E; font-style: italic">#将file*打包成packet.tar</span></span>
<span class="line"><span style="color: #61AFEF">tar</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">xfv</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">packet.tar</span><span style="color: #ABB2BF">	</span><span style="color: #7F848E; font-style: italic">#从包文件中释放文件</span></span>
<span class="line"><span style="color: #61AFEF">tar</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">cfvz</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">packet.tar.gz</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">test</span><span style="color: #ABB2BF">	</span><span style="color: #7F848E; font-style: italic">#将test打包并压缩</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">#tar rfvz packet.tar.gz file1	#error,压缩后不能追加</span></span>
<span class="line"><span style="color: #61AFEF">tar</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">xfvz</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">packet.tar.gz</span><span style="color: #ABB2BF">	</span><span style="color: #7F848E; font-style: italic">#解压缩</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.33,words:399},y:"a",t:"打包和压缩",i:"file",O:3},["/linux/01 工具和基本命令/打包和压缩.html","/linux/01 工具和基本命令/打包和压缩.md",":md"]],["v-29390dd2","/linux/01%20%E5%B7%A5%E5%85%B7%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/%E8%BD%AF%E9%93%BE%E6%8E%A5%EF%BC%88%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5%EF%BC%89%E5%92%8C%E7%A1%AC%E9%93%BE%E6%8E%A5.html",{c:["linux"],g:["linux工具和基本命令"],e:`<h1> 软链接（符号链接）和硬链接</h1>
<h2> 硬链接</h2>
<p>如果A文件和B文件的关系是硬链接的关系。当用户修改A文件的内容，B文件的内容也会被改变；反之，修改文件B，文件A内容也会改变。</p>
<p><strong>特点</strong>：</p>
<ol>
<li>可以在多个文件间进行，<code>ls -l</code>显示文件的硬链接数</li>
<li>
做硬链接</li>
<li>
做硬链接（Linux的文件系统：ext4、xfs等）</li>
<li>所有的硬链接、<strong>具备相同的iNode节点号</strong></li>
</ol>
<h2> 软链接</h2>`,r:{minutes:2.26,words:677},y:"a",t:"软链接（符号链接）和硬链接",i:"file",O:2},["/linux/01 工具和基本命令/软链接（符号链接）和硬链接.html","/linux/01 工具和基本命令/软链接（符号链接）和硬链接.md",":md"]],["v-45955c7c","/linux/01%20%E5%B7%A5%E5%85%B7%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/%E9%85%8D%E7%BD%AE%E4%B8%80%E5%8F%B0ubuntu.html",{c:["ubuntu"],g:["配置"],e:`<h1> 配置一台ubuntu</h1>
<h2> 网络设置</h2>
<p><strong>桥接</strong>：虚拟机和电脑在同一网络，同一子网下其他的电脑可以访问虚拟机</p>
<p><strong>NAT</strong>:宿主机充当虚拟路由器</p>
<figure><figcaption>image-20240209211150556</figcaption></figure>
<h3> 为什么配置成静态ip</h3>
<p>自动状态下ip地址可能会变，设置成静态ip有利于xshell外部连接</p>
<figure><figcaption>image-20240209211620696</figcaption></figure>`,r:{minutes:4.28,words:1283},y:"a",t:"配置一台ubuntu",i:"file",O:1},["/linux/01 工具和基本命令/配置一台ubuntu.html","/linux/01 工具和基本命令/配置一台ubuntu.md",":md"]],["v-7c3e20c2","/linux/04%20%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E4%B8%8D%E5%90%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E5%AD%97.html",{c:["使用指南"],g:["页面配置","使用指南"],e:`<p>strtol()函数字符串转换成十进制、十六进制 、二进制、 八进制 long类型</p>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;stdlib.h&gt;</span></span>
<span class="line"><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">strtol</span><span style="color: #E06C75"> </span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #E06C75"> </span><span style="color: #C678DD">char*</span><span style="color: #E06C75"> </span><span style="color: #E06C75; font-style: italic">str</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> </span><span style="color: #C678DD">char**</span><span style="color: #E06C75"> </span><span style="color: #E06C75; font-style: italic">endptr</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> </span><span style="color: #C678DD">int</span><span style="color: #E06C75"> </span><span style="color: #E06C75; font-style: italic">base</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.48,words:445},y:"a",t:"字符串转不同进制数学",i:"file",O:3},["/linux/04 文件操作/字符串转不同进制数字.html","/linux/04 文件操作/字符串转不同进制数字.md",":md"]],["v-91127220","/linux/03%20%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/CMake%E7%9A%84%E4%BD%BF%E7%94%A8.html",{c:["linux"],g:["编译工具"],e:`<h1> CMake的使用</h1>
<h2> CMake介绍</h2>
<p><strong>CMake： 使用简单方便，可以跨平台，构建项目编译环境。比直接写Makefile简单()，可以通过简单的，一个命令便将我们项目想编译的可执行文件、静态库、动态库都编译出来了。</strong></p>
<h2> 安装</h2>
<h3> Linux环境安装CMake</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">sudo</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">apt</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">install</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">cmake</span></span>
<span class="line"><span style="color: #61AFEF">cmake</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-version</span><span style="color: #ABB2BF"> </span><span style="color: #7F848E; font-style: italic">#查看版本</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:9.02,words:2707},y:"a",t:"CMake的使用",i:"file",O:4},["/linux/03 编译工具/CMake的使用.html","/linux/03 编译工具/CMake的使用.md",":md"]],["v-4c6cb231","/linux/03%20%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/gcc_g__%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BC%96%E8%AF%91%E5%91%BD%E4%BB%A4.html",{c:["linux"],g:["编译工具"],e:`<h1> gcc/g++ 常见的编译命令</h1>
<h2> 基本编译命令</h2>
<ul>
<li>编译C程序：<code>gcc filename.c -o outputname</code></li>
<li>编译C++程序：<code>g++ filename.cpp -o outputname</code></li>
</ul>
<h2> 添加编译选项</h2>
<ul>
<li>
<p><code>-g</code>：添加调试信息，用于gdb等调试器。</p>
</li>
<li>
<p><code>-O2</code> 或 <code>-O3</code>：优化代码，提高运行效率。</p>
</li>
<li>
<p><code>-Wall</code>：显示所有警告信息。</p>
</li>
<li>
<p><code>-Wextra</code>：显示额外的警告信息。</p>
</li>
<li>
<p><code>-Werror</code>：将所有警告当作错误处理。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">gcc</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-g</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-O2</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-Wall</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">filename.c</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-o</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">outputname</span></span>
<span class="line"><span style="color: #61AFEF">g++</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">main.cc</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-m32</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-g</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-o</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">main.o</span><span style="color: #ABB2BF">	</span><span style="color: #7F848E; font-style: italic">#-m32指定编译为32位程序</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ul>`,r:{minutes:5.99,words:1796},y:"a",t:"gcc/g++ 常见的编译命令",i:"file",O:1},["/linux/03 编译工具/gcc_g__常见的编译命令.html","/linux/03 编译工具/gcc_g++常见的编译命令.html","/linux/03%20%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/gcc_g++%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BC%96%E8%AF%91%E5%91%BD%E4%BB%A4.html","/linux/03 编译工具/gcc_g++常见的编译命令.md","/linux/03%20%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/gcc_g++%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BC%96%E8%AF%91%E5%91%BD%E4%BB%A4.md"]],["v-5342bc7a","/linux/03%20%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/gdb%E8%B0%83%E8%AF%95%E5%87%BA%E9%94%99%E7%9A%84%E7%A8%8B%E5%BA%8F.html",{c:["linux"],g:["编译工具"],e:`<h1> 程序出错了，怎么办？？？</h1>
<p>利用<strong>黑匣子</strong>（当程序异常终止时，操作系统保存程序执行时的内存映像的文件）</p>
<ol>
<li><code>ulimit -c unlimited</code> 命令在 Linux 系统中用于设置 core 文件的大小限制为无限制</li>
</ol>
<figure><figcaption>image-20240310141538480</figcaption></figure>
<blockquote>
<p>具体来说，<code>ulimit -c unlimited</code> 命令的作用如下：</p>
<ol>
<li>
<p><strong>取消大小限制</strong>：<u>默认情况下，Linux 系统可能不生成 core 文件，或者对 core 文件的大小有限制</u>。使用 <code>ulimit -c unlimited</code> 可以确保当程序崩溃时，系统不会因文件大小限制而截断 core 文件，从而可以保存完整的内存映像。</p>
<figure><figcaption>image-20240310141436371</figcaption></figure>
</li>
<li>
<p><strong>便于调试</strong>：完整的 core 文件对于程序员和系统管理员来说是非常有价值的，因为它可以帮助他们了解程序崩溃时的状态，包括变量的值、内存布局等，从而更容易地定位问题所在。</p>
</li>
<li>
<p><strong>注意安全性</strong>：需要注意的是，<mark></mark>。此外，core 文件可能包含敏感信息，因此需要注意文件的安全性和隐私保护。</p>
</li>
</ol>
</blockquote>`,r:{minutes:4.99,words:1496},y:"a",t:"gdb调试出错的程序",i:"file",O:2},["/linux/03 编译工具/gdb调试出错的程序.html","/linux/03 编译工具/gdb调试出错的程序.md",":md"]],["v-f6ba6062","/linux/03%20%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/makefile%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.html",{c:["linux"],g:["编译工具"],e:`<h1> makefile使用方法</h1>
<h2> 使用方法</h2>
<p>先建立一个名为<code>makefile</code>或者是<code>Makefile</code>的文件，然后在里面写入符合语法规则的编译命令，完成以后只需要在<u>文件所在目录</u>使用<code>make</code>命令就能运行编译命令</p>
<h2> 书写规则</h2>
<p>从第一行命令开始，先确认目标文件，根据目标文件确定所需的依赖文件，然后递归地找到依赖文件的依赖文件，直到依赖文件是没有子依赖文件</p>
<div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">#注释   书写格式</span></span>
<span class="line"><span style="color: #61AFEF">[目标文件]</span><span style="color: #ABB2BF">:</span><span style="color: #E06C75">[依赖文件]</span></span>
<span class="line"><span style="color: #E5C07B">&lt;tab&gt;[command]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.51,words:1352},y:"a",t:"makefile使用方法",i:"file",O:3},["/linux/03 编译工具/makefile使用方法.html","/linux/03 编译工具/makefile使用方法.md",":md"]],["v-66e8cf78","/ccpp/14%20%E9%9D%A2%E8%AF%95%E9%A2%98/%E4%B8%BA%E4%BB%80%E4%B9%88c%E5%92%8Cc__%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BB%8E%E5%8F%B3%E5%BE%80%E5%B7%A6%E5%8E%8B%E6%A0%88.html",{c:["c/c++"],g:["c++补充"],e:`<h1> 为什么c和c++函数参数从右往左压栈？</h1>
<p><strong>因为c/c++支持“函数参数长度可变”这个特性</strong></p>
<p>可变参数函数：函数声明时参数列表有<code>...</code>，如<code>printf（const char* format,…）</code></p>
<p>函数调用的过程：</p>
<ol>
<li>将参数从右往左压栈</li>
<li>执行call指令，先将下一行指令的地址压栈，再进入调用函数</li>
<li>进入后，先将调用函数的栈底指针（即esp指针）压栈，然后再开辟栈空间</li>
</ol>
<figure><figcaption></figcaption></figure>`,r:{minutes:1.29,words:386},y:"a",t:"为什么c和c++函数参数从右往左压栈？",i:"file",O:1},["/ccpp/14 面试题/为什么c和c__函数参数从右往左压栈.html","/ccpp/14 面试题/为什么c和c++函数参数从右往左压栈.html","/ccpp/14%20%E9%9D%A2%E8%AF%95%E9%A2%98/%E4%B8%BA%E4%BB%80%E4%B9%88c%E5%92%8Cc++%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BB%8E%E5%8F%B3%E5%BE%80%E5%B7%A6%E5%8E%8B%E6%A0%88.html","/ccpp/14 面试题/为什么c和c++函数参数从右往左压栈.md","/ccpp/14%20%E9%9D%A2%E8%AF%95%E9%A2%98/%E4%B8%BA%E4%BB%80%E4%B9%88c%E5%92%8Cc++%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BB%8E%E5%8F%B3%E5%BE%80%E5%B7%A6%E5%8E%8B%E6%A0%88.md"]],["v-57c1626a","/ccpp/14%20%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%88%86%E6%9E%90%E8%BF%99%E6%AE%B5%E4%BB%A3%E7%A0%81%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E9%A1%BA%E5%BA%8F.html",{c:["c/c++"],g:["c++补充"],e:`<h1> 分析这段代码构造函数和析构函数的调用顺序</h1>
<figure><figcaption></figcaption></figure>
<ul>
<li>注意返回临时对象或用临时对象构造对象时，会被编译器优化</li>
<li>别忘了第六步s的析构</li>
</ul>
<p>因此优化一下：</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #E5C07B">string</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">fun</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">string</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">s1</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">string</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">s2</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> s1 </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> s2;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">	string s </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">fun</span><span style="color: #ABB2BF">(s1, s2);</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.95,words:284},y:"a",t:"分析这段代码构造函数和析构函数的调用顺序",i:"file",O:2},["/ccpp/14 面试题/分析这段代码构造函数和析构函数的调用顺序.html","/ccpp/14 面试题/分析这段代码构造函数和析构函数的调用顺序.md",":md"]],["v-435677cc","/ccpp/14%20%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%A9%BA%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E5%A4%A7%E5%B0%8F.html",{c:["c/c++"],g:["c++补充"],e:`<h2> 对于c语言</h2>
<p>Windows下VS是不允许定义空struct结构体的</p>
<p>Linux/Unix下gcc编译器，空结构体是0</p>
<h2> 对于c++</h2>
<p>无论是vs还是gcc/g++下定义的空结构体大小为1，</p>
<h2> 为什么c++空类占用内存大小为1</h2>
<p>c语言空结构定义变量里面什么都没有，所以为0</p>
<p>c++里不叫变量，而是对象，定义一个变量只需要内存就行，而对象需要内存还要构造函数构造才叫对象，构造函数会生成一个this指针存放对象的起始地址，即<mark>c++区别c的在于创建对象需要调用构造函数，生成对象必须要有内存传给this调用构造函数，构造函数才能知道在哪里初始化/构造，因为没有东西因此默认给1字节的内存用于构造对象</mark></p>`,r:{minutes:.99,words:298},y:"a",t:"空结构体",i:"file",O:3},["/ccpp/14 面试题/空结构体的大小.html","/ccpp/14 面试题/空结构体的大小.md",":md"]],["v-6dabb7d0","/network/%E5%BA%8F%E5%88%97%E5%8C%96/Json%E7%AE%80%E4%BB%8B%E5%8F%8A%E4%BD%BF%E7%94%A8.html",{c:["network"],g:["数据序列化"],e:`<h1> Json简介及使用</h1>
<h2> 一、Json简介</h2>
<p><strong></strong>：<strong>是一种轻量级的)，采用完全<u>独立于编程语言的来存储和表示数据</u>。 简洁和清晰的层次结构使得 Json 成为理想的数据交换语言，易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率</strong>。</p>
<p>例如：聊天软件的业务，消息种类分为很多种，例如：登录消息、注册消息、聊天消息、加好友消息等等，<strong></strong>。而<u>网络中TCP传输数据时为字节流，因此我们需要数据序列化将其转为字节流发送到对端主机，对端主机读取字节流上报应用服务，再将数据反序列化出来解析使用</u>。</p>`,r:{minutes:5.88,words:1765},y:"a",t:"Json简介及使用",i:"file",O:1},["/network/序列化/Json简介及使用.html","/network/序列化/Json简介及使用.md",":md"]],["v-5dfb637b","/network/%E5%BA%8F%E5%88%97%E5%8C%96/Protobuf%E7%AE%80%E4%BB%8B%E5%8F%8A%E4%BD%BF%E7%94%A8.html",{c:["network"],g:["Protobuf简介及使用"],e:`<h1> Protobuf简介及使用</h1>
<h2> 一、Protobuf简介</h2>
<p><strong>Protobuf(protocol buffer)：是google 的一种数据交换的格式，它独立于平台语言</strong>。 google 提供了protobuf多种语言的实现：<u>java、c#、c++、go 和 python，每一种实现都包含了相应语言的编译器以及库文件</u>。<strong>它是一种，网络传输时，而且它，比使用xml、json进行数据交换许多，用protobuf序列化后的大是json的10分之一，xml格式的20分之一，是二进制序列化的10分之一</strong>。 可以把它用于分布式应用之间的数据通信或者异构环境下的数据交换。作为一种效率和兼容性都很优秀的二进制数据传输格式，可以<u>用于诸如网络传输、配置文件、数据存储等诸多领域。</u></p>`,r:{minutes:2.93,words:879},y:"a",t:"Protobuf简介及使用",i:"file",O:3},["/network/序列化/Protobuf简介及使用.html","/network/序列化/Protobuf简介及使用.md",":md"]],["v-3706649a","/404.html",{y:"p",t:""},[]],["v-5157b212","/mysql/02%20MySQL%E6%A0%B8%E5%BF%83SQL/",{y:"p",t:"02 My S Q L核心 S Q L"},["/mysql/02 MySQL核心SQL/"]],["v-266f8726","/mysql/03%20MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/",{y:"p",t:"03 My S Q L存储引擎"},["/mysql/03 MySQL存储引擎/"]],["v-3899b171","/mysql/01%20MySQL%E5%9F%BA%E7%A1%80/",{y:"p",t:"01 My S Q L基础"},["/mysql/01 MySQL基础/"]],["v-1f23f62c","/mysql/04%20MYSQL%E7%B4%A2%E5%BC%95/",{y:"p",t:"04 M Y S Q L索引"},["/mysql/04 MYSQL索引/"]],["v-5764c670","/mysql/05%20MySQL%E4%BA%8B%E5%8A%A1/",{y:"p",t:"05 My S Q L事务"},["/mysql/05 MySQL事务/"]],["v-9eec0ba4","/mysql/07%20MySQL%E4%BC%98%E5%8C%96/",{y:"p",t:"07 My S Q L优化"},["/mysql/07 MySQL优化/"]],["v-13ac5d5f","/mysql/08%20MySQL%E6%97%A5%E5%BF%97/",{y:"p",t:"08 My S Q L日志"},["/mysql/08 MySQL日志/"]],["v-7c538d12","/mysql/10%20MySQL%E9%9B%86%E7%BE%A4/",{y:"p",t:"10 My S Q L集群"},["/mysql/10 MySQL集群/"]],["v-ed8603cc","/mysql/06%20MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/",{y:"p",t:"06 My S Q L的锁机制"},["/mysql/06 MySQL的锁机制/"]],["v-42abb996","/mysql/11%20%E6%8B%93%E5%B1%95/",{y:"p",t:"11 拓展"},["/mysql/11 拓展/"]],["v-8f661f1c","/mysql/12%20%E8%BF%9E%E6%8E%A5%E6%B1%A0/",{y:"p",t:"12 连接池"},["/mysql/12 连接池/"]],["v-44e73480","/mysql/09%20%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/",{y:"p",t:"09 数据备份"},["/mysql/09 数据备份/"]],["v-430f9745","/algo/01%20%E6%95%B0%E7%BB%84/",{y:"p",t:"01 数组"},["/algo/01 数组/"]],["v-5782c814","/algo/02%20%E9%93%BE%E8%A1%A8/",{y:"p",t:"02 链表"},["/algo/02 链表/"]],["v-a38f78a4","/algo/%E5%A0%86/",{y:"p",t:"堆"},["/algo/堆/"]],["v-7d94f39a","/algo/03%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/",{y:"p",t:"03 哈希算法"},["/algo/03 哈希算法/"]],["v-dfd4ea36","/others/git%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%A1%E7%90%86/",{y:"p",t:"Git的分布式管理"},["/others/git的分布式管理/"]],["v-25ac69a1","/algo/04%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",{y:"p",t:"04 排序算法"},["/algo/04 排序算法/"]],["v-161970cb","/algo/%E6%A0%88/",{y:"p",t:"栈"},["/algo/栈/"]],["v-4086f3eb","/algo/%E9%98%9F/",{y:"p",t:"队"},["/algo/队/"]],["v-18808a57","/ccpp/00%20%E5%9F%BA%E7%A1%80%E5%BF%85%E5%A4%87/",{y:"p",t:"00 基础必备"},["/ccpp/00 基础必备/"]],["v-18205b42","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/",{y:"p",t:"02 C 基础"},["/ccpp/02 c__基础/"]],["v-39d32ddd","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/",{y:"p",t:"01 C语言基础"},["/ccpp/01 c语言基础/"]],["v-e5b5c7b4","/ccpp/04%20%E6%A8%A1%E6%9D%BF/",{y:"p",t:"04 模板"},["/ccpp/04 模板/"]],["v-b5fbe93e","/ccpp/05%20%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/",{y:"p",t:"05 运算符重载"},["/ccpp/05 运算符重载/"]],["v-bcefe488","/ccpp/07%20%E5%A4%9A%E6%80%81/",{y:"p",t:"07 多态"},["/ccpp/07 多态/"]],["v-0d4e4374","/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/",{y:"p",t:"03 类和对象"},["/ccpp/03 类和对象/"]],["v-19c3cc7c","/ccpp/06%20%E7%BB%A7%E6%89%BF/",{y:"p",t:"06 继承"},["/ccpp/06 继承/"]],["v-34ae7acc","/ccpp/11%20%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/",{y:"p",t:"11 资源管理"},["/ccpp/11 资源管理/"]],["v-3f33a400","/ccpp/12%20%E6%97%A5%E5%BF%97/",{y:"p",t:"12 日志"},["/ccpp/12 日志/"]],["v-9fb994fc","/ccpp/09%20%E6%A0%87%E5%87%86%E5%BA%93STL/",{y:"p",t:"09 标准库 S T L"},["/ccpp/09 标准库STL/"]],["v-1ce298e7","/ccpp/16%20%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/",{y:"p",t:"16 智能指针"},["/ccpp/16 智能指针/"]],["v-17daa261","/ccpp/10%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",{y:"p",t:"10 设计模式"},["/ccpp/10 设计模式/"]],["v-0ee4786c","/ccpp/15%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BC%98%E5%8C%96/",{y:"p",t:"15 对象的优化"},["/ccpp/15 对象的优化/"]],["v-7991b247","/ccpp/18%20C__11%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/",{y:"p",t:"18 C 11知识汇总"},["/ccpp/18 C__11知识汇总/"]],["v-063f0d28","/ccpp/17%20bind%E7%BB%91%E5%AE%9A%E5%99%A8%E5%92%8Cfunction%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/",{y:"p",t:"17 Bind绑定器和function函数对象"},["/ccpp/17 bind绑定器和function函数对象/"]],["v-66256d6e","/ccpp/19%20SGI%20STL%E4%BA%8C%E7%BA%A7%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8%E5%86%85%E5%AD%98%E6%B1%A0%E6%BA%90%E7%A0%81/",{y:"p",t:"19 S G I S T L二级空间配置器内存池源码"},["/ccpp/19 SGI STL二级空间配置器内存池源码/"]],["v-1e2d2742","/linux/02%20vim/",{y:"p",t:"02 Vim"},["/linux/02 vim/"]],["v-718e2d40","/linux/01%20%E5%B7%A5%E5%85%B7%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/",{y:"p",t:"01 工具和基本命令"},["/linux/01 工具和基本命令/"]],["v-6efd5e40","/linux/04%20%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/",{y:"p",t:"04 文件操作"},["/linux/04 文件操作/"]],["v-14d4901c","/linux/03%20%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/",{y:"p",t:"03 编译工具"},["/linux/03 编译工具/"]],["v-6c43b8e2","/ccpp/14%20%E9%9D%A2%E8%AF%95%E9%A2%98/",{y:"p",t:"14 面试题"},["/ccpp/14 面试题/"]],["v-706b751e","/network/%E5%BA%8F%E5%88%97%E5%8C%96/",{y:"p",t:"序列化"},["/network/序列化/"]],["v-5bc93818","/category/",{y:"p",t:"分类",I:!1},[]],["v-744d024e","/tag/",{y:"p",t:"标签",I:!1},[]],["v-e52c881c","/article/",{y:"p",t:"文章",I:!1},[]],["v-154dc4c4","/star/",{y:"p",t:"星标",I:!1},[]],["v-01560935","/timeline/",{y:"p",t:"时间轴",I:!1},[]],["v-03d57386","/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{y:"p",t:"使用指南 分类",I:!1},["/category/使用指南/"]],["v-a378ad66","/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/",{y:"p",t:"标签: 页面配置",I:!1},["/tag/页面配置/"]],["v-8848dfa8","/category/redis/",{y:"p",t:"redis 分类",I:!1},[]],["v-7b167472","/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{y:"p",t:"标签: 使用指南",I:!1},["/tag/使用指南/"]],["v-9717cc36","/category/mysql/",{y:"p",t:"mysql 分类",I:!1},[]],["v-73267b8b","/tag/redis%E6%8C%81%E4%B9%85%E5%8C%96/",{y:"p",t:"标签: redis持久化",I:!1},["/tag/redis持久化/"]],["v-5c5af6a7","/category/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/",{y:"p",t:"数据结构与算法 分类",I:!1},["/category/数据结构与算法/"]],["v-3e73f0ca","/tag/redis%E5%9F%BA%E7%A1%80/",{y:"p",t:"标签: redis基础",I:!1},["/tag/redis基础/"]],["v-65efd6b5","/category/git/",{y:"p",t:"git 分类",I:!1},[]],["v-c14e6c1e","/tag/redis%E5%AE%89%E8%A3%85/",{y:"p",t:"标签: redis安装",I:!1},["/tag/redis安装/"]],["v-57cf9ed7","/category/cc__/",{y:"p",t:"c/c++ 分类",I:!1},[]],["v-16e3bea5","/tag/redis%E4%BA%8B%E5%8A%A1/",{y:"p",t:"标签: redis事务",I:!1},["/tag/redis事务/"]],["v-9c48d85a","/category/linux/",{y:"p",t:"linux 分类",I:!1},[]],["v-69fe373c","/tag/redis%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5/",{y:"p",t:"标签: redis删除策略",I:!1},["/tag/redis删除策略/"]],["v-5a1c7f10","/category/ubuntu/",{y:"p",t:"ubuntu 分类",I:!1},[]],["v-bdf2800c","/tag/redis%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",{y:"p",t:"标签: redis高级数据类型",I:!1},["/tag/redis高级数据类型/"]],["v-a074e84e","/category/network/",{y:"p",t:"network 分类",I:!1},[]],["v-71173084","/tag/mysql%E6%A0%B8%E5%BF%83sql/",{y:"p",t:"标签: mysql核心SQL",I:!1},["/tag/mysql核心sql/"]],["v-7c8d7d81","/tag/mysql%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/",{y:"p",t:"标签: mysql存储引擎",I:!1},["/tag/mysql存储引擎/"]],["v-039b9630","/tag/cc__%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/",{y:"p",t:"标签: c/c++连接数据库",I:!1},["/tag/cc__连接数据库/"]],["v-539ae27f","/tag/%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/",{y:"p",t:"标签: 安装方法",I:!1},["/tag/安装方法/"]],["v-0f7cde43","/tag/mysql%E5%9F%BA%E7%A1%80/",{y:"p",t:"标签: mysql基础",I:!1},["/tag/mysql基础/"]],["v-69c73501","/tag/mysql%E7%B4%A2%E5%BC%95/",{y:"p",t:"标签: mysql索引",I:!1},["/tag/mysql索引/"]],["v-54d85698","/tag/mysql%E6%97%A5%E5%BF%97/",{y:"p",t:"标签: mysql日志",I:!1},["/tag/mysql日志/"]],["v-26374ab8","/tag/%E4%BA%8B%E5%8A%A1/",{y:"p",t:"标签: 事务",I:!1},["/tag/事务/"]],["v-3af20a74","/tag/mysql%E4%BC%98%E5%8C%96/",{y:"p",t:"标签: mysql优化",I:!1},["/tag/mysql优化/"]],["v-497728a6","/tag/%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/",{y:"p",t:"标签: 数据备份",I:!1},["/tag/数据备份/"]],["v-1ab7dcc2","/tag/mysql%E9%9B%86%E7%BE%A4/",{y:"p",t:"标签: mysql集群",I:!1},["/tag/mysql集群/"]],["v-7a59998d","/tag/mysql-mvcc/",{y:"p",t:"标签: mysql MVCC",I:!1},[]],["v-0aedece4","/tag/mysql%E9%94%81%E6%9C%BA%E5%88%B6/",{y:"p",t:"标签: mysql锁机制",I:!1},["/tag/mysql锁机制/"]],["v-470617df","/tag/mysql%E6%8B%93%E5%B1%95/",{y:"p",t:"标签: mysql拓展",I:!1},["/tag/mysql拓展/"]],["v-117d546a","/tag/mysql%E8%BF%9E%E6%8E%A5%E6%B1%A0/",{y:"p",t:"标签: mysql连接池",I:!1},["/tag/mysql连接池/"]],["v-f64eddd4","/tag/%E6%95%B0%E7%BB%84/",{y:"p",t:"标签: 数组",I:!1},["/tag/数组/"]],["v-0b674df5","/tag/%E5%8F%8C%E6%8C%87%E9%92%88/",{y:"p",t:"标签: 双指针",I:!1},["/tag/双指针/"]],["v-93cb9d6e","/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2/",{y:"p",t:"标签: 字符串",I:!1},["/tag/字符串/"]],["v-cf2ceaf0","/tag/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/",{y:"p",t:"标签: 滑动窗口",I:!1},["/tag/滑动窗口/"]],["v-11d405d3","/tag/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/",{y:"p",t:"标签: 二分查找",I:!1},["/tag/二分查找/"]],["v-0440a8b6","/tag/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",{y:"p",t:"标签: 基础知识",I:!1},["/tag/基础知识/"]],["v-0b4e059c","/tag/%E5%93%88%E5%B8%8C/",{y:"p",t:"标签: 哈希",I:!1},["/tag/哈希/"]],["v-4f1a28a4","/tag/%E9%93%BE%E8%A1%A8/",{y:"p",t:"标签: 链表",I:!1},["/tag/链表/"]],["v-576828c2","/tag/%E8%99%9A%E6%8B%9F%E5%A4%B4%E7%BB%93%E7%82%B9/",{y:"p",t:"标签: 虚拟头结点",I:!1},["/tag/虚拟头结点/"]],["v-4b30edaa","/tag/%E5%88%86%E6%B2%BB%E6%80%9D%E6%83%B3/",{y:"p",t:"标签: 分治思想",I:!1},["/tag/分治思想/"]],["v-22b11fef","/tag/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/",{y:"p",t:"标签: 优先队列",I:!1},["/tag/优先队列/"]],["v-63c72547","/tag/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/",{y:"p",t:"标签: 循环链表",I:!1},["/tag/循环链表/"]],["v-a0d22de6","/tag/%E5%93%88%E5%B8%8C%E8%A1%A8/",{y:"p",t:"标签: 哈希表",I:!1},["/tag/哈希表/"]],["v-b310d42a","/tag/git/",{y:"p",t:"标签: git",I:!1},[]],["v-fe7b1fa2","/tag/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",{y:"p",t:"标签: 排序算法",I:!1},["/tag/排序算法/"]],["v-7d0f4556","/tag/%E9%98%9F%E5%88%97/",{y:"p",t:"标签: 队列",I:!1},["/tag/队列/"]],["v-56e816c6","/tag/%E5%8F%8D%E6%B1%87%E7%BC%96/",{y:"p",t:"标签: 反汇编",I:!1},["/tag/反汇编/"]],["v-10a04a2f","/tag/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/",{y:"p",t:"标签: 操作系统",I:!1},["/tag/操作系统/"]],["v-5f8d23be","/tag/%E5%A0%86%E6%A0%88/",{y:"p",t:"标签: 堆栈",I:!1},["/tag/堆栈/"]],["v-3a4a854e","/tag/%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5/",{y:"p",t:"标签: 编译链接",I:!1},["/tag/编译链接/"]],["v-93bed62a","/tag/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/",{y:"p",t:"标签: 虚拟内存",I:!1},["/tag/虚拟内存/"]],["v-2d6af57c","/tag/c__%E5%9F%BA%E7%A1%80/",{y:"p",t:"标签: c++基础",I:!1},["/tag/c__基础/"]],["v-725e7306","/tag/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/",{y:"p",t:"标签: 内存对齐",I:!1},["/tag/内存对齐/"]],["v-2be2ad6b","/tag/do-while(0)/",{y:"p",t:"标签: do-while(0)",I:!1},[]],["v-34e22042","/tag/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/",{y:"p",t:"标签: c语言基础",I:!1},["/tag/c语言基础/"]],["v-c263983c","/tag/c%E5%9F%BA%E7%A1%80/",{y:"p",t:"标签: c基础",I:!1},["/tag/c基础/"]],["v-97064af0","/tag/%E6%A8%A1%E6%9D%BF%E5%AE%9E%E8%B7%B5/",{y:"p",t:"标签: 模板实践",I:!1},["/tag/模板实践/"]],["v-b3059a9c","/tag/stl/",{y:"p",t:"标签: STL",I:!1},[]],["v-0f5fd9a1","/tag/%E6%A8%A1%E6%9D%BF/",{y:"p",t:"标签: 模板",I:!1},["/tag/模板/"]],["v-b883da32","/tag/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/",{y:"p",t:"标签: 运算符重载",I:!1},["/tag/运算符重载/"]],["v-d81fe600","/tag/%E8%BF%AD%E4%BB%A3%E5%99%A8/",{y:"p",t:"标签: 迭代器",I:!1},["/tag/迭代器/"]],["v-7bc56b12","/tag/newdelete/",{y:"p",t:"标签: new/delete",I:!1},[]],["v-5cb0e330","/tag/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/",{y:"p",t:"标签: 类和对象",I:!1},["/tag/类和对象/"]],["v-3af70099","/tag/%E5%AF%B9%E8%B1%A1%E6%B1%A0/",{y:"p",t:"标签: 对象池",I:!1},["/tag/对象池/"]],["v-452dff74","/tag/%E5%A4%9A%E6%80%81/",{y:"p",t:"标签: 多态",I:!1},["/tag/多态/"]],["v-079b5775","/tag/%E7%BB%A7%E6%89%BF/",{y:"p",t:"标签: 继承",I:!1},["/tag/继承/"]],["v-40c68542","/tag/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/",{y:"p",t:"标签: 内存泄漏",I:!1},["/tag/内存泄漏/"]],["v-59d0051e","/tag/%E6%97%A5%E5%BF%97/",{y:"p",t:"标签: 日志",I:!1},["/tag/日志/"]],["v-8200fafe","/tag/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/",{y:"p",t:"标签: 智能指针",I:!1},["/tag/智能指针/"]],["v-1e44e18c","/tag/lambda/",{y:"p",t:"标签: lambda",I:!1},[]],["v-05b88e01","/tag/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",{y:"p",t:"标签: 设计模式",I:!1},["/tag/设计模式/"]],["v-6b17eb4c","/tag/%E5%AF%B9%E8%B1%A1%E4%BC%98%E5%8C%96/",{y:"p",t:"标签: 对象优化",I:!1},["/tag/对象优化/"]],["v-4100090c","/tag/c__11/",{y:"p",t:"标签: c++11",I:!1},[]],["v-415e2fc5","/tag/%E5%A4%9A%E7%BA%BF%E7%A8%8B/",{y:"p",t:"标签: 多线程",I:!1},["/tag/多线程/"]],["v-2611ede8","/tag/c__11%E7%BA%BF%E7%A8%8B/",{y:"p",t:"标签: c++11线程",I:!1},["/tag/c__11线程/"]],["v-1cce6bb8","/tag/bind%E7%BB%91%E5%AE%9A%E5%99%A8/",{y:"p",t:"标签: bind绑定器",I:!1},["/tag/bind绑定器/"]],["v-74fc21e7","/tag/function%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/",{y:"p",t:"标签: function函数对象",I:!1},["/tag/function函数对象/"]],["v-a9313856","/tag/%E7%BA%BF%E7%A8%8B%E6%B1%A0/",{y:"p",t:"标签: 线程池",I:!1},["/tag/线程池/"]],["v-6cdbb135","/tag/%E7%B1%BB%E6%A8%A1%E6%9D%BF/",{y:"p",t:"标签: 类模板",I:!1},["/tag/类模板/"]],["v-7c695e77","/tag/sgi-stl%E6%BA%90%E7%A0%81/",{y:"p",t:"标签: SGI STL源码",I:!1},["/tag/sgi-stl源码/"]],["v-6b9ab792","/tag/vim%E9%85%8D%E7%BD%AE/",{y:"p",t:"标签: vim配置",I:!1},["/tag/vim配置/"]],["v-55a48819","/tag/%E8%A3%85%E6%9C%BA/",{y:"p",t:"标签: 装机",I:!1},["/tag/装机/"]],["v-6942f2d0","/tag/linux%E5%B7%A5%E5%85%B7%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/",{y:"p",t:"标签: linux工具和基本命令",I:!1},["/tag/linux工具和基本命令/"]],["v-72049510","/tag/%E9%85%8D%E7%BD%AE/",{y:"p",t:"标签: 配置",I:!1},["/tag/配置/"]],["v-2ddd04a0","/tag/%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/",{y:"p",t:"标签: 编译工具",I:!1},["/tag/编译工具/"]],["v-41a24821","/tag/c__%E8%A1%A5%E5%85%85/",{y:"p",t:"标签: c++补充",I:!1},["/tag/c__补充/"]],["v-85dac2ea","/tag/%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97%E5%8C%96/",{y:"p",t:"标签: 数据序列化",I:!1},["/tag/数据序列化/"]],["v-254becce","/tag/protobuf%E7%AE%80%E4%BB%8B%E5%8F%8A%E4%BD%BF%E7%94%A8/",{y:"p",t:"标签: Protobuf简介及使用",I:!1},["/tag/protobuf简介及使用/"]]];var tc=R({name:"Vuepress",setup(){const s=R2();return()=>c(s.value)}}),K1=()=>W1.reduce((s,[n,l,a,e])=>(s.push({name:n,path:l,component:tc,meta:a},{path:l.endsWith("/")?l+"index.html":l.substring(0,l.length-5),redirect:l},...e.map(o=>({path:o===":md"?l.substring(0,l.length-5)+".md":o,redirect:l}))),s),[{name:"404",path:"/:catchAll(.*)",component:tc}]),Y1=ov,X1=()=>{const s=zv({history:Y1(sp("/")),routes:K1(),scrollBehavior:(n,l,a)=>a||(n.hash?{el:n.hash}:{top:0})});return s.beforeResolve(async(n,l)=>{var a;(n.path!==l.path||l===wn)&&([n.meta._data]=await Promise.all([kn.resolvePageData(n.name),(a=Ar[n.name])==null?void 0:a.__asyncLoader()]))}),s},Z1=s=>{s.component("ClientOnly",De),s.component("Content",Cr)},J1=(s,n,l)=>{const a=Vt(()=>n.currentRoute.value.path),e=Vt(()=>kn.resolveRouteLocale(Cl.value.locales,a.value)),o=tp(a,()=>n.currentRoute.value.meta._data),t=h(()=>kn.resolveLayouts(l)),r=h(()=>kn.resolveSiteLocaleData(Cl.value,e.value)),B=h(()=>kn.resolvePageFrontmatter(o.value)),i=h(()=>kn.resolvePageHeadTitle(o.value,r.value)),d=h(()=>kn.resolvePageHead(i.value,B.value,r.value)),y=h(()=>kn.resolvePageLang(o.value,r.value)),u=h(()=>kn.resolvePageLayout(o.value,t.value));return s.provide(w2,t),s.provide(mr,o),s.provide(Fr,B),s.provide(x2,i),s.provide(Er,d),s.provide(Dr,y),s.provide(br,u),s.provide(np,e),s.provide(hr,r),Object.defineProperties(s.config.globalProperties,{$frontmatter:{get:()=>B.value},$head:{get:()=>d.value},$headTitle:{get:()=>i.value},$lang:{get:()=>y.value},$page:{get:()=>o.value},$routeLocale:{get:()=>e.value},$site:{get:()=>Cl.value},$siteLocale:{get:()=>r.value},$withBase:{get:()=>_s}}),{layouts:t,pageData:o,pageFrontmatter:B,pageHead:d,pageHeadTitle:i,pageLang:y,pageLayout:u,routeLocale:e,siteData:Cl,siteLocaleData:r}},s7=()=>{const s=P2(),n=fr(),l=G([]),a=()=>{s.value.forEach(o=>{const t=n7(o);t&&l.value.push(t)})},e=()=>{document.documentElement.lang=n.value,l.value.forEach(o=>{o.parentNode===document.head&&document.head.removeChild(o)}),l.value.splice(0,l.value.length),s.value.forEach(o=>{const t=l7(o);t!==null&&(document.head.appendChild(t),l.value.push(t))})};rn(M2,e),ms(()=>{a(),e(),rs(()=>s.value,e)})},n7=([s,n,l=""])=>{const a=Object.entries(n).map(([r,B])=>cs(B)?`[${r}=${JSON.stringify(B)}]`:B===!0?`[${r}]`:"").join(""),e=`head > ${s}${a}`;return Array.from(document.querySelectorAll(e)).find(r=>r.innerText===l)||null},l7=([s,n,l])=>{if(!cs(s))return null;const a=document.createElement(s);return ha(n)&&Object.entries(n).forEach(([e,o])=>{cs(o)?a.setAttribute(e,o):o===!0&&a.setAttribute(e,"")}),cs(l)&&a.appendChild(document.createTextNode(l)),a},a7=D2,e7=async()=>{var l;const s=a7({name:"VuepressApp",setup(){var a;s7();for(const e of Za)(a=e.setup)==null||a.call(e);return()=>[c(Rr),...Za.flatMap(({rootComponents:e=[]})=>e.map(o=>c(o)))]}}),n=X1();Z1(s),J1(s,n,Za);for(const a of Za)await((l=a.enhance)==null?void 0:l.call(a,{app:s,router:n,siteData:Cl}));return s.use(n),{app:s,router:n}};e7().then(({app:s,router:n})=>{n.isReady().then(()=>{s.mount("#app")})});export{h1 as A,Ms as B,ms as C,Hl as D,cs as E,i7 as F,ha as G,Tp as H,wu as I,al as J,P1 as O,w1 as R,p7 as a,t7 as b,o7 as c,e7 as createVueApp,lr as d,ar as e,Os as f,R as g,Hs as h,gn as i,Ip as j,G as k,h as l,Ts as m,rs as n,Ly as o,c as p,C1 as q,sn as r,L1 as s,Ql as t,r7 as u,ks as v,qd as w,MB as x,g1 as y,_1 as z};
function __vite__mapDeps(indexes) {
  if (!__vite__mapDeps.viteFileDeps) {
    __vite__mapDeps.viteFileDeps = ["assets/intro.html-UBE1FLPW.js","assets/plugin-vue_export-helper-x3n3nnut.js","assets/index.html-GEPj4Y-_.js","assets/tool.html-_paMPkf3.js","assets/index.html-4NILtdrr.js","assets/index.html-JtfMf7q-.js","assets/统计单词的个数.html-0OOZB6rI.js","assets/统计字母、数组、空格的个数.html-YNx0hT7b.js","assets/autohotkey笔记.html-KIQk5u2r.js","assets/index.html-bKE2VUhc.js","assets/SourceInsight.html-NgDXn7ut.js","assets/typora配置.html-cVKwdO1H.js","assets/AOF持久化.html-YeOyxo91.js","assets/key通用指令.html-aeORQBXy.js","assets/list数据类型.html-kVqHC8L0.js","assets/RDB持久化.html-TFXyYBwy.js","assets/index.html-gURDOzWB.js","assets/Redis的安装.html-dPcUAKFN.js","assets/set和sorted_set数据类型.html-HrReHjeh.js","assets/string和hash数据类型.html-g8I1viX2.js","assets/事务和事务锁.html-N_Xr2Hba.js","assets/删除策略.html-V6-H6Qb6.js","assets/数据类型实践案例.html-pwAVG-zO.js","assets/认识NoSQL和Redis.html-NX9O0EY-.js","assets/高级数据类型Bitmaps、HyperLogLog、GEO.html-TbmSnjSc.js","assets/index.html-kfpgU97q.js","assets/CRUD.html-JQmr8tKv.js","assets/DCL小结.html-uGp-IdQ5.js","assets/DML小结.html-9Bq4ABIC.js","assets/mysql的库操作.html-9H2unU2r.js","assets/select查询.html-Vd9oKgX-.js","assets/多表select-连接查询.html-jIt6lic9.js","assets/概述.html-fl_off9o.js","assets/表操作.html-K5PIWkcx.js","assets/index.html-qH2h9L3F.js","assets/文件操作.html-buWm2s1w.js","assets/MySQL存储引擎.html-EJZci-DY.js","assets/c语言连接MySQL.html-uU42E2qJ.js","assets/mysql的安装.html-WrjFpmN-.js","assets/关系型数据库表设计.html-aJhgUs0T.js","assets/基本数据类型.html-Rn3ZnFsj.js","assets/完整性约束.html-7UWqs2-R.js","assets/常用函数.html-SMppQbKR.js","assets/用户管理与授权.html-sP584ZGp.js","assets/知识拓展.html-XDLls4f2.js","assets/范式设计.html-Yhwdw8fO.js","assets/运算符.html-FJM7942B.js","assets/InnoDB的主键和二级索引树.html-coUYbF81.js","assets/InnoDB自适应哈希索引.html-dWQ6god2.js","assets/MySQL优化之慢日志查询.html-nv_5HB2O.js","assets/MySQL索引常见问题.html-cxoVQego.js","assets/哈希索引.html-JoXbZWxc.js","assets/索引基础.html-_tLmYvyv.js","assets/索引的使用和分析.html-prmbd99I.js","assets/索引的底层实现原理.html-7oQ7G5fl.js","assets/MySQL事务的隔离级别.html-NqAMu2hF.js","assets/事务并发存在的问题(脏读、不可重复读和幻读).html-EdkjYV_6.js","assets/事务的ACID特性.html-mHvKbhqP.js","assets/事务的概念.html-6V-A-7sK.js","assets/sql优化.html-f2zw4b11.js","assets/SQL和索引优化总结.html-1JsCUVML.js","assets/MySQL重做日志redo log.html-3KjgTI-w.js","assets/Server 层四个日志.html-LlGoR9oS.js","assets/主从复制原理.html-5TWVgOKS.js","assets/读写分离原理.html-U6nl-0By.js","assets/读写分离配置实践.html-uqAcKs_2.js","assets/配置主从复制实践.html-5EqZ2Qps.js","assets/MySQL MVCC多版本并发控制（脏读和不可重复读解决原理）.html-Ovv6S34Q.js","assets/MySQL 意向共享锁、意向排他锁.html-1peq2h55.js","assets/MySQL回滚日志undo log.html-EWPMEIQ_.js","assets/MySQL间隙锁（幻读解决原理）.html-R-4gUTtx.js","assets/排它锁和共享锁.html-WnE4gzLY.js","assets/死锁.html-hQWlGAK7.js","assets/表级锁和行级锁.html-r5JSwEOK.js","assets/记录锁_间隙锁可以防止删除操作而导致的幻读吗.html-TNx0nZtu.js","assets/锁的优化建议.html-tj4pQche.js","assets/SQL的完整处理流程.html-1Hc5pT3U.js","assets/分库分表实践.html-5ujvPseL.js","assets/加载配置项.html-gpHW9nXp.js","assets/压力测试.html-F5Hdl8Rl.js","assets/数据库编程部分实现.html-EEvOAs8x.js","assets/最大空闲时间回收连接扫描线程的实现.html-SXdFZVJd.js","assets/概述.html-qywvVJ_c.js","assets/消费者线程的实现.html-2MCo9TFc.js","assets/生产者线程的实现.html-F4jxOBZl.js","assets/连接池单例模式实践.html-7ACAmDbW.js","assets/mysqldump数据备份.html-5TxNvTY9.js","assets/344.反转字符串.html-gS1DU8J6.js","assets/905. 按奇偶排序数组.html-pf8yC_NH.js","assets/LeetCode 209.长度最小的子数组.html-99hzqv4f.js","assets/LeetCode 27. 移除元素.html-Fa_eMZlz.js","assets/LeetCode 59.螺旋矩阵Ⅱ.html-sx1r9pIR.js","assets/LeetCode 704.二分查找.html-cLXGV3o9.js","assets/LeetCode 977.有序数组的平方.html-3MTe8HYM.js","assets/二分查找总结.html-KYrdvgOJ.js","assets/数组基础.html-303NVL2e.js","assets/查找N个数组的公共元素.html-fv9oE0ga.js","assets/查找三个数组的公共元素.html-GOoT-qba.js","assets/查找两个数组的公共元素.html-tShRV6m5.js","assets/查找出现次数超过一半的元素.html--RiwK-hh.js","assets/查找最大和次大的元素.html-IfLr433G.js","assets/234.回文链表.html-3S6HvBJ-.js","assets/LeetCode 203.移除链表元素.html-oOBWdTgR.js","assets/leetcode 21. 合并两个有序链表.html-3e9zjDAW.js","assets/leetcode141.环形链表(判断链表是否有环).html-3i8nqEn9.js","assets/Leetcode142.环形链表II(查找环的入口地址).html-9407Hfu8.js","assets/leetcode160.相交链表(判断链表是否相交).html-n-UWIUKQ.js","assets/Leetcode19. 删除链表的倒数第N个结点.html-zs_loEpb.js","assets/leetcode206.反转链表.html-2-H23HXA.js","assets/Leetcode23. 合并 K 个升序链表.html-6nseq1Wk.js","assets/leetcode61.旋转链表.html-hRf2jfQa.js","assets/LeetCode707.html-GBalNQcd.js","assets/leetcode86. 分隔链表（链表的分解）.html-2BCYnNcl.js","assets/Leetcode876.链表的中间结点.html-Cf6v_1aI.js","assets/leetcode92.反转链表II.html-e-1rVjBa.js","assets/查找链表中倒数第N个结点.html-p55PSaRG.js","assets/约瑟夫环问题.html-FCYHEjnS.js","assets/链表基础.html-FxRthiHe.js","assets/index.html-pe7AFeDZ.js","assets/TCP和UDP的区别.html-Zs3RsuG8.js","assets/上滤.html-bzhDKwgq.js","assets/1. 两数之和.html-lLLQUqrq.js","assets/128. 最长连续序列.html-3QM6EWSH.js","assets/15. 三数之和.html-pUwDZb_d.js","assets/167. 两数之和 II - 输入有序数组.html-9D6czqZz.js","assets/202. 快乐数.html-px94Dt0L.js","assets/217.存在重复元素.html-H-_dspO1.js","assets/219.存在重复元素 II.html-AzRUxUmi.js","assets/220. 存在重复元素 III.html-KCoTaFkr.js","assets/242.有效的字母异位词.html-mHwPhMtG.js","assets/349.两个数组的交集.html-cX_IVPJ_.js","assets/383. 赎金信.html-oUaLkMwS.js","assets/594. 最长和谐子序列.html--2y927_j.js","assets/各阶段代码修改回退撤销操作.html-ZF-sYiWI.js","assets/基本概念和环境搭建.html-x11dMog1.js","assets/常用命令以及原理.html-MdCgCsCK.js","assets/推送代码冲突解决.html-i9yr4UxQ.js","assets/本地分支管理.html-x_fouddz.js","assets/远程分支管理.html-C8zkC4Zm.js","assets/冒泡排序.html-CFZc3rFf.js","assets/基数排序.html-wVB58tci.js","assets/堆排序.html-fZwX2l13.js","assets/希尔排序.html-EcK0TxaE.js","assets/归并排序.html-gBYNLkTO.js","assets/插入排序.html-ZU6fpW2P.js","assets/桶排序.html-jIHUQzWc.js","assets/计数排序.html-YkYDt2kR.js","assets/选择排序.html-TdsEa9J7.js","assets/（简单）快速排序.html-r3-6o76F.js","assets/新建 Markdown.html-LrVqDsK1.js","assets/两个栈实现队列.html-qebkVb-d.js","assets/新建 Markdown.html-EkrBoVkR.js","assets/反汇编小结.html-eyMEcLlN.js","assets/指令角度堆栈调用过程.html-mOgK4oas.js","assets/编译器角度理解c__代码的编译和链接.html-jxwxOqf6.js","assets/进程虚拟地址空间.html-rVL6SG5H.js","assets/bool.html-NrprihF6.js","assets/c__初探.html-3AE1MxqE.js","assets/const.html-3CBmQAOg.js","assets/inline内联函数.html-rg4JkzF6.js","assets/new、delete.html-pQjHM9OO.js","assets/string.html-0SX-GkrL.js","assets/内存对齐.html-j46kjj3A.js","assets/函数重载.html-o9WmCoRB.js","assets/命名空间.html-MfyZg6ga.js","assets/异常安全.html-uJifxh7j.js","assets/引用.html-mPygAGyK.js","assets/强制转换.html-24nVl9_q.js","assets/默认参数.html-nxgufn79.js","assets/do-while(0).html-Ehz0fySD.js","assets/malloc、free的底层实现.html-PnPKPfBu.js","assets/scanf.html-zuThDgZx.js","assets/关键字.html-B6E5Yqm9.js","assets/前言.html-mDohvN4e.js","assets/变量.html-GXl1YWVW.js","assets/字符.html-ext7Naed.js","assets/常量.html-kseZ_ELY.js","assets/数据类型.html-o143takZ.js","assets/整型.html-FMpyxFuX.js","assets/浮点数.html-Rby-eK6I.js","assets/补码.html-6HwT7bsp.js","assets/进制转换.html-G-a5gFk5.js","assets/STL向量容器vector简单实现.html-Adfpjpd2.js","assets/函数模板与模板函数.html-P5Zoxhpo.js","assets/可变模板参数.html-9cXPhiT2.js","assets/容器空间适配器allocator的简单实现.html-kp6dvs-4.js","assets/类模板与模板类.html-sXGBZQob.js","assets/string迭代器的实现.html-UcyXo1CZ.js","assets/vector迭代器的实现.html-O1os6OTd.js","assets/剖析new和delete实习原理.html-3q0TmuBe.js","assets/友元.html-vQPMrMcM.js","assets/复数类CComplex.html-qV8Nth0d.js","assets/运算符重载实现string类.html-BwdDzyhc.js","assets/迭代器失效的底层核心原理.html-otOlPEMf.js","assets/重载new和delete运算符实现一个对象池.html-mHbzNGT7.js","assets/哪些函数不能被设置为虚函数.html-gy4Ch3Wd.js","assets/多态的定义和原理.html-btaP4OcI.js","assets/带虚函数的多基派生.html-n0oIsH_7.js","assets/测试虚表的存在.html-3MovnBDt.js","assets/纯虚函数和抽象类.html-RZqs5P3l.js","assets/继承多态与虚函数案例分析.html-0-a7Pepk.js","assets/虚函数.html-9KqF5uCE.js","assets/虚函数的访问.html-dbANXDox.js","assets/虚基类和虚继承.html-TNskzNyb.js","assets/虚拟继承时派生类对象的构造和析构.html-6PSCA7nD.js","assets/虚析构.html-jSdM2kt8.js","assets/静态绑定和动态绑定.html-pvZN13Jt.js","assets/this.html-pW8iF6Dl.js","assets/拷贝构造函数.html-qH8tMx_Y.js","assets/拷贝构造和赋值重载的实践.html-xr533X9E.js","assets/指向类型成员的指针.html-baHT-shv.js","assets/构造函数和析构函数.html-XY4Qy4wV.js","assets/特殊数据成员的初始化.html-3dlrCzzR.js","assets/特殊的成员函数.html-IyKONOSD.js","assets/类和对象.html-a662i2WN.js","assets/组织对象.html-qj4p0tBT.js","assets/赋值运算符函数.html-iuYTEXXo.js","assets/多基继承.html-nR3dDkO2.js","assets/派生方式对基类成员的访问权限.html-Go-l6Luq.js","assets/派生类对象间的复制控制.html-KlXlqeju.js","assets/派生类的构造过程.html-6aFJIqvx.js","assets/继承中的类型转换.html-20pdIK2Q.js","assets/继承的本质和原理.html-aI3wNX62.js","assets/菱形继承问题.html-UZNaPntZ.js","assets/重载，隐藏，重写（覆盖）.html-UtVhaPp_.js","assets/valgrind.html-JWw6x6CE.js","assets/log4cpp.html-kUUIeJkH.js","assets/STL顺序容器：vector、deque、list.html-aRF7Y21N.js","assets/函数对象与函数指针.html-Knp6Labc.js","assets/容器适配器：栈、队列、优先级队列.html-gpOkvfbd.js","assets/无序关联容器、有序关联容器.html-Ku6PdZQN.js","assets/泛型算法与绑定器.html-mJHf63XQ.js","assets/迭代器iterator.html-gSxyfvoK.js","assets/不带引用计数的智能指针.html-FUNn4l95.js","assets/多线程访问共享对象的线程安全问题.html-BTVpfFZp.js","assets/带引用计数的智能指针.html-_ueoWfkq.js","assets/自定义删除器.html-Lp1mQTk-.js","assets/Pimpl.html-UdS2YMRU.js","assets/代理模式、适配器模式、装饰器模式.html-2rHmao4w.js","assets/单例模式.html-u5aMllNw.js","assets/简单工厂、工厂方法、抽象工厂.html-LsjUS2ZR.js","assets/观察者Observer模式.html-jl8LwH_B.js","assets/C__对象的优化.html-VuL659Sn.js","assets/C__的右值引用.html-0Fx-DvBN.js","assets/move移动语义和forward完美转发.html-DwNyQzHE.js","assets/C__11内容总结.html-EtAyE9W3.js","assets/C__11多线程编程.html-SSN0juuU.js","assets/C__11线程间的同步通信(生产者-消费者模型).html-Lj1lyoIP.js","assets/再谈mtx和lock_guard和unique_lock.html-MuWbY28r.js","assets/基于CAS操作的atomic原子类型.html-ArI59Tjr.js","assets/bind1st和bind2d使用.html-nmZ9K4TK.js","assets/bind和function实现muduo中的线程池.html-GdWa3f5v.js","assets/C__11绑定器介绍.html-FeE7Cfiq.js","assets/function函数对象类型实现原理.html-KJ0jvmVU.js","assets/function函数对象类型的应用.html-8ZpJ0U2L.js","assets/lambda表达式.html-r1By8GmG.js","assets/模板的完全特例化和非完全特例化.html-E-rQYtxS.js","assets/reallocate.html-LbgqpMYR.js","assets/SGI STL二级空间配置器重要成员解读.html-4NBDmNOh.js","assets/SGI STL的verctor是怎么管理对象的.html-Fi84sso-.js","assets/两个重要的函数.html-OVP5vsQN.js","assets/内存归还dealloacte.html-de_HyTAS.js","assets/内存池allocate分配过程.html-mlUNhpir.js","assets/分配内存池_S_refill源码.html-Uc_DB-b9.js","assets/实际分配内存池_S_chunk_alloc源码.html-2PU3vdJ7.js","assets/总结.html-e6IKo5fh.js","assets/vim的配置和使用.html-1DC3soSs.js","assets/centos7配置.html-Uq-aMHHL.js","assets/netstat使用.html-_hZ_dmOO.js","assets/tree常用命令.html-Mfo8U_sE.js","assets/wget使用.html-1x8WYVYp.js","assets/打包和压缩.html-g5K8Yvi7.js","assets/软链接（符号链接）和硬链接.html-0-8r3XJD.js","assets/配置一台ubuntu.html-5uPtXkwI.js","assets/字符串转不同进制数字.html-RlQREG13.js","assets/CMake的使用.html-pkHhn7Xo.js","assets/gcc_g__常见的编译命令.html-CJJOBdmH.js","assets/gdb调试出错的程序.html-XuLah2pz.js","assets/makefile使用方法.html-T3-LYDm8.js","assets/为什么c和c__函数参数从右往左压栈.html-yRvoq_mv.js","assets/分析这段代码构造函数和析构函数的调用顺序.html-XP54DqW7.js","assets/空结构体的大小.html-gICAgYTJ.js","assets/Json简介及使用.html-eL2xt4Ex.js","assets/Protobuf简介及使用.html-QXTIEBK1.js","assets/404.html-iZDnbT77.js","assets/index.html-pGLgRW9D.js","assets/index.html-RIxJGpKL.js","assets/index.html-zBavJewT.js","assets/index.html-aK1Cdetn.js","assets/index.html-Y654CS5W.js","assets/index.html-9s3U9UCg.js","assets/index.html-CspiZ390.js","assets/index.html-BlNGiz6t.js","assets/index.html-ML73nsUU.js","assets/index.html-XakRRC3G.js","assets/index.html-kdvmJaVQ.js","assets/index.html-A8e7N3k8.js","assets/index.html-mo3KHxRX.js","assets/index.html-oj3v4-QH.js","assets/index.html-kW5A395L.js","assets/index.html-9vnUZu6N.js","assets/index.html-o5C7xlQP.js","assets/index.html-mzRM7gNw.js","assets/index.html-By-SLniX.js","assets/index.html-2DPbxYBx.js","assets/index.html-DlNkOsSS.js","assets/index.html-T9IZ09AU.js","assets/index.html-lCUzs78c.js","assets/index.html-6fT4tQuC.js","assets/index.html-WiYYFkGX.js","assets/index.html-OrVQZBaM.js","assets/index.html-auCdtDm7.js","assets/index.html-VqL8EaLX.js","assets/index.html-Ok9tbvb8.js","assets/index.html-Ezh1_XfE.js","assets/index.html-rvaO88fi.js","assets/index.html-74dqlx1Z.js","assets/index.html-Fe0wBplp.js","assets/index.html-1336V0CD.js","assets/index.html-ZNd48Ydx.js","assets/index.html-brAFcs6l.js","assets/index.html-y2QShbui.js","assets/index.html-AWAlVUj3.js","assets/index.html-XmUkdIQD.js","assets/index.html-bd-EyUHE.js","assets/index.html-VQvDzLtA.js","assets/index.html-_441eZV3.js","assets/index.html-mevKnnTe.js","assets/index.html-oCykdyZ8.js","assets/index.html-eQGGhYsD.js","assets/index.html-ZP6gvpTN.js","assets/index.html-beaN0RqG.js","assets/index.html-il82t6_Z.js","assets/index.html-ZSTNeDTp.js","assets/index.html-LRVTYBDK.js","assets/index.html-3iYWm6a-.js","assets/index.html-CKkBqeiF.js","assets/index.html-6dKodyie.js","assets/index.html-oP3HVFGe.js","assets/index.html-Pk1KLy4H.js","assets/index.html-XLwJTFN9.js","assets/index.html-pdsLh66m.js","assets/index.html-fbLVa7if.js","assets/index.html-P5aY57Ul.js","assets/index.html-YEfq0BYX.js","assets/index.html-R4q0j-1O.js","assets/index.html-ytMAqYK3.js","assets/index.html-VvCQSXT7.js","assets/index.html-OyumdDe5.js","assets/index.html-113Cb2OT.js","assets/index.html-LnkzOp97.js","assets/index.html-nv8A-mzg.js","assets/index.html-2GztQHRt.js","assets/index.html-ozTaDJol.js","assets/index.html-1KIkNbUY.js","assets/index.html-JW3hDIyI.js","assets/index.html-Pv56FhAo.js","assets/index.html-YVFf4g6B.js","assets/index.html-YpVYopNX.js","assets/index.html-70m7GPwo.js","assets/index.html-21YuZrct.js","assets/index.html-vxbgz9s6.js","assets/index.html-ldMa42y6.js","assets/index.html-UsK_O70m.js","assets/index.html-Bl2vVowH.js","assets/index.html-Qq9otJUz.js","assets/index.html-1UyoQyRg.js","assets/index.html-34S_zNq-.js","assets/index.html-sKBqMKk7.js","assets/index.html-T83WzrAo.js","assets/index.html-r1lWyyAQ.js","assets/index.html-R9ybFUMF.js","assets/index.html-vKfJqWfH.js","assets/index.html-JN7PILPO.js","assets/index.html-CgjwZJwa.js","assets/index.html-11q1D-fY.js","assets/index.html--u2XjKIT.js","assets/index.html-kiHPEJxa.js","assets/index.html-ZW_5dzZN.js","assets/index.html--YcWTHux.js","assets/index.html-2tkdckI4.js","assets/index.html-nsI9Gb-3.js","assets/index.html-647A_Ylv.js","assets/index.html-jnHSgNFW.js","assets/index.html-nCjgY_Pd.js","assets/index.html-iZp_gd1w.js","assets/index.html-AfFkSStf.js","assets/index.html-AFTBibV7.js","assets/index.html-UDJ7l3Mp.js","assets/index.html-n6Lwp4VE.js","assets/index.html-kxOacqbA.js","assets/index.html-l7Bj2vSR.js","assets/index.html-FTXL8xnj.js","assets/index.html-FUEkLplj.js","assets/index.html-gYrt7Bhw.js","assets/index.html-YMK4nMec.js","assets/index.html-uS1llPU0.js","assets/index.html-YJnfMzXa.js","assets/index.html-TYfatKAP.js","assets/index.html-oX3oEqzu.js","assets/index.html-WSoGGLu4.js","assets/index.html-eqElTxg2.js","assets/index.html-sIsdaQtD.js","assets/index.html-6a-_rq2e.js","assets/index.html-HTTJ68XU.js","assets/index.html-N8Tu70QN.js","assets/index.html-OaBD24bc.js","assets/index.html-Sm-E8PRo.js","assets/index.html-2SS5Ws9k.js","assets/index.html-BmY5JRUy.js","assets/index.html-AhnnbDBQ.js","assets/index.html-1h3PoIpH.js","assets/index.html-WLCG2Nx1.js","assets/index.html-BTa_qDzf.js","assets/index.html-vKVovuRo.js","assets/index.html-en2qBfyl.js","assets/index.html-YJvlHqp7.js","assets/index.html-n6eZIzxq.js","assets/index.html-xYYc0BQy.js","assets/index.html-8dyOTKhu.js","assets/index.html-jDA5X9Yv.js","assets/index.html-avtIsFTB.js","assets/index.html-GltxEVkB.js"]
  }
  return indexes.map((i) => __vite__mapDeps.viteFileDeps[i])
}
