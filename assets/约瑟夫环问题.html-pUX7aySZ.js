const s=JSON.parse('{"key":"v-ebfa549c","path":"/algo/02%20%E9%93%BE%E8%A1%A8/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E9%97%AE%E9%A2%98.html","title":"约瑟夫环问题","lang":"zh-CN","frontmatter":{"title":"约瑟夫环问题","icon":"code","order":15,"category":["数据结构与算法"],"tag":["链表","循环链表"],"description":"约瑟夫环问题 情景一 约瑟夫环是一个数学的应用问题：已知n个人（以编号1，2，3...n分别表示）围坐在一张圆桌周围，从 编号为k的人开始报数，数到m的那个人出列，它的下一个人又从1开始报数，数到m的那个人又出列， 依此规律重复下去，直到圆桌周围的人全部出列，输出人的出列顺序。 #include &lt;iostream&gt; using std::cout; using std::endl; struct Node { int _data; Node* _next; Node(int data = 0, Node* next = nullptr) : _data(data), _next(next) {} }; void josephRing(int n, int k, int m) { //创建循环链表 Node* head = new Node(1); Node* p = head; for(int i = 2; i &lt;= n; ++i) { Node* newNode = new Node(i); p-&gt;_next = newNode; p = p-&gt;_next; } p-&gt;_next = head; //p指向尾结点 //先走k步 Node* q = head; for(int i = 1; i &lt; k; ++i) { p = q; q = q-&gt;_next; } //结束后q指向第K个人 while(1) { for(int i = 1; i &lt; m; ++i) { p = q; q = q-&gt;_next; }//q指向第m人 cout &lt;&lt; q-&gt;_data &lt;&lt; \\" \\"; if( p == q) {//只剩最后一个结点 delete q; cout &lt;&lt; endl; return; } else { p-&gt;_next = q-&gt;_next; \\tdelete q; \\tq = p-&gt;_next; } } } int main(void) { josephRing(8, 1, 3); josephRing(8, 1, 1); }","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/algo/02%20%E9%93%BE%E8%A1%A8/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E9%97%AE%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"约瑟夫环问题"}],["meta",{"property":"og:description","content":"约瑟夫环问题 情景一 约瑟夫环是一个数学的应用问题：已知n个人（以编号1，2，3...n分别表示）围坐在一张圆桌周围，从 编号为k的人开始报数，数到m的那个人出列，它的下一个人又从1开始报数，数到m的那个人又出列， 依此规律重复下去，直到圆桌周围的人全部出列，输出人的出列顺序。 #include &lt;iostream&gt; using std::cout; using std::endl; struct Node { int _data; Node* _next; Node(int data = 0, Node* next = nullptr) : _data(data), _next(next) {} }; void josephRing(int n, int k, int m) { //创建循环链表 Node* head = new Node(1); Node* p = head; for(int i = 2; i &lt;= n; ++i) { Node* newNode = new Node(i); p-&gt;_next = newNode; p = p-&gt;_next; } p-&gt;_next = head; //p指向尾结点 //先走k步 Node* q = head; for(int i = 1; i &lt; k; ++i) { p = q; q = q-&gt;_next; } //结束后q指向第K个人 while(1) { for(int i = 1; i &lt; m; ++i) { p = q; q = q-&gt;_next; }//q指向第m人 cout &lt;&lt; q-&gt;_data &lt;&lt; \\" \\"; if( p == q) {//只剩最后一个结点 delete q; cout &lt;&lt; endl; return; } else { p-&gt;_next = q-&gt;_next; \\tdelete q; \\tq = p-&gt;_next; } } } int main(void) { josephRing(8, 1, 3); josephRing(8, 1, 1); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"链表"}],["meta",{"property":"article:tag","content":"循环链表"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"约瑟夫环问题\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[{"level":2,"title":"情景一","slug":"情景一","link":"#情景一","children":[]},{"level":2,"title":"情景二","slug":"情景二","link":"#情景二","children":[]},{"level":2,"title":"情景三","slug":"情景三","link":"#情景三","children":[]}],"git":{},"readingTime":{"minutes":2.1,"words":630},"filePathRelative":"algo/02 链表/约瑟夫环问题.md","excerpt":"<h1> 约瑟夫环问题</h1>\\n<h2> 情景一</h2>\\n<p>约瑟夫环是一个数学的应用问题：已知<code>n</code>个人（以编号<code>1，2，3...n</code>分别表示）围坐在一张圆桌周围，从\\n编号为<code>k</code>的人开始报数，数到<code>m</code>的那个人出列，它的下一个人又从<code>1</code>开始报数，数到<code>m</code>的那个人又出列，\\n依此规律重复下去，直到圆桌周围的人全部出列，输出人的出列顺序。</p>\\n<!--more-->\\n<div class=\\"language-c++ line-numbers-mode\\" data-ext=\\"c++\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;iostream&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">using</span><span style=\\"color: #ABB2BF\\"> std::cout;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">using</span><span style=\\"color: #ABB2BF\\"> std::endl;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">struct</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Node</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> _data;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    Node</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\"> _next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">Node</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">data</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E5C07B\\">Node</span><span style=\\"color: #C678DD\\">*</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">next</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">nullptr</span><span style=\\"color: #ABB2BF\\">) : </span><span style=\\"color: #61AFEF\\">_data</span><span style=\\"color: #ABB2BF\\">(data), </span><span style=\\"color: #61AFEF\\">_next</span><span style=\\"color: #ABB2BF\\">(next) {}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">josephRing</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">n</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">k</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">m</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">    //创建循环链表</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    Node</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\"> head </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">new</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">Node</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    Node</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\"> p </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> i </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">2</span><span style=\\"color: #ABB2BF\\">; i </span><span style=\\"color: #C678DD\\">&lt;=</span><span style=\\"color: #ABB2BF\\"> n; </span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">i) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        Node</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\"> newNode </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">new</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">Node</span><span style=\\"color: #ABB2BF\\">(i);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">p</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_next</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> newNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        p </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">p</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_next</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">p</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_next</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> head;</span><span style=\\"color: #7F848E; font-style: italic\\">    //p指向尾结点</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">    //先走k步</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    Node</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\"> q </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> i </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">; i </span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\"> k; </span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">i) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        p </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> q;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        q </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">q</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_next</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span><span style=\\"color: #7F848E; font-style: italic\\">   //结束后q指向第K个人</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">while</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> i </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">; i </span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\"> m; </span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">i) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            p </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> q;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            q </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">q</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_next</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        }</span><span style=\\"color: #7F848E; font-style: italic\\">//q指向第m人</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">q</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_data</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\" \\"</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\">( p </span><span style=\\"color: #C678DD\\">==</span><span style=\\"color: #ABB2BF\\"> q) {</span><span style=\\"color: #7F848E; font-style: italic\\">//只剩最后一个结点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #C678DD\\">delete</span><span style=\\"color: #ABB2BF\\"> q;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">else</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #E5C07B\\">p</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_next</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">q</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_next</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        \\t</span><span style=\\"color: #C678DD\\">delete</span><span style=\\"color: #ABB2BF\\"> q;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        \\tq </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">p</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">_next</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">main</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">josephRing</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #D19A66\\">8</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #D19A66\\">3</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">josephRing</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #D19A66\\">8</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{s as data};
