const s=JSON.parse('{"key":"v-02ca19a9","path":"/ccpp/19%20SGI%20STL%E4%BA%8C%E7%BA%A7%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8%E5%86%85%E5%AD%98%E6%B1%A0%E6%BA%90%E7%A0%81/SGI%20STL%E7%9A%84verctor%E6%98%AF%E6%80%8E%E4%B9%88%E7%AE%A1%E7%90%86%E5%AF%B9%E8%B1%A1%E7%9A%84.html","title":"SGI STL的verctor是怎么管理对象的","lang":"zh-CN","frontmatter":{"title":"SGI STL的verctor是怎么管理对象的","icon":"file","order":1,"headerDepth":4,"category":["c/c++"],"tag":["SGI STL源码"],"description":"SGI STL的verctor是怎么管理对象的 ![](SGI STL的verctor是怎么管理对象的.assets/image-20240429164446966.png) SGI STL push_pack()和pop_pack() //stl_construct.h template &lt;class _T1, class _T2&gt; inline void _Construct(_T1* __p, const _T2&amp; __value) { new ((void*) __p) _T1(__value); } template &lt;class _T1, class _T2&gt; inline void construct(_T1* __p, const _T2&amp; __value) { _Construct(__p, __value); } //stl_vector.h template &lt;class _Tp, class _Alloc = __STL_DEFAULT_ALLOCATOR(_Tp) &gt; class vector : protected _Vector_base&lt;_Tp, _Alloc&gt; { \\t//... void push_back(const _Tp&amp; __x) { \\tif (_M_finish != _M_end_of_storage) { \\tconstruct(_M_finish, __x); \\t++_M_finish; \\t} \\telse \\t_M_insert_aux(end(), __x); \\t}","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/19%20SGI%20STL%E4%BA%8C%E7%BA%A7%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8%E5%86%85%E5%AD%98%E6%B1%A0%E6%BA%90%E7%A0%81/SGI%20STL%E7%9A%84verctor%E6%98%AF%E6%80%8E%E4%B9%88%E7%AE%A1%E7%90%86%E5%AF%B9%E8%B1%A1%E7%9A%84.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"SGI STL的verctor是怎么管理对象的"}],["meta",{"property":"og:description","content":"SGI STL的verctor是怎么管理对象的 ![](SGI STL的verctor是怎么管理对象的.assets/image-20240429164446966.png) SGI STL push_pack()和pop_pack() //stl_construct.h template &lt;class _T1, class _T2&gt; inline void _Construct(_T1* __p, const _T2&amp; __value) { new ((void*) __p) _T1(__value); } template &lt;class _T1, class _T2&gt; inline void construct(_T1* __p, const _T2&amp; __value) { _Construct(__p, __value); } //stl_vector.h template &lt;class _Tp, class _Alloc = __STL_DEFAULT_ALLOCATOR(_Tp) &gt; class vector : protected _Vector_base&lt;_Tp, _Alloc&gt; { \\t//... void push_back(const _Tp&amp; __x) { \\tif (_M_finish != _M_end_of_storage) { \\tconstruct(_M_finish, __x); \\t++_M_finish; \\t} \\telse \\t_M_insert_aux(end(), __x); \\t}"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"SGI STL源码"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SGI STL的verctor是怎么管理对象的\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[{"level":2,"title":"SGI STL push_pack()和pop_pack()","slug":"sgi-stl-push-pack-和pop-pack","link":"#sgi-stl-push-pack-和pop-pack","children":[]},{"level":2,"title":"C++ STLpush_pack()和pop_pack()","slug":"c-stlpush-pack-和pop-pack","link":"#c-stlpush-pack-和pop-pack","children":[]}],"git":{},"readingTime":{"minutes":1.66,"words":498},"filePathRelative":"ccpp/19 SGI STL二级空间配置器内存池源码/SGI STL的verctor是怎么管理对象的.md","excerpt":"<h1> SGI STL的verctor是怎么管理对象的</h1>\\n<p>![](SGI STL的verctor是怎么管理对象的.assets/image-20240429164446966.png)</p>\\n<h2> SGI STL push_pack()和pop_pack()</h2>\\n<div class=\\"language-c++ line-numbers-mode\\" data-ext=\\"c++\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">//stl_construct.h</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">template</span><span style=\\"color: #ABB2BF\\"> &lt;</span><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">_T1</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">_T2</span><span style=\\"color: #ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">inline</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">_Construct</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">_T1</span><span style=\\"color: #C678DD\\">*</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">__p</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">_T2</span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">__value</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #C678DD\\">new</span><span style=\\"color: #ABB2BF\\"> ((</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">) __p) </span><span style=\\"color: #61AFEF\\">_T1</span><span style=\\"color: #ABB2BF\\">(__value);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">template</span><span style=\\"color: #ABB2BF\\"> &lt;</span><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">_T1</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">_T2</span><span style=\\"color: #ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">inline</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">construct</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">_T1</span><span style=\\"color: #C678DD\\">*</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">__p</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">_T2</span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">__value</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #61AFEF\\">_Construct</span><span style=\\"color: #ABB2BF\\">(__p, __value);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">//stl_vector.h</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">template</span><span style=\\"color: #ABB2BF\\"> &lt;</span><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">_Tp</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">_Alloc</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">__STL_DEFAULT_ALLOCATOR</span><span style=\\"color: #ABB2BF\\">(_Tp) &gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">vector</span><span style=\\"color: #ABB2BF\\"> : </span><span style=\\"color: #C678DD\\">protected</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">_Vector_base</span><span style=\\"color: #ABB2BF\\">&lt;</span><span style=\\"color: #E5C07B\\">_Tp</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E5C07B\\">_Alloc</span><span style=\\"color: #ABB2BF\\">&gt; </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t//...</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">push_back</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">_Tp</span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">__x</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    \\t</span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (_M_finish </span><span style=\\"color: #C678DD\\">!=</span><span style=\\"color: #ABB2BF\\"> _M_end_of_storage) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      \\t</span><span style=\\"color: #61AFEF\\">construct</span><span style=\\"color: #ABB2BF\\">(_M_finish, __x);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      \\t</span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">_M_finish;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    \\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    \\t</span><span style=\\"color: #C678DD\\">else</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      \\t</span><span style=\\"color: #61AFEF\\">_M_insert_aux</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #61AFEF\\">end</span><span style=\\"color: #ABB2BF\\">(), __x);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{s as data};
