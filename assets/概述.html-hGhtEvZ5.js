import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as c,c as s,d as n,e,f as i,w as t,a}from"./app-2pke9_a8.js";const d="/assets/image-20240407190014281-5yoa9t7D.png",u="/assets/image-20240407190156474-r7ZgRQW_.png",p="/assets/image-20240407195909930-GFkSHLTr.png",h={},_=a('<h1 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h1><h2 id="关键技术点" tabindex="-1"><a class="header-anchor" href="#关键技术点" aria-hidden="true">#</a> 关键技术点</h2><p>MySQL数据库编程、单例模式、queue队列容器、C++11多线程编程、线程互斥、线程同步通信和 unique_lock、基于CAS的原子整形、智能指针shared_ptr、lambda表达式、生产者-消费者线程模型</p><h2 id="项目背景" tabindex="-1"><a class="header-anchor" href="#项目背景" aria-hidden="true">#</a> 项目背景</h2><p><u>索引和数据都是存储在磁盘</u>上，提高MySQL数据库（<u>基于C/S设计，服务器应用相当于MySQL Client，通过既定的API将SQL语句发送给MySQL Server，然后执行处理流程CRUD,然后再通过结果返回给服务器应用</u>）的访问瓶颈：</p>',5),m=n("strong",null,"减少磁盘IO",-1),g=n("figure",null,[n("img",{src:d,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),S=a('<p>本项目为了在C/C++项目中，提供MySQL Server的访问效率，实现基于C++代码的数据库连接池模块</p><h2 id="连接池功能点介绍" tabindex="-1"><a class="header-anchor" href="#连接池功能点介绍" aria-hidden="true">#</a> 连接池功能点介绍</h2><p>连接池一般包含了数据库连接所用的ip地址、port端口号、用户名和密码以及其它的性能参数，例如<strong>初始连接量，最大连接量，最大空闲时间、连接超时时间</strong>等，该项目是基于C++语言实现的连接池，主要也是<u>实现以上几个所有连接池都支持的通用基础功能</u>。</p><p><strong>初始连接量（initSize）</strong>：<u>表示连接池事先会和MySQL Server创建initSize个数的connection连接，当应用发起MySQL访问时，不用再创建和MySQL Server新的连接，直接从连接池中获取一个可用的连接就可以，使用完成后，并不去释放connection，而是把当前connection再归还到连接池当中</u>。</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',5),f=n("strong",null,"最大连接量（maxSize）",-1),C=n("u",null,"当并发访问MySQL Server的请求增多时，初始连接量已经不够使用了，此时会根据新的请求数量去创建更多的连接给应用去使用，但是新创建的连接数量上限是maxSize，不能无限制的创建连接",-1),x=a('<p><strong>最大空闲时间（maxIdleTime）</strong>：当访问MySQL的并发请求多了以后，连接池里面的连接数量会动态增加，上限是maxSize个，当这些连接用完再次归还到连接池当中。<u>如果在指定的maxIdleTime里面，这些新增加的连接都没有被再次使用过，那么新增加的这些连接资源就要被回收掉，只需要保持初始连接量initSize个连接就可以了</u>。</p><p><strong>连接超时时间（connectionTimeout）</strong>：当MySQL的并发请求量过大，连接池中的连接数量已经到达maxSize了，而此时没有空闲的连接可供使用，那么此时应用从连接池获取连接无法成功，它<u>通过阻塞的方式获取连接的时间如果超过connectionTimeout时间，那么获取连接失败，无法访问数据库</u>。</p><h2 id="功能实现设计" tabindex="-1"><a class="header-anchor" href="#功能实现设计" aria-hidden="true">#</a> 功能实现设计</h2><p>ConnectionPool.cpp和ConnectionPool.h：连接池代码实现 Connection.cpp和Connection.h：数据库操作代码、增删改查代码实现</p><p><strong>连接池主要包含了以下功能点</strong>：</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>连接池只需要一个实例，所以ConnectionPool以单例模式进行设计</li><li>从ConnectionPool中可以获取和MySQL的连接Connection</li><li>空闲连接Connection全部维护在一个线程安全的Connection队列中，使用线程互斥锁保证队列的线程安全</li><li>如果Connection队列为空，还需要再获取连接，此时需要动态创建连接，上限数量是maxSize</li><li>队列中空闲连接时间超过maxIdleTime的就要被释放掉，只保留初始的initSize个连接就可以了，这个功能点肯定需要放在独立的线程中去做</li><li>如果Connection队列为空，而此时连接的数量已达上限maxSize，那么等待connectionTimeout时间如果还获取不到空闲的连接，那么获取连接失败，此处从Connection队列获取空闲连接，可以使用带超时时间的mutex互斥锁来实现连接超时时间</li><li>用户获取的连接用shared_ptr智能指针来管理，用lambda表达式定制连接释放的功能（不真正释放连接，而是把连接归还到连接池中）</li><li>连接的生产和连接的消费采用生产者-消费者线程模型来设计，使用了线程间的同步通信机制条件变量和互斥锁</li></ol><p><mark>做项目一定先把功能点想清楚再进行开发，不要边写边删</mark></p>',8);function y(L,Q){const o=l("font");return c(),s("div",null,[_,n("ol",null,[n("li",null,[n("p",null,[e("热点数据（访问量比较大）可以放在缓存（redis、memory cache）内，"),i(o,{color:"red"},{default:t(()=>[m]),_:1})])]),n("li",null,[n("p",null,[e("增加连接池，在高并发的情况下，减少**"),i(o,{color:"red"},{default:t(()=>[e("TCP三次握手")]),_:1}),e("、"),i(o,{color:"red"},{default:t(()=>[e("MySQL Server连接认证")]),_:1}),e("(用户是否合法、密码是否正确)、"),i(o,{color:"red"},{default:t(()=>[e("MySQL Server关闭连接回收资源")]),_:1}),e("和"),i(o,{color:"red"},{default:t(()=>[e("TCP四次挥手")]),_:1}),e("**所带来的性能损耗。")])])]),g,n("p",null,[e("常见的连接池括阿里的druid，c3p0以及apache dbcp连接池，"),n("strong",null,[i(o,{color:"green"},{default:t(()=>[e("对于短时间内大量的数据库增删改查操作性能的提升是很明显的")]),_:1})]),e("，全部由Java实现的")]),S,n("p",null,[f,e("："),C,e("，因为每一个连接都会占用一个socket资源，一般连接池和服务器程序是部署在一台主机上的，"),i(o,{color:"red"},{default:t(()=>[e("如果连接池占用过多的socket资源，那么服务器就不能接收太多的客户端请求了")]),_:1}),e("(都是网络连接)。当这些连接使用完成后，再次归还到连接池当中来维护。")]),x])}const b=r(h,[["render",y],["__file","概述.html.vue"]]);export{b as default};
