import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as t,c as r,d as n,e as s,f as l,w as p,a as o}from"./app-mYdPlPhZ.js";const i="/assets/20200314172953665-6R-6MIFQ.png",B="/assets/20200314173447417-_7MlXX43.png",y={},d=n("h1",{id:"多态的定义和原理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#多态的定义和原理","aria-hidden":"true"},"#"),s(" 多态的定义和原理")],-1),F=n("h2",{id:"多态的定义",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#多态的定义","aria-hidden":"true"},"#"),s(" 多态的定义")],-1),A=n("p",null,[s("多态性（polymorphism）是面向对象设计语言的基本特征之一。仅仅是将数据和函数捆绑在一起，进行类的封装，使用一些简单的继承，还不能算是真正应用了面向对象的设计思想。"),n("u",null,"多态性是面向对象的精髓"),s("。多态性可以简单地概括为“"),n("strong",null,"一个接口，多种方法"),s("”。")],-1),v=n("strong",null,"同一个消息、同一种调用，在不同的场合，针对不同的对象下，执行不同的行为",-1),u=o('<h2 id="为什么用多态" tabindex="-1"><a class="header-anchor" href="#为什么用多态" aria-hidden="true">#</a> 为什么用多态</h2><p><u>封装可以隐藏实现细节，使得<strong>代码模块化</strong>；继承可以<strong>扩展</strong>已存在的代码模块（类）。它们的目的都是为了<strong>代码重用</strong></u>。而<u>多态除了代码的<strong>复用性</strong>外，还可以<strong>解决项目中紧偶合的问题，提高程序的可扩展性</strong>。</u></p><p>如果项目耦合度很高的情况下，维护代码时修改一个地方会牵连到很多地方，会无休止的增加开发成本。而降低耦合度，可以保证程序的扩展性。而多态对代码具有很好的可扩充性。<strong>增加新的子类不影响已存在类的多态性、继承性，以及其他特性的运行和操作</strong>。实际上新加子类更容易获得多态功能。例如，在实现了圆锥、半圆锥以及半球体的多态基础上，很容易增添球体类的多态性。</p><h2 id="多态的分类" tabindex="-1"><a class="header-anchor" href="#多态的分类" aria-hidden="true">#</a> 多态的分类</h2>',4),m=n("li",null,[n("strong",null,"编译时多态"),s("：也称为静态多态，我们之前学习过的"),n("strong",null,"函数重载、运算符重载"),s("、"),n("strong",null,"模板(函数模板、类模板)"),s("（模板的实例化发生在编译阶段）就是采用的静态多态"),n("u",null,[s("，C++编译器根据传递给"),n("strong",null,"函数的参数"),s("和"),n("strong",null,"函数名"),s("决定具体要使用哪一个函数")]),s("，又称为先期联编（early binding）。")],-1),b=n("strong",null,"运行时多态",-1),D=n("strong",null,[s("在继承结构中，基类指针(引用)指向派生类对象，通过该指针(引用)调用"),n("u",null,"同名覆盖方法(虚函数)"),s("，基类指针指向哪个派生类对象，就会调用哪个派生类对象的同名覆盖方法，称为动态多态")],-1),g=o(`<h3 id="案例1-静多态-函数重载" tabindex="-1"><a class="header-anchor" href="#案例1-静多态-函数重载" aria-hidden="true">#</a> 案例1.静多态：函数重载</h3><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">){}</span></span>
<span class="line"><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;">){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> //call compare_int_int，在编译阶段就确定好调用的函数版本</span></span>
<span class="line"><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10.5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20.5</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//call compare_double_double</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="案例2-静多态-模板-模板的实例化发生在编译阶段" tabindex="-1"><a class="header-anchor" href="#案例2-静多态-模板-模板的实例化发生在编译阶段" aria-hidden="true">#</a> 案例2.静多态：模板，模板的实例化发生在编译阶段</h3><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Tb</span><span style="color:#ABB2BF;">){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> //=&gt;int 实例化一个compare&lt;int&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10.5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20.5</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> //=&gt;double 实例化一个compare&lt;double&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="案例3-动多态-实现一个动物类" tabindex="-1"><a class="header-anchor" href="#案例3-动多态-实现一个动物类" aria-hidden="true">#</a> 案例3.动多态：实现一个动物类</h3><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//动物基类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Animal</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Animal</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">):</span><span style="color:#61AFEF;">_name</span><span style="color:#ABB2BF;">(name){}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">virtual</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bark</span><span style="color:#ABB2BF;">(){}</span></span>
<span class="line"><span style="color:#C678DD;">protected:</span></span>
<span class="line"><span style="color:#ABB2BF;">	string _name;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//动物实体类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Cat</span><span style="color:#ABB2BF;"> : </span><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Animal</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Cat</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">):</span><span style="color:#61AFEF;">Animal</span><span style="color:#ABB2BF;">(name){}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bark</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> _name </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;bark:miao miao!&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Dog</span><span style="color:#ABB2BF;"> : </span><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Animal</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Dog</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">):</span><span style="color:#61AFEF;">Animal</span><span style="color:#ABB2BF;">(name){}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bark</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> _name </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;bark:wang wang!&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Pig</span><span style="color:#ABB2BF;"> : </span><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Animal</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Pig</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">):</span><span style="color:#61AFEF;">Animal</span><span style="color:#ABB2BF;">(name){}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bark</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> _name </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;bark:heng heng!&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bark</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Cat</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">cat</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">cat</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bark</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bark</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Dog</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">dog</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">dog</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bark</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bark</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Pig</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">pig</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">pig</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bark</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	Cat </span><span style="color:#61AFEF;">cat</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;小猫&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	Dog </span><span style="color:#61AFEF;">dog</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;小狗&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	Pig </span><span style="color:#61AFEF;">pig</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;小猪&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">bark</span><span style="color:#ABB2BF;">(cat);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">bark</span><span style="color:#ABB2BF;">(dog);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">bark</span><span style="color:#ABB2BF;">(pig);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此时<strong>发生动态绑定</strong>，<u>但是这个bark()接口不太好，我们若添加更多的新的动物，派生类对象越多，bark()方法还需要继续增加。相应的实体类若删除，其对应接口也要删除，达不到高内聚低耦合。</u></p><p>那么用什么类型能将上面的对象都能接受呢？ 我们使用<strong>统一的基类类型来接受派生类的对象</strong>。</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bark</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Animal</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">bark</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Cat，Dog，Pig是从Animla继承而来，<u>基类指针就可以指向派生类对象</u>，都可以调用。<mark><strong>由于Animal::bark()执行动态绑定，先访问指针指向的对象的前四个字节，基类指针指向了三个不同的对象，每一次访问的就是这三个不同对象的虚函数表，取用它们重写的bark()</strong></mark>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;">cat cat vftable </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">Cat::</span><span style="color:#61AFEF;">bark</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;">dog dog vftable </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">Dog::</span><span style="color:#61AFEF;">bark</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;">Pig pig vftable </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">Pig::</span><span style="color:#61AFEF;">bark</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时再增加新的派生类型，API接口不用修改，方便许多</p><figure><img src="`+B+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',14);function C(E,h){const a=c("font");return t(),r("div",null,[d,F,A,n("p",null,[s("通常是指对于"),l(a,{color:"green"},{default:p(()=>[v]),_:1}),s("。")]),u,n("ul",null,[m,n("li",null,[b,s("："),D,s("。 "),n("ul",null,[n("li",null,[s("必须在程序运行时完成选择，因此编译器必须提供这么一套称为“动态联编”（dynamic binding）的机制，也叫晚期联编（late binding）。"),n("strong",null,[s("多态底层是通过"),l(a,{color:"red"},{default:p(()=>[s("动态绑定")]),_:1}),s("来实现的，C++通过"),l(a,{color:"red"},{default:p(()=>[s("虚函数")]),_:1}),s("来实现动态绑定/动态联编。")])]),n("li",null,[n("strong",null,[s("基类中给所有派生类"),l(a,{color:"red"},{default:p(()=>[s("提供统一的虚函数接口")]),_:1}),s("，让派生类进行重写，然后就可以使用多态了")])])])])]),g])}const k=e(y,[["render",C],["__file","多态的定义和原理.html.vue"]]);export{k as default};
