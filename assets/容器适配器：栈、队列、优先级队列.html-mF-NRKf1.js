const s=JSON.parse('{"key":"v-62b566a8","path":"/ccpp/09%20%E6%A0%87%E5%87%86%E5%BA%93STL/%E5%AE%B9%E5%99%A8%E9%80%82%E9%85%8D%E5%99%A8%EF%BC%9A%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E3%80%81%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97.html","title":"容器适配器：栈、队列、优先级队列","lang":"zh-CN","frontmatter":{"title":"容器适配器：栈、队列、优先级队列","icon":"file","order":2,"headerDepth":4,"category":["c/c++"],"tag":["STL"],"description":"容器适配器：栈、队列、优先级队列 一、容器适配器 什么是容器适配器？ ：适配器底层没有自己的数据结构，它是另外一个容器的封装，它的方法全部由底层依赖的容器进行实现的；它没有实现自己的迭代器，不能使用迭代器遍历。来看这个例子：我们使用容器适配器来实现一个栈。 template&lt;typename T, typename Container=deque&lt;T&gt;&gt; class Stack { public: \\tvoid push(const T &amp;val); \\t{ \\t\\tcon.push_back(val); \\t} \\tvoid pop() \\t{ \\t\\tcon.pop_back(); \\t} \\tT top()const \\t{ \\t\\treturn con.back(); \\t} private: \\tContainer con; };","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/09%20%E6%A0%87%E5%87%86%E5%BA%93STL/%E5%AE%B9%E5%99%A8%E9%80%82%E9%85%8D%E5%99%A8%EF%BC%9A%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E3%80%81%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"容器适配器：栈、队列、优先级队列"}],["meta",{"property":"og:description","content":"容器适配器：栈、队列、优先级队列 一、容器适配器 什么是容器适配器？ ：适配器底层没有自己的数据结构，它是另外一个容器的封装，它的方法全部由底层依赖的容器进行实现的；它没有实现自己的迭代器，不能使用迭代器遍历。来看这个例子：我们使用容器适配器来实现一个栈。 template&lt;typename T, typename Container=deque&lt;T&gt;&gt; class Stack { public: \\tvoid push(const T &amp;val); \\t{ \\t\\tcon.push_back(val); \\t} \\tvoid pop() \\t{ \\t\\tcon.pop_back(); \\t} \\tT top()const \\t{ \\t\\treturn con.back(); \\t} private: \\tContainer con; };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"STL"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"容器适配器：栈、队列、优先级队列\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[{"level":2,"title":"一、容器适配器","slug":"一、容器适配器","link":"#一、容器适配器","children":[]},{"level":2,"title":"二、栈","slug":"二、栈","link":"#二、栈","children":[]},{"level":2,"title":"三、队列","slug":"三、队列","link":"#三、队列","children":[]},{"level":2,"title":"四、优先级队列","slug":"四、优先级队列","link":"#四、优先级队列","children":[]},{"level":2,"title":"问题一：stack与queue第二个模板类型参数依赖deque，为什么不依赖vector？而优先级队列为什么底层依赖vector？","slug":"问题一-stack与queue第二个模板类型参数依赖deque-为什么不依赖vector-而优先级队列为什么底层依赖vector","link":"#问题一-stack与queue第二个模板类型参数依赖deque-为什么不依赖vector-而优先级队列为什么底层依赖vector","children":[]},{"level":2,"title":"问题二：优先级队列为什么底层依赖vector？","slug":"问题二-优先级队列为什么底层依赖vector","link":"#问题二-优先级队列为什么底层依赖vector","children":[]}],"git":{},"readingTime":{"minutes":3.46,"words":1039},"filePathRelative":"ccpp/09 标准库STL/容器适配器：栈、队列、优先级队列.md","excerpt":"<h1> 容器适配器：栈、队列、优先级队列</h1>\\n<h2> 一、容器适配器</h2>\\n<p><strong>什么是容器适配器？</strong></p>\\n：<strong>适配器底层没有自己的数据结构，它是另外一个容器的封装，它的方法全部由底层依赖的容器进行实现的；它没有实现自己的迭代器，不能使用迭代器遍历。</strong><p><strong>来看这个例子：我们使用容器适配器来实现一个栈。</strong></p>\\n<div class=\\"language-c++ line-numbers-mode\\" data-ext=\\"c++\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #C678DD\\">template</span><span style=\\"color: #ABB2BF\\">&lt;</span><span style=\\"color: #C678DD\\">typename</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">typename</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Container</span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\">deque&lt;</span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #ABB2BF\\">&gt;&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Stack</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">public:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">push</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #E06C75; font-style: italic\\">val</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #E5C07B\\">con</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">push_back</span><span style=\\"color: #ABB2BF\\">(val);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">pop</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #E5C07B\\">con</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">pop_back</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">top</span><span style=\\"color: #ABB2BF\\">()</span><span style=\\"color: #C678DD\\">const</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">con</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">back</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">private:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tContainer con;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{s as data};
