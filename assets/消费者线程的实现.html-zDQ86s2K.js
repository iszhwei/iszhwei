import{_ as c}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as a,o as B,c as t,d as s,e as n,f as l,w as r,a as o}from"./app-9OmaxHRC.js";const i={},y=o(`<h1 id="消费者线程的实现" tabindex="-1"><a class="header-anchor" href="#消费者线程的实现" aria-hidden="true">#</a> 消费者线程的实现</h1><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//消费者线程函数，从队列中获取连接</span></span>
<span class="line"><span style="color:#E5C07B;">shared_ptr</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Connection</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E5C07B;">ConnectionPool</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">getConnection</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    unique_lock</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">mutex</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">(_queueMutex);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">_connectionQue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">cond</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wait_for</span><span style="color:#ABB2BF;">(lock, std::</span><span style="color:#E5C07B;">chrono</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">milliseconds</span><span style="color:#ABB2BF;">(_connectionTimeout));</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">_connectionQue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#61AFEF;">LOG</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;获取空闲连接超时了...获取连接失败!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    shared_ptr</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">Connection</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sp</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">_connectionQue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">front</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">_connectionQue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">_connectionQue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">cond</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify_all</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),d={href:"https://zhuanlan.zhihu.com/p/662738124",target:"_blank",rel:"noopener noreferrer"},F=s("h2",{id:"重置智能指针析构",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#重置智能指针析构","aria-hidden":"true"},"#"),n(" 重置智能指针析构")],-1),A=o(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">shared_ptr</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Connection</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#61AFEF;">sp</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">_connectionQue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">front</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">                          [</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">](</span><span style="color:#E5C07B;">Connection</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">pconn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                           // 这里是在服务器应用线程中调用的，所以一定要考虑队列的线程安全操作</span></span>
<span class="line"><span style="color:#ABB2BF;">                            </span><span style="color:#E5C07B;">unique_lock</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">mutex</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">_queueMutex</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                            </span><span style="color:#E5C07B;">_connectionQue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(pconn);</span></span>
<span class="line"><span style="color:#ABB2BF;">                          });</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>智能指针第二个参数传入函数对象可以重置析构函数，这里使用lambda表达式，但是要注意<strong>线程安全问题</strong></p><h2 id="wait-for-优化" tabindex="-1"><a class="header-anchor" href="#wait-for-优化" aria-hidden="true">#</a> <code>wait_for()</code> 优化</h2><p><code>wait_for()</code> 返回值是一个类，包含了 <code>timeout</code>和<code>no_timeout</code></p><p><code>wait_for()</code> 可能会出现这种情况：生产者发出信号，该线程<code>no_timeout</code>退出<code>wait_for()</code> ，但是手慢没有抢到队列中的连接<code>_connectionQue.empty()</code></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">_connectionQue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (std::cv_status::timeout </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">cond</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wait_for</span><span style="color:#ABB2BF;">(lock, std::</span><span style="color:#E5C07B;">chrono</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">milliseconds</span><span style="color:#ABB2BF;">(_connectionTimeout)))</span></span>
<span class="line"><span style="color:#ABB2BF;">        {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">_connectionQue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">            {</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#61AFEF;">LOG</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;获取空闲连接超时了...获取连接失败!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="最终版-消费者线程处理函数" tabindex="-1"><a class="header-anchor" href="#最终版-消费者线程处理函数" aria-hidden="true">#</a> 最终版 消费者线程处理函数</h2><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 消费者线程函数，从队列中获取连接</span></span>
<span class="line"><span style="color:#E5C07B;">shared_ptr</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Connection</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E5C07B;">ConnectionPool</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">getConnection</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    unique_lock</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">mutex</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">(_queueMutex);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">_connectionQue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (std::cv_status::timeout </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">cond</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wait_for</span><span style="color:#ABB2BF;">(lock, std::</span><span style="color:#E5C07B;">chrono</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">milliseconds</span><span style="color:#ABB2BF;">(_connectionTimeout)))</span></span>
<span class="line"><span style="color:#ABB2BF;">        {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">_connectionQue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">            {</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#61AFEF;">LOG</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;获取空闲连接超时了...获取连接失败!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    shared_ptr智能指针析构时，会把connection资源直接delete掉，相当于</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    调用connection的析构函数，connection就被close掉了。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    这里需要自定义shared_ptr的释放资源的方式，把connection直接归还到queue当中</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    */</span></span>
<span class="line"><span style="color:#ABB2BF;">    shared_ptr</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">Connection</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sp</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">_connectionQue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">front</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">                              [</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">](</span><span style="color:#E5C07B;">Connection</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">pconn</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                              {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                                  // 这里是在服务器应用线程中调用的，所以一定要考虑队列的线程安全操作</span></span>
<span class="line"><span style="color:#ABB2BF;">                                  </span><span style="color:#E5C07B;">unique_lock</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">mutex</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">_queueMutex</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                                  </span><span style="color:#E5C07B;">_connectionQue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(pconn);</span></span>
<span class="line"><span style="color:#ABB2BF;">                              });</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">_connectionQue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">_connectionQue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">cond</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify_all</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function u(v,m){const e=a("ExternalLinkIcon"),p=a("font");return B(),t("div",null,[y,s("p",null,[s("a",d,[n("再也不被时间束缚：C++ stdchrono时间库全面解析 - 知乎 (zhihu.com)"),l(e)])]),F,s("p",null,[s("mark",null,[s("strong",null,[l(p,{color:"red"},{default:r(()=>[n("shared_ptr智能指针析构时，会把connection资源直接delete掉，相当于调用connection的析构函数，connection就被close掉了。这里需要自定义shared_ptr的释放资源的方式，把connection直接归还到queue当中")]),_:1})])])]),A])}const C=c(i,[["render",u],["__file","消费者线程的实现.html.vue"]]);export{C as default};
