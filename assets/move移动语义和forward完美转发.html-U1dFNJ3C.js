import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as B,c,d as n,e as s,f as l,w as p,a as o}from"./app-rY1SOIco.js";const r="/assets/watermark_type_ZmFuZ3poZW5naGVpdGk_shadow_10_text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDE4NjY4_size_16_color_FFFFFF_t_70-6fjKuTdo.png",i="/assets/0e4c794deae44087b3c844ac2ce046e5-_W1l2yZP.png",y={},F=o(`<h1 id="move移动语义和forward完美转发" tabindex="-1"><a class="header-anchor" href="#move移动语义和forward完美转发" aria-hidden="true">#</a> move移动语义和forward完美转发</h1><p>vector使用右值的拷贝构造函数，可以直接用临时对象拷贝构造，直接将资源移动过来。</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//容器空间适配器</span></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Allocator</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#61AFEF;">allocate</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">size</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//负责内存的开辟</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> (T</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;">malloc</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(T)</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">size);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">deallocate</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//负责内存的释放</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#61AFEF;">free</span><span style="color:#ABB2BF;">(p);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">construct</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//负责对象的构造</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;">(p) </span><span style="color:#61AFEF;">T</span><span style="color:#ABB2BF;">(val);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">destroy</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//负责对象的析构</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">~T</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Alloc</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> Allocator&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;&gt;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">vector</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">vector</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">size</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		_first </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">allocate</span><span style="color:#ABB2BF;">(size);</span><span style="color:#7F848E;font-style:italic;">//只给数组开辟空间，不进行构造</span></span>
<span class="line"><span style="color:#ABB2BF;">		_last </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _first;</span></span>
<span class="line"><span style="color:#ABB2BF;">		_end </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _first </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> size;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">~vector</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		T </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">ptmp </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _first;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (; ptmp </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> _last; </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">ptmp)</span><span style="color:#7F848E;font-style:italic;">//首先释放数组中的有效元素</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">destroy</span><span style="color:#ABB2BF;">(ptmp);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//释放数组</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">deallocate</span><span style="color:#ABB2BF;">(_first);</span></span>
<span class="line"><span style="color:#ABB2BF;">		_first </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _end </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _last </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">vector</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">vector</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//首先申请空间</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> size </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_end</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_first</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//获取src的数组长度</span></span>
<span class="line"><span style="color:#ABB2BF;">		_first </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">allocate</span><span style="color:#ABB2BF;">(size);</span><span style="color:#7F848E;font-style:italic;">//申请空间</span></span>
<span class="line"><span style="color:#ABB2BF;">		_last </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _first;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> len </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_last</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_first</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; i </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> len; i</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//拷贝数据</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">construct</span><span style="color:#ABB2BF;">(_last</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_first</span><span style="color:#ABB2BF;">[i]);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">		_end </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _first </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> size;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">=(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">vector</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//1,判断是否为自赋值</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">src)</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//2，释放原来对象占用的空间</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#56B6C2;">~</span><span style="color:#61AFEF;">vector</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//3，和拷贝构造过程一样</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> size </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_end</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_first</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//获取src的数组长度</span></span>
<span class="line"><span style="color:#ABB2BF;">		_first </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">allocate</span><span style="color:#ABB2BF;">(size);</span><span style="color:#7F848E;font-style:italic;">//申请空间</span></span>
<span class="line"><span style="color:#ABB2BF;">		_last </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _first;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> len </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_last</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_first</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; i </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> len; i</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">construct</span><span style="color:#ABB2BF;">(_last</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_first</span><span style="color:#ABB2BF;">[i]);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">		_end </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _first </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> size;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">push_back</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">full</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#61AFEF;">expand</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">construct</span><span style="color:#ABB2BF;">(_last</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">, val);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">pop_back</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">--</span><span style="color:#ABB2BF;">_last;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">destroy</span><span style="color:#ABB2BF;">(_last);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">back</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#C678DD;">throw</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;the vector is empty&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">(_last </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">full</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> _last </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> _end; }</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> _first </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> _last; }</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">size</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> _last </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> _first; }</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">	T </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">_first;</span><span style="color:#7F848E;font-style:italic;">//指向数组的首元素的地址</span></span>
<span class="line"><span style="color:#ABB2BF;">	T </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">_last;</span><span style="color:#7F848E;font-style:italic;">//指向数据最后一个有效元素的后继</span></span>
<span class="line"><span style="color:#ABB2BF;">	T </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">_end;</span><span style="color:#7F848E;font-style:italic;">//指向数组有效空间最后一个元素的后继</span></span>
<span class="line"><span style="color:#ABB2BF;">	Alloc _allocator;</span><span style="color:#7F848E;font-style:italic;">//空间适配器</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">expand</span><span style="color:#ABB2BF;">()</span><span style="color:#7F848E;font-style:italic;">//二倍扩容</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> len </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _end </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> _first;</span><span style="color:#7F848E;font-style:italic;">//当前的数组大小</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> size </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> len </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//扩容之后的数组的大小</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span></span>
<span class="line"><span style="color:#ABB2BF;">		T </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">ptmp </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">allocate</span><span style="color:#ABB2BF;">(size);</span><span style="color:#7F848E;font-style:italic;">//先申请大小为原来二倍的空间</span></span>
<span class="line"><span style="color:#ABB2BF;">		T </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pcur </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _first;</span><span style="color:#7F848E;font-style:italic;">//</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; i </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> len; i</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">construct</span><span style="color:#ABB2BF;">(ptmp </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> i, </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pcur</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; i </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> len; i</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">destroy</span><span style="color:#ABB2BF;">(_first</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">deallocate</span><span style="color:#ABB2BF;">(_first);</span></span>
<span class="line"><span style="color:#ABB2BF;">		_first </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> ptmp;</span></span>
<span class="line"><span style="color:#ABB2BF;">		_end </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _first </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> size;</span></span>
<span class="line"><span style="color:#ABB2BF;">		_last </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _first </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> len;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这里我们只讲述vector中的push_back方法；</strong></p><p><strong>匹配右值的push_back函数：</strong></p><p>我们在vector类里面增加一个带右值引用的push_back的重载函数，</p><p>在空间配置器里面增加一个带右值引用的construct的方法。</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">push_back</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;&amp;</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">full</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#61AFEF;">expand</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">construct</span><span style="color:#ABB2BF;">(_last</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">, std::</span><span style="color:#61AFEF;">move</span><span style="color:#ABB2BF;">(val));</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">construct</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;&amp;</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//负责对象的构造</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;">(p) </span><span style="color:#61AFEF;">T</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">move</span><span style="color:#ABB2BF;">(val));</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',9),A=n("code",null,"std::move()",-1),d=n("strong",null,"将左值强制转换成右值引用类型",-1),v=n("figure",null,[n("img",{src:i,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),D=o(`<p>我们可以使用<strong>函数模板</strong>来简化我们的代码量。</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Ty</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">push_bask</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Ty</span><span style="color:#C678DD;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">full</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">expand</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   // forward完美转发，能复原val原本类型，即右值引用-》右值；左值引用-》左值</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">_allocate</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">construct</span><span style="color:#ABB2BF;">(_last</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">, std::</span><span style="color:#61AFEF;">forward</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Ty</span><span style="color:#ABB2BF;">&gt;(val));</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Ty</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">construct</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Ty</span><span style="color:#C678DD;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) {</span><span style="color:#7F848E;font-style:italic;">//负责对象的构造</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;">(p) </span><span style="color:#61AFEF;">T</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">forward</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Ty</span><span style="color:#ABB2BF;">&gt;(val));</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	CMyString str1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;aaa&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	vector</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">CMyString</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> vec;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;----------------------------------&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">vec</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push_back</span><span style="color:#ABB2BF;">(str1);</span><span style="color:#7F848E;font-style:italic;">	//CMyString&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">vec</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push_back</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">CMyString</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;nnn&quot;</span><span style="color:#ABB2BF;">));</span><span style="color:#7F848E;font-style:italic;">	//CMyString&amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;----------------------------------&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>std::forward&lt;Ty&gt;(val)</code>自动识别val是左值还是右值并返回对应类型</strong></p>`,3),C=n("u",null,"参数推演+引用折叠",-1),m=o(`<p><mark>引用折叠:</mark><mark>右值引用+右值引用=右值引用</mark></p><p><mark>右值引用+左值引用=左值引用</mark></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">函数模板参数推演Ty是左值CMyString</span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> 还是 CMyString</span><span style="color:#56B6C2;">&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">CMyString</span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;">CMyString</span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">CMyString</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> CMyString</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function u(b,E){const a=t("font");return B(),c("div",null,[F,n("p",null,[s("上面用到了方法"),A,s("移动语义。。。由于我们知道，"),l(a,{color:"red"},{default:p(()=>[s("右值引用本身是一个左值")]),_:1}),s("(直接使用回调用左值的construct函数，而不是右值的)，所以我们在传参的时候，希望使用它的本身的右值语义，我们这里使用std::move()相当于"),d,s("。move()源码如下")]),v,n("p",null,[s("但是上面的方法不免显得有点"),l(a,{color:"red"},{default:p(()=>[s("繁琐")]),_:1}),s("了，因为一旦我们要使用val的右值引用就必须给它"),l(a,{color:"red"},{default:p(()=>[s("类型转化")]),_:1}),s("。")]),D,l(a,{color:"green"},{default:p(()=>[s("**根据函数模板"),C,s("我们可以使用这个方法很好的解决右值引用本身是左值的问题。**")]),_:1}),m])}const g=e(y,[["render",u],["__file","move移动语义和forward完美转发.html.vue"]]);export{g as default};
