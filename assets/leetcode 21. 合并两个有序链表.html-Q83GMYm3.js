const s=JSON.parse('{"key":"v-d977ced4","path":"/algo/02%20%E9%93%BE%E8%A1%A8/leetcode%2021.%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8.html","title":"leetcode 21. 合并两个有序链表","lang":"zh-CN","frontmatter":{"title":"leetcode 21. 合并两个有序链表","icon":"code","order":3,"category":["数据结构与算法"],"tag":["链表","虚拟头结点","双指针"],"description":"21. 合并两个有序链表 **题目表述：**将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 注意：读清题意，不是用新的链表 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) { ListNode *dummyHead = new ListNode(-1); ListNode *res = dummyHead; ListNode *p1 = list1; ListNode *p2 = list2; while(p1 != nullptr &amp;&amp; p2 != nullptr) { // ListNode* newNode = nullptr; if(p1-&gt;val &lt; p2-&gt;val) { //newNode = new ListNode(p1-&gt;val,nullptr); res-&gt;next = p1; p1 = p1-&gt;next;\\t//记得让p1往前走一位 } else { // newNode = new ListNode(p2-&gt;val, nullptr); res-&gt;next = p2; p2 = p2-&gt;next; } res = res-&gt;next;//让新链表的指针往前走一位 // res-&gt;next = newNode; // res = res-&gt;next; } if(p1 != nullptr) {\\t//if判断哪个还有剩，不需要while遍历后面的所有的结点 // ListNode* newNode = new ListNode(p1-&gt;val); // res-&gt;next = newNode; // res = res-&gt;next; res-&gt;next = p1; } if(p2 != nullptr) { // ListNode* newNode = new ListNode(p2-&gt;val); // res-&gt;next = newNode; // res = res-&gt;next; res-&gt;next = p2; } ListNode* head = dummyHead-&gt;next; delete dummyHead; dummyHead = nullptr; return head; } };","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/algo/02%20%E9%93%BE%E8%A1%A8/leetcode%2021.%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"leetcode 21. 合并两个有序链表"}],["meta",{"property":"og:description","content":"21. 合并两个有序链表 **题目表述：**将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 注意：读清题意，不是用新的链表 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) { ListNode *dummyHead = new ListNode(-1); ListNode *res = dummyHead; ListNode *p1 = list1; ListNode *p2 = list2; while(p1 != nullptr &amp;&amp; p2 != nullptr) { // ListNode* newNode = nullptr; if(p1-&gt;val &lt; p2-&gt;val) { //newNode = new ListNode(p1-&gt;val,nullptr); res-&gt;next = p1; p1 = p1-&gt;next;\\t//记得让p1往前走一位 } else { // newNode = new ListNode(p2-&gt;val, nullptr); res-&gt;next = p2; p2 = p2-&gt;next; } res = res-&gt;next;//让新链表的指针往前走一位 // res-&gt;next = newNode; // res = res-&gt;next; } if(p1 != nullptr) {\\t//if判断哪个还有剩，不需要while遍历后面的所有的结点 // ListNode* newNode = new ListNode(p1-&gt;val); // res-&gt;next = newNode; // res = res-&gt;next; res-&gt;next = p1; } if(p2 != nullptr) { // ListNode* newNode = new ListNode(p2-&gt;val); // res-&gt;next = newNode; // res = res-&gt;next; res-&gt;next = p2; } ListNode* head = dummyHead-&gt;next; delete dummyHead; dummyHead = nullptr; return head; } };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"链表"}],["meta",{"property":"article:tag","content":"虚拟头结点"}],["meta",{"property":"article:tag","content":"双指针"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"leetcode 21. 合并两个有序链表\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":1.21,"words":362},"filePathRelative":"algo/02 链表/leetcode 21. 合并两个有序链表.md","excerpt":"<p><a href=\\"https://leetcode.cn/problems/merge-two-sorted-lists/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">21. 合并两个有序链表</a></p>\\n<p>**题目表述：**将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。<u>新链表是通过拼接给定的两个链表的所有节点组成的。</u></p>\\n<blockquote>\\n<p>注意：读清题意，不是用新的链表</p>\\n</blockquote>\\n<!--more-->\\n<div class=\\"language-c++ line-numbers-mode\\" data-ext=\\"c++\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> * Definition for singly-linked list.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> * struct ListNode {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> *     int val;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> *     ListNode *next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> *     ListNode() : val(0), next(nullptr) {}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> *     ListNode(int x) : val(x), next(nullptr) {}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> *     ListNode(int x, ListNode *next) : val(x), next(next) {}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> * };</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Solution</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">public:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">ListNode</span><span style=\\"color: #C678DD\\">*</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">mergeTwoLists</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">ListNode</span><span style=\\"color: #C678DD\\">*</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">list1</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E5C07B\\">ListNode</span><span style=\\"color: #C678DD\\">*</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">list2</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        ListNode </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">dummyHead </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">new</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">ListNode</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        ListNode </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">res </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> dummyHead;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        ListNode </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">p1 </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> list1;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        ListNode </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">p2 </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> list2;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">while</span><span style=\\"color: #ABB2BF\\">(p1 </span><span style=\\"color: #C678DD\\">!=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">nullptr</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&amp;&amp;</span><span style=\\"color: #ABB2BF\\"> p2 </span><span style=\\"color: #C678DD\\">!=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">nullptr</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">            // ListNode* newNode = nullptr;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">p1</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">val</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">p2</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">val</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">                //newNode = new ListNode(p1-&gt;val,nullptr);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">                </span><span style=\\"color: #E5C07B\\">res</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">next</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> p1;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">                p1 </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">p1</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">next</span><span style=\\"color: #ABB2BF\\">;</span><span style=\\"color: #7F848E; font-style: italic\\">\\t//记得让p1往前走一位</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #C678DD\\">else</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">                // newNode = new ListNode(p2-&gt;val, nullptr);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">                </span><span style=\\"color: #E5C07B\\">res</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">next</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> p2;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">                p2 </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">p2</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">next</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            res </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">res</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">next</span><span style=\\"color: #ABB2BF\\">;</span><span style=\\"color: #7F848E; font-style: italic\\">//让新链表的指针往前走一位</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">            // res-&gt;next = newNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">            // res = res-&gt;next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        } </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\">(p1 </span><span style=\\"color: #C678DD\\">!=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">nullptr</span><span style=\\"color: #ABB2BF\\">) {</span><span style=\\"color: #7F848E; font-style: italic\\">\\t//if判断哪个还有剩，不需要while遍历后面的所有的结点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">            // ListNode* newNode = new ListNode(p1-&gt;val);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">            // res-&gt;next = newNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">            // res = res-&gt;next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #E5C07B\\">res</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">next</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> p1;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\">(p2 </span><span style=\\"color: #C678DD\\">!=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">nullptr</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">            // ListNode* newNode = new ListNode(p2-&gt;val);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">            // res-&gt;next = newNode;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">            // res = res-&gt;next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #E5C07B\\">res</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">next</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> p2;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        ListNode</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\"> head </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">dummyHead</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">next</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">delete</span><span style=\\"color: #ABB2BF\\"> dummyHead;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        dummyHead </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">nullptr</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{s as data};
