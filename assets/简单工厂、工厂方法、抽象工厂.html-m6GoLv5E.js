const t=JSON.parse('{"key":"v-44042d12","path":"/ccpp/10%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E3%80%81%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E3%80%81%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82.html","title":"简单工厂、工厂方法、抽象工厂","lang":"zh-CN","frontmatter":{"title":"简单工厂、工厂方法、抽象工厂","icon":"file","order":3,"headerDepth":4,"category":["c/c++"],"tag":["设计模式"],"description":"简单工厂、工厂方法、抽象工厂 属于创建型设计模式 简单工厂（Simple Factory） 简单工厂（Simple Factory） 不属于标准的OOP设计模式中的一项，工厂方法和抽象工厂是属于标准的23种设计模式的； 在编写大型C++软件的时候，代码里面会出现，每次创建对象的时候，都需要通过new 类名称的方式来生成对象，这样一来，用户，暂且不管记不记得住，这样的设计使得代码很难维护，，不符合我们软件设计的思想，Simple Factory就是在这样的需求下诞生的。 工厂方法主要是封装了对象的创建！","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/10%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E3%80%81%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E3%80%81%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"简单工厂、工厂方法、抽象工厂"}],["meta",{"property":"og:description","content":"简单工厂、工厂方法、抽象工厂 属于创建型设计模式 简单工厂（Simple Factory） 简单工厂（Simple Factory） 不属于标准的OOP设计模式中的一项，工厂方法和抽象工厂是属于标准的23种设计模式的； 在编写大型C++软件的时候，代码里面会出现，每次创建对象的时候，都需要通过new 类名称的方式来生成对象，这样一来，用户，暂且不管记不记得住，这样的设计使得代码很难维护，，不符合我们软件设计的思想，Simple Factory就是在这样的需求下诞生的。 工厂方法主要是封装了对象的创建！"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"设计模式"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"简单工厂、工厂方法、抽象工厂\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[{"level":2,"title":"简单工厂（Simple Factory）","slug":"简单工厂-simple-factory","link":"#简单工厂-simple-factory","children":[{"level":3,"title":"1.1、采用new的方式创建对象","slug":"_1-1、采用new的方式创建对象","link":"#_1-1、采用new的方式创建对象","children":[]},{"level":3,"title":"1.2、采用简单工厂","slug":"_1-2、采用简单工厂","link":"#_1-2、采用简单工厂","children":[]}]},{"level":2,"title":"2、工厂方法（Factory Method）","slug":"_2、工厂方法-factory-method","link":"#_2、工厂方法-factory-method","children":[{"level":3,"title":"2.1、类图","slug":"_2-1、类图","link":"#_2-1、类图","children":[]}]},{"level":2,"title":"抽象工厂（Abstract Factory）","slug":"抽象工厂-abstract-factory","link":"#抽象工厂-abstract-factory","children":[]},{"level":2,"title":"简单工厂，工厂方法，抽象工厂对比","slug":"简单工厂-工厂方法-抽象工厂对比","link":"#简单工厂-工厂方法-抽象工厂对比","children":[]}],"git":{},"readingTime":{"minutes":6.47,"words":1942},"filePathRelative":"ccpp/10 设计模式/简单工厂、工厂方法、抽象工厂.md","excerpt":"<h1> 简单工厂、工厂方法、抽象工厂</h1>\\n<p>属于<strong>创建型设计模式</strong></p>\\n<h2> 简单工厂（Simple Factory）</h2>\\n<ul>\\n<li>\\n<p>简单工厂（Simple Factory） 不属于标准的OOP设计模式中的一项，工厂方法和抽象工厂是属于标准的23种设计模式的；</p>\\n</li>\\n<li>\\n<p>在编写大型C++软件的时候，代码里面会出现，<strong>每次创建对象的时候，都需要通过new 类名称的方式来生成对象，这样一来，用户，暂且不管记不记得住，这样的设计使得代码很难维护，</strong>，不符合我们软件设计的思想，Simple Factory就是在这样的需求下诞生的。</p>\\n</li>\\n<li>\\n<p><strong>工厂方法主要是封装了对象的创建！</strong></p>\\n</li>\\n</ul>","autoDesc":true}');export{t as data};
