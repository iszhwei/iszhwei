import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as l,a}from"./app-2pke9_a8.js";const e="/assets/watermark_type_ZHJvaWRzYW5zZmFsbGJhY2s_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-3thGU0jE.png",p={},o=a('<h1 id="分配内存池-s-refill源码" tabindex="-1"><a class="header-anchor" href="#分配内存池-s-refill源码" aria-hidden="true">#</a> 分配内存池_S_refill源码</h1><p>作用：</p><ol><li><strong>根据<code>__n</code>，在<code>_S_free_list</code>中对应位置的元素指向一个<code>__nobjs</code>（默认为20）个<code>__n</code>字节chunk块的内存池</strong></li><li><strong>并且把第一个<code>__chunk</code>块分配出去，并填写剩下所有<code>__chunk</code>块的next域。</strong></li></ol><p>只有从备用内存中分配出来，并挂在<code>_S_free_list</code> 下的，才会填写chunk块头的<code>_M_free_list_link</code></p><figure><img src="'+e+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">__threads</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">__inst</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">void*</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">__default_alloc_template</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">__threads</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">__inst</span><span style="color:#ABB2BF;">&gt;::</span><span style="color:#61AFEF;">_S_refill</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">__n</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> __nobjs </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // 局部变量，内存池中开辟__chunk 块的数量</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 申请__nobjs个__n字节chunk的内存池，__nobjs按引用传入_S_chunk_alloc，__nobjs可能会在_S_chunk_alloc里被修改</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 如果_S_start_free和_S_end_free之间的备用内存不够分配20个__n字节的chunk时，会修改__nobjs</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">char</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> __chunk </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">_S_chunk_alloc</span><span style="color:#ABB2BF;">(__n, __nobjs); </span></span>
<span class="line"><span style="color:#ABB2BF;">    _Obj</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> __STL_VOLATILE</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> __my_free_list;</span><span style="color:#7F848E;font-style:italic;">// 二级指针，遍历_S_free_list数组</span></span>
<span class="line"><span style="color:#ABB2BF;">    _Obj</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> __result;</span></span>
<span class="line"><span style="color:#ABB2BF;">    _Obj</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> __current_obj;</span></span>
<span class="line"><span style="color:#ABB2BF;">    _Obj</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> __next_obj;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> __i;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 当内存池最多只能包含1个__n字节chunk块的时候，直接返回，不需要进入for循环再填写next域</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> __nobjs) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">(__chunk);       </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // _S_freelist_index(__n)返回的是分配的__n字节在_S_free_list的哪个元素中分配</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // __my_free_list 指向分配__n字节的元素</span></span>
<span class="line"><span style="color:#ABB2BF;">    __my_free_list </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _S_free_list </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">_S_freelist_index</span><span style="color:#ABB2BF;">(__n);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* Build free list in chunk */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 指向待分配出去的内存块</span></span>
<span class="line"><span style="color:#ABB2BF;">      __result </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (_Obj</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)__chunk; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // __chunk 是char*，实际上+__n就是越过了一个__chunk块，指向了第二个__chunk 块的起始地址</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // __next_obj 和*__my_free_list 都指向第二个块</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">__my_free_list </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> __next_obj </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (_Obj</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)(__chunk </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> __n);</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // i从1开始，表示__current_obj 一开始就指向第二个__chunk块</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 整个for循环做的就是把内存是填写剩下所有__chunk块的next域 </span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (__i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">; ; __i</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        __current_obj </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> __next_obj;</span></span>
<span class="line"><span style="color:#ABB2BF;">        __next_obj </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (_Obj</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)((</span><span style="color:#C678DD;">char</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)__next_obj </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> __n);</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //因为每循环依次__i都加1，最后一个下标__i为__nobjs-1</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (__nobjs </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> __i) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        	// next域填写完成，最后一个__chunk块的next域为0地址</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">__current_obj </span><span style="color:#ABB2BF;">-&gt; </span><span style="color:#E06C75;">_M_free_list_link</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">__current_obj </span><span style="color:#ABB2BF;">-&gt; </span><span style="color:#E06C75;">_M_free_list_link</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> __next_obj;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">(__result);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),c=[o];function t(r,i){return n(),l("div",null,c)}const y=s(p,[["render",t],["__file","分配内存池_S_refill源码.html.vue"]]);export{y as default};
