import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as s,a}from"./app-2pke9_a8.js";const n="/assets/a08e5c6261534d18bc26e4b96e64a64a-Gb-C6nae.png",r="/assets/1ad70d7c0366408997bb4cb91f3ea4b4-ixHqVuQX.png",e="/assets/1016de13f7b148a296073ba4b32660d6-IsdwYlzd.png",o="/assets/2a9dc5557f014f148174a5457d4a5f4b-iW5xIF-h.png",g={},l=a('<h1 id="数据类型实践案例" tabindex="-1"><a class="header-anchor" href="#数据类型实践案例" aria-hidden="true">#</a> 数据类型实践案例</h1><h2 id="业务场景一-计数器-string类型" tabindex="-1"><a class="header-anchor" href="#业务场景一-计数器-string类型" aria-hidden="true">#</a> 业务场景一：计数器（string类型）</h2><p>人工智能领域的语义识别与自动对话将是未来服务业机器人应答呼叫体系中的重要技术，百度自研用户评价语义识别服务，免费开放给企业试用，同时训练自己的模型。现对试用用户的使用行为进行限速，<strong>限制每个用户每分钟最多发起10次调用</strong></p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>解决方案</strong></p><ul><li>设计计数器，记录调用次数，用于控制业务执行次数。<strong>以用户id作为key，使用此时作为value</strong></li><li>在<strong>调用前获取次数，判断是否超过限定次数</strong>，不超过次数的情况下，每次调用计数+1，业务调用失败，计数-1</li><li>设定10min为一个周期，<strong>一个周期结束后，自动清空周期内使用次数</strong></li></ul><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>改进解决方案</strong></p><p>其实就是利用抛出异常的方式提示到达了使用次数</p><ul><li>取消最大值的判定，<strong>利用incr操作超过最大值抛出异常的形式替代每次判断是否大于最大值</strong></li><li>判断是否为nil，如果是，设置为<strong>Max-次数</strong>如果不是，计数+1业务调用失败，计数-1</li><li>遇到异常即+操作超过上限，视为使用达到上限</li></ul><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="业务场景二-微信消息显示顺序-list类型" tabindex="-1"><a class="header-anchor" href="#业务场景二-微信消息显示顺序-list类型" aria-hidden="true">#</a> 业务场景二：微信消息显示顺序（list类型）</h2><p>使用微信的过程中，当微信接收消息后，会默认将最近接收的消息置顶，当多个好友及关注的订阅号同时发送消息时，该排序会不停的进行交替，同时还可以将重要的会话设置为置顶。一旦用户离线后，再次打开微信时，消息该按照什么样的顺序显示？</p><p><strong>解决方案</strong> 由于应该是新消息放在最前面显示，即<strong>晚到的消息先显示，需要利用list类型的栈特性</strong>。<u>给置顶消息和普通消息分别创建一个list，按照消息类别存入相应的list，如果list里存在某用户的消息，该用户的消息再次到来时，需要删除list里对应的消息，然后再添加该用户（此处只针对顺序问题，消息内容本身也有相应的解决办法）</u></p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>set存放置顶的朋友</strong>，<u>用于区分消息类型，便于存放到对应的list</u></p>',16),c=[l];function d(p,f){return t(),s("div",null,c)}const h=i(g,[["render",d],["__file","数据类型实践案例.html.vue"]]);export{h as default};
