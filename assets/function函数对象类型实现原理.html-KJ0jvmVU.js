import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as l,a}from"./app-m9pC5KT-.js";const p={},o=a(`<h1 id="function函数对象类型实现原理" tabindex="-1"><a class="header-anchor" href="#function函数对象类型实现原理" aria-hidden="true">#</a> function函数对象类型实现原理</h1><p>通过两个例子：一个是持有<strong>普通函数</strong>，一个是持有<strong>类成员方法</strong>；查看类的成员方法到底是什么。</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;typeinfo&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;string&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;functional&gt;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">function函数对象类型的实现原理</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">hello</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">) { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> str </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) { </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> a </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> b; }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">///</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Fty</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">myfunction</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#if</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//模板的部分偏特化</span></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">R</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">A1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">myfunction</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">R</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">A1</span><span style="color:#ABB2BF;">)&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">PFUNC</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">R</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)(A1);</span><span style="color:#7F848E;font-style:italic;">	//需要接受外部传进来的函数类型，使用函数指针接收</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">myfunction</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">PFUNC</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">pfunc</span><span style="color:#ABB2BF;">) :</span><span style="color:#61AFEF;">_pfunc</span><span style="color:#ABB2BF;">(pfunc) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">R</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">()(</span><span style="color:#E5C07B;">A1</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">_pfunc</span><span style="color:#ABB2BF;">(arg);</span><span style="color:#7F848E;font-style:italic;">//hello(arg)</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">private:</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">	PFUNC _pfunc;</span><span style="color:#7F848E;font-style:italic;">//用于保存函数类型</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//模板的部分偏特化</span></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">R</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">A1</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">A2</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">myfunction</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">R</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">A1</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">A2</span><span style="color:#ABB2BF;">)&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">PFUNC</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">R</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)(A1, A2);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">myfunction</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">PFUNC</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">pfunc</span><span style="color:#ABB2BF;">) :</span><span style="color:#61AFEF;">_pfunc</span><span style="color:#ABB2BF;">(pfunc) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">R</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">()(</span><span style="color:#E5C07B;">A1</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">arg1</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">A2</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">arg2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">_pfunc</span><span style="color:#ABB2BF;">(arg1, arg2);</span><span style="color:#7F848E;font-style:italic;">//hello(arg)</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">	PFUNC _pfunc;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//可变参模板</span></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">R</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;">... </span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#7F848E;font-style:italic;">//一组可变参数个数</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">myfunction</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">R</span><span style="color:#ABB2BF;">(A...)&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">PFUNC</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">R</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)(A...);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">myfunction</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">PFUNC</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">pfunc</span><span style="color:#ABB2BF;">) :</span><span style="color:#61AFEF;">_pfunc</span><span style="color:#ABB2BF;">(pfunc) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">R</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">()(</span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">... </span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">_pfunc</span><span style="color:#ABB2BF;">(arg...);</span><span style="color:#7F848E;font-style:italic;">//hello(arg) 表示一组形参变量</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">	PFUNC _pfunc;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	function</span><span style="color:#C678DD;">&lt;void</span><span style="color:#ABB2BF;">(string)</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">func1</span><span style="color:#ABB2BF;">(hello);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">func1</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello world!&quot;</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//func1.operator()(&quot;hello world!&quot;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	myfunction</span><span style="color:#C678DD;">&lt;int</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">func2</span><span style="color:#ABB2BF;">(sum);</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">func2</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>用函数指针保存函数类型</li><li>由于反返回类型只有一个，函数参数的类型有多种可能或者不确定，如果每个都写出来太麻烦，可以使用可变模板参数代替</li></ul>`,4),e=[o];function c(t,B){return n(),l("div",null,e)}const y=s(p,[["render",c],["__file","function函数对象类型实现原理.html.vue"]]);export{y as default};
