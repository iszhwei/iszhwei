import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as B,c,d as s,e as n,f as a,w as p,a as o}from"./app-mYdPlPhZ.js";const r="/assets/64f4d73811e34bde80c48faefa6311b0-17139652385173-pbJglNLO.png",i="/assets/4dd3618b5c0b4cfe8edf62a8e54bef1e-H0uWaKDJ.png",y="/assets/b4dd7f5ac4084beab32a76eb5018c09c-nBZTDOAJ.png",F="/assets/e388a52521fe41698c9025fe75c31ae0-cn4EQcbR.png",d="/assets/4cc07fd176794ff78678dc7a56a4d1b8-UMNtz3f-.png",A={},u=s("h1",{id:"带引用计数的智能指针",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#带引用计数的智能指针","aria-hidden":"true"},"#"),n(" 带引用计数的智能指针")],-1),v=s("p",null,"shared_ptr和weak_ptr；",-1),D=s("h2",{id:"带引用计数的智能指针是怎么解决多个指针持有一个资源的",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#带引用计数的智能指针是怎么解决多个指针持有一个资源的","aria-hidden":"true"},"#"),n(" 带引用计数的智能指针是怎么解决多个指针持有一个资源的？")],-1),C=s("li",null,[n("当1个智能指针"),s("u",null,"引用这个资源的时候，这个资源相应的引用计数就加1，当这个智能指针出作用域，不再使用这个资源的时候，这个资源的引用计数就减1。")],-1),m=s("li",null,"当引用计数减1不为0的时候，这个智能指针不使用这个资源了，但是还有其他智能指针在使用这个资源，这个智能指针不能析构这个资源，只能直接走人。",-1),b=s("li",null,[n("当引用计数减1"),s("u",null,"为0的时候，说明当前智能指针是最后使用这个资源的智能指针，所以它要负责这个资源的释放"),n("。（完美的解决了智能指针的浅拷贝—就是多个智能指针多次释放同一个资源）")],-1),E=o(`<h2 id="带引用计数的智能指针的实现" tabindex="-1"><a class="header-anchor" href="#带引用计数的智能指针的实现" aria-hidden="true">#</a> 带引用计数的智能指针的实现</h2><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;memory&gt;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//对资源进行引用计数的类</span></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">RefCnt</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">RefCnt</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">ptr</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		:</span><span style="color:#61AFEF;">mptr</span><span style="color:#ABB2BF;">(ptr)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (mptr </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			mcount </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">addRef</span><span style="color:#ABB2BF;">() { mcount</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">; }</span><span style="color:#7F848E;font-style:italic;">		//增加资源的引用计数</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">defRef</span><span style="color:#ABB2BF;">() { </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">--</span><span style="color:#ABB2BF;">mcount; }</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">() { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> mcount </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">	T</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> mptr;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //int mcount;</span></span>
<span class="line"><span style="color:#ABB2BF;">	atomic_int mcount;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CSmartPtr</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">CSmartPtr</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		:</span><span style="color:#61AFEF;">ptr</span><span style="color:#ABB2BF;">(p)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		mpRefCnt </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">RefCnt</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;(ptr);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">~CSmartPtr</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">mpRefCnt</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">defRef</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> ptr;</span></span>
<span class="line"><span style="color:#ABB2BF;">			ptr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">*()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">ptr;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">-&gt;()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> ptr;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Count</span><span style="color:#ABB2BF;">() { </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">mpRefCnt</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">(); }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">CSmartPtr</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CSmartPtr</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		:</span><span style="color:#61AFEF;">ptr</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ptr</span><span style="color:#ABB2BF;">), </span><span style="color:#61AFEF;">mpRefCnt</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mpRefCnt</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (ptr </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#E5C07B;">mpRefCnt</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">addRef</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">CSmartPtr</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">=(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CSmartPtr</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">src)</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //检查自己原先指向的资源，因为自己要改变指向了，如果执行delRef后，引用计数为0的话，就释放资源；</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">mpRefCnt</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">defRef</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> ptr;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">		ptr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		mpRefCnt </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mpRefCnt</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">mpRefCnt</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">addRef</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">	T</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> ptr;</span><span style="color:#7F848E;font-style:italic;">		//指向资源的指针</span></span>
<span class="line"><span style="color:#ABB2BF;">	RefCnt</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">T</span><span style="color:#C678DD;">&gt;</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> mpRefCnt;</span><span style="color:#7F848E;font-style:italic;">	//指向该资源引用计数的类</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	CSmartPtr</span><span style="color:#C678DD;">&lt;int&gt;</span><span style="color:#61AFEF;">p</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">	CSmartPtr</span><span style="color:#C678DD;">&lt;int&gt;</span><span style="color:#61AFEF;">q</span><span style="color:#ABB2BF;">(p);</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">q </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Count</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">operator</span><span style="color:#56B6C2;">-</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>上面的CSmartPtr和标准的shared_ptr的区别是：</strong></p>`,3),_=s("p",null,[s("mark",null,[s("strong",null,"库中的shared_ptr和weak_ptr都是线程安全的，可以直接使用在多线程的环境下。")])],-1),f=s("h2",{id:"shared-ptr的交叉引用问题",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#shared-ptr的交叉引用问题","aria-hidden":"true"},"#"),n(" shared_ptr的交叉引用问题")],-1),g=s("figure",null,[s("img",{src:r,alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1),h=o('<figure><img src="'+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>强智能指针循环引用（交叉引用）是什么问题？什么结果？怎么解决？</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">B</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">A</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">A</span><span style="color:#ABB2BF;">() { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;A()构造&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">~A</span><span style="color:#ABB2BF;">() { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;~A()析构&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#ABB2BF;">	shared_ptr</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">B</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> ptr2;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">B</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">B</span><span style="color:#ABB2BF;">() { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;B()构造&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">~B</span><span style="color:#ABB2BF;">() { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;~B()析构&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#ABB2BF;">	shared_ptr</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">A</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> ptr1;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	shared_ptr</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">A</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">pa</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">A</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">	shared_ptr</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">B</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">pb</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">B</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">pa</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use_count</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span><span style="color:#7F848E;font-style:italic;">//1</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">pb</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use_count</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span><span style="color:#7F848E;font-style:italic;">//1</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">pa</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">ptr2</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> pb;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">pb</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">ptr1</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> pa;</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">pa</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use_count</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span><span style="color:#7F848E;font-style:italic;">//2</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">pb</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use_count</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span><span style="color:#7F848E;font-style:italic;">//2</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),q=s("li",null,[s("strong",null,[n("出main函数作用域，"),s("u",null,"pb先析构（将B资源的引用计数从2减为1），再析构pa（将A资源的引用计数从2减为1），此后，AB对象的引用计数均为1，对象不能析构"),n("；")])],-1),k=s("figure",null,[s("img",{src:y,alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1),x=o(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">B</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">A</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">A</span><span style="color:#ABB2BF;">() { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;A()构造&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">~A</span><span style="color:#ABB2BF;">() { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;~A()析构&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#ABB2BF;">	weak_ptr</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">B</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> ptr2;</span><span style="color:#7F848E;font-style:italic;">	//引用对象的地方使用 弱智能指针</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">B</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">B</span><span style="color:#ABB2BF;">() { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;B()构造&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">~B</span><span style="color:#ABB2BF;">() { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;~B()析构&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#ABB2BF;">	weak_ptr</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">A</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> ptr1;</span><span style="color:#7F848E;font-style:italic;">	//引用对象的地方使用 弱智能指针</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	shared_ptr</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">A</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">pa</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">A</span><span style="color:#ABB2BF;">());</span><span style="color:#7F848E;font-style:italic;">	//定义对象 使用强智能指针</span></span>
<span class="line"><span style="color:#ABB2BF;">	shared_ptr</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">B</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">pb</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">B</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">pa</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">ptr2</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> pb;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">pb</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">ptr1</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> pa;</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">pa</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use_count</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span><span style="color:#7F848E;font-style:italic;">//1</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">pb</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use_count</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span><span style="color:#7F848E;font-style:italic;">//1</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),w=o('<figure><img src="'+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>可以正常释放资源！</strong></p><h2 id="weak-ptr怎么使用资源" tabindex="-1"><a class="header-anchor" href="#weak-ptr怎么使用资源" aria-hidden="true">#</a> weak_ptr怎么使用资源</h2><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">B</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">A</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">A</span><span style="color:#ABB2BF;">() { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;A()构造&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">~A</span><span style="color:#ABB2BF;">() { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;~A()析构&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#ABB2BF;">	weak_ptr</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">B</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> ptr2;	</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">testA</span><span style="color:#ABB2BF;">() { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;非常好的方法&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">B</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">B</span><span style="color:#ABB2BF;">() { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;B()构造&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">~B</span><span style="color:#ABB2BF;">() { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;~B()析构&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">func</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //_ptr1-&gt;testA();	//弱智能指针是无法调用A类的testA函数的；</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">	weak_ptr</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">A</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> ptr1;</span><span style="color:#7F848E;font-style:italic;">	//引用对象的地方使用 弱智能指针</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),R=s("li",null,"弱智能指针只会观察资源，不能使用资源；",-1),T=s("code",null,"\\*",-1),S=s("code",null,"->",-1),P=s("p",null,[s("strong",null,"怎么解决弱指针指针不能调用函数的问题？")],-1),z=o(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">B</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">A</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">A</span><span style="color:#ABB2BF;">() { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;A()构造&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">~A</span><span style="color:#ABB2BF;">() { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;~A()析构&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#ABB2BF;">	weak_ptr</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">B</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;">ptr2;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">testA</span><span style="color:#ABB2BF;">() { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;非常好的方法&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">B</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">B</span><span style="color:#ABB2BF;">() { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;B()构造&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">~B</span><span style="color:#ABB2BF;">() { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;~B()析构&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">func</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		shared_ptr</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">A</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;">ps </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ptr1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (ps </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">	//有可能提升成功，也有可能失败，需要判断</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#E5C07B;">ps</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">testA</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ps</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use_count</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span><span style="color:#7F848E;font-style:italic;">//智能指针ps提升成功，引用技术加1到2</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//智能指针ps出函数作用域自动析构，引用计数从2减到1</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	weak_ptr</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">A</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;">ptr1;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	shared_ptr</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">A</span><span style="color:#C678DD;">&gt;</span><span style="color:#61AFEF;">ptra</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">A</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">	shared_ptr</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">B</span><span style="color:#C678DD;">&gt;</span><span style="color:#61AFEF;">ptrb</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">B</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">ptra</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">ptr2</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> ptrb;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">ptrb</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">ptr1</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> ptra;</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ptra</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use_count</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span><span style="color:#7F848E;font-style:italic;">//1</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ptra</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use_count</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span><span style="color:#7F848E;font-style:italic;">//1</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">ptrb</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">func</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ptra</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use_count</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span><span style="color:#7F848E;font-style:italic;">//1</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ptra</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use_count</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span><span style="color:#7F848E;font-style:italic;">//1</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">ptrb</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">func</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),N=s("li",null,[s("strong",null,"弱智能指针需要使用对象，需要从一个观察者提升为强智能指针，在提升的过程中有可能提升失败，资源已经释放了；有可能提升成功，资源还没释放。")],-1);function V(J,O){const l=t("font");return B(),c("div",null,[u,v,s("p",null,[s("strong",null,[n("带引用计数的好处："),a(l,{color:"green"},{default:p(()=>[n("多个智能指针可以管理同一个资源")]),_:1}),n("。")])]),D,s("ul",null,[s("li",null,[s("strong",null,[n("带引用计数："),a(l,{color:"green"},{default:p(()=>[n(" 给每一个对象的资源，匹配一个引用计数")]),_:1})])]),C,m,b]),E,s("ol",null,[s("li",null,[a(l,{color:"red"},{default:p(()=>[n("引用计数的加减无法在多线程的情况下保证安全")]),_:1}),n("；")]),s("li",null,[n("shared_ptr将m_count定义成"),a(l,{color:"red"},{default:p(()=>[n("atomic_int类型，原子整形类，通过CAS来保证++和–的线程安全的。")]),_:1})])]),_,f,g,s("p",null,[s("strong",null,[a(l,{color:"green"},{default:p(()=>[n("弱智能指针")]),_:1}),n("观察"),a(l,{color:"green"},{default:p(()=>[n("强智能指针")]),_:1}),n("，强智能指针观察"),a(l,{color:"green"},{default:p(()=>[n("资源（内存）")]),_:1})])]),h,s("ul",null,[q,s("li",null,[s("strong",null,[n("产生的问题：new出来的资源无法释放，造成"),a(l,{color:"red"},{default:p(()=>[n("资源泄漏")]),_:1}),n("问题。")])])]),k,s("p",null,[s("strong",null,[n("解决办法："),a(l,{color:"green"},{default:p(()=>[n("定义对象的时候用强智能指针，引用对象的时候用弱智能指针")]),_:1})])]),x,s("p",null,[s("strong",null,[a(l,{color:"red"},{default:p(()=>[n("弱智能指针只是观察作用，查看对象是否活着，不会造成引用计数改变")]),_:1}),n("。")])]),w,s("ul",null,[R,s("li",null,[s("strong",null,[a(l,{color:"red"},{default:p(()=>[n("弱智能指针没有提供"),T,n("和"),S,n("运算符重载")]),_:1}),n("，不能将弱智能指针当成裸指针看待。")])])]),P,s("ul",null,[s("li",null,[a(l,{color:"green"},{default:p(()=>[n("将弱智能指针提升！使用`lock()`进行提升，提升之后它也是一个强智能指针")]),_:1}),n("。")])]),z,s("ul",null,[s("li",null,[s("strong",null,[n("在多线程中，弱智能指针观察的资源有可能被释放，有可能没有被释放，"),a(l,{color:"red"},{default:p(()=>[n("主要就是根据引用计数是否为0")]),_:1}),n("；")])]),N])])}const L=e(A,[["render",V],["__file","带引用计数的智能指针.html.vue"]]);export{L as default};
