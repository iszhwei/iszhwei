const n=JSON.parse('{"key":"v-47e7636c","path":"/mysql/12%20%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E7%94%9F%E4%BA%A7%E8%80%85%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0.html","title":"生产者线程的实现","lang":"zh-CN","frontmatter":{"title":"生产者线程的实现","icon":"file","order":5,"headerDepth":4,"category":["mysql"],"tag":["mysql连接池"],"description":"生产者线程的实现 #ifndef _CONNECTIONPOOL_H #define _CONNECTIONPOOL_H #include &lt;string&gt; #include &lt;queue&gt; #include &lt;mutex&gt; #include &lt;atomic&gt; //atomic_int 原子类型 #include &lt;memory&gt;\\t//shared_ptr #include &lt;thread&gt; #include &lt;condition_variable&gt;\\t #include &lt;functional&gt;\\t//bind #include \\"connection.h\\" using std::string; using std::queue; using std::mutex; using std::thread; using std::atomic_int; using std::shared_ptr; using std::bind; using std::condition_variable; using std::unique_lock; class ConnectionPool { public: \\t// 获取连接池对象实例 static ConnectionPool* getConnectionPool(); \\t// 给外部提供接口，从连接池中获取一个可用的空闲连接 \\tshared_ptr&lt;Connection&gt; getConnection(); private: ConnectionPool(); ~ConnectionPool(); #ifdef TEST_LOAD_CONFIG_FILE public: //测试的时候可以先变成共有的 #endif\\t//TEST_LOAD_CONFIG_FILE bool loadConfigFile(); \\t \\t// 运行在独立的线程中，专门负责生产新连接 \\t//之所以写成成员函数而不是全局函数，是因为可以更好访问成员变量 \\tvoid produceConnectionTask(); private: \\tstring _ip; // mysql的ip地址 \\tunsigned short _port; // mysql的端口号 3306 \\tstring _username; // mysql登录用户名 \\tstring _password; // mysql登录密码 \\tstring _dbname; // 连接的数据库名称 \\tint _initSize; // 连接池的初始连接量 \\tint _maxSize; // 连接池的最大连接量 \\tint _maxIdleTime; // 连接池最大空闲时间 \\tint _connectionTimeout; // 连接池获取连接的超时时间 queue&lt;Connection*&gt; _connectionQue; // 存储mysql连接的队列 mutex _queueMutex; // 维护连接队列的线程安全互斥锁 atomic_int _connectionCnt; // 记录连接所创建的connection连接的总数量 \\tcondition_variable cond;\\t// 设置条件变量，用于连接生产线程和连接消费线程的通信 }; #endif //_CONNECTIONPOOL_H","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/mysql/12%20%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E7%94%9F%E4%BA%A7%E8%80%85%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"生产者线程的实现"}],["meta",{"property":"og:description","content":"生产者线程的实现 #ifndef _CONNECTIONPOOL_H #define _CONNECTIONPOOL_H #include &lt;string&gt; #include &lt;queue&gt; #include &lt;mutex&gt; #include &lt;atomic&gt; //atomic_int 原子类型 #include &lt;memory&gt;\\t//shared_ptr #include &lt;thread&gt; #include &lt;condition_variable&gt;\\t #include &lt;functional&gt;\\t//bind #include \\"connection.h\\" using std::string; using std::queue; using std::mutex; using std::thread; using std::atomic_int; using std::shared_ptr; using std::bind; using std::condition_variable; using std::unique_lock; class ConnectionPool { public: \\t// 获取连接池对象实例 static ConnectionPool* getConnectionPool(); \\t// 给外部提供接口，从连接池中获取一个可用的空闲连接 \\tshared_ptr&lt;Connection&gt; getConnection(); private: ConnectionPool(); ~ConnectionPool(); #ifdef TEST_LOAD_CONFIG_FILE public: //测试的时候可以先变成共有的 #endif\\t//TEST_LOAD_CONFIG_FILE bool loadConfigFile(); \\t \\t// 运行在独立的线程中，专门负责生产新连接 \\t//之所以写成成员函数而不是全局函数，是因为可以更好访问成员变量 \\tvoid produceConnectionTask(); private: \\tstring _ip; // mysql的ip地址 \\tunsigned short _port; // mysql的端口号 3306 \\tstring _username; // mysql登录用户名 \\tstring _password; // mysql登录密码 \\tstring _dbname; // 连接的数据库名称 \\tint _initSize; // 连接池的初始连接量 \\tint _maxSize; // 连接池的最大连接量 \\tint _maxIdleTime; // 连接池最大空闲时间 \\tint _connectionTimeout; // 连接池获取连接的超时时间 queue&lt;Connection*&gt; _connectionQue; // 存储mysql连接的队列 mutex _queueMutex; // 维护连接队列的线程安全互斥锁 atomic_int _connectionCnt; // 记录连接所创建的connection连接的总数量 \\tcondition_variable cond;\\t// 设置条件变量，用于连接生产线程和连接消费线程的通信 }; #endif //_CONNECTIONPOOL_H"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"mysql连接池"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"生产者线程的实现\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":3,"words":899},"filePathRelative":"mysql/12 连接池/生产者线程的实现.md","excerpt":"<h1> 生产者线程的实现</h1>\\n<div class=\\"language-c++ line-numbers-mode\\" data-ext=\\"c++\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #C678DD\\">#ifndef</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">_CONNECTIONPOOL_H</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#define</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">_CONNECTIONPOOL_H</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;string&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;queue&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;mutex&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;atomic&gt;</span><span style=\\"color: #ABB2BF\\">   </span><span style=\\"color: #7F848E; font-style: italic\\">//atomic_int  原子类型</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;memory&gt;</span><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #7F848E; font-style: italic\\">//shared_ptr</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;thread&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;condition_variable&gt;</span><span style=\\"color: #ABB2BF\\">\\t</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;functional&gt;</span><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #7F848E; font-style: italic\\">//bind</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"connection.h\\"</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">using</span><span style=\\"color: #ABB2BF\\"> std::string;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">using</span><span style=\\"color: #ABB2BF\\"> std::queue;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">using</span><span style=\\"color: #ABB2BF\\"> std::mutex;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">using</span><span style=\\"color: #ABB2BF\\"> std::thread;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">using</span><span style=\\"color: #ABB2BF\\"> std::atomic_int;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">using</span><span style=\\"color: #ABB2BF\\"> std::shared_ptr;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">using</span><span style=\\"color: #ABB2BF\\"> std::bind;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">using</span><span style=\\"color: #ABB2BF\\"> std::condition_variable;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">using</span><span style=\\"color: #ABB2BF\\"> std::unique_lock;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">ConnectionPool</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">public:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t// 获取连接池对象实例</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">static</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">ConnectionPool</span><span style=\\"color: #C678DD\\">*</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">getConnectionPool</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t// 给外部提供接口，从连接池中获取一个可用的空闲连接</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #E5C07B\\">shared_ptr</span><span style=\\"color: #ABB2BF\\">&lt;</span><span style=\\"color: #E5C07B\\">Connection</span><span style=\\"color: #ABB2BF\\">&gt; </span><span style=\\"color: #61AFEF\\">getConnection</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">private:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">ConnectionPool</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">~ConnectionPool</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#ifdef</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">TEST_LOAD_CONFIG_FILE</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">public:</span><span style=\\"color: #7F848E; font-style: italic\\"> //测试的时候可以先变成共有的</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#endif</span><span style=\\"color: #7F848E; font-style: italic\\">\\t//TEST_LOAD_CONFIG_FILE</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">bool</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">loadConfigFile</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t// 运行在独立的线程中，专门负责生产新连接</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t//之所以写成成员函数而不是全局函数，是因为可以更好访问成员变量</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">produceConnectionTask</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">private:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tstring _ip;</span><span style=\\"color: #7F848E; font-style: italic\\"> // mysql的ip地址</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">unsigned</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">short</span><span style=\\"color: #ABB2BF\\"> _port;</span><span style=\\"color: #7F848E; font-style: italic\\"> // mysql的端口号 3306</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tstring _username;</span><span style=\\"color: #7F848E; font-style: italic\\"> // mysql登录用户名</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tstring _password;</span><span style=\\"color: #7F848E; font-style: italic\\"> // mysql登录密码</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tstring _dbname;</span><span style=\\"color: #7F848E; font-style: italic\\"> // 连接的数据库名称</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> _initSize;</span><span style=\\"color: #7F848E; font-style: italic\\"> // 连接池的初始连接量</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> _maxSize;</span><span style=\\"color: #7F848E; font-style: italic\\"> // 连接池的最大连接量</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> _maxIdleTime;</span><span style=\\"color: #7F848E; font-style: italic\\"> // 连接池最大空闲时间</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> _connectionTimeout;</span><span style=\\"color: #7F848E; font-style: italic\\"> // 连接池获取连接的超时时间</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    queue</span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\">Connection</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #C678DD\\">&gt;</span><span style=\\"color: #ABB2BF\\"> _connectionQue;</span><span style=\\"color: #7F848E; font-style: italic\\">  // 存储mysql连接的队列</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    mutex _queueMutex;</span><span style=\\"color: #7F848E; font-style: italic\\">  // 维护连接队列的线程安全互斥锁</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    atomic_int _connectionCnt;</span><span style=\\"color: #7F848E; font-style: italic\\"> // 记录连接所创建的connection连接的总数量 </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tcondition_variable cond;</span><span style=\\"color: #7F848E; font-style: italic\\">\\t// 设置条件变量，用于连接生产线程和连接消费线程的通信</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#endif</span><span style=\\"color: #7F848E; font-style: italic\\"> //_CONNECTIONPOOL_H</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
