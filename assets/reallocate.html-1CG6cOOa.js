const s=JSON.parse('{"key":"v-48c23000","path":"/ccpp/19%20SGI%20STL%E4%BA%8C%E7%BA%A7%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8%E5%86%85%E5%AD%98%E6%B1%A0%E6%BA%90%E7%A0%81/reallocate.html","title":"reallocate","lang":"zh-CN","frontmatter":{"title":"reallocate","icon":"file","order":8,"headerDepth":4,"category":["c/c++"],"tag":["SGI STL源码"],"description":"reallocate 作用： 对内存池中的__chuck块进行扩容或缩容，一般用的比较少 template &lt;bool threads, int inst&gt; void* __default_alloc_template&lt;threads, inst&gt;::reallocate(void* __p, size_t __old_sz, size_t __new_sz) { \\t// 参数:chunk块的其实地址、调整前chunk块的大小、调整后chunk块的大小 void* __result; size_t __copy_sz; if (__old_sz &gt; (size_t) _MAX_BYTES &amp;&amp; __new_sz &gt; (size_t) _MAX_BYTES) { \\t// __old_sz和__new_sz都大于128字节，并不是从内存池分配的内存，直接调用库函数realloc return(realloc(__p, __new_sz)); } // __old_sz和__new_sz处于同一数量区间，不用扩容或缩容 if (_S_round_up(__old_sz) == _S_round_up(__new_sz)) return(__p); // __result指向重新分配的空间 __result = allocate(__new_sz); // __copy_sz 保存最小值 __copy_sz = __new_sz &gt; __old_sz? __old_sz : __new_sz; // 从__p拷贝到__result，扩容拷贝__old_sz字节，缩容拷贝__new_sz memcpy(__result, __p, __copy_sz); // 归还原来的chunk块到内存池 deallocate(__p, __old_sz); return(__result); }","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/19%20SGI%20STL%E4%BA%8C%E7%BA%A7%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8%E5%86%85%E5%AD%98%E6%B1%A0%E6%BA%90%E7%A0%81/reallocate.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"reallocate"}],["meta",{"property":"og:description","content":"reallocate 作用： 对内存池中的__chuck块进行扩容或缩容，一般用的比较少 template &lt;bool threads, int inst&gt; void* __default_alloc_template&lt;threads, inst&gt;::reallocate(void* __p, size_t __old_sz, size_t __new_sz) { \\t// 参数:chunk块的其实地址、调整前chunk块的大小、调整后chunk块的大小 void* __result; size_t __copy_sz; if (__old_sz &gt; (size_t) _MAX_BYTES &amp;&amp; __new_sz &gt; (size_t) _MAX_BYTES) { \\t// __old_sz和__new_sz都大于128字节，并不是从内存池分配的内存，直接调用库函数realloc return(realloc(__p, __new_sz)); } // __old_sz和__new_sz处于同一数量区间，不用扩容或缩容 if (_S_round_up(__old_sz) == _S_round_up(__new_sz)) return(__p); // __result指向重新分配的空间 __result = allocate(__new_sz); // __copy_sz 保存最小值 __copy_sz = __new_sz &gt; __old_sz? __old_sz : __new_sz; // 从__p拷贝到__result，扩容拷贝__old_sz字节，缩容拷贝__new_sz memcpy(__result, __p, __copy_sz); // 归还原来的chunk块到内存池 deallocate(__p, __old_sz); return(__result); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"SGI STL源码"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"reallocate\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":0.9,"words":270},"filePathRelative":"ccpp/19 SGI STL二级空间配置器内存池源码/reallocate.md","excerpt":"<h1> reallocate</h1>\\n<p><strong>作用：</strong> 对内存池中的__chuck块进行<strong>扩容或缩容</strong>，一般用的比较少</p>\\n<div class=\\"language-c++ line-numbers-mode\\" data-ext=\\"c++\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #C678DD\\">template</span><span style=\\"color: #ABB2BF\\"> &lt;</span><span style=\\"color: #C678DD\\">bool</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">threads</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">inst</span><span style=\\"color: #ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">void*</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">__default_alloc_template</span><span style=\\"color: #ABB2BF\\">&lt;</span><span style=\\"color: #E5C07B\\">threads</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E5C07B\\">inst</span><span style=\\"color: #ABB2BF\\">&gt;::</span><span style=\\"color: #61AFEF\\">reallocate</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">void*</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">__p</span><span style=\\"color: #ABB2BF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">                                                    </span><span style=\\"color: #C678DD\\">size_t</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">__old_sz</span><span style=\\"color: #ABB2BF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">                                                    </span><span style=\\"color: #C678DD\\">size_t</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">__new_sz</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t// 参数:chunk块的其实地址、调整前chunk块的大小、调整后chunk块的大小</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\"> __result;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">size_t</span><span style=\\"color: #ABB2BF\\"> __copy_sz;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (__old_sz </span><span style=\\"color: #C678DD\\">&gt;</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #C678DD\\">size_t</span><span style=\\"color: #ABB2BF\\">) _MAX_BYTES </span><span style=\\"color: #56B6C2\\">&amp;&amp;</span><span style=\\"color: #ABB2BF\\"> __new_sz </span><span style=\\"color: #C678DD\\">&gt;</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #C678DD\\">size_t</span><span style=\\"color: #ABB2BF\\">) _MAX_BYTES) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">    \\t// __old_sz和__new_sz都大于128字节，并不是从内存池分配的内存，直接调用库函数realloc </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #61AFEF\\">realloc</span><span style=\\"color: #ABB2BF\\">(__p, __new_sz));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">    // __old_sz和__new_sz处于同一数量区间，不用扩容或缩容</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #61AFEF\\">_S_round_up</span><span style=\\"color: #ABB2BF\\">(__old_sz) </span><span style=\\"color: #C678DD\\">==</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">_S_round_up</span><span style=\\"color: #ABB2BF\\">(__new_sz)) </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\">(__p);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">    // __result指向重新分配的空间</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    __result </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">allocate</span><span style=\\"color: #ABB2BF\\">(__new_sz);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">    // __copy_sz 保存最小值</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    __copy_sz </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> __new_sz </span><span style=\\"color: #C678DD\\">&gt;</span><span style=\\"color: #ABB2BF\\"> __old_sz</span><span style=\\"color: #C678DD\\">?</span><span style=\\"color: #ABB2BF\\"> __old_sz </span><span style=\\"color: #C678DD\\">:</span><span style=\\"color: #ABB2BF\\"> __new_sz;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">    // 从__p拷贝到__result，扩容拷贝__old_sz字节，缩容拷贝__new_sz</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">memcpy</span><span style=\\"color: #ABB2BF\\">(__result, __p, __copy_sz);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">    // 归还原来的chunk块到内存池</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">deallocate</span><span style=\\"color: #ABB2BF\\">(__p, __old_sz);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\">(__result);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{s as data};
