import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as l,a}from"./app-mYdPlPhZ.js";const e={},p=a(`<h1 id="两个重要的辅助接口函数" tabindex="-1"><a class="header-anchor" href="#两个重要的辅助接口函数" aria-hidden="true">#</a> 两个重要的辅助接口函数</h1><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">threads</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">inst</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">__default_alloc_template</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //...</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //将 __bytes 上调至最邻近的8的倍数</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">size_t</span></span>
<span class="line"><span style="color:#ABB2BF;">  	</span><span style="color:#61AFEF;">_S_round_up</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">__bytes</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> (((__bytes) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;">) _ALIGN</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">~</span><span style="color:#ABB2BF;">((</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;">) _ALIGN </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)); </span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //返回 __bytes 大小的chunk块位于 free-list 中的编号</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">_S_freelist_index</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">__bytes</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> (( (__bytes) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;">)_ALIGN</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;">)_ALIGN </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//将 __bytes 上调至最邻近的8的倍数</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">size_t</span></span>
<span class="line"><span style="color:#61AFEF;">_S_round_up</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> __bytes) { </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> (((__bytes) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;">) _ALIGN</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">~</span><span style="color:#ABB2BF;">((</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;">) _ALIGN </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)); </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">_ALIGN = 8</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">~((size_t) _ALIGN - 1))</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">先将_ALIGN转为4字节</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">00000000 00000000 00000000 00001000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">然后减1，取反，最终得到的是一个无符号的大整数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">(size_t) _ALIGN-1) 		=&gt; 00000000 00000000 00000000 00000111 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">~((size_t) _ALIGN - 1) 	=&gt; 11111111 11111111 11111111 11111000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">((__bytes) + (size_t) _ALIGN-1) &amp; ~((size_t) _ALIGN - 1)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">按位与11111111 11111111 11111111 11111000与，低3位永远为0，但是</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">基数为7，加1就会进位为8，所以： </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">1~8 =》8		</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">9~16 =》16</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">17~24 =》24</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">如果__bytes = 4</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">00000000 00000000 00000000 00001011 &amp; </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">11111111 11111111 11111111 11111000 = </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">00000000 00000000 00000000 00001000 8</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//返回 __bytes 大小的chunk块位于 free-list 中的编号</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">_S_freelist_index</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">__bytes</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> (( (__bytes) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;">)_ALIGN</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;">)_ALIGN </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">(__bytes) + (size_t)_ALIGN-1)/(size_t)_ALIGN</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">(1~8  + 7) / 8 = 1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">(9~16 + 7) / 8 = 2</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">((__bytes) + (size_t)_ALIGN-1)/(size_t)_ALIGN - 1得到的是下标</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">(1~8  + 7) / 8 - 1 = 0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">(9~16 + 7) / 8 - 1 = 1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">...</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),o=[p];function t(i,c){return n(),l("div",null,o)}const y=s(e,[["render",t],["__file","两个重要的函数.html.vue"]]);export{y as default};
