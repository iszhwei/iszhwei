const s=JSON.parse('{"key":"v-45747b0a","path":"/ccpp/15%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BC%98%E5%8C%96/move%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89%E5%92%8Cforward%E5%AE%8C%E7%BE%8E%E8%BD%AC%E5%8F%91.html","title":"move移动语义和forward完美转发","lang":"zh-CN","frontmatter":{"title":"move移动语义和forward完美转发","icon":"file","order":3,"headerDepth":4,"category":["c/c++"],"tag":["对象优化"],"description":"move移动语义和forward完美转发 vector使用右值的拷贝构造函数，可以直接用临时对象拷贝构造，直接将资源移动过来。 //容器空间适配器 template&lt;typename T&gt; struct Allocator { \\tT *allocate(size_t size)//负责内存的开辟 \\t{ \\t\\treturn (T*)malloc(sizeof(T)*size); \\t} \\tvoid deallocate(void *p)//负责内存的释放 \\t{ \\t\\tfree(p); \\t} \\tvoid construct(T *p, const T &amp;val)//负责对象的构造 \\t{ \\t\\tnew(p) T(val); \\t} \\tvoid destroy(T *p)//负责对象的析构 \\t{ \\t\\tp-&gt;~T(); \\t} }; template&lt;typename T,typename Alloc = Allocator&lt;T&gt;&gt; class vector { public: \\tvector(size_t size = 10) \\t{ \\t\\t_first = _allocator.allocate(size);//只给数组开辟空间，不进行构造 \\t\\t_last = _first; \\t\\t_end = _first + size; \\t} \\t~vector() \\t{ \\t\\tT *ptmp = _first; \\t\\tfor (; ptmp != _last; ++ptmp)//首先释放数组中的有效元素 \\t\\t{ \\t\\t\\t_allocator.destroy(ptmp); \\t\\t} \\t\\t//释放数组 \\t\\t_allocator.deallocate(_first); \\t\\t_first = _end = _last = nullptr; \\t} \\tvector(const vector&amp;src) \\t{ \\t\\t//首先申请空间 \\t\\tsize_t size = src._end - src._first;//获取src的数组长度 \\t\\t_first = _allocator.allocate(size);//申请空间 \\t\\t_last = _first; \\t\\tint len = src._last - src._first; \\t\\tfor (int i = 0; i &lt; len; i++)//拷贝数据 \\t\\t{ \\t\\t\\t_allocator.construct(_last++, src._first[i]); \\t\\t} \\t\\t_end = _first + size; \\t} \\tvoid operator=(const vector&amp;src) \\t{ \\t\\t//1,判断是否为自赋值 \\t\\tif (this == &amp;src) \\t\\t\\treturn; \\t\\t//2，释放原来对象占用的空间 \\t\\t~vector(); \\t\\t//3，和拷贝构造过程一样 \\t\\tsize_t size = src._end - src._first;//获取src的数组长度 \\t\\t_first = _allocator.allocate(size);//申请空间 \\t\\t_last = _first; \\t\\tint len = src._last - src._first; \\t\\tfor (int i = 0; i &lt; len; i++) \\t\\t{ \\t\\t\\t_allocator.construct(_last++, src._first[i]); \\t\\t} \\t\\t_end = _first + size; \\t} \\tvoid push_back(const T &amp;val) \\t{ \\t\\tif (full()) \\t\\t\\texpand(); \\t\\t_allocator.construct(_last++, val); \\t} \\tvoid pop_back() \\t{ \\t\\tif (empty()) \\t\\t\\treturn; \\t\\t--_last; \\t\\t_allocator.destroy(_last); \\t} \\tT back() \\t{ \\t\\tif (empty()) \\t\\t\\tthrow \\"the vector is empty\\"; \\t\\treturn *(_last - 1); \\t} \\tbool full()const { return _last == _end; } \\tbool empty()const { return _first == _last; } \\tsize_t size()const { return _last - _first; } private: \\tT *_first;//指向数组的首元素的地址 \\tT *_last;//指向数据最后一个有效元素的后继 \\tT *_end;//指向数组有效空间最后一个元素的后继 \\tAlloc _allocator;//空间适配器 \\tvoid expand()//二倍扩容 \\t{ \\t\\tsize_t len = _end - _first;//当前的数组大小 \\t\\tsize_t size = len * 2;//扩容之后的数组的大小 \\t\\t \\t\\tT *ptmp = _allocator.allocate(size);//先申请大小为原来二倍的空间 \\t\\tT *pcur = _first;// \\t\\tfor (int i = 0; i &lt; len; i++) \\t\\t\\t_allocator.construct(ptmp + i, *pcur++); \\t\\tfor (int i = 0; i &lt; len; i++) \\t\\t\\t_allocator.destroy(_first++); \\t\\t_allocator.deallocate(_first); \\t\\t_first = ptmp; \\t\\t_end = _first + size; \\t\\t_last = _first + len; \\t} };","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/15%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BC%98%E5%8C%96/move%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89%E5%92%8Cforward%E5%AE%8C%E7%BE%8E%E8%BD%AC%E5%8F%91.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"move移动语义和forward完美转发"}],["meta",{"property":"og:description","content":"move移动语义和forward完美转发 vector使用右值的拷贝构造函数，可以直接用临时对象拷贝构造，直接将资源移动过来。 //容器空间适配器 template&lt;typename T&gt; struct Allocator { \\tT *allocate(size_t size)//负责内存的开辟 \\t{ \\t\\treturn (T*)malloc(sizeof(T)*size); \\t} \\tvoid deallocate(void *p)//负责内存的释放 \\t{ \\t\\tfree(p); \\t} \\tvoid construct(T *p, const T &amp;val)//负责对象的构造 \\t{ \\t\\tnew(p) T(val); \\t} \\tvoid destroy(T *p)//负责对象的析构 \\t{ \\t\\tp-&gt;~T(); \\t} }; template&lt;typename T,typename Alloc = Allocator&lt;T&gt;&gt; class vector { public: \\tvector(size_t size = 10) \\t{ \\t\\t_first = _allocator.allocate(size);//只给数组开辟空间，不进行构造 \\t\\t_last = _first; \\t\\t_end = _first + size; \\t} \\t~vector() \\t{ \\t\\tT *ptmp = _first; \\t\\tfor (; ptmp != _last; ++ptmp)//首先释放数组中的有效元素 \\t\\t{ \\t\\t\\t_allocator.destroy(ptmp); \\t\\t} \\t\\t//释放数组 \\t\\t_allocator.deallocate(_first); \\t\\t_first = _end = _last = nullptr; \\t} \\tvector(const vector&amp;src) \\t{ \\t\\t//首先申请空间 \\t\\tsize_t size = src._end - src._first;//获取src的数组长度 \\t\\t_first = _allocator.allocate(size);//申请空间 \\t\\t_last = _first; \\t\\tint len = src._last - src._first; \\t\\tfor (int i = 0; i &lt; len; i++)//拷贝数据 \\t\\t{ \\t\\t\\t_allocator.construct(_last++, src._first[i]); \\t\\t} \\t\\t_end = _first + size; \\t} \\tvoid operator=(const vector&amp;src) \\t{ \\t\\t//1,判断是否为自赋值 \\t\\tif (this == &amp;src) \\t\\t\\treturn; \\t\\t//2，释放原来对象占用的空间 \\t\\t~vector(); \\t\\t//3，和拷贝构造过程一样 \\t\\tsize_t size = src._end - src._first;//获取src的数组长度 \\t\\t_first = _allocator.allocate(size);//申请空间 \\t\\t_last = _first; \\t\\tint len = src._last - src._first; \\t\\tfor (int i = 0; i &lt; len; i++) \\t\\t{ \\t\\t\\t_allocator.construct(_last++, src._first[i]); \\t\\t} \\t\\t_end = _first + size; \\t} \\tvoid push_back(const T &amp;val) \\t{ \\t\\tif (full()) \\t\\t\\texpand(); \\t\\t_allocator.construct(_last++, val); \\t} \\tvoid pop_back() \\t{ \\t\\tif (empty()) \\t\\t\\treturn; \\t\\t--_last; \\t\\t_allocator.destroy(_last); \\t} \\tT back() \\t{ \\t\\tif (empty()) \\t\\t\\tthrow \\"the vector is empty\\"; \\t\\treturn *(_last - 1); \\t} \\tbool full()const { return _last == _end; } \\tbool empty()const { return _first == _last; } \\tsize_t size()const { return _last - _first; } private: \\tT *_first;//指向数组的首元素的地址 \\tT *_last;//指向数据最后一个有效元素的后继 \\tT *_end;//指向数组有效空间最后一个元素的后继 \\tAlloc _allocator;//空间适配器 \\tvoid expand()//二倍扩容 \\t{ \\t\\tsize_t len = _end - _first;//当前的数组大小 \\t\\tsize_t size = len * 2;//扩容之后的数组的大小 \\t\\t \\t\\tT *ptmp = _allocator.allocate(size);//先申请大小为原来二倍的空间 \\t\\tT *pcur = _first;// \\t\\tfor (int i = 0; i &lt; len; i++) \\t\\t\\t_allocator.construct(ptmp + i, *pcur++); \\t\\tfor (int i = 0; i &lt; len; i++) \\t\\t\\t_allocator.destroy(_first++); \\t\\t_allocator.deallocate(_first); \\t\\t_first = ptmp; \\t\\t_end = _first + size; \\t\\t_last = _first + len; \\t} };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"对象优化"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"move移动语义和forward完美转发\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":3.71,"words":1113},"filePathRelative":"ccpp/15 对象的优化/move移动语义和forward完美转发.md","excerpt":"<h1> move移动语义和forward完美转发</h1>\\n<p>vector使用右值的拷贝构造函数，可以直接用临时对象拷贝构造，直接将资源移动过来。</p>\\n<div class=\\"language-c++ line-numbers-mode\\" data-ext=\\"c++\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">//容器空间适配器</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">template</span><span style=\\"color: #ABB2BF\\">&lt;</span><span style=\\"color: #C678DD\\">typename</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">struct</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Allocator</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">*</span><span style=\\"color: #61AFEF\\">allocate</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">size_t</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">size</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #7F848E; font-style: italic\\">//负责内存的开辟</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> (T</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #61AFEF\\">malloc</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">sizeof</span><span style=\\"color: #ABB2BF\\">(T)</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">size);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">deallocate</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">*</span><span style=\\"color: #E06C75; font-style: italic\\">p</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #7F848E; font-style: italic\\">//负责内存的释放</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #61AFEF\\">free</span><span style=\\"color: #ABB2BF\\">(p);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">construct</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">*</span><span style=\\"color: #E06C75; font-style: italic\\">p</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #E06C75; font-style: italic\\">val</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #7F848E; font-style: italic\\">//负责对象的构造</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">new</span><span style=\\"color: #ABB2BF\\">(p) </span><span style=\\"color: #61AFEF\\">T</span><span style=\\"color: #ABB2BF\\">(val);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">destroy</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">*</span><span style=\\"color: #E06C75; font-style: italic\\">p</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #7F848E; font-style: italic\\">//负责对象的析构</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #E5C07B\\">p</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #61AFEF\\">~T</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">template</span><span style=\\"color: #ABB2BF\\">&lt;</span><span style=\\"color: #C678DD\\">typename</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #ABB2BF\\">,</span><span style=\\"color: #C678DD\\">typename</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Alloc</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> Allocator&lt;</span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #ABB2BF\\">&gt;&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">vector</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">public:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #61AFEF\\">vector</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">size_t</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">size</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">10</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_first </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">allocate</span><span style=\\"color: #ABB2BF\\">(size);</span><span style=\\"color: #7F848E; font-style: italic\\">//只给数组开辟空间，不进行构造</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_last </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> _first;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_end </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> _first </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> size;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #61AFEF\\">~vector</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\tT </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">ptmp </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> _first;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (; ptmp </span><span style=\\"color: #C678DD\\">!=</span><span style=\\"color: #ABB2BF\\"> _last; </span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">ptmp)</span><span style=\\"color: #7F848E; font-style: italic\\">//首先释放数组中的有效元素</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">destroy</span><span style=\\"color: #ABB2BF\\">(ptmp);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t\\t//释放数组</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">deallocate</span><span style=\\"color: #ABB2BF\\">(_first);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_first </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> _end </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> _last </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">nullptr</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #61AFEF\\">vector</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">vector</span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #E06C75; font-style: italic\\">src</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t\\t//首先申请空间</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">size_t</span><span style=\\"color: #ABB2BF\\"> size </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">src</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_end</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">src</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_first</span><span style=\\"color: #ABB2BF\\">;</span><span style=\\"color: #7F848E; font-style: italic\\">//获取src的数组长度</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_first </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">allocate</span><span style=\\"color: #ABB2BF\\">(size);</span><span style=\\"color: #7F848E; font-style: italic\\">//申请空间</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_last </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> _first;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> len </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">src</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_last</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">src</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_first</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> i </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">; i </span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\"> len; i</span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #7F848E; font-style: italic\\">//拷贝数据</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">construct</span><span style=\\"color: #ABB2BF\\">(_last</span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E5C07B\\">src</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_first</span><span style=\\"color: #ABB2BF\\">[i]);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_end </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> _first </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> size;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">operator</span><span style=\\"color: #ABB2BF\\">=(</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">vector</span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #E06C75; font-style: italic\\">src</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t\\t//1,判断是否为自赋值</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E5C07B\\">this</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">==</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\">src)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t\\t//2，释放原来对象占用的空间</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #56B6C2\\">~</span><span style=\\"color: #61AFEF\\">vector</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t\\t//3，和拷贝构造过程一样</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">size_t</span><span style=\\"color: #ABB2BF\\"> size </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">src</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_end</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">src</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_first</span><span style=\\"color: #ABB2BF\\">;</span><span style=\\"color: #7F848E; font-style: italic\\">//获取src的数组长度</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_first </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">allocate</span><span style=\\"color: #ABB2BF\\">(size);</span><span style=\\"color: #7F848E; font-style: italic\\">//申请空间</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_last </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> _first;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> len </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">src</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_last</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">src</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_first</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> i </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">; i </span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\"> len; i</span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">construct</span><span style=\\"color: #ABB2BF\\">(_last</span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E5C07B\\">src</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_first</span><span style=\\"color: #ABB2BF\\">[i]);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_end </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> _first </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> size;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">push_back</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #E06C75; font-style: italic\\">val</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #61AFEF\\">full</span><span style=\\"color: #ABB2BF\\">())</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #61AFEF\\">expand</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">construct</span><span style=\\"color: #ABB2BF\\">(_last</span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">, val);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">pop_back</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #61AFEF\\">empty</span><span style=\\"color: #ABB2BF\\">())</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">--</span><span style=\\"color: #ABB2BF\\">_last;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">destroy</span><span style=\\"color: #ABB2BF\\">(_last);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">back</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #61AFEF\\">empty</span><span style=\\"color: #ABB2BF\\">())</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #C678DD\\">throw</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"the vector is empty\\"</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">(_last </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">bool</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">full</span><span style=\\"color: #ABB2BF\\">()</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> { </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> _last </span><span style=\\"color: #C678DD\\">==</span><span style=\\"color: #ABB2BF\\"> _end; }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">bool</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">empty</span><span style=\\"color: #ABB2BF\\">()</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> { </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> _first </span><span style=\\"color: #C678DD\\">==</span><span style=\\"color: #ABB2BF\\"> _last; }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">size_t</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">size</span><span style=\\"color: #ABB2BF\\">()</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> { </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> _last </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #ABB2BF\\"> _first; }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\"> </span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">private:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tT </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">_first;</span><span style=\\"color: #7F848E; font-style: italic\\">//指向数组的首元素的地址</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tT </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">_last;</span><span style=\\"color: #7F848E; font-style: italic\\">//指向数据最后一个有效元素的后继</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tT </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">_end;</span><span style=\\"color: #7F848E; font-style: italic\\">//指向数组有效空间最后一个元素的后继</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tAlloc _allocator;</span><span style=\\"color: #7F848E; font-style: italic\\">//空间适配器</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">expand</span><span style=\\"color: #ABB2BF\\">()</span><span style=\\"color: #7F848E; font-style: italic\\">//二倍扩容</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">size_t</span><span style=\\"color: #ABB2BF\\"> len </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> _end </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #ABB2BF\\"> _first;</span><span style=\\"color: #7F848E; font-style: italic\\">//当前的数组大小</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">size_t</span><span style=\\"color: #ABB2BF\\"> size </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> len </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">2</span><span style=\\"color: #ABB2BF\\">;</span><span style=\\"color: #7F848E; font-style: italic\\">//扩容之后的数组的大小</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\tT </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">ptmp </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">allocate</span><span style=\\"color: #ABB2BF\\">(size);</span><span style=\\"color: #7F848E; font-style: italic\\">//先申请大小为原来二倍的空间</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\tT </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">pcur </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> _first;</span><span style=\\"color: #7F848E; font-style: italic\\">//</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> i </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">; i </span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\"> len; i</span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">construct</span><span style=\\"color: #ABB2BF\\">(ptmp </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> i, </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">pcur</span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> i </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">; i </span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\"> len; i</span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">destroy</span><span style=\\"color: #ABB2BF\\">(_first</span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">deallocate</span><span style=\\"color: #ABB2BF\\">(_first);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_first </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> ptmp;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_end </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> _first </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> size;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_last </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> _first </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> len;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{s as data};
