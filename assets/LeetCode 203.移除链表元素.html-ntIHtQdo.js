const s=JSON.parse('{"key":"v-735dfe06","path":"/algo/02%20%E9%93%BE%E8%A1%A8/LeetCode%20203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.html","title":"LeetCode 203.移除链表元素","lang":"zh-CN","frontmatter":{"title":"LeetCode 203.移除链表元素","icon":"code","order":1,"category":["数据结构与算法"],"tag":["链表","虚拟头结点"],"description":"LeetCode 203.移除链表元素 题目描述：给定链表头节点head和整数val，删除所有值为val的节点 ，返回新的头节点 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* removeElements(ListNode* head, int val) { ListNode* dummyHead = new ListNode(0, head); ListNode* cur = dummyHead; while(cur-&gt;next) { if(cur-&gt;next-&gt;val == val) {\\t//cur-&gt;next-&gt;val不是cur-&gt;next.val ListNode* temp = cur-&gt;next; cur-&gt;next = cur-&gt;next-&gt;next; delete temp; temp = nullptr; } else { cur = cur-&gt;next; } } head = dummyHead-&gt;next; delete dummyHead; dummyHead = nullptr; return head; } };","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/algo/02%20%E9%93%BE%E8%A1%A8/LeetCode%20203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"LeetCode 203.移除链表元素"}],["meta",{"property":"og:description","content":"LeetCode 203.移除链表元素 题目描述：给定链表头节点head和整数val，删除所有值为val的节点 ，返回新的头节点 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* removeElements(ListNode* head, int val) { ListNode* dummyHead = new ListNode(0, head); ListNode* cur = dummyHead; while(cur-&gt;next) { if(cur-&gt;next-&gt;val == val) {\\t//cur-&gt;next-&gt;val不是cur-&gt;next.val ListNode* temp = cur-&gt;next; cur-&gt;next = cur-&gt;next-&gt;next; delete temp; temp = nullptr; } else { cur = cur-&gt;next; } } head = dummyHead-&gt;next; delete dummyHead; dummyHead = nullptr; return head; } };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"链表"}],["meta",{"property":"article:tag","content":"虚拟头结点"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"LeetCode 203.移除链表元素\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":0.96,"words":287},"filePathRelative":"algo/02 链表/LeetCode 203.移除链表元素.md","excerpt":"<p><a href=\\"https://leetcode.cn/problems/remove-linked-list-elements/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">LeetCode 203.移除链表元素</a></p>\\n<p><strong>题目描述</strong>：给定链表头节点head和整数val，删除所有值为val的节点 ，返回新的头节点</p>\\n<!--more-->\\n<div class=\\"language-c++ line-numbers-mode\\" data-ext=\\"c++\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> * Definition for singly-linked list.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> * struct ListNode {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> *     int val;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> *     ListNode *next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> *     ListNode() : val(0), next(nullptr) {}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> *     ListNode(int x) : val(x), next(nullptr) {}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> *     ListNode(int x, ListNode *next) : val(x), next(next) {}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> * };</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Solution</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">public:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">ListNode</span><span style=\\"color: #C678DD\\">*</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">removeElements</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">ListNode</span><span style=\\"color: #C678DD\\">*</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">head</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">val</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">       ListNode</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\"> dummyHead </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">new</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">ListNode</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">, head);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">       ListNode</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\"> cur </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> dummyHead;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">       </span><span style=\\"color: #C678DD\\">while</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">cur</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">next</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">           </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">cur</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E5C07B\\">next</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">val</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">==</span><span style=\\"color: #ABB2BF\\"> val) {</span><span style=\\"color: #7F848E; font-style: italic\\">\\t//cur-&gt;next-&gt;val不是cur-&gt;next.val</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">               ListNode</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\"> temp </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">cur</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">next</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">               </span><span style=\\"color: #E5C07B\\">cur</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">next</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">cur</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E5C07B\\">next</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">next</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">               </span><span style=\\"color: #C678DD\\">delete</span><span style=\\"color: #ABB2BF\\"> temp;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">               temp </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">nullptr</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">           }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">           </span><span style=\\"color: #C678DD\\">else</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">               cur </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">cur</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">next</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">           }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">       }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">       head </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">dummyHead</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">next</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">       </span><span style=\\"color: #C678DD\\">delete</span><span style=\\"color: #ABB2BF\\"> dummyHead;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">       dummyHead </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">nullptr</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">       </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> head;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{s as data};
