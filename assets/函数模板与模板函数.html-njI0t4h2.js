import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as c,c as r,d as s,e as n,f as a,w as o,a as p}from"./app-2pke9_a8.js";const B="/assets/image-20240411140728256-kNx_07Qq.png",i="/assets/image-20240411151958707-ge1VpRk9.png",y={},d=s("h1",{id:"函数模板与模板函数",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#函数模板与模板函数","aria-hidden":"true"},"#"),n(" 函数模板与模板函数")],-1),F=s("h2",{id:"为什么要定义模板",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#为什么要定义模板","aria-hidden":"true"},"#"),n(" 为什么要定义模板？")],-1),A=s("li",null,[s("p",null,"简化程序，少写代码，维持结构的清晰，大大提高程序的效率。")],-1),u=s("li",null,[s("p",null,[n("解决强类型语言的"),s("strong",null,"严格性"),n("和"),s("strong",null,"灵活性"),n("之间的冲突。")]),s("ol",null,[s("li",null,"带参数的宏定义(原样替换)"),s("li",null,"函数重载(函数名字相同，参数不同)"),s("li",null,"模板(将数据类型作为参数)")])],-1),D=s("strong",null,"强类型语言程序设计",-1),v=s("u",null,"在编译时候明确变量的类",-1),m=s("u",null,"型，如果有问题就可以在编译时发现错误，安全，但是不够灵活",-1),b=s("li",null,[s("p",null,[s("strong",null,"弱类型程序语言设计"),n("：js/python等，虽然也有类型，但是在使用的时候直接使用let/var number,"),s("u",null,"不知道变量具体类型，由编译器解释变量类型，属于解释型语言。如果有错，到运行时才发现，虽然灵活，但是不安全。")])],-1),C=p(`<h2 id="模板的定义" tabindex="-1"><a class="header-anchor" href="#模板的定义" aria-hidden="true">#</a> 模板的定义</h2><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,...&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">或者</span></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,...&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),h=s("code",null,"class",-1),g=s("code",null,"typename",-1),_=p(`<h2 id="模板的类型" tabindex="-1"><a class="header-anchor" href="#模板的类型" aria-hidden="true">#</a> 模板的类型</h2><p><strong>函数模板</strong>与<strong>类模板</strong>。通过参数实例化构造出具体的函数或者类，称为模板函数或者模板类。</p><h2 id="函数模板" tabindex="-1"><a class="header-anchor" href="#函数模板" aria-hidden="true">#</a> 函数模板</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">template </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">模板参数列表</span><span style="color:#C678DD;">&gt;</span><span style="color:#7F848E;font-style:italic;">  //模板参数列表，此处模板参数列表不能为空</span></span>
<span class="line"><span style="color:#ABB2BF;">返回类型 函数名（参数列表）</span></span>
<span class="line"><span style="color:#ABB2BF;"> {</span><span style="color:#7F848E;font-style:italic;"> //函数体  }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#7F848E;font-style:italic;">//模板参数列表</span></span>
<span class="line"><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;T add(T, T)&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> x </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> y;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),E=s("strong",null,"语法规则：",-1),f=s("code",null,"template",-1),x=s("code",null,"typename",-1),k=s("h3",{id:"注意",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#注意","aria-hidden":"true"},"#"),n(" 注意：")],-1),q=p(`<h2 id="实例化-隐式实例化与显示实例化" tabindex="-1"><a class="header-anchor" href="#实例化-隐式实例化与显示实例化" aria-hidden="true">#</a> 实例化：隐式实例化与显示实例化</h2><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//函数的调用点</span></span>
<span class="line"><span style="color:#ABB2BF;">cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;add(ia, ib) = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(ia, ib) </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span><span style="color:#7F848E;font-style:italic;">//隐式实例化，没有明确说明类型，靠</span></span>
<span class="line"><span style="color:#ABB2BF;">编译器推导</span></span>
<span class="line"><span style="color:#ABB2BF;"> cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;add(da, db) = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;">&gt;(da, db) </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span><span style="color:#7F848E;font-style:italic;">//显示实例化，编译器无序</span></span>
<span class="line"><span style="color:#ABB2BF;">推导</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+B+`" alt="image-20240411140728256" tabindex="0" loading="lazy"><figcaption>image-20240411140728256</figcaption></figure><h2 id="模板函数-用模板实现的函数" tabindex="-1"><a class="header-anchor" href="#模板函数-用模板实现的函数" aria-hidden="true">#</a> 模板函数：用模板实现的函数</h2><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#7F848E;font-style:italic;">//定义一个模板参数列表 class也可以替换typename</span></span>
<span class="line"><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//compare 是一个函数模板</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;template compare&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> b;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//函数的调用点</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#D19A66;">10.5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20.5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//实例化的函数模板，即模板函数</span></span>
<span class="line"><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> b)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> b;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> a, </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> b)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> b;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数模板、普通函数间的关系" tabindex="-1"><a class="header-anchor" href="#函数模板、普通函数间的关系" aria-hidden="true">#</a> 函数模板、普通函数间的关系</h2>`,6),T=s("strong",null,"与",-1),N=s("strong",null,"是",-1),V=s("strong",null,"于函数模板执行",-1),w=s("strong",null,"与",-1),z=s("strong",null,"之间也是",-1),I=p(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#7F848E;font-style:italic;">//定义一个模板参数列表 class也可以替换typename</span></span>
<span class="line"><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//compare 是一个函数模板</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;template compare&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> b;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//针对compare函数模板,提供const char*类型的特例化版本</span></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;">&lt;&gt;</span></span>
<span class="line"><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">a, </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">b)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;compare&lt;const char*&gt;&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;">endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">strcmp</span><span style="color:#ABB2BF;">(a, b) </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//普通函数(非模板函数)</span></span>
<span class="line"><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;normal compare&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;">endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">strcmp</span><span style="color:#ABB2BF;">(a,b) </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>优先调用普通函数，没有的话才去找函数模板，若有模板特例化，优先使用特例化</strong></li></ul><h2 id="模板的特化-偏特化与全特化" tabindex="-1"><a class="header-anchor" href="#模板的特化-偏特化与全特化" aria-hidden="true">#</a> 模板的特化：偏特化与全特化</h2>`,3),M=s("u",null,"对该该类型提供自己的特例化版本",-1),P=p(`<p><strong>全特化</strong>：<u>全部特化出来</u>就是全特化</p><p><strong>偏特化</strong>：<u>只特殊化几个</u>参数或者<u>一定的参数范围</u></p><h3 id="全特化" tabindex="-1"><a class="header-anchor" href="#全特化" aria-hidden="true">#</a> 全特化</h3><p>比较两个字符串的时候使用a&gt;b，只是比较两个字符串地址谁大谁小，没有意义。我们应该比较为它们在ASCII表中的顺序大小。实际应该这样比较：</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#7F848E;font-style:italic;">//定义一个模板参数列表 class也可以替换typename</span></span>
<span class="line"><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//compare 是一个函数模板</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;template compare&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> b;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//针对compare函数模板,提供const char*类型的特例化版本</span></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;">&lt;&gt;</span></span>
<span class="line"><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">a, </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">b)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;compare&lt;const char*&gt;&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;">endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">strcmp</span><span style="color:#ABB2BF;">(a, b) </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//函数的调用点</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#D19A66;">10.5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20.5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">40.5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;aaa,=&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;ccc&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>template&lt;&gt;</code>中为空，代表所有类型都在下面特殊化处理，其他类型依然是泛化版本。</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/* cout &lt;&lt; &quot;add(ia, db) = &quot; &lt;&lt; add(ia, db) &lt;&lt; endl;//函数模板必须进行严格的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">推导，如果没有普通函数形式，这就话就error */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,7),S={id:"偏特化-函数模板不能偏特化",tabindex:"-1"},j=s("a",{class:"header-anchor",href:"#偏特化-函数模板不能偏特化","aria-hidden":"true"},"#",-1),J=p('<figure><img src="'+i+`" alt="image-20240411151958707" tabindex="0" loading="lazy"><figcaption>image-20240411151958707</figcaption></figure><h4 id="注意区分偏特化和重载" tabindex="-1"><a class="header-anchor" href="#注意区分偏特化和重载" aria-hidden="true">#</a> 注意区分偏特化和重载</h4><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">tfunc</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">double&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个叫做重载。 下面的才是偏特化</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">tfunc</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> &gt;(T</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;"> a, </span><span style="color:#C678DD;">double</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;"> b)</span><span style="color:#7F848E;font-style:italic;"> //error</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数模板的参数类型" tabindex="-1"><a class="header-anchor" href="#函数模板的参数类型" aria-hidden="true">#</a> 函数模板的参数类型</h2><p><strong>类型参数</strong>，class T 这种就是类型参数</p>`,7),Q=s("strong",null,"非类型参数",-1),R=s("strong",null,[n("常量表达式，整型："),s("code",null,"bool/char/short/int/long/size_t")],-1),$=s("code",null,"float/double",-1),G=p(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> int, </span><span style="color:#C678DD;">short</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">kMin</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">multiply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> x </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> y </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> kMin;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> ia </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, ib </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> da </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3.3</span><span style="color:#ABB2BF;">, db </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4.4</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;multiply(ia, ib) = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">multiply</span><span style="color:#ABB2BF;">(ia, ib) </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;multiply(ia, ib) = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">multiply</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">&gt;(ia, ib) </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;multiply(ia, ib) = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">multiply</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">&gt;(da, db) </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$./a.out</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#61AFEF;">multiply(ia,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">ib</span><span style="color:#ABB2BF;">) = 120</span></span>
<span class="line"><span style="color:#61AFEF;">multiply(ia,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">ib</span><span style="color:#ABB2BF;">) = 48</span></span>
<span class="line"><span style="color:#61AFEF;">multiply(ia,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">ib</span><span style="color:#ABB2BF;">) = 58.08</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="成员函数模板" tabindex="-1"><a class="header-anchor" href="#成员函数模板" aria-hidden="true">#</a> 成员函数模板</h2><p>就是类的成员函数也可以设置为模板，可以写例子看看。</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Point</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //.............</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //成员函数模板,成员函数模板也是可以设置默认值</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> int&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">func</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> (T)_dx;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> _dx;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> _dy;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    Point </span><span style="color:#61AFEF;">pt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1.1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2.2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;pt.func() = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">pt</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">func</span><span style="color:#C678DD;">&lt;int&gt;</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;pt.func() = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">pt</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">func</span><span style="color:#C678DD;">&lt;double&gt;</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;pt.func() = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">pt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">func</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function H(K,L){const l=t("font");return c(),r("div",null,[d,F,s("ol",null,[A,u,s("li",null,[s("p",null,[D,n("：C/C++/Java等，有严格的类型检查，如int a = 10，"),v,m,n("，"),s("strong",null,[a(l,{color:"cornflowerblue"},{default:o(()=>[n("C++引进auto其实就是借鉴弱类型语言的特征")]),_:1})]),n("。")])]),b]),C,s("p",null,[n("注意："),h,n("与"),g,n("在此"),a(l,{color:"red"},{default:o(()=>[n("没有任何区别")]),_:1}),n("，完全一致。class出现的时间比较早，通用性更好一些，typename是后来才添加了，对于早期的编译器可能识别不了typename关键字。")]),_,s("p",null,[s("strong",null,[n("意义：一种特殊的函数可用"),a(l,{color:"red"},{default:o(()=>[n("不同类型进行调用")]),_:1}),n("，看起来和普通函数很相似，区别是类型可被参数化。")])]),s("p",null,[E,n(),s("strong",null,[f,n(" 关键字用于"),a(l,{color:"green"},{default:o(()=>[n("声明开始进行泛型编程")]),_:1}),n("，"),x,n(" 关键字用于"),a(l,{color:"green"},{default:o(()=>[n("声明泛指类型")]),_:1}),n("。")]),n(" **模板实现原理： "),a(l,{color:"cornflowerblue"},{default:o(()=>[n("在函数调用点用，编译器用用户指定的类型，从原模版实例化一份函数代码出来")]),_:1}),n("。**但我们实际使用时并不用关注它")]),k,s("ol",null,[s("li",null,[s("p",null,[s("strong",null,[n("只用写一套代码实现逻辑，"),a(l,{color:"red"},{default:o(()=>[n("实例化的类型调用时可指定")]),_:1}),n("，编译器会从原模版实例化出来。")])])]),s("li",null,[s("p",null,[s("strong",null,[a(l,{color:"red"},{default:o(()=>[n("函数模板不进行编译，模板函数才是要被编译器所编译的")]),_:1}),n("。")])])]),s("li",null,[s("p",null,[s("strong",null,[n("一般来说，模板代码=="),a(l,{color:"red"},{default:o(()=>[n("不能在一个文件定义，另一个文件使用")]),_:1}),n("==。模板代码调用之前，一定要看到模板定义的地方，这样模板才能够正常实例化。")])]),s("ol",null,[s("li",null,[n("分开可以编译，但是在"),a(l,{color:"red"},{default:o(()=>[n("链接的时候是有问题")]),_:1}),n("的。")])])])]),q,s("ol",null,[s("li",null,[s("p",null,[s("strong",null,[a(l,{color:"green"},{default:o(()=>[n("函数模板")]),_:1}),T,a(l,{color:"green"},{default:o(()=>[n("普通函数")]),_:1}),N,a(l,{color:"red"},{default:o(()=>[n("可以进行重载的")]),_:1})])])]),s("li",null,[s("p",null,[s("strong",null,[a(l,{color:"red"},{default:o(()=>[n("普通函数优先")]),_:1})]),n(),V])]),s("li",null,[s("p",null,[s("strong",null,[a(l,{color:"green"},{default:o(()=>[n("函数模板")]),_:1}),w,a(l,{color:"green"},{default:o(()=>[n("函数模板")]),_:1}),z,a(l,{color:"red"},{default:o(()=>[n("可以进行重载的")]),_:1})])])])]),I,s("p",null,[s("strong",null,[a(l,{color:"red"},{default:o(()=>[n("模板特例化：特殊的实例化")]),_:1}),n("。针对某些类型，以来编译器自己针对这些类型的模板实例化已经不满足代码的逻辑要求了，我们就针"),M,n("。不是编译器提供的，而是用户提供的。")])]),P,s("h3",S,[j,n(" 偏特化："),s("mark",null,[a(l,{color:"red"},{default:o(()=>[n("函数模板不能偏特化！！！！！！！！！！！！！")]),_:1})])]),J,s("p",null,[Q,n(),a(l,{color:"green"},{default:o(()=>[R]),_:1}),n(","),a(l,{color:"red"},{default:o(()=>[n("注意："),$,n("这些就不是整型")]),_:1})]),G])}const W=e(y,[["render",H],["__file","函数模板与模板函数.html.vue"]]);export{W as default};
