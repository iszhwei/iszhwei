import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as d,o as c,c as r,d as e,e as s,f as l,w as o,a as n}from"./app-m9pC5KT-.js";const t="/assets/image-20240310141538480-bvAL9EMU.png",p="/assets/image-20240310141436371-G21euvu9.png",u="/assets/image-20240310142108995-ktTPtyeU.png",g={},h=e("h1",{id:"程序出错了-怎么办",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#程序出错了-怎么办","aria-hidden":"true"},"#"),s(" 程序出错了，怎么办？？？")],-1),b=e("ol",null,[e("li",null,[e("code",null,"ulimit -c unlimited"),s(" 命令在 Linux 系统中用于设置 core 文件的大小限制为无限制")])],-1),m=e("figure",null,[e("img",{src:t,alt:"image-20240310141538480",tabindex:"0",loading:"lazy"}),e("figcaption",null,"image-20240310141538480")],-1),v=e("p",null,[s("具体来说，"),e("code",null,"ulimit -c unlimited"),s(" 命令的作用如下：")],-1),B=n('<li><p><strong>取消大小限制</strong>：<u>默认情况下，Linux 系统可能不生成 core 文件，或者对 core 文件的大小有限制</u>。使用 <code>ulimit -c unlimited</code> 可以确保当程序崩溃时，系统不会因文件大小限制而截断 core 文件，从而可以保存完整的内存映像。</p><figure><img src="'+p+'" alt="image-20240310141436371" tabindex="0" loading="lazy"><figcaption>image-20240310141436371</figcaption></figure></li><li><p><strong>便于调试</strong>：完整的 core 文件对于程序员和系统管理员来说是非常有价值的，因为它可以帮助他们了解程序崩溃时的状态，包括变量的值、内存布局等，从而更容易地定位问题所在。</p></li>',2),y=e("strong",null,"注意安全性",-1),x=n('<ol start="2"><li>用<code>-g</code>编译代码</li><li>执行代码，生成core</li><li><code>gdb a.out core</code></li><li><code>bt</code> 查看堆栈</li></ol><h2 id="gdb-设置命令行参数" tabindex="-1"><a class="header-anchor" href="#gdb-设置命令行参数" aria-hidden="true">#</a> gdb 设置命令行参数</h2><figure><img src="'+u+`" alt="image-20240310142108995" tabindex="0" loading="lazy"><figcaption>image-20240310142108995</figcaption></figure><h2 id="gdb-基本命令" tabindex="-1"><a class="header-anchor" href="#gdb-基本命令" aria-hidden="true">#</a> gdb 基本命令</h2><ol><li><strong>set args</strong>：设置程序运行时的参数。</li><li><strong>show args</strong>：查看设置好的运行参数。</li><li><strong>bt（或backtrace）</strong>：查看当前调用栈的信息。</li><li><strong>break（或b）</strong>：设置断点。例如，<code>break functionname</code> 会在函数<code>functionname</code>的入口处设置断点；<code>break filename:linenum</code> 会在<code>filename</code>文件的<code>linenum</code>行设置断点。</li><li><strong>info break（或i b）</strong>：查看当前所有断点的信息。</li><li><strong>delete break（或d）</strong>：删除断点。例如，<code>delete num</code> 会删除编号为<code>num</code>的断点。</li><li><code>ignore</code> :想要临时跳过某个断点几次时<code>ignore breakpoint-number count</code></li><li><strong>run（或r）</strong>：开始执行程序，直到遇到断点或程序结束。</li><li><strong>continue（或c）</strong>：从当前位置开始连续执行程序，直到遇到下一个断点或程序结束。</li><li><strong>next（或n）</strong>：执行下一行代码，跳过函数调用。</li><li><strong>step（或s）</strong>：执行下一行代码，进入函数调用。</li><li><strong>finish</strong>：执行当前函数，直到返回，然后停下来等待命令。</li><li><strong>set var</strong>：修改变量的值。例如，<code>set var variable=value</code> 会将<code>variable</code>的值设置为<code>value</code>。</li><li><strong>print（或p）</strong>：打印变量或表达式的值。例如，<code>print variable</code> 会打印<code>variable</code>的值。</li><li><strong>list（或l）</strong>：列出源代码。例如，<code>list functionname</code> 会列出<code>functionname</code>函数的源代码；<code>list linenum</code> 会列出从<code>linenum</code>开始的源代码。</li><li><strong>quit（或q）</strong>：退出GDB。</li></ol><h3 id="监视功能display" tabindex="-1"><a class="header-anchor" href="#监视功能display" aria-hidden="true">#</a> 监视功能<code>display</code></h3><p><code>display expression</code> 是GDB（GNU Debugger）中的一个命令，用于在每次程序停止时自动显示一个或多个表达式的值。这对于<strong>监视变量或内存地址</strong>在程序执行过程中的变化非常有用。</p><p>使用 <code>display</code> 命令时，GDB会为每个显示的表达式分配一个编号。你可以使用 <code>undisplay</code> 命令加上这个编号来删除特定的自动显示表达式。例如，如果 <code>display</code> 命令为某个表达式分配了编号1，你可以使用 <code>undisplay 1</code> 来删除它。</p><h4 id="监视变量值" tabindex="-1"><a class="header-anchor" href="#监视变量值" aria-hidden="true">#</a> 监视变量值</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">gdb</span><span style="color:#ABB2BF;">) display count</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>每次程序停止时（例如，在断点处），GDB都会自动显示 <code>count</code> 变量的当前值。</p><h4 id="监视指针指向的内容" tabindex="-1"><a class="header-anchor" href="#监视指针指向的内容" aria-hidden="true">#</a> 监视指针指向的内容</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">gdb</span><span style="color:#ABB2BF;">) display *ptr</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="监视内存地址的内容" tabindex="-1"><a class="header-anchor" href="#监视内存地址的内容" aria-hidden="true">#</a> 监视内存地址的内容</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">gdb</span><span style="color:#ABB2BF;">) display *(</span><span style="color:#61AFEF;">int*</span><span style="color:#ABB2BF;">)0x12345678</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令将显示内存地址 <code>0x12345678</code> 处作为整数（<code>int</code>）解释的值。每次程序停止时，这个值都会被更新</p><h4 id="监视表达式的结果" tabindex="-1"><a class="header-anchor" href="#监视表达式的结果" aria-hidden="true">#</a> 监视表达式的结果</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">gdb</span><span style="color:#ABB2BF;">) display a + b * c</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里，<code>a</code>、<code>b</code> 和 <code>c</code> 是程序中的变量。每次程序停止时，GDB都会计算并显示 <code>a + b * c</code> 这个表达式的值。</p><h4 id="监视结构体成员" tabindex="-1"><a class="header-anchor" href="#监视结构体成员" aria-hidden="true">#</a> 监视结构体成员</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">gdb</span><span style="color:#ABB2BF;">) display myStruct.member</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>myStruct</code> 是一个结构体变量，<code>member</code> 是该结构体中的一个成员。每次程序停止时，GDB都会显示 <code>myStruct.member</code> 的当前值。</p><h3 id="x命令来查看指定地址的内存值" tabindex="-1"><a class="header-anchor" href="#x命令来查看指定地址的内存值" aria-hidden="true">#</a> <code>x</code>命令来查看指定地址的内存值</h3><p><code>x</code>命令来查看指定地址的内存值，以及按照不同的格式（如字节、字、双字、浮点数等）来解析这些内存值</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">x</span><span style="color:#C678DD;">/</span><span style="color:#ABB2BF;">格式 地址</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,25),_=e("code",null,"格式",-1),k=e("li",null,[e("code",null,"b"),s("："),e("strong",null,"字节（一个字节）")],-1),F=e("li",null,[e("code",null,"h"),s("："),e("strong",null,"半字（两个字节）")],-1),f=e("code",null,"w",-1),A=n("<li><code>g</code>：巨字（八个字节，64位）</li><li><code>i</code>：<strong>机器指令（以汇编指令格式显示</strong></li><li><code>f</code>：<strong>浮点数（按照浮点数的格式显示）</strong></li><li><code>s</code>：<strong>字符串（以ASCII字符串格式显示）</strong></li><li><code>c</code>：<strong>字符（以ASCII字符格式显示）</strong></li><li><code>u</code>：<strong>无符号十进制整数</strong></li><li><code>t</code>：<strong>二进制整数</strong></li><li><code>o</code>：八进制整数</li><li><code>x</code> 或 <code>d</code>：<strong>十六进制或十进制整数（默认是十六进制）</strong></li>",9),E=e("li",null,[e("code",null,"地址"),s("：要检查的内存地址。")],-1),D=n(`<h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h4><ol><li>查看从地址<code>0x12345678</code>开始的4个字节，并以十六进制显示：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">gdb</span><span style="color:#ABB2BF;">) x/4xb 0x12345678</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>以二进制格式查看内存内容</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">gdb</span><span style="color:#ABB2BF;">) x/tb 0x401000</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>查看从地址<code>0x12345678</code>开始的指令，并以汇编指令格式显示：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">gdb</span><span style="color:#ABB2BF;">) x/i 0x12345678</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>查看从地址<code>0x12345678</code>开始的字符串（直到遇到空字符&#39;\\0&#39;为止）：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">gdb</span><span style="color:#ABB2BF;">) x/s 0x12345678</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>查看从当前程序计数器（PC）开始的指令：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">gdb</span><span style="color:#ABB2BF;">) x/i </span><span style="color:#E06C75;">$pc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,11);function G(C,S){const a=d("font");return c(),r("div",null,[h,e("p",null,[s("利用"),e("strong",null,[s("黑匣子"),l(a,{color:"red"},{default:o(()=>[s("core")]),_:1})]),s("（当程序异常终止时，操作系统保存程序执行时的内存映像的文件）")]),b,m,e("blockquote",null,[v,e("ol",null,[B,e("li",null,[e("p",null,[y,s("：需要注意的是，"),e("mark",null,[l(a,{color:"red"},{default:o(()=>[s("无限制地生成 core 文件可能会占用大量的磁盘空间，特别是在大型系统或频繁崩溃的情况下")]),_:1})]),s("。此外，core 文件可能包含敏感信息，因此需要注意文件的安全性和隐私保护。")])])])]),x,e("ul",null,[e("li",null,[_,s("：指定如何解析和显示内存内容。常用的格式有： "),e("ul",null,[k,F,e("li",null,[f,s("："),e("strong",null,[s("字（"),l(a,{color:"red"},{default:o(()=>[s("四个字节")]),_:1})]),s("，32位）")]),A])]),E]),D])}const I=i(g,[["render",G],["__file","gdb调试出错的程序.html.vue"]]);export{I as default};
