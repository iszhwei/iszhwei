import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as d,c as t,d as n,e as s,f as a,w as l,a as i}from"./app-m9pC5KT-.js";const c="/assets/cc329043840944a287f0dbb8717267fb-A8NTnK_C.png",p="/assets/586878d765924e7aadc240a8dbf58bb8-JZtZNZhZ.png",u="/assets/fe3cfe2331f249e185b45428291b93da-pyXRGSg9.png",h="/assets/83dff214d2da401181a859f203fb0d17-NEXgj3V7.png",g="/assets/e6b245cde80a40c1a07f85d8743854a3-9CYiobeJ.png",B="/assets/0969fb0a462340cb9257990633e6a6fb-dcDoIv2V.png",y="/assets/image-20240503191306732-Tptm1Zv4.png",b={},v=i('<h1 id="认识nosql和redis" tabindex="-1"><a class="header-anchor" href="#认识nosql和redis" aria-hidden="true">#</a> 认识NoSQL和Redis</h1><h2 id="一、nosql" tabindex="-1"><a class="header-anchor" href="#一、nosql" aria-hidden="true">#</a> 一、NoSQL</h2><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',3),m=n("strong",null,"作为关系型数据库的补充",-1),f=i('<p>NoSQL特征：<strong>可扩容、可伸缩、大数据量下高性能、灵活的数据类型、高可用</strong></p><h3 id="nosql的分类" tabindex="-1"><a class="header-anchor" href="#nosql的分类" aria-hidden="true">#</a> NoSQL的分类</h3><p>NoSQL数据库主要有以下四类。这些类别中的每一个都有其独特的属性和局限性。没有特定的数据库可以更好地解决所有问题。</p><ul><li><p>基于键值对 key-value类型：Redis，memcached</p></li><li><p>列存储数据库 Column-oriented Graph：HBase</p></li><li><p>图形数据库 Graphs based：Neo4j</p></li><li><p>文档型数据库： MongoDB</p><ul><li>MongoDB是一个基于分布式文件存储的数据库，主要用来<u>处理大量的文档</u>。</li></ul></li></ul><h4 id="memcache" tabindex="-1"><a class="header-anchor" href="#memcache" aria-hidden="true">#</a> Memcache</h4>',5),_=n("li",null,"很早出现的 NoSql 数据库",-1),k=n("li",null,"一般是作为缓存数据库辅助持久化的数据库（一般和MySQL等关系型数据库一起使用）",-1),x=n("h4",{id:"redis",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#redis","aria-hidden":"true"},"#"),s(" Redis")],-1),D=n("li",null,[n("strong",null,"几乎覆盖了 Memcached 的绝大部分功能")],-1),A=n("li",null,[n("strong",null,"数据都在内存中，支持持久化（数据可以存储到硬盘），主要用作备份恢复")],-1),F=n("li",null,[n("strong",null,"一般是作为缓存数据库辅助持久化的数据库（一般和MySQL等关系型数据库一起使用）")],-1),C=i('<h4 id="mongodb" tabindex="-1"><a class="header-anchor" href="#mongodb" aria-hidden="true">#</a> MongoDB</h4><ul><li>高性能、开源、模式自由(schema free)的文档型数据库 （存储结构和json类似，里面存储的数据形式多样，结构更加复杂）</li><li>数据都在内存中， 如果内存不足，把不常用的数据保存到硬盘 虽然是 key-value 模 式 ， 但 是 对 value （ 尤 其 是 json）提供了丰富的查询功能</li><li>支持二进制数据及大型对象</li><li>可以根据数据的特点替代 RDBMS ，成为独立的数据库。或者配合 RDBMS，存储特定的数据。</li></ul><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>集群数据库服务器通常以如下形式对外提供数据服务</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>基本信息存放在MySQL数据库，文本类信息存放在MongoDB，图片信息存放在FastDFS，搜索关键字存放在Slor，热点信息存放在Redis，这些数据库服务器一起对外提供服务</p>',6),R={id:"二、redis-remote-dictionary-service-远程字典服务器",tabindex:"-1"},q=n("a",{class:"header-anchor",href:"#二、redis-remote-dictionary-service-远程字典服务器","aria-hidden":"true"},"#",-1),S=i('<h3 id="redis简介" tabindex="-1"><a class="header-anchor" href="#redis简介" aria-hidden="true">#</a> redis简介</h3><p>Redis 是一个<strong>开源</strong>（BSD许可）的，<strong>C</strong>语言编写的，<strong>高性能</strong>的数据结构存储系统，它可以用作<strong>数据库、缓存和消息中间件</strong>。 它<strong>基于内存</strong>运行并支持<strong>持久化</strong>的高性能键值对（<strong>key-value</strong>）数据库</p><p>相关网站：</p><p>redis中文官网：http://www.redis.cn/</p><p>redis英文官网：https://redis.io/</p><h3 id="特征" tabindex="-1"><a class="header-anchor" href="#特征" aria-hidden="true">#</a> 特征：</h3><ul><li>数据间<strong>没有必然的关联关系</strong>：由于MySQL数据间的关联性太强，导致数据读取缓慢，NoSQL数据库要做的就是断开数据的关联关系</li><li><strong>内部采用单线程机制进行工作</strong>：单线程模型，原子性比较强，可以保证数据安全，采用IO多路复用的方式也能保证高性能 <ul><li>Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li></ul></li><li><strong>高性能</strong>：官方提供测试数据，50个并发执行10w个请求，读的速度是11w次/s，写的速度是8.1w次/s。</li><li><strong>多数据类型支持</strong>：string（字符串类型）、list（列表类型）、hash（散列类型）、set（集合类型）、sorted_set（有序集合类型）</li><li><strong>持久化支持</strong>（非Redis主要功能）：可以进行数据灾难恢复，避免突发情况导致数据丢失</li><li><strong>丰富的特性</strong>: Redis还支持publish/subscribe, 通知, key过期等等特性。</li></ul><blockquote><p>Redis的特性</p><p>1、<strong>支持持久化</strong>。redis是内存数据库，数据是存在内存中，断电重启之后，数据会丢失，持久化可以将数据被备份到磁盘上面，断电重启之后，可以将数据加载到内存中。</p><p>2、<strong>支持丰富的数据类型</strong>。支持：string、list、set、sort set、hash</p><p>3、<strong>支持数据的备份</strong>，也就是支持主从复制。</p><p>Redis优点</p><p>1、<strong>性能高</strong>。读11w/s,写8.1w/s</p><p>2、<strong>丰富的数据类型</strong>，支持：string、list、set、sort set、hash</p><p>3、<strong>原子</strong></p><p>4、<strong>丰富的特性</strong>，支持发布订阅，key过期。</p></blockquote><h3 id="redis的应用" tabindex="-1"><a class="header-anchor" href="#redis的应用" aria-hidden="true">#</a> Redis的应用</h3><ul><li><strong>为热点数据加速查询</strong>（主要场景），如热点商品、热点新闻、热点资讯、推广类等高访问量信息等</li><li><strong>任务队列</strong>，如秒杀、抢购、购票排队等</li><li><strong>即时信息查询</strong>，如各位排行榜、各类网站访问统计、公交到站信息、在线人数信息（聊天室、网站）、设备信号等</li><li><strong>时效性信息控制</strong>，如验证码控制、QQ群投票控制等</li><li><strong>分布式数据共享</strong>，如分布式集群架构中的 session 分离</li><li><strong>消息队列</strong></li><li><strong>分布式锁</strong></li></ul><h3 id="redis为什么是单线程及为什么快的总结" tabindex="-1"><a class="header-anchor" href="#redis为什么是单线程及为什么快的总结" aria-hidden="true">#</a> redis为什么是单线程及为什么快的总结</h3>',11),N=n("strong",null,"纯内存数据库",-1),w=i("<li>Redis使用的是<strong>非阻塞IO、IO多路复用</strong>，使用了<strong>单线程来轮询描述符</strong>，<u>将数据库的开、关、读、写都转换成了事件，减少了线程切换时上下文的切换和竞争</u>。</li><li>Redis采用了<strong>单线程的模型</strong>，保证了<u>每个操作的原子性，也减少了线程的上下文切换和竞争</u>。</li><li>Redis<u>避免了多线程的锁的消耗</u>。</li><li>Redis<u><strong>采用自己实现的事件分离器</strong>，效率比较高，<strong>内部采用非阻塞的执行方式</strong>，吞吐能力比较大。</u></li>",4),Q=i('<h3 id="windows版redis程序说明" tabindex="-1"><a class="header-anchor" href="#windows版redis程序说明" aria-hidden="true">#</a> windows版Redis程序说明</h3><figure><img src="'+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="redis基本命令" tabindex="-1"><a class="header-anchor" href="#redis基本命令" aria-hidden="true">#</a> Redis基本命令</h3><p>命令行模式工具使用：功能性命令、清除屏幕信息、帮助信息查阅、退出指令</p><h4 id="信息添加" tabindex="-1"><a class="header-anchor" href="#信息添加" aria-hidden="true">#</a> 信息添加</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">set</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">value</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="信息查询-根据key查询对应的value-如果不存在-返回空-null" tabindex="-1"><a class="header-anchor" href="#信息查询-根据key查询对应的value-如果不存在-返回空-null" aria-hidden="true">#</a> 信息查询：根据key查询对应的value,如果不存在，返回空（null)</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">get</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">key</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="删除数据" tabindex="-1"><a class="header-anchor" href="#删除数据" aria-hidden="true">#</a> 删除数据</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">del </span><span style="color:#C678DD;">key</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+B+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="清除屏幕信息" tabindex="-1"><a class="header-anchor" href="#清除屏幕信息" aria-hidden="true">#</a> 清除屏幕信息</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">clear</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="帮助命令-获取命令帮助文档-获取组中所有命令信息名称" tabindex="-1"><a class="header-anchor" href="#帮助命令-获取命令帮助文档-获取组中所有命令信息名称" aria-hidden="true">#</a> 帮助命令：获取命令帮助文档，获取组中所有命令信息名称</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">help 命令名称</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+y+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="退出客户端" tabindex="-1"><a class="header-anchor" href="#退出客户端" aria-hidden="true">#</a> 退出客户端</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">quit</span></span>
<span class="line"><span style="color:#ABB2BF;">exit</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#单进程模型来处理客户端的请求，对读写等事件的响应通过对epoll的包装来做到。</span></span>
<span class="line"><span style="color:#ABB2BF;">#默认16个数据库，编号0-</span><span style="color:#D19A66;">15</span><span style="color:#ABB2BF;">，切换数据库</span></span>
<span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> + num</span></span>
<span class="line"><span style="color:#ABB2BF;">#把key从当前库移动到目标库</span></span>
<span class="line"><span style="color:#C678DD;">move</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">[num]</span><span style="color:#ABB2BF;">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#查看当前数据库的key的数量</span></span>
<span class="line"><span style="color:#ABB2BF;">dbs</span></span>
<span class="line"><span style="color:#ABB2BF;">#清空当前数据库，</span></span>
<span class="line"><span style="color:#ABB2BF;">flushdb</span></span>
<span class="line"><span style="color:#ABB2BF;">#清空所有数据库</span></span>
<span class="line"><span style="color:#ABB2BF;">flushall</span></span>
<span class="line"><span style="color:#ABB2BF;">#查看key值，问号表示占位符</span></span>
<span class="line"><span style="color:#ABB2BF;">keys *,keys k? </span></span>
<span class="line"><span style="color:#ABB2BF;">#判断key是否存在</span></span>
<span class="line"><span style="color:#C678DD;">exists</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">#查看key的剩余有效时间，-1表示永不过期，-2表示已过期</span></span>
<span class="line"><span style="color:#ABB2BF;">ttl </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#ABB2BF;">#为给定的key设置过期的时间</span></span>
<span class="line"><span style="color:#ABB2BF;">expire </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">seconds</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">#查看key的类型</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">#删除key </span></span>
<span class="line"><span style="color:#ABB2BF;">del </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;">	</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20);function L(M,z){const e=o("font");return d(),t("div",null,[v,n("p",null,[s("NoSQL：Not-Only SQL，泛指非关系型数据库，"),m,s("，"),a(e,{color:"red"},{default:l(()=>[s("真正的数据还得是存在硬盘上的关系型数据库")]),_:1}),s("，非关系型数据库一般不会用，"),a(e,{color:"green"},{default:l(()=>[s("一般会用在海量用户和高并发的场景下")]),_:1}),s("font>")]),f,n("ul",null,[_,n("li",null,[s("数据都存储在内存中，"),a(e,{color:"red"},{default:l(()=>[s("一般不持久化 （不能存储在硬盘或者文件，只能存储在内存，关机了内存的数据就不存在了）")]),_:1})]),n("li",null,[s("支持简单的 key-value 模式，支持"),a(e,{color:"red"},{default:l(()=>[s("类型单一")]),_:1})]),k]),x,n("ul",null,[D,A,n("li",null,[n("strong",null,[s("除了支持简单的 key-value 模式，还支持多种数据结构 的存储，比如 list、set、hash、zset "),a(e,{color:"green"},{default:l(()=>[s("等")]),_:1}),s("。")])]),F]),C,n("h2",R,[q,s(" 二、Redis （"),a(e,{color:"red"},{default:l(()=>[s("Re")]),_:1}),s("mote "),a(e,{color:"red"},{default:l(()=>[s("Di")]),_:1}),s("ctionary "),a(e,{color:"red"},{default:l(()=>[s("S")]),_:1}),s("ervice，远程字典服务器）")]),S,n("ol",null,[n("li",null,[s("Redis是"),N,s("，"),a(e,{color:"red"},{default:l(()=>[s("一般都是简单的存取操作，线程占用的时间很多，时间的花费主要集中在IO上")]),_:1}),s("，所以读取速度快。")]),w]),Q])}const E=r(b,[["render",L],["__file","认识NoSQL和Redis.html.vue"]]);export{E as default};
