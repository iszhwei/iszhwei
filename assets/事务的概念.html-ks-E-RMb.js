import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as r,c,d as s,f as n,w as l,e as a,a as o}from"./app-2pke9_a8.js";const d="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-MxahiHD9.png",_="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-17134996483763-dQeDx9tI.png",p="/assets/image-20240419121023301-_2ms7csK.png",u="/assets/image-20240419124714585-8N8FHSzK.png",g="/assets/image-20240419142030617-6LlPGP7c.png",h={},m=o('<h1 id="事务的概念" tabindex="-1"><a class="header-anchor" href="#事务的概念" aria-hidden="true">#</a> 事务的概念</h1><h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h2><blockquote><p><strong>InnoDB支持事务，而MyISAM不支持事务</strong></p></blockquote><p>一个事务是由<u>一条或者多条对数据库操作的SQL语句</u>所组成的<strong>一个不可分割的单元</strong>，<u>只有当事务中的所有操作都正常执行完了，整个事务才会被提交给数据库；如果有部分事务处理失败，那么事务就要回退到最初的状态</u>，因此，<strong>事务要么全部执行成功，要么全部失败</strong>。</p><p>所以记住事务的几个基本概念，如下：</p><ol><li><mark>事务是一组SQL语句的执行，要么全部成功，要么全部失败，不能出现部分成功，部分失败的结果。保证事务执行的原子性</mark></li><li><mark>事务的所有SQL语句全部执行成功，才能提交（commit） 事务，把结果写回磁盘</mark></li><li><mark>事务执行过程中，有SQL出现错误，那么事务必须要回滚（rollback） 到最初的状态</mark></li></ol><h2 id="代码上的事务操作" tabindex="-1"><a class="header-anchor" href="#代码上的事务操作" aria-hidden="true">#</a> 代码上的事务操作</h2><p>比如转账业务需要多条SQL语句共同完成，只有这些SQL都执行成功才算业务成功了</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',9),f=s("u",null,"都成功",-1),b=s("u",null,"出错",-1),B=o('<p>这是存储引擎来保证的（redo log和undo log保证的）</p><figure><img src="'+_+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="查看当前数据库支持的存储引擎" tabindex="-1"><a class="header-anchor" href="#查看当前数据库支持的存储引擎" aria-hidden="true">#</a> 查看当前数据库支持的存储引擎</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">show engines;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="修改提交方式" tabindex="-1"><a class="header-anchor" href="#修改提交方式" aria-hidden="true">#</a> 修改提交方式</h2><p>数据库引擎可以通过命令临时修改，或者通过配置文件永久<strong>修改事务的提交方式</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> @@autocommit;</span></span>
<span class="line"><span style="color:#C678DD;">set</span><span style="color:#ABB2BF;"> @@autocommit</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; #事务手动提交</span></span>
<span class="line"><span style="color:#C678DD;">set</span><span style="color:#ABB2BF;"> autocommit</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; #上面一样</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),x=s("code",null,"1",-1),y=s("strong",null,"事务自动提交",-1),F=s("code",null,"0",-1),k=s("strong",null,"务手动提交",-1),v=s("li",null,[s("strong",null,"这种修改只对当前会话session有效")],-1),Q=s("u",null,"事务由多条SQL组成，所以我们设置为手动提交。业务都成功，则提交这个事务；如果业务中间出现失败，就回滚1个事务",-1),L=s("figure",null,[s("img",{src:u,alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1),S=s("figure",null,[s("img",{src:g,alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1);function A(D,z){const e=i("font");return r(),c("div",null,[m,s("ul",null,[s("li",null,[n(e,{color:"red"},{default:l(()=>[a("begin开启事务")]),_:1})]),s("li",null,[s("p",null,[a("如果这2句SQL"),f,a("了，那么"),n(e,{color:"red"},{default:l(()=>[a("commit提交一个事务")]),_:1})])]),s("li",null,[s("p",null,[a("如果其中任意一条SQL由于停电，或者服务器"),b,a("，导致SQL执行异常，那事务就没有提交，"),n(e,{color:"red"},{default:l(()=>[a("事务会回滚")]),_:1}),a("，数据将恢复到事务开始前的状态")])])]),B,s("ul",null,[s("li",null,[a("@@autocommit为"),x,a("表示"),n(e,{color:"green"},{default:l(()=>[y]),_:1}),a("，为"),F,a("表示事"),n(e,{color:"green"},{default:l(()=>[k]),_:1})]),v]),n(e,{color:"red"},{default:l(()=>[a("做业务的时候，我们一般会在代码上控制这个变量")]),_:1}),a("，一般来说，我们的"),Q,L,S])}const N=t(h,[["render",A],["__file","事务的概念.html.vue"]]);export{N as default};
