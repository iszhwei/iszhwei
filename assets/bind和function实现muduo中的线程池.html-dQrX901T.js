const s=JSON.parse('{"key":"v-0413f5c0","path":"/ccpp/17%20bind%E7%BB%91%E5%AE%9A%E5%99%A8%E5%92%8Cfunction%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/bind%E5%92%8Cfunction%E5%AE%9E%E7%8E%B0muduo%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0.html","title":"bind和function实现muduo中的线程池","lang":"zh-CN","frontmatter":{"title":"bind和function实现muduo中的线程池","icon":"file","order":6,"headerDepth":4,"category":["c/c++"],"tag":["bind绑定器","function函数对象","线程池"],"description":"bind和function实现muduo中的线程池 #include &lt;iostream&gt; #include &lt;typeinfo&gt; #include &lt;string&gt; #include &lt;memory&gt; #include &lt;vector&gt; #include &lt;functional&gt; #include &lt;thread&gt; using namespace std; using namespace placeholders; //线程类 class Thread { public: \\tThread(function&lt;void(int)&gt; func, int no)//使用function接收bind :_func(func), _no(no) {} \\tthread start() \\t{ \\t\\tthread t(_func, _no);// _func(_no) \\t\\treturn t; \\t} private: \\tfunction&lt;void(int)&gt; _func;//存储线程处理函数 \\tint _no; }; //线程池类 class ThreadPool { public: \\tThreadPool() {} \\t~ThreadPool() \\t{ \\t\\t//因为vector存储的是指针，所以需要手动释放资源 //释放Thread对象占用的堆资源 \\t\\tfor (int i = 0; i &lt; _pool.size(); ++i) \\t\\t{ \\t\\t\\tdelete _pool[i]; \\t\\t} \\t} \\t//开启线程池 \\tvoid startPool(int size) \\t{ //创建线程池 \\t\\tfor (int i = 0; i &lt; size; ++i) \\t\\t{ \\t\\t\\t_pool.push_back(\\t \\t\\tnew Thread(bind(&amp;ThreadPool::runInThread, this, _1), i)); \\t\\t} \\t\\t //将线程句柄存储起来用于等待完成 \\t\\tfor (int i = 0; i &lt; size; ++i) \\t\\t{ \\t\\t\\t_handler.push_back(_pool[i]-&gt;start()); \\t\\t} \\t\\tfor (thread&amp; t : _handler) \\t\\t{ \\t\\t\\tt.join(); \\t\\t} \\t} private: \\tvector&lt;Thread*&gt; _pool; \\tvector&lt;thread&gt; _handler; \\t//把runInThread这个成员方法充当线程函数 thread pthread_create \\tvoid runInThread(int id) \\t{ \\t\\tcout &lt;&lt; \\"call runInThread! id:\\" &lt;&lt; id &lt;&lt; endl; \\t} }; int main() { \\tThreadPool pool; \\tpool.startPool(10); \\treturn 0; }","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/17%20bind%E7%BB%91%E5%AE%9A%E5%99%A8%E5%92%8Cfunction%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/bind%E5%92%8Cfunction%E5%AE%9E%E7%8E%B0muduo%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"bind和function实现muduo中的线程池"}],["meta",{"property":"og:description","content":"bind和function实现muduo中的线程池 #include &lt;iostream&gt; #include &lt;typeinfo&gt; #include &lt;string&gt; #include &lt;memory&gt; #include &lt;vector&gt; #include &lt;functional&gt; #include &lt;thread&gt; using namespace std; using namespace placeholders; //线程类 class Thread { public: \\tThread(function&lt;void(int)&gt; func, int no)//使用function接收bind :_func(func), _no(no) {} \\tthread start() \\t{ \\t\\tthread t(_func, _no);// _func(_no) \\t\\treturn t; \\t} private: \\tfunction&lt;void(int)&gt; _func;//存储线程处理函数 \\tint _no; }; //线程池类 class ThreadPool { public: \\tThreadPool() {} \\t~ThreadPool() \\t{ \\t\\t//因为vector存储的是指针，所以需要手动释放资源 //释放Thread对象占用的堆资源 \\t\\tfor (int i = 0; i &lt; _pool.size(); ++i) \\t\\t{ \\t\\t\\tdelete _pool[i]; \\t\\t} \\t} \\t//开启线程池 \\tvoid startPool(int size) \\t{ //创建线程池 \\t\\tfor (int i = 0; i &lt; size; ++i) \\t\\t{ \\t\\t\\t_pool.push_back(\\t \\t\\tnew Thread(bind(&amp;ThreadPool::runInThread, this, _1), i)); \\t\\t} \\t\\t //将线程句柄存储起来用于等待完成 \\t\\tfor (int i = 0; i &lt; size; ++i) \\t\\t{ \\t\\t\\t_handler.push_back(_pool[i]-&gt;start()); \\t\\t} \\t\\tfor (thread&amp; t : _handler) \\t\\t{ \\t\\t\\tt.join(); \\t\\t} \\t} private: \\tvector&lt;Thread*&gt; _pool; \\tvector&lt;thread&gt; _handler; \\t//把runInThread这个成员方法充当线程函数 thread pthread_create \\tvoid runInThread(int id) \\t{ \\t\\tcout &lt;&lt; \\"call runInThread! id:\\" &lt;&lt; id &lt;&lt; endl; \\t} }; int main() { \\tThreadPool pool; \\tpool.startPool(10); \\treturn 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"bind绑定器"}],["meta",{"property":"article:tag","content":"function函数对象"}],["meta",{"property":"article:tag","content":"线程池"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"bind和function实现muduo中的线程池\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":1.39,"words":416},"filePathRelative":"ccpp/17 bind绑定器和function函数对象/bind和function实现muduo中的线程池.md","excerpt":"<h1> bind和function实现muduo中的线程池</h1>\\n<div class=\\"language-c++ line-numbers-mode\\" data-ext=\\"c++\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;iostream&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;typeinfo&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;string&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;memory&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;vector&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;functional&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;thread&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">using</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">namespace</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">std</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">using</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">namespace</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">placeholders</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">//线程类</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Thread</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">public:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #61AFEF\\">Thread</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">function</span><span style=\\"color: #ABB2BF\\">&lt;</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\">)&gt; </span><span style=\\"color: #E06C75; font-style: italic\\">func</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">no</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #7F848E; font-style: italic\\">//使用function接收bind</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        :</span><span style=\\"color: #61AFEF\\">_func</span><span style=\\"color: #ABB2BF\\">(func), </span><span style=\\"color: #61AFEF\\">_no</span><span style=\\"color: #ABB2BF\\">(no) {}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #E5C07B\\">thread</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">start</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\tthread </span><span style=\\"color: #61AFEF\\">t</span><span style=\\"color: #ABB2BF\\">(_func, _no);</span><span style=\\"color: #7F848E; font-style: italic\\">// _func(_no)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> t;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">private:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tfunction</span><span style=\\"color: #C678DD\\">&lt;void</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #C678DD\\">&gt;</span><span style=\\"color: #ABB2BF\\"> _func;</span><span style=\\"color: #7F848E; font-style: italic\\">//存储线程处理函数</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> _no;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">//线程池类</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">ThreadPool</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">public:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #61AFEF\\">ThreadPool</span><span style=\\"color: #ABB2BF\\">() {}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #61AFEF\\">~ThreadPool</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t\\t//因为vector存储的是指针，所以需要手动释放资源</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">        //释放Thread对象占用的堆资源</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> i </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">; i </span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">_pool</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">size</span><span style=\\"color: #ABB2BF\\">(); </span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">i)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #C678DD\\">delete</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">_pool</span><span style=\\"color: #ABB2BF\\">[i];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t//开启线程池</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">startPool</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">size</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">        //创建线程池</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> i </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">; i </span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\"> size; </span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">i)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #E5C07B\\">_pool</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">push_back</span><span style=\\"color: #ABB2BF\\">(\\t</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">         \\t\\t</span><span style=\\"color: #C678DD\\">new</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">Thread</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #61AFEF\\">bind</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\">ThreadPool::runInThread, </span><span style=\\"color: #E5C07B\\">this</span><span style=\\"color: #ABB2BF\\">, _1), i));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">        //将线程句柄存储起来用于等待完成</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> i </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">; i </span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\"> size; </span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">i)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #E5C07B\\">_handler</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">push_back</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">_pool</span><span style=\\"color: #ABB2BF\\">[i]-&gt;</span><span style=\\"color: #61AFEF\\">start</span><span style=\\"color: #ABB2BF\\">());</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (thread</span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\"> t : _handler)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #E5C07B\\">t</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">join</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">private:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tvector</span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\">Thread</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #C678DD\\">&gt;</span><span style=\\"color: #ABB2BF\\"> _pool;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tvector</span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\">thread</span><span style=\\"color: #C678DD\\">&gt;</span><span style=\\"color: #ABB2BF\\"> _handler;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t//把runInThread这个成员方法充当线程函数  thread   pthread_create</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">runInThread</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">id</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\tcout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"call runInThread! id:\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> id </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">main</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tThreadPool pool;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #E5C07B\\">pool</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">startPool</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #D19A66\\">10</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{s as data};
