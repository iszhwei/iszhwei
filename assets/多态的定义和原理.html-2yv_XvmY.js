const t=JSON.parse('{"key":"v-72de4250","path":"/ccpp/07%20%E5%A4%9A%E6%80%81/%E5%A4%9A%E6%80%81%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E5%8E%9F%E7%90%86.html","title":"多态的定义和原理","lang":"zh-CN","frontmatter":{"title":"多态的定义和原理","icon":"file","order":6,"headerDepth":4,"category":["c/c++"],"tag":["多态"],"description":"多态的定义和原理 多态的定义 多态性（polymorphism）是面向对象设计语言的基本特征之一。仅仅是将数据和函数捆绑在一起，进行类的封装，使用一些简单的继承，还不能算是真正应用了面向对象的设计思想。多态性是面向对象的精髓。多态性可以简单地概括为“一个接口，多种方法”。 通常是指对于。 为什么用多态 封装可以隐藏实现细节，使得代码模块化；继承可以扩展已存在的代码模块（类）。它们的目的都是为了代码重用。而多态除了代码的复用性外，还可以解决项目中紧偶合的问题，提高程序的可扩展性。","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/07%20%E5%A4%9A%E6%80%81/%E5%A4%9A%E6%80%81%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"多态的定义和原理"}],["meta",{"property":"og:description","content":"多态的定义和原理 多态的定义 多态性（polymorphism）是面向对象设计语言的基本特征之一。仅仅是将数据和函数捆绑在一起，进行类的封装，使用一些简单的继承，还不能算是真正应用了面向对象的设计思想。多态性是面向对象的精髓。多态性可以简单地概括为“一个接口，多种方法”。 通常是指对于。 为什么用多态 封装可以隐藏实现细节，使得代码模块化；继承可以扩展已存在的代码模块（类）。它们的目的都是为了代码重用。而多态除了代码的复用性外，还可以解决项目中紧偶合的问题，提高程序的可扩展性。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"多态"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"多态的定义和原理\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[{"level":2,"title":"多态的定义","slug":"多态的定义","link":"#多态的定义","children":[]},{"level":2,"title":"为什么用多态","slug":"为什么用多态","link":"#为什么用多态","children":[]},{"level":2,"title":"多态的分类","slug":"多态的分类","link":"#多态的分类","children":[{"level":3,"title":"案例1.静多态：函数重载","slug":"案例1-静多态-函数重载","link":"#案例1-静多态-函数重载","children":[]},{"level":3,"title":"案例2.静多态：模板，模板的实例化发生在编译阶段","slug":"案例2-静多态-模板-模板的实例化发生在编译阶段","link":"#案例2-静多态-模板-模板的实例化发生在编译阶段","children":[]},{"level":3,"title":"案例3.动多态：实现一个动物类","slug":"案例3-动多态-实现一个动物类","link":"#案例3-动多态-实现一个动物类","children":[]}]}],"git":{},"readingTime":{"minutes":4.31,"words":1292},"filePathRelative":"ccpp/07 多态/多态的定义和原理.md","excerpt":"<h1> 多态的定义和原理</h1>\\n<h2> 多态的定义</h2>\\n<p>多态性（polymorphism）是面向对象设计语言的基本特征之一。仅仅是将数据和函数捆绑在一起，进行类的封装，使用一些简单的继承，还不能算是真正应用了面向对象的设计思想。<u>多态性是面向对象的精髓</u>。多态性可以简单地概括为“<strong>一个接口，多种方法</strong>”。</p>\\n<p>通常是指对于。</p>\\n<h2> 为什么用多态</h2>\\n<p><u>封装可以隐藏实现细节，使得<strong>代码模块化</strong>；继承可以<strong>扩展</strong>已存在的代码模块（类）。它们的目的都是为了<strong>代码重用</strong></u>。而<u>多态除了代码的<strong>复用性</strong>外，还可以<strong>解决项目中紧偶合的问题，提高程序的可扩展性</strong>。</u></p>","autoDesc":true}');export{t as data};
