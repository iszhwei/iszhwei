const a=JSON.parse('{"key":"v-2c027fc3","path":"/ccpp/17%20bind%E7%BB%91%E5%AE%9A%E5%99%A8%E5%92%8Cfunction%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html","title":"lambda表达式","lang":"zh-CN","frontmatter":{"title":"lambda表达式","icon":"file","order":7,"headerDepth":4,"category":["c/c++"],"tag":["lambda"],"description":"lambda表达式 C++11 函数对象的升级版 =》 lambda表达式 函数对象的缺点：（需要定义一个类） 函数对象使用在 泛型算法参数传递 比较性质/自定义操作 优先级队列 智能指针（自定义智能指针的删除器） lambda表达式原理： 就是函数对象更高级的实现！ 1、lambda表达式语法 [捕获外部变量](形参列表)-&gt;返回值{操作代码} 如果lambda表达式的返回值不需要，那么\\"-&gt;返回值\\"可以省略 [捕获外部变量] []：表示不捕获任何外部变量 [=]：以传值的方式捕获外部的所有变量 [&amp;]：以传引用的方式捕获外部的所有变量 [this]：捕获外部的this指针 [=,&amp;a]：以传值的方式捕获外部的所有变量，但是a变量以传引用的方式捕获 [a, b]：以值传递的方式捕获外部变量a和b [a, &amp;b]：a以值传递捕获，b以传引用的方式捕获","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/17%20bind%E7%BB%91%E5%AE%9A%E5%99%A8%E5%92%8Cfunction%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"lambda表达式"}],["meta",{"property":"og:description","content":"lambda表达式 C++11 函数对象的升级版 =》 lambda表达式 函数对象的缺点：（需要定义一个类） 函数对象使用在 泛型算法参数传递 比较性质/自定义操作 优先级队列 智能指针（自定义智能指针的删除器） lambda表达式原理： 就是函数对象更高级的实现！ 1、lambda表达式语法 [捕获外部变量](形参列表)-&gt;返回值{操作代码} 如果lambda表达式的返回值不需要，那么\\"-&gt;返回值\\"可以省略 [捕获外部变量] []：表示不捕获任何外部变量 [=]：以传值的方式捕获外部的所有变量 [&amp;]：以传引用的方式捕获外部的所有变量 [this]：捕获外部的this指针 [=,&amp;a]：以传值的方式捕获外部的所有变量，但是a变量以传引用的方式捕获 [a, b]：以值传递的方式捕获外部变量a和b [a, &amp;b]：a以值传递捕获，b以传引用的方式捕获"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"lambda"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"lambda表达式\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[{"level":2,"title":"1、lambda表达式语法","slug":"_1、lambda表达式语法","link":"#_1、lambda表达式语法","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"值传递","slug":"值传递","link":"#值传递","children":[]},{"level":3,"title":"引用传递","slug":"引用传递","link":"#引用传递","children":[]}]},{"level":2,"title":"lambda应用","slug":"lambda应用","link":"#lambda应用","children":[{"level":3,"title":"例1—从大到小排序","slug":"例1—从大到小排序","link":"#例1—从大到小排序","children":[]},{"level":3,"title":"例2—按序插入元素65","slug":"例2—按序插入元素65","link":"#例2—按序插入元素65","children":[]},{"level":3,"title":"for_each","slug":"for-each","link":"#for-each","children":[]}]},{"level":2,"title":"lambda表达式的应用实践","slug":"lambda表达式的应用实践","link":"#lambda表达式的应用实践","children":[{"level":3,"title":"1、计算器案例","slug":"_1、计算器案例","link":"#_1、计算器案例","children":[]},{"level":3,"title":"2、智能指针案例","slug":"_2、智能指针案例","link":"#_2、智能指针案例","children":[]},{"level":3,"title":"3、优先级队列","slug":"_3、优先级队列","link":"#_3、优先级队列","children":[]}]}],"git":{},"readingTime":{"minutes":3.43,"words":1028},"filePathRelative":"ccpp/17 bind绑定器和function函数对象/lambda表达式.md","excerpt":"<h1> lambda表达式</h1>\\n<ul>\\n<li><strong>C++11 函数对象的升级版 =》 lambda表达式</strong></li>\\n<li><strong>函数对象的缺点：</strong>（<code>需要定义一个类</code>）</li>\\n<li>函数对象使用在 <strong>泛型算法参数传递 比较性质/自定义操作 优先级队列 智能指针（自定义智能指针的删除器）</strong></li>\\n</ul>\\n<p><strong>lambda表达式原理：</strong> 就是函数对象更高级的实现！</p>\\n<h2> 1、lambda表达式语法</h2>\\n<div class=\\"language-c++ line-numbers-mode\\" data-ext=\\"c++\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #ABB2BF\\">[捕获外部变量](形参列表)-&gt;</span><span style=\\"color: #C678DD\\">返回值{操作代码}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">如果lambda表达式的返回值不需要，那么\\"-&gt;返回值\\"可以省略</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">[捕获外部变量]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">[]：表示不捕获任何外部变量</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">[=]：以传值的方式捕获外部的所有变量</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">[&amp;]：以传引用的方式捕获外部的所有变量</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">[this]：捕获外部的this指针</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">[=,&amp;a]：以传值的方式捕获外部的所有变量，但是a变量以传引用的方式捕获</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">[a,</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">b]：以值传递的方式捕获外部变量a和b</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">[a,</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&amp;b]：a以值传递捕获，b以传引用的方式捕获</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{a as data};
