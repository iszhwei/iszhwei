import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as r,c as d,d as a,e as s,f as n,w as l,a as o}from"./app-2pke9_a8.js";const t="/assets/image-20240412142839918-EA69kjFK.png",B="/assets/image-20240412134918477-WMxVjAHd.png",u="/assets/image-20240412143331454-LgTGlwFv.png",y="/assets/aa392ae90ad1410db293dfee81793151-_lUqan3z.png",m="/assets/37ce1dcb88844cb385820e7f22166b81-x3dtv2Nt.png",b="/assets/d56e65ec611f4b6fb6833c406b637984-LKpcSnep.png",v={},_=a("h1",{id:"cmake的使用",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#cmake的使用","aria-hidden":"true"},"#"),s(" CMake的使用")],-1),D=a("h2",{id:"cmake介绍",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#cmake介绍","aria-hidden":"true"},"#"),s(" CMake介绍")],-1),C=o(`<h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><h3 id="linux环境安装cmake" tabindex="-1"><a class="header-anchor" href="#linux环境安装cmake" aria-hidden="true">#</a> Linux环境安装CMake</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">sudo</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">apt</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">cmake</span></span>
<span class="line"><span style="color:#61AFEF;">cmake</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-version</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">#查看版本</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,3),A={href:"https://cmake.org/download/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/Kitware/CMake/releases/download/v3.29.2/cmake-3.29.2-linux-x86_64.tar.gz",target:"_blank",rel:"noopener noreferrer"},F=o(`<li><p>移动到Linux下并解压（jie&#39;ya&#39;h）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">tar -zxvf cmake-3.29.2-linux-x86_64.tar.gz</span></span>
<span class="line"><span style="color:#abb2bf;">cd cmake-3.29.2-linux-x86_64/bin</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查看版本</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">./cmake -version</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>建立软链接</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">sudo</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">ln</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-s</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">~/app/cmake-3.29.2-linux-x86_64/bin/cmake</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/bin/cmake</span></span>
<span class="line"><span style="color:#61AFEF;">cmake</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-version</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">#再测试</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+t+'" alt="image-20240412142839918" tabindex="0" loading="lazy"><figcaption>image-20240412142839918</figcaption></figure></li>',3),h=o(`<h3 id="vscode环境安装cmake" tabindex="-1"><a class="header-anchor" href="#vscode环境安装cmake" aria-hidden="true">#</a> vscode环境安装CMake</h3><ol><li><p>vscode下载相应插件-<code>CMake</code>、<code>CMake Tools</code></p></li><li><p>shell终端查找cmake位置，前面我们建立的软链接，直接使用<code>/usr/bin/cmake</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">whereis cmake</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>点击CMake Tools的扩展设置</p><figure><img src="`+B+'" alt="image-20240412134918477" tabindex="0" loading="lazy"><figcaption>image-20240412134918477</figcaption></figure></li><li><p>选择远程主机配置，找到<code>Cmake:Build Environment</code>，添加相应环境变量即可。</p></li></ol><figure><img src="'+u+'" alt="image-20240412143331454" tabindex="0" loading="lazy"><figcaption>image-20240412143331454</figcaption></figure><h2 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法" aria-hidden="true">#</a> 使用方法</h2><h3 id="linux上cmake使用" tabindex="-1"><a class="header-anchor" href="#linux上cmake使用" aria-hidden="true">#</a> Linux上CMake使用</h3><p>先cmake在make</p><ul><li>cd 到 build 目录下，执行<code>cmake .. &amp;&amp; make</code>命令</li></ul><h3 id="vscode使用" tabindex="-1"><a class="header-anchor" href="#vscode使用" aria-hidden="true">#</a> vscode使用</h3><ol><li><p>需要在远程连接的工程根路径下建立一个主CMakeLists.txt。</p></li><li><p>主CMakeLists.txt添加相应配置，指定搜索的子目录为要参与构建的项目</p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>工具启动时先处理主CMakeList.txt，再处理muduocode里的子CMakeList.txt，如图为子CMakeList.txt。</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>再直接点击vscode里cmake的按钮即可将生成的所有中间文件都放入一个build目录中，可执行文件放入bin目录中，无论是Linux上直接操作还是vscode进行配置，可以依据自己的需求进行改变。</p><figure><img src="'+b+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ol><h3 id="cmake常用预定义变量" tabindex="-1"><a class="header-anchor" href="#cmake常用预定义变量" aria-hidden="true">#</a> <strong>CMake常用预定义变量</strong></h3><p>1、<code>PROJECT_NAME</code>：通过 project() 指定<strong>项目名称</strong>； 2、<code>PROJECT_SOURCE_DIR</code>：工程的<strong>根目录</strong>； 3、<code>PROJECT_BINARY_DIR</code>：执行 cmake 命令的目录； 4、<code>CMAKE_CURRENT_SOURCE_DIR</code>：<strong>当前 CMakeList.txt 文件所在的目录</strong>； 5、<code>CMAKE_CURRENT_BINARY_DIR</code>：编译目录，可使用 <code>add subdirectory</code> 来修改； 6、<code>EXECUTABLE_OUTPUT_PATH</code>：二进制<strong>可执行文件输出位置</strong>； 7、<code>LIBRARY_OUTPUT_PATH</code>：<strong>库文件输出位置</strong>； 8、<code>BUILD_SHARED_LIBS</code>：默认的库编译方式 ( shared 或 static ) ，默认为 static； 9、<code>CMAKE_C_FLAGS</code>：设置 C 编译选项； 10、<code>CMAKE_CXX_FLAGS</code>：<strong>设置 C++ 编译选项</strong>； 11、<code>CMAKE_CXX_FLAGS_DEBUG</code>：设置编译类型 Debug 时的编译选项； 12、<code>CMAKE_CXX_FLAGS_RELEASE</code>：设置编译类型 Release 时的编译选项； 13、<code>CMAKE_GENERATOR</code>：编译器名称； 14、<code>CMAKE_COMMAND</code>：CMake 可执行文件本身的全路径； 15、<code>CMAKE_BUILD_TYPE</code>：工程编译生成的版本， Debug / Release；</p><h3 id="添加可执行文件作为构建目标" tabindex="-1"><a class="header-anchor" href="#添加可执行文件作为构建目标" aria-hidden="true">#</a> 添加可执行文件作为构建目标</h3><h4 id="同一目录-单个-多个源文件" tabindex="-1"><a class="header-anchor" href="#同一目录-单个-多个源文件" aria-hidden="true">#</a> <strong>同一目录</strong>，单个/多个源文件</h4><ul><li><p>直接写</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">cmake_minimum_required</span><span style="color:#ABB2BF;"> (VERSION 2.8) </span><span style="color:#7F848E;font-style:italic;">#指定运行此配置文件所需的 CMake 的最低版本</span></span>
<span class="line"><span style="color:#C678DD;">project</span><span style="color:#ABB2BF;"> (demo1) </span><span style="color:#7F848E;font-style:italic;">#参数值是 demo1，该命令表示项目的名称是 demo1</span></span>
<span class="line"><span style="color:#C678DD;">add_executable</span><span style="color:#ABB2BF;">(main main.cpp) </span><span style="color:#7F848E;font-style:italic;">#将名为 main.cpp 的源文件编译成一个名称为 main 的可执行文件</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用<code>GLOB</code>自动查找<strong>当前目录</strong>下<strong>指定扩展名的文件</strong>，实现批量添加源文件。最好是启用<code>CONFIGURE_DEPENDS</code>选项，<strong>添加新文件时会自动更新变量</strong></p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">cmake_minimum_required</span><span style="color:#ABB2BF;">(VERSION 3.10)</span></span>
<span class="line"><span style="color:#C678DD;">project</span><span style="color:#ABB2BF;">(yx)</span></span>
<span class="line"><span style="color:#C678DD;">file</span><span style="color:#ABB2BF;">(GLOB sources CONFIGURE_DEPENDS *.cpp *.h)</span></span>
<span class="line"><span style="color:#C678DD;">add_executable</span><span style="color:#ABB2BF;">(main </span><span style="color:#C678DD;">\${sources}</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用<code>GLOB_RECURSE</code>可以<strong>包含所有子文件夹下的文件</strong>，为了避免将build目录里临时生成的cpp也加进来，建议把源码都放在src目录下</p></li><li><p><code>aux_source_directory</code>自动<strong>会查找指定目录下的所有源文件</strong>，然后将结果存进指定变量名</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">aux_source_directory</span><span style="color:#ABB2BF;">(. sources) </span><span style="color:#7F848E;font-style:italic;">#就是把当前目录下需要的文件搜集到sources变量中</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">cmake_minimum_required</span><span style="color:#ABB2BF;"> (VERSION 2.8)</span></span>
<span class="line"><span style="color:#C678DD;">project</span><span style="color:#ABB2BF;"> (demo2)</span></span>
<span class="line"><span style="color:#C678DD;">aux_source_directory</span><span style="color:#ABB2BF;"> (./ DIR_SRCS)</span></span>
<span class="line"><span style="color:#C678DD;">add_executable</span><span style="color:#ABB2BF;"> (demo </span><span style="color:#C678DD;">\${DIR_SRCS}</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用<code>set</code>命令去新建变量来存放需要的源文件。因为<code>aux_source_directory</code>也存在弊端，它会把指定目录下的所有源文件都加进来，实际项目中可能有些是我们不需要的文件。</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">cmake_minimum_required</span><span style="color:#ABB2BF;"> (VERSION 2.8)</span></span>
<span class="line"><span style="color:#C678DD;">project</span><span style="color:#ABB2BF;"> (demo2)</span></span>
<span class="line"><span style="color:#C678DD;">set</span><span style="color:#ABB2BF;"> ( DIR_SRCS</span></span>
<span class="line"><span style="color:#ABB2BF;">	  ./main.cpp</span></span>
<span class="line"><span style="color:#ABB2BF;">	  ./add.cpp )</span></span>
<span class="line"><span style="color:#C678DD;">add_executable</span><span style="color:#ABB2BF;"> (demo </span><span style="color:#C678DD;">\${DIR_SRCS}</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="多个目录-多个源文件" tabindex="-1"><a class="header-anchor" href="#多个目录-多个源文件" aria-hidden="true">#</a> <strong>多个目录</strong>，多个源文件</h4><p>一般来说，当文件比较多时，我们会进行<u>分类管理，根据功能把代码放在不同目录下</u>，这样方便查找</p><p>03demo/ ├── add │ ├── add.cpp │ └── add.h ├── sub │ ├── sub.cpp │ └── sub.h └── main.cpp</p><h5 id="方法一-include-directories指定头文件-aux-source-directory指定源文件" tabindex="-1"><a class="header-anchor" href="#方法一-include-directories指定头文件-aux-source-directory指定源文件" aria-hidden="true">#</a> 方法一：include_directories指定头文件，aux_source_directory指定源文件</h5><p>CMakeLists.txt 和 main.cpp 在同一目录下，内容修改成如下所示</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">cmake_minimum_required</span><span style="color:#ABB2BF;"> (VERSION 2.8)</span></span>
<span class="line"><span style="color:#C678DD;">project</span><span style="color:#ABB2BF;"> (demo3)</span></span>
<span class="line"><span style="color:#C678DD;">include_directories</span><span style="color:#ABB2BF;"> (./add ./sub)</span><span style="color:#7F848E;font-style:italic;">#向工程添加多个指定头文件的搜索路径，路径之间用空格分隔</span></span>
<span class="line"><span style="color:#C678DD;">aux_source_directory</span><span style="color:#ABB2BF;"> (./ DIR_SRCS)</span></span>
<span class="line"><span style="color:#C678DD;">aux_source_directory</span><span style="color:#ABB2BF;"> (./add DIR_SRCS1)</span></span>
<span class="line"><span style="color:#C678DD;">aux_source_directory</span><span style="color:#ABB2BF;"> (./sub DIR_SRCS2)</span></span>
<span class="line"><span style="color:#C678DD;">add_executable</span><span style="color:#ABB2BF;"> (demo </span><span style="color:#C678DD;">\${DIR_SRCS}</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">\${DIR_SRCS1}</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">\${DIR_SRCS2}</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="方法二-lib-库-分别在-add-和-sub-目录里各编写一个-cmakelists-txt-文件" tabindex="-1"><a class="header-anchor" href="#方法二-lib-库-分别在-add-和-sub-目录里各编写一个-cmakelists-txt-文件" aria-hidden="true">#</a> <mark>方法二：（lib 库）分别在 add 和 sub 目录里各编写一个 CMakeLists.txt 文件</mark></h5>`,21),g=o(`<div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">cmake_minimum_required</span><span style="color:#ABB2BF;"> (VERSION 2.8)</span></span>
<span class="line"><span style="color:#C678DD;">project</span><span style="color:#ABB2BF;"> (demo3)</span></span>
<span class="line"><span style="color:#C678DD;">include_directories</span><span style="color:#ABB2BF;"> (./add ./sub) </span><span style="color:#7F848E;font-style:italic;">#头文件</span></span>
<span class="line"><span style="color:#C678DD;">add_subdirectory</span><span style="color:#ABB2BF;"> (./add) </span><span style="color:#7F848E;font-style:italic;">#指明本项目包含子目录 add 和 sub，这样当执行 cmake 时，就会进入子目录去找 CMakeLists.txt 来生成 Makefile</span></span>
<span class="line"><span style="color:#C678DD;">add_subdirectory</span><span style="color:#ABB2BF;"> (./sub)</span></span>
<span class="line"><span style="color:#C678DD;">aux_source_directory</span><span style="color:#ABB2BF;"> (./ DIR_SRCS)</span></span>
<span class="line"><span style="color:#C678DD;">add_executable</span><span style="color:#ABB2BF;"> (demo </span><span style="color:#C678DD;">\${DIR_SRCS}</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">target_link_libraries</span><span style="color:#ABB2BF;"> (demo myadd mysub) </span><span style="color:#7F848E;font-style:italic;">#指明可执行文件 demo 需要链接一个名为 myadd 和 mysub 的链接库</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),x=a("strong",null,"，",-1),E=o(`<p>add 目录中的 CMakeLists.txt</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">aux_source_directory</span><span style="color:#ABB2BF;"> (./ DIR_LIB_SRCS)</span></span>
<span class="line"><span style="color:#C678DD;">add_library</span><span style="color:#ABB2BF;"> (myadd SHARED </span><span style="color:#C678DD;">\${DIR_LIB_SRCS}</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">#将add目录的源文件编译成动态库</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>sub 目录中的 CMakeLists.txt</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">aux_source_directory</span><span style="color:#ABB2BF;"> (./ DIR_LIB_SRCS)</span></span>
<span class="line"><span style="color:#C678DD;">add_library</span><span style="color:#ABB2BF;"> (mysub STATIC </span><span style="color:#C678DD;">\${DIR_LIB_SRCS}</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,4),R=a("code",null,"add_library",-1),f=o(`<h4 id="常用的组织结构" tabindex="-1"><a class="header-anchor" href="#常用的组织结构" aria-hidden="true">#</a> <mark>常用的组织结构</mark></h4><p>把源文件放到 <strong>src 目录</strong>下 把头文件放到 <strong>include 目录</strong>下 把生成的库文件放到 <strong>lib 目录</strong>下 把生成的对象文件放到 <strong>build 目录</strong>下 把最终输出的 elf 文件放到 <strong>bin 目录</strong>下</p><p>04demo/ ├── bin ├── build ├── include │ ├── add.h │ └── sub.h ├── lib └── src ├── lib_add │ └── add.cpp ├── sub │ └── sub.cpp └── main.cpp</p><ol><li>最外层新建一个 CMakeLists.txt用于掌控全局，使用<code>add_subdirectory</code>来添加要生成 elf 文件的源码目录即可</li></ol><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">cmake_minimum_required</span><span style="color:#ABB2BF;"> (VERSION 2.8)</span></span>
<span class="line"><span style="color:#C678DD;">project</span><span style="color:#ABB2BF;"> (demo4)</span></span>
<span class="line"><span style="color:#C678DD;">add_subdirectory</span><span style="color:#ABB2BF;"> (./src) </span><span style="color:#7F848E;font-style:italic;">#指定搜索的子目录</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>src 目录下，新建一个 CMakeLists.txt</li></ol><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">add_subdirectory</span><span style="color:#ABB2BF;"> (./lib_add) </span><span style="color:#7F848E;font-style:italic;">#指定搜索的子目录</span></span>
<span class="line"><span style="color:#C678DD;">aux_source_directory</span><span style="color:#ABB2BF;"> (./    DIR_SRCS1)</span></span>
<span class="line"><span style="color:#C678DD;">aux_source_directory</span><span style="color:#ABB2BF;"> (./sub DIR_SRCS2)</span></span>
<span class="line"><span style="color:#C678DD;">include_directories</span><span style="color:#ABB2BF;"> (../include)</span></span>
<span class="line"><span style="color:#C678DD;">link_directories</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">\${PROJECT_SOURCE_DIR}</span><span style="color:#ABB2BF;">/lib) </span><span style="color:#7F848E;font-style:italic;">#添加非标准库的搜索路径</span></span>
<span class="line"><span style="color:#C678DD;">add_executable</span><span style="color:#ABB2BF;"> (demo </span><span style="color:#C678DD;">\${DIR_SRCS1}</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">\${DIR_SRCS2}</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">target_link_libraries</span><span style="color:#ABB2BF;"> (demo myadd)</span></span>
<span class="line"><span style="color:#C678DD;">set</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">EXECUTABLE_OUTPUT_PATH</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">\${PROJECT_SOURCE_DIR}</span><span style="color:#ABB2BF;">/bin) </span><span style="color:#7F848E;font-style:italic;">#设置可执行文件的最终存储路径</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>EXECUTABLE_OUTPUT_PATH</code>和<code>PROJECT_SOURCE_DIR</code>是 cmake 自带的预定义变量</p><p>EXECUTABLE_OUTPUT_PATH：目标二进制可执行文件的存放位置 PROJECT_SOURCE_DIR：当前工程的根目录</p><ol start="3"><li>lib_add 目录下，也要新建一个 CMakeLists.txt</li></ol><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">aux_source_directory</span><span style="color:#ABB2BF;"> (./ DIR_LIB_SRCS)</span></span>
<span class="line"><span style="color:#C678DD;">add_library</span><span style="color:#ABB2BF;"> (myadd_shared SHARED </span><span style="color:#C678DD;">\${DIR_LIB_SRCS}</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">add_library</span><span style="color:#ABB2BF;"> (myadd_static STATIC </span><span style="color:#C678DD;">\${DIR_LIB_SRCS}</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">set_target_properties</span><span style="color:#ABB2BF;"> (myadd_shared PROPERTIES OUTPUT_NAME </span><span style="color:#98C379;">&quot;myadd&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">set_target_properties</span><span style="color:#ABB2BF;"> (myadd_static PROPERTIES OUTPUT_NAME </span><span style="color:#98C379;">&quot;myadd&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">set</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">LIBRARY_OUTPUT_PATH</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">\${PROJECT_SOURCE_DIR}</span><span style="color:#ABB2BF;">/lib)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="添加编译选项" tabindex="-1"><a class="header-anchor" href="#添加编译选项" aria-hidden="true">#</a> 添加<strong>编译选项</strong></h3><p>有时编译程序时想添加一些编译选项，如 <code>-g、-Wall、-std=c++11</code> 等，就可以使用<code>add_compile_options</code>来操作，也可以通过<code>set命令</code>修改<code>CMAKE_CXX_FLAGS</code>或<code>CMAKE_C_FLAGS</code>，这两个是 cmake 自带的预定义变量，用于设置编译选项 这两种方式的<strong>效果是一样</strong>的，但请注意它们还是有<strong>区别</strong>的：</p>`,13),S=a("code",null,"add_compile_options",-1),I=a("li",null,[s("而"),a("code",null,"set命令"),s("设置"),a("code",null,"CMAKE_C_FLAGS"),s("或"),a("code",null,"CMAKE_CXX_FLAGS"),s("变量则是分别"),a("strong",null,"只针对"),s(" c 和 c++ 编译器的")],-1),M=o(`<div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">cmake_minimum_required</span><span style="color:#ABB2BF;"> (VERSION 2.8)</span></span>
<span class="line"><span style="color:#C678DD;">project</span><span style="color:#ABB2BF;"> (demo5)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#设置编译选项</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#add_compile_options (-std=c++11 -Wall)</span></span>
<span class="line"><span style="color:#C678DD;">set</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">CMAKE_CXX_FLAGS</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;-std=c++11 -Wall \${CMAKE_CXX_FLAGS}&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">aux_source_directory</span><span style="color:#ABB2BF;"> (./ DIR_SRCS)</span></span>
<span class="line"><span style="color:#C678DD;">add_executable</span><span style="color:#ABB2BF;"> (demo </span><span style="color:#C678DD;">\${DIR_SRCS}</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">set</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">EXECUTABLE_OUTPUT_PATH</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">\${PROJECT_SOURCE_DIR}</span><span style="color:#ABB2BF;">/bin)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>cd 到 build 目录下，执行<code>cmake .. &amp;&amp; make</code>命令，就可以在 bin 目录下得到 elf 文件</mark></p><h3 id="添加控制选项" tabindex="-1"><a class="header-anchor" href="#添加控制选项" aria-hidden="true">#</a> 添加<strong>控制选项</strong></h3>`,3),L=a("code",null,"option",-1),T=o(`<p>外层的 CMakeLists.txt 内容如下</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">cmake_minimum_required</span><span style="color:#ABB2BF;"> (VERSION 2.8)</span></span>
<span class="line"><span style="color:#C678DD;">project</span><span style="color:#ABB2BF;"> (demo6)</span></span>
<span class="line"><span style="color:#C678DD;">option</span><span style="color:#ABB2BF;"> (MYDEBUG </span><span style="color:#98C379;">&quot;enable debug mode&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">OFF</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">add_subdirectory</span><span style="color:#ABB2BF;"> (./src)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>option</code>命令</p><ul><li>其第一个参数是这个 <u>option 的名字</u>，</li><li>第二个参数是<u>字符串</u>，用来描述这个 option 是来干嘛的，</li><li>第三个是 <u>option 的值</u>，<code>ON</code>或<code>OFF</code>，也可以不写，不写就是默认 OFF</li></ul><p>src 目录下的 CMakeLists.txt，如下</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">add_executable</span><span style="color:#ABB2BF;"> (main1 main1.cpp)</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (MYDEBUG)</span></span>
<span class="line"><span style="color:#C678DD;">    add_executable</span><span style="color:#ABB2BF;"> (main2 main2.cpp)</span></span>
<span class="line"><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">    message</span><span style="color:#ABB2BF;"> (STATUS </span><span style="color:#98C379;">&quot;Currently is not in debug mode&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">endif</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">set</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">EXECUTABLE_OUTPUT_PATH</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">\${PROJECT_SOURCE_DIR}</span><span style="color:#ABB2BF;">/bin)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里使用了 if-else 根据 option 来决定是否编译 main2.cpp</li></ul><p><code>message</code>为用户打印显示一条消息，可以用下述可选的关键字指定消息类型</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">无</span><span style="color:#ABB2BF;">) = 重要消息</span></span>
<span class="line"><span style="color:#61AFEF;">STATUS</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">非重要消息</span></span>
<span class="line"><span style="color:#61AFEF;">WARNING</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">CMake</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">警告，会继续执行</span></span>
<span class="line"><span style="color:#61AFEF;">AUTHOR_WARNING</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">CMake</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">警告</span><span style="color:#ABB2BF;"> (dev)，会继续执行</span></span>
<span class="line"><span style="color:#61AFEF;">SEND_ERROR</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">CMake</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">错误，继续执行，但是会跳过生成的步骤</span></span>
<span class="line"><span style="color:#61AFEF;">FATAL_ERROR</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">CMake</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">错误，终止所有处理过程</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>cd 到 build 目录下输入cmake .. &amp;&amp; make就可以只编译出 main1，<strong>如果想编译出 main2</strong></p><ol><li>直接修改 CMakeLists.txt，把 OFF 改成 ON，这种方法有点麻烦</li><li>cd 到 build 目录，然后输入**<code>cmake .. -DMYDEBUG=ON &amp;&amp; make</code>**，这样就可以编译出 main1 和 main2</li></ol><h3 id="为什么要在-build-目录下运行-cmake" tabindex="-1"><a class="header-anchor" href="#为什么要在-build-目录下运行-cmake" aria-hidden="true">#</a> <strong>为什么要在 build 目录下运行 cmake？</strong></h3>`,12),O=a("u",null,"不想要这些文件就可以直接清空 build 目录",-1),U=a("h3",{id:"cmake-build-type控制构建类型",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#cmake-build-type控制构建类型","aria-hidden":"true"},"#"),s(),a("code",null,"CMAKE_BUILD_TYPE"),s("控制构建类型")],-1),N=a("strong",null,"默认空字符串",-1),P=a("code",null,"Debug",-1),G=a("code",null,"Release、MinSizeRel、RelWithDebInfo",-1),q=a("strong",null,"NDEBUG宏",-1),K=o(`<div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">CMAKE_BUILD_TYPE</span><span style="color:#ABB2BF;"> Release)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>大多数项目<strong>为了默认为Release模式</strong>，CMakeLists中会写如下三行</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">NOT</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">CMAKE_BUILD_TYPE</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">	set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">CMAKE_BUILD_TYPE</span><span style="color:#ABB2BF;"> Release)</span></span>
<span class="line"><span style="color:#C678DD;">endif</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ndebug宏的使用" tabindex="-1"><a class="header-anchor" href="#ndebug宏的使用" aria-hidden="true">#</a> <code>NDEBUG宏</code>的使用</h3><p>在CMakeLists中写上</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">add_definitions</span><span style="color:#ABB2BF;">(-DNDEBUG)	</span><span style="color:#7F848E;font-style:italic;">#定义了NDEBUG宏</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样对于下面的test.cpp，assert不起作用，输出xx</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;cassert&gt;</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> m</span><span style="color:#C678DD;">=</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">#ifdef</span><span style="color:#ABB2BF;"> NDEBUG</span></span>
<span class="line"><span style="color:#ABB2BF;">    std::cout</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#98C379;">&quot;xx&quot;</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;">std::endl;</span></span>
<span class="line"><span style="color:#C678DD;">#else</span></span>
<span class="line"><span style="color:#ABB2BF;">    std::cout</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#98C379;">&quot;yy&quot;</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;">std::endl;</span></span>
<span class="line"><span style="color:#C678DD;">#endif</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">assert</span><span style="color:#ABB2BF;">(m </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="几个目录" tabindex="-1"><a class="header-anchor" href="#几个目录" aria-hidden="true">#</a> 几个目录</h3><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">cmake_minimum_required</span><span style="color:#ABB2BF;">(VERSION 3.29) </span></span>
<span class="line"><span style="color:#C678DD;">project</span><span style="color:#ABB2BF;">(LoggerCMake)</span></span>
<span class="line"><span style="color:#C678DD;">set</span><span style="color:#ABB2BF;">(SRC_LIST Logger.cc </span><span style="color:#C678DD;">test</span><span style="color:#ABB2BF;">.cc)	</span><span style="color:#7F848E;font-style:italic;">#直接写源文件</span></span>
<span class="line"><span style="color:#C678DD;">add_executable</span><span style="color:#ABB2BF;">(Logger </span><span style="color:#C678DD;">\${SRC_LIST}</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">target_link_libraries</span><span style="color:#ABB2BF;">(Logger log4cpp pthread)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10);function $(X,V){const e=i("font"),c=i("ExternalLinkIcon");return r(),d("div",null,[_,D,a("p",null,[a("strong",null,[s("CMake： 使用简单方便，可以跨平台，构建项目编译环境。比直接写Makefile简单("),n(e,{color:"red"},{default:l(()=>[s("在构建大型工程编译时，需要写大量的文件依赖关系")]),_:1}),s(")，可以通过简单的"),n(e,{color:"green"},{default:l(()=>[s("CMake配置生成负责的Makefile文件")]),_:1}),s("，一个命令便将我们项目想编译的可执行文件、静态库、动态库都编译出来了。")])]),C,a("p",null,[s("或者 通过编译好的版本安装 "),a("a",A,[s("Download CMake"),n(c)])]),a("ol",null,[a("li",null,[a("p",null,[s("下载"),a("a",k,[s("cmake-3.29.2-linux-x86_64.tar.gz"),n(c)])])]),F]),h,a("p",null,[s("为了方便，我们可以先将 add 和 sub 目录里的文件**"),n(e,{color:"green"},{default:l(()=>[s("分别编译成 lib 库")]),_:1}),s("再由 main 函数调用根目录中的 CMakeLists.txt**")]),g,a("p",null,[s("这种写法**"),n(e,{color:"red"},{default:l(()=>[s("默认是使用动态库")]),_:1}),x,n(e,{color:"green"},{default:l(()=>[s("如果目录下只有静态库，这种写法就会去链接静态库")]),_:1}),s("**")]),E,a("p",null,[R,s("第 1 个参数指定库的名字；第 2 个参数决定是动态还是静态，不写**"),n(e,{color:"red"},{default:l(()=>[s("默认静态")]),_:1}),s("**；第 3 个参数指定生成库的源文件。"),a("strong",null,[s("注意：SHARED 和 STATIC 是 cmake 的关键字，必须"),n(e,{color:"red"},{default:l(()=>[s("大写")]),_:1}),s("！")])]),f,a("ul",null,[a("li",null,[S,s("命令添加的编译选项是针对**"),n(e,{color:"green"},{default:l(()=>[s("所有编译器的(包括 c 和 c++ 编译器)")]),_:1}),s("**")]),I]),M,a("p",null,[s("希望在编译代码时**"),n(e,{color:"cornflowerblue"},{default:l(()=>[s("只编译一些指定的源码")]),_:1}),s("**，这时可以使用 cmake 的"),L,s("命令")]),a("p",null,[s("假设我们现在的工程会生成 2 个 bin 文件，main1 和 main2，现在整体结构如下 06demo/ ├── bin ├── build ├── CMakeLists.txt └── src ├── CMakeLists.txt ├── "),n(e,{color:"red"},{default:l(()=>[s("main1.cpp")]),_:1}),s(" └── "),n(e,{color:"red"},{default:l(()=>[s("main2.cpp")]),_:1})]),T,a("p",null,[s("如果不这样做，"),a("strong",null,[s("cmake 运行时"),n(e,{color:"red"},{default:l(()=>[s("生成的附带文件")]),_:1}),s("就会跟"),n(e,{color:"red"},{default:l(()=>[s("源码")]),_:1}),s("文件"),n(e,{color:"red"},{default:l(()=>[s("混在一起")]),_:1})]),s("，这样会对程序的目录结构造成污染，而在 build 目录下运行 cmake，生成的附带文件就只会待在 build 目录下，如果我们"),O,s("，非常方便")]),U,a("p",null,[N,s("，相当于"),P,s("调试模式 其它模式："),G,s("，这3种模式"),a("u",null,[s("都定义了"),q,s("，会导致**"),n(e,{color:"red"},{default:l(()=>[s("assert被去掉")]),_:1}),s("**")])]),K])}const z=p(v,[["render",$],["__file","CMake的使用.html.vue"]]);export{z as default};
