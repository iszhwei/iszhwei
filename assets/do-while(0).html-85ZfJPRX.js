import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as i,c as r,d as p,e as s,f as l,w as e,a as n}from"./app-rY1SOIco.js";const t={},B=n(`<h1 id="do-while-0" tabindex="-1"><a class="header-anchor" href="#do-while-0" aria-hidden="true">#</a> do-while(0)</h1><h2 id="为了代码分块-比仅仅使用-更直观些。例如在cocos2d-x代码中" tabindex="-1"><a class="header-anchor" href="#为了代码分块-比仅仅使用-更直观些。例如在cocos2d-x代码中" aria-hidden="true">#</a> 为了代码<strong>分块</strong>，比仅仅使用{}更直观些。例如在<code>cocos2d-x</code>代码中</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    CCImage</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> pImage </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> new </span><span style="color:#61AFEF;">CCImage</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">CC_BREAK_IF</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">NULL</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> pImage);</span></span>
<span class="line"><span style="color:#ABB2BF;">    bRet </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">pImage</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">initWithString</span><span style="color:#ABB2BF;">(text, (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">)</span><span style="color:#E5C07B;">dimensions</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">width</span><span style="color:#ABB2BF;">, (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">)</span><span style="color:#E5C07B;">dimensions</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">height</span><span style="color:#ABB2BF;">, eAlign, fontName, (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">)fontSize);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">CC_BREAK_IF</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">bRet);</span></span>
<span class="line"><span style="color:#ABB2BF;">    bRet </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">initWithImage</span><span style="color:#ABB2BF;">(pImage);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">CC_SAFE_RELEASE</span><span style="color:#ABB2BF;">(pImage);</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),d={id:"宏展开的时候不会出错",tabindex:"-1"},y=p("a",{class:"header-anchor",href:"#宏展开的时候不会出错","aria-hidden":"true"},"#",-1),F=n(`<h3 id="不使用-把action1-、action2-包起来" tabindex="-1"><a class="header-anchor" href="#不使用-把action1-、action2-包起来" aria-hidden="true">#</a> 不使用{}把action1()、action2()包起来</h3><p>假设你需要定义这样一个宏：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">DOSOMETHING</span><span style="color:#ABB2BF;">() </span><span style="color:#61AFEF;">action1</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">; </span><span style="color:#61AFEF;">action2</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个宏的本意是，当执行DOSOMETHING()时，action1(),action2()都会被调用。如果有判断，再执行这个宏的话，如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">NULL</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> pPointer)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">DOSOMETHING</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">else</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样宏在预处理的时候会直接被展开，放在花括号里，那么<u>实际上写的代码如下</u>：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">NULL</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> pPointer)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">action1</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">action2</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">else</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这展开存在两个问题：</p><ul><li>假设没有else分支，则DOSOMETHING中的<u>第二个语句无论if测试是否通过，都会执行</u>。</li><li>因为if分支后面有两个语句，<u>导致else分支没有对应的if，编译失败</u>。</li></ul><h3 id="使用-把action1-、action2-包起来" tabindex="-1"><a class="header-anchor" href="#使用-把action1-、action2-包起来" aria-hidden="true">#</a> 使用{}把action1()、action2()包起来</h3>`,10),A=n(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">DOSOMETHING</span><span style="color:#ABB2BF;">() { </span><span style="color:#61AFEF;">action1</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">; </span><span style="color:#61AFEF;">action2</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">; }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><mark>我们在<u>写代码的时候都习惯在语句右面加上<strong>分号</strong></u>，如果在宏中使用{}，代码编译展开后宏就相当于这样写了：<code>{...};</code></mark>，展开后如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">NULL</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> pPointer)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">action1</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">action2</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span><span style="color:#7F848E;font-style:italic;">	//大括号后多了一个分号</span></span>
<span class="line"><span style="color:#C678DD;">else</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>这段代码中<u>大括号后多了一个分号，如果有else，那么else又没有对应的if了,编译出错</u>。</mark></p><h3 id="使用do-while-0-来定义宏" tabindex="-1"><a class="header-anchor" href="#使用do-while-0-来定义宏" aria-hidden="true">#</a> 使用<code>do{...}while(0)</code>来定义宏</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">DOSOMETHING</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">do</span><span style="color:#ABB2BF;">{ </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#61AFEF;">action1</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#61AFEF;">action2</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span><span style="color:#56B6C2;">\\</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="用到空宏" tabindex="-1"><a class="header-anchor" href="#用到空宏" aria-hidden="true">#</a> 用到<strong>空宏</strong></h2><p>避免由宏引起的警告 内核中由于不同架构的限制，很多时候会用到空宏。在编译的时候，这些空宏会给出警告，为了避免这样的warning，我们可以使用<code>do{...}while(0)</code>来定义空宏：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">DOSOMETHING</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">do</span><span style="color:#ABB2BF;">{}</span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="我想跳到另外一段代码了-剩下的不执行了" tabindex="-1"><a class="header-anchor" href="#我想跳到另外一段代码了-剩下的不执行了" aria-hidden="true">#</a> 我想跳到另外一段代码了，<strong>剩下的不执行</strong>了</h2><ol><li>当你执行一段代码到一半，想跳过剩下的一半的时候，如果你正处于<code>do{...}while(0)</code>循环中，则能用break达到这个目的。</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  执行.</span></span>
<span class="line"><span style="color:#ABB2BF;">  再执行…</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (如果有什么条件满足)</span></span>
<span class="line"><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#ABB2BF;">    我想跳到另外一段代码了，剩下的不执行了，可是不建议用goto语句，怎么办呢？</span></span>
<span class="line"><span style="color:#ABB2BF;">     </span><span style="color:#C678DD;">break</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">/*搞定*/</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  我有可能被执行.</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举个例子如下</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">a) </span><span style="color:#C678DD;">break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//do something here</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">b) </span><span style="color:#C678DD;">break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//do another thing here   </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>变形的goto，有些公司不让用goto。在一些函数中，需要实现条件转移，或者构成循环，跳出循环体，使用goto总是一种简单的方法，例如：</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;stdlib.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">str;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   /* 最初的内存分配 */</span></span>
<span class="line"><span style="color:#ABB2BF;">   str </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">malloc</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">15</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(str </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">NULL</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">     </span><span style="color:#C678DD;">goto</span><span style="color:#ABB2BF;"> loop;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello world</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">loop:</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;malloc success</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但由于goto不符合软件工程的结构化，而且有可能使得代码难懂，所以很多人都不倡导使用，这个时候我们可以使用<code>do{...}while(0)</code>来做同样的事情：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;stdlib.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">do</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">str;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      /* 最初的内存分配 */</span></span>
<span class="line"><span style="color:#ABB2BF;">      str </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">malloc</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">15</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(str </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">NULL</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">       </span><span style="color:#C678DD;">break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello world</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;malloc success</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18);function v(u,m){const a=c("font");return i(),r("div",null,[B,p("h2",d,[y,s(),l(a,{color:"red"},{default:e(()=>[s("宏")]),_:1}),s("展开的时候不会出错")]),F,l(a,{color:"red"},{default:e(()=>[s("那么仅仅使用{}把action1()、action2()包起来行么")]),_:1}),s("？比如："),A])}const h=o(t,[["render",v],["__file","do-while(0).html.vue"]]);export{h as default};
