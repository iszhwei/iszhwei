import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as i,c as r,d as e,e as s,f as t,w as c,a}from"./app-rY1SOIco.js";const p="/assets/image-20240406210003709-sxoTbytY.png",d="/assets/image-20240406210021446-dam52mDc.png",g="/assets/image-20240406210040984-txfWEM-r.png",m={},B=a('<h1 id="mysql运算符" tabindex="-1"><a class="header-anchor" href="#mysql运算符" aria-hidden="true">#</a> MySQL运算符</h1><h2 id="算数运算符" tabindex="-1"><a class="header-anchor" href="#算数运算符" aria-hidden="true">#</a> 算数运算符</h2><figure><img src="'+p+'" alt="image-20240406210003709" tabindex="0" loading="lazy"><figcaption>image-20240406210003709</figcaption></figure>',3),h=e("strong",null,"运算后的结果如果需要存储在表内",-1),y=a(`<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">update</span><span style="color:#ABB2BF;"> user </span><span style="color:#C678DD;">set</span><span style="color:#ABB2BF;"> age </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> age + </span><span style="color:#D19A66;">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h2><figure><img src="`+d+'" alt="image-20240406210021446" tabindex="0" loading="lazy"><figcaption>image-20240406210021446</figcaption></figure><p>取反：当满足条件时，返回不满足条件的部分（ <strong>使用！记得加上括号()</strong> ）</p><h2 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符</h2><figure><img src="'+g+`" alt="image-20240406210040984" tabindex="0" loading="lazy"><figcaption>image-20240406210040984</figcaption></figure><ol><li><p>不等于 用<code>!=</code></p></li><li><p>区间 between</p></li><li><p>判断是否为空 <code>is NULL; is not NULL</code></p></li><li><p>通配符 <code>LIKE</code></p><ol><li><code>_</code>匹配一个字符 <code>%</code>匹配一个到多个字符</li><li><strong>通配符在最前面不能使用索引查询；在中间或后面可以使用索引</strong></li></ol></li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> * </span><span style="color:#C678DD;">insert</span><span style="color:#ABB2BF;"> Employeeaddress </span><span style="color:#C678DD;">where</span><span style="color:#ABB2BF;">  addressID </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> AddressID </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> noNF </span><span style="color:#C678DD;">where</span><span style="color:#ABB2BF;"> EmployeeID</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>in</code>的效率其实不高</li></ul>`,9);function u(_,f){const n=l("font");return i(),r("div",null,[B,e("p",null,[h,s("，需要注意"),t(n,{color:"red"},{default:c(()=>[s("结果是否越界，浮点数精度是否被截断")]),_:1})]),y])}const x=o(m,[["render",u],["__file","运算符.html.vue"]]);export{x as default};
