import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as t,c as r,d as s,f as p,w as o,e as n,a as l}from"./app-mYdPlPhZ.js";const B="/assets/1683811439828-eaa5e7ed-84a9-418c-9f03-57aed8075cf9-WlVYrXI_.png",i={},y=l('<h1 id="特殊的成员函数" tabindex="-1"><a class="header-anchor" href="#特殊的成员函数" aria-hidden="true">#</a> 特殊的成员函数</h1><figure><img src="'+B+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>除了特殊的数据成员以外，C++类中还有两种特殊的成员函数：静态成员函数和 const 成员函数。我们 先来看看静态成员函数。</p><h2 id="静态成员函数" tabindex="-1"><a class="header-anchor" href="#静态成员函数" aria-hidden="true">#</a> 静态成员函数</h2><p>成员函数也可以定义成静态的，<strong>静态成员函数的特点:</strong></p>',5),d=s("li",null,[s("p",null,[s("mark",null,[n("静态的成员函数的第一个参数位置"),s("strong",null,"没有this指针")])])],-1),F=s("li",null,[s("p",null,[s("mark",null,[n("静态的成员函数"),s("strong",null,"不能访问非静态"),n("的数据成员和非静态的成员函数")])])],-1),A=s("strong",null,"非静态的成员函数",-1),u=s("strong",null,"能访问",-1),v=s("strong",null,"静态的",-1),m=s("li",null,[s("p",null,[s("mark",null,[n("静态成员函数可以使用"),s("strong",null,"类名加作用符的形式进行调用"),n("（静态成员函数的特殊用法）")])])],-1),D=l(`<p>如下:</p><blockquote><p><strong>普通的成员方法特点：编译器会添加一个this形参变量</strong></p></blockquote><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Computer</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">Computer</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">brand</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">price</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    : </span><span style="color:#61AFEF;">_brand</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;">[</span><span style="color:#61AFEF;">strlen</span><span style="color:#ABB2BF;">(brand) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]())</span></span>
<span class="line"><span style="color:#ABB2BF;">    , </span><span style="color:#61AFEF;">_price</span><span style="color:#ABB2BF;">(price)</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        _totalPrice </span><span style="color:#C678DD;">+=</span><span style="color:#ABB2BF;"> _price;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //...</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">printTotalPrice</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;总价:&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> _totalPrice </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //...</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> _brand;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> _price;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> _totalPrice;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),b=s("strong",null,"可以直接通过类名进行调用",-1),C=l(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    Computer </span><span style="color:#61AFEF;">pc1</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Huawei MateBook14&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5699</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">pc1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    Computer::</span><span style="color:#61AFEF;">printTotalPrice</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;">//通过类名直接调用</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面让我们再来看一个有意思的例子:</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#ifndef</span><span style="color:#ABB2BF;"> __COMPUTER_H__</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">__COMPUTER_H__</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Computer</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">Computer</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">brand</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">float</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">price</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">Computer</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Computer</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">rhs</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">Computer</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;operator</span><span style="color:#ABB2BF;">=(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Computer</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">rhs</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">setBrand</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">brand</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">setPrice</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">float</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">price</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">printTotalPrice</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">~Computer</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">_brand;</span><span style="color:#7F848E;font-style:italic;">//8</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">float</span><span style="color:#ABB2BF;"> _price;</span><span style="color:#7F848E;font-style:italic;">//4, 内存对齐</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">float</span><span style="color:#ABB2BF;"> _totalPrice;</span><span style="color:#7F848E;font-style:italic;">//4静态的数据成员不占类的大小，被类</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                            //创建的所有对象所共享</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#endif</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test4</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;sizeof(Computer) = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(Computer) </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;一台电脑都没有购买 : &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    Computer::</span><span style="color:#61AFEF;">printTotalPrice</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    Computer </span><span style="color:#61AFEF;">com1</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;huawei&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;com1 = &quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">com1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;购买第一台电脑总价 : &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">com1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printTotalPrice</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    Computer::</span><span style="color:#61AFEF;">printTotalPrice</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    Computer </span><span style="color:#61AFEF;">com2</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;xiaomi&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;com2 = &quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">com2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;购买第二台电脑总价 : &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">com2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printTotalPrice</span><span style="color:#ABB2BF;">(); </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">com1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printTotalPrice</span><span style="color:#ABB2BF;">(); </span></span>
<span class="line"><span style="color:#ABB2BF;">    Computer::</span><span style="color:#61AFEF;">printTotalPrice</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;">//可以使用类名加作用域限定符进行调用</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* Computer::print();//error */</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="const成员函数" tabindex="-1"><a class="header-anchor" href="#const成员函数" aria-hidden="true">#</a> const成员函数</h2><p>之前已经介绍了const在函数中的应用，实际上，const在类成员函数中还有种特殊的用法，把const关键 字放在函数的<u><strong>参数表和函数体之间</strong>（与之前介绍的const放<strong>在函数前修饰返回值</strong>不同）</u>，称为const成员 函数，其具有以下特点:</p>`,6),E=s("strong",null,"非const对象",-1),_=s("strong",null,"调用const版本",-1),h=l("<li><p><mark>const对象调用const版本的成员函数,<strong>不能调用非const</strong>版本的函数</mark></p></li><li><p><mark>const版本的成员函数与非const版本的成员函数<strong>可以重载</strong>，一般先写const版本的</mark></p></li><li><p><mark>const版本的成员函数具有<strong>只读特性，不能进行写操作</strong>，所以对于不修改数据成员的情况，可以将成员函数用const修饰</mark></p></li>",3),f=l(`<p>其格式为：</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">类型 函数名(参数列表) </span><span style="color:#C678DD;">const</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    函数体</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),g=l(`<p>比如当给Computer类添加一个const的打印函数后，则其实现如下:</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Computer</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //...</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     //const版本的成员函数可以与非const版本的成员函数进行重载（this指针是不一样）</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //一般建议先写出const版本的成员函数</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Computer</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">/*  Computer * const this  */</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    	/* this-&gt;_price = 10; */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    	/* printTotalPrice();//ok */</span></span>
<span class="line"><span style="color:#ABB2BF;">    	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;void print()&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;brand : </span><span style="color:#D19A66;">%p</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, _brand);</span></span>
<span class="line"><span style="color:#ABB2BF;">    	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;brand : &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> _brand </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl</span></span>
<span class="line"><span style="color:#ABB2BF;">         	</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;price : &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">_price</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Computer</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">/* const Computer * const this */</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">const</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    	/* this-&gt;_price = 10;//error */</span></span>
<span class="line"><span style="color:#ABB2BF;">    	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;void print() const &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    	</span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;brand : </span><span style="color:#D19A66;">%p</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, _brand);</span></span>
<span class="line"><span style="color:#ABB2BF;">    	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;brand : &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> _brand </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl</span></span>
<span class="line"><span style="color:#ABB2BF;">         	</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;price : &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">_price</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test5</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //非const对象既可以访问非const版本成员函数也可以访问</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //const版本的成员函数，但是默认情况下访问非const版本</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //的成员函数</span></span>
<span class="line"><span style="color:#ABB2BF;">    Computer </span><span style="color:#61AFEF;">com1</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;huawei&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;com1 = &quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">com1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //const int number = 10;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //const对象只能访问const版本的成员函数，不能访问非const版本的成员函数</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> Computer </span><span style="color:#61AFEF;">com2</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;xiaomi&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;com2 = &quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">com2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="为什么const成员无法调用普通成员方法" tabindex="-1"><a class="header-anchor" href="#为什么const成员无法调用普通成员方法" aria-hidden="true">#</a> 为什么const成员无法调用普通成员方法？</h2><p><mark>因为const成员的this指针类型为<code>const T * const this</code>,</mark></p><p><mark>普通成员方法要求传入的是<code>T * const this</code>，相当于试图<code>T* &lt;= const T*</code>, 错误</mark></p>`,6);function q(k,x){const a=c("font");return t(),r("div",null,[y,s("ol",null,[d,F,s("li",null,[s("p",null,[s("mark",null,[A,p(a,{color:"red"},{default:o(()=>[u]),_:1}),v,n("数据成员和静态的成员函数")])])]),m]),D,s("p",null,[n("对于静态成员函数，还"),b,n("，这也是"),p(a,{color:"red"},{default:o(()=>[n("最常用")]),_:1}),n("的方式：")]),C,s("ol",null,[s("li",null,[s("p",null,[s("mark",null,[n("对于"),E,n("，既可以"),_,n("的成员函数，可以调用非const版本的成员函数，"),s("strong",null,[p(a,{color:"green"},{default:o(()=>[n("默认")]),_:1}),n("情况下，调用非const版本的成员函数")])])])]),h]),f,p(a,{color:"green"},{default:o(()=>[n("**如果一个方法是只实现读操作而不实现写操作的成员方法，一律实现成const常成员方法。普通对象可以调用，常对象也能调用。**")]),_:1}),g])}const w=e(i,[["render",q],["__file","特殊的成员函数.html.vue"]]);export{w as default};
