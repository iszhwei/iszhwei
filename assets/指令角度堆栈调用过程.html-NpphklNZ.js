import{_ as c}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as r,c as B,b as i,d as s,e as n,f as l,w as p,a as o}from"./app-rY1SOIco.js";const y="/assets/image-20240130155633380-x-7mSjvj.png",F="/assets/image-20240130155845449-7Ydt0l5K.png",d="/assets/image-20240130173737985-MA2CYUzA.png",e="/assets/watermark_type_ZHJvaWRzYW5zZmFsbGJhY2s_shadow_50_text_Q1NETiBAfuaAjuS5iOWbnuS6i-WVin4__size_16_color_FFFFFF_t_70_g_se_x_16-EYbNlUND.png",A="/assets/image-20240130182232318-O2kLpL1-.png",u="/assets/image-20240130182849062-rVyGxGqe.png",m="/assets/image-20240130183016130-GFRYvG1p.png",v="/assets/watermark_type_ZHJvaWRzYW5zZmFsbGJhY2s_shadow_50_text_Q1NETiBAfuaAjuS5iOWbnuS6i-WVin4__size_15_color_FFFFFF_t_70_g_se_x_16-XJHkoiCU.png",b="/assets/watermark_type_ZHJvaWRzYW5zZmFsbGJhY2s_shadow_50_text_Q1NETiBAfuaAjuS5iOWbnuS6i-WVin4__size_19_color_FFFFFF_t_70_g_se_x_16-5ny8y5aZ.png",C="/assets/watermark_type_ZHJvaWRzYW5zZmFsbGJhY2s_shadow_50_text_Q1NETiBAfuaAjuS5iOWbnuS6i-WVin4__size_20_color_FFFFFF_t_70_g_se_x_16-ftorPs3n.png",g="/assets/watermark_type_ZHJvaWRzYW5zZmFsbGJhY2s_shadow_50_text_Q1NETiBAfuaAjuS5iOWbnuS6i-WVin4__size_20_color_FFFFFF_t_70_g_se_x_16-170661774004311-C7snEH7V.png",_="/assets/watermark_type_ZHJvaWRzYW5zZmFsbGJhY2s_shadow_50_text_Q1NETiBAfuaAjuS5iOWbnuS6i-WVin4__size_20_color_FFFFFF_t_70_g_se_x_16-170661789615717-02qQH_Ry.png",x="/assets/image-20240130203609288-hzxS8CIJ.png",h="/assets/watermark_type_ZHJvaWRzYW5zZmFsbGJhY2s_shadow_50_text_Q1NETiBAfuaAjuS5iOWbnuS6i-WVin4__size_20_color_FFFFFF_t_70_g_se_x_16-170661809026420-YoPgiumS.png",f="/assets/image-20240130204306887-bDAQ8svI.png",E={},D=s("h2",{id:"栈空间",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#栈空间","aria-hidden":"true"},"#"),n(" 栈空间")],-1),k=s("figure",null,[s("img",{src:y,alt:"image-20240130155633380",tabindex:"0",loading:"lazy"}),s("figcaption",null,"image-20240130155633380")],-1),z=s("p",null,"栈空间是从高地址向低地址扩充，堆地址是从低地址向高地址扩充。",-1),W=s("u",null,"堆栈",-1),R=s("strong",null,"数据结构",-1),P=s("strong",null,"先进后出",-1),w=s("ul",null,[s("li",null,[s("p",null,[s("code",null,"PUSH"),n("：将目标内存推入栈顶。")])]),s("li",null,[s("p",null,[s("code",null,"POP"),n("：从栈顶中移除目标。")])])],-1),O=s("h2",{id:"esp和ebp",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#esp和ebp","aria-hidden":"true"},"#"),n(" ESP和EBP")],-1),S=s("figure",null,[s("img",{src:F,alt:"image-20240130155845449",tabindex:"0",loading:"lazy"}),s("figcaption",null,"image-20240130155845449")],-1),T=s("u",null,"当执行一个函数",-1),Y=s("u",null,"相关的参数",-1),J=s("u",null,"局部变量",-1),N=s("u",null,"一旦函数执行完毕，相关的栈帧就会从堆栈中弹出，然后从预先保存好的上下文中进行恢复，以便保持堆栈平衡",-1),Z=s("u",null,"PU必须要知道函数调用完了之后要去哪里执行（pc寄存器指向）",-1),V=s("li",null,[s("p",null,[s("code",null,"esp"),n("：当前函数"),s("u",null,"栈顶"),n("指针；"),s("u",null,"来标记栈的底部，他随着栈的变化而变化")])],-1),j=s("code",null,"ebp",-1),G=s("u",null,"栈底",-1),H=s("u",null,"通过固定的地址与偏移量来寻找在栈参数与变量",-1),Q=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">ebp</span><span style="color:#ABB2BF;">;</span><span style="color:#61AFEF;">出栈</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">栈扩大4byte</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">因为ebp为32位</span></span>
<span class="line"><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">ebp</span><span style="color:#ABB2BF;">;</span><span style="color:#61AFEF;">入栈，栈减少4byte</span><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">esp,</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#98C379;">Ch；表示栈减小12byte</span></span>
<span class="line"><span style="color:#61AFEF;">sub</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">esp,</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#98C379;">Ch；表示栈扩大12byte</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🍗🍗🍗示例" tabindex="-1"><a class="header-anchor" href="#🍗🍗🍗示例" aria-hidden="true">#</a> 🍗🍗🍗示例</h2><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> temp </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  temp </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> a </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> b;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> temp;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">// mov dword ptr[ebp - 4], 0Ah</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> b </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">// mov dword ptr[ebp - 8], 14h</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> ret </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(a, b);</span><span style="color:#7F848E;font-style:italic;">//取a，b的值，放入寄存器，压入sum函数的栈（esp从main函数栈顶，上移两个int的位（分别放形参a，b）变成sum函数的栈顶）</span></span>
<span class="line"><span style="color:#ABB2BF;"> 	</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打断点，调试，查看反汇编：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">g++</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">main.cc</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-m32</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-g</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-o</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">main.o</span><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">#-m32指定编译为32位程序</span></span>
<span class="line"><span style="color:#61AFEF;">gdb</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">main.o</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">gdb</span><span style="color:#ABB2BF;">) b main</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">gdb</span><span style="color:#ABB2BF;">) start</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">gdb</span><span style="color:#ABB2BF;">) set disassembly-flavor intel  </span><span style="color:#7F848E;font-style:italic;">#在windows下使用习惯了intel汇编，在Linux下看的难受，在gdb下使用</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">gdb</span><span style="color:#ABB2BF;">) disassemble /mr 	</span><span style="color:#7F848E;font-style:italic;">#/m 显示相关联的源代码；/r 显示具体值</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>可能会报错如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">$g</span><span style="color:#ABB2BF;">++  -m32 -g -o main.o main.cc</span></span>
<span class="line"><span style="color:#61AFEF;">In</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">file</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">included</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">main.cc:6:0:</span></span>
<span class="line"><span style="color:#61AFEF;">/usr/include/c++/7/iostream:38:10:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">fatal</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">error:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">bits/c++config.h:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">No</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">such</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">file</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">or</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">directory</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">#include &lt;bits/c++config.h&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#61AFEF;">^~~~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="color:#61AFEF;">compilation</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">terminated.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只需要安装缺少的库即可</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">sudo</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">apt-get</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">g++-multilib</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">gdb</span><span style="color:#ABB2BF;">) disassemble /m sum</span></span>
<span class="line"><span style="color:#61AFEF;">Dump</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">assembler</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">code</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">for</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">int,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">int</span><span style="color:#ABB2BF;">)</span><span style="color:#98C379;">:</span></span>
<span class="line"><span style="color:#61AFEF;">9</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x565555dd</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+</span><span style="color:#ABB2BF;">0&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">push</span><span style="color:#ABB2BF;">   </span><span style="color:#98C379;">ebp</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x565555de</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+</span><span style="color:#ABB2BF;">1&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">mov</span><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">ebp,esp</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x565555e0</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+</span><span style="color:#ABB2BF;">3&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">sub</span><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">esp,0x10</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x565555e3</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+</span><span style="color:#ABB2BF;">6&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">call</span><span style="color:#ABB2BF;">   </span><span style="color:#D19A66;">0x565556b7</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">__x86.get_pc_thunk.a</span><span style="color:#ABB2BF;">x&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x565555e8</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+1</span><span style="color:#ABB2BF;">1&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">add</span><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">eax,0x19e8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">10</span><span style="color:#ABB2BF;">	  </span><span style="color:#98C379;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">temp</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x565555ed</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+1</span><span style="color:#ABB2BF;">6&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">mov</span><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">DWORD</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">PTR</span><span style="color:#ABB2BF;"> [ebp-0x4],0x0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">11</span><span style="color:#ABB2BF;">	  </span><span style="color:#98C379;">temp</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x565555f4</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+2</span><span style="color:#ABB2BF;">3&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">mov</span><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">edx,DWORD</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">PTR</span><span style="color:#ABB2BF;"> [ebp+0x8]</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x565555f7</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+2</span><span style="color:#ABB2BF;">6&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">mov</span><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">eax,DWORD</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">PTR</span><span style="color:#ABB2BF;"> [ebp+0xc]</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x565555fa</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+2</span><span style="color:#ABB2BF;">9&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">add</span><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">eax,edx</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x565555fc</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+3</span><span style="color:#ABB2BF;">1&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">mov</span><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">DWORD</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">PTR</span><span style="color:#ABB2BF;"> [ebp-0x4],eax</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">12</span><span style="color:#ABB2BF;">	  </span><span style="color:#98C379;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">temp</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x565555ff</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+3</span><span style="color:#ABB2BF;">4&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">mov</span><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">eax,DWORD</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">PTR</span><span style="color:#ABB2BF;"> [ebp-0x4]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">13</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x56555602</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+3</span><span style="color:#ABB2BF;">7&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">leave</span><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x56555603</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+3</span><span style="color:#ABB2BF;">8&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">ret</span><span style="color:#ABB2BF;">    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">End</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">assembler</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">dump.</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">gdb</span><span style="color:#ABB2BF;">) disassemble /m main</span></span>
<span class="line"><span style="color:#61AFEF;">Dump</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">assembler</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">code</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">for</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">main</span><span style="color:#ABB2BF;">()</span><span style="color:#98C379;">:</span></span>
<span class="line"><span style="color:#61AFEF;">16</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x56555604</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+</span><span style="color:#ABB2BF;">0&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">push</span><span style="color:#ABB2BF;">   </span><span style="color:#98C379;">ebp</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x56555605</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+</span><span style="color:#ABB2BF;">1&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">mov</span><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">ebp,esp</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x56555607</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+</span><span style="color:#ABB2BF;">3&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">sub</span><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">esp,0x10</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x5655560a</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+</span><span style="color:#ABB2BF;">6&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">call</span><span style="color:#ABB2BF;">   </span><span style="color:#D19A66;">0x565556b7</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">__x86.get_pc_thunk.a</span><span style="color:#ABB2BF;">x&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x5655560f</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+1</span><span style="color:#ABB2BF;">1&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">add</span><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">eax,0x19c1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">17</span><span style="color:#ABB2BF;">	    </span><span style="color:#98C379;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">=&gt; </span><span style="color:#D19A66;">0x56555614</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+1</span><span style="color:#ABB2BF;">6&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">mov</span><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">DWORD</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">PTR</span><span style="color:#ABB2BF;"> [ebp-0xc],0xa</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">18</span><span style="color:#ABB2BF;">	    </span><span style="color:#98C379;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">b</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x5655561b</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+2</span><span style="color:#ABB2BF;">3&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">mov</span><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">DWORD</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">PTR</span><span style="color:#ABB2BF;"> [ebp-0x8],0x14</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">19</span><span style="color:#ABB2BF;">	    </span><span style="color:#98C379;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">ret</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">a,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">b</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x56555622</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+3</span><span style="color:#ABB2BF;">0&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">push</span><span style="color:#ABB2BF;">   </span><span style="color:#98C379;">DWORD</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">PTR</span><span style="color:#ABB2BF;"> [ebp-0x8]</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x56555625</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+3</span><span style="color:#ABB2BF;">3&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">push</span><span style="color:#ABB2BF;">   </span><span style="color:#98C379;">DWORD</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">PTR</span><span style="color:#ABB2BF;"> [ebp-0xc]</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x56555628</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+3</span><span style="color:#ABB2BF;">6&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">call</span><span style="color:#ABB2BF;">   </span><span style="color:#D19A66;">0x565555dd</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">int,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">int</span><span style="color:#ABB2BF;">)&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x5655562d</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+4</span><span style="color:#ABB2BF;">1&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">add</span><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">esp,0x8</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x56555630</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+4</span><span style="color:#ABB2BF;">4&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">mov</span><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">DWORD</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">PTR</span><span style="color:#ABB2BF;"> [ebp-0x4],eax</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">20</span><span style="color:#ABB2BF;">	 	</span></span>
<span class="line"><span style="color:#61AFEF;">21</span><span style="color:#ABB2BF;">	    </span><span style="color:#98C379;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x56555633</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+4</span><span style="color:#ABB2BF;">7&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">mov</span><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">eax,0x0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">22</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">}</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x56555638</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+5</span><span style="color:#ABB2BF;">2&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">leave</span><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x56555639</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+5</span><span style="color:#ABB2BF;">3&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">ret</span><span style="color:#ABB2BF;">    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">End</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">assembler</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">dump.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>g++ -g -c main main.cc</code> #前提编译时 加<code>-g</code></p><p><code>objdump -d main.o</code> #反汇编</p><p><code>objdump -M intel -S main.o</code> #反汇编、与相关联的源代码交替并且以英特尔的框架显示🍗🍗🍗</p></blockquote><figure><img src="`+d+'" alt="image-20240130173737985" tabindex="0" loading="lazy"><figcaption>image-20240130173737985</figcaption></figure><p><strong>问题1.sum函数调用完，如何知道回到main函数 ?</strong></p><p><strong>问题2.回到main函数，如何知道从哪一行开始?</strong></p><ul><li><p><code>call</code>：函数调用指令</p><ol><li><mark><strong>把下一行指令的地址</strong>（位于.text段）<strong>压栈</strong>（问题2）</mark></li><li><mark><strong>进入调用函数</strong>（sum)</mark></li></ol></li><li><p><u><mark><strong>进入sum函数之后，把esp的位置压栈</strong>（问题1），然后esp从main函数，上移到ebp位置（esp=ebp），并为sum函数开辟栈帧</mark></u>，有的编译器(windows)会为开辟的栈帧中初始化为0xCCCCCCCC（如果此类编译器如果允许访问未初始化的值，那么打印出来可能就是此值）</p></li><li><p><u><mark>sum函数后ebp回到esp位置（<code>mov ebp esp</code>），开辟的栈空间返回给系统；把栈的值出栈，给esp（，即回到main函数栈底）再出栈（将出栈内容，call的1所存入的值，放入CPU的PC寄存器），形参的地址归还给系统</mark></u></p></li></ul><h3 id="在main函数的入口和退出-会进行入栈操作-进行出栈操作" tabindex="-1"><a class="header-anchor" href="#在main函数的入口和退出-会进行入栈操作-进行出栈操作" aria-hidden="true">#</a> 在main函数的入口和退出：{ 会进行入栈操作，}进行出栈操作</h3><figure><img src="'+e+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">9	{</span></span>
<span class="line"><span style="color:#abb2bf;">   0x565555dd &lt;+0&gt;:	push   ebp</span></span>
<span class="line"><span style="color:#abb2bf;">   0x565555de &lt;+1&gt;:	mov    ebp,esp</span></span>
<span class="line"><span style="color:#abb2bf;">   0x565555e0 &lt;+3&gt;:	sub    esp,0x10</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面两句话的意思是将ebp推入栈中，之后让esp等于ebp</p><p><strong>为什么这么做呢</strong>？<u>因为ebp</u>作为一个用于寻址的固定值是有时间周期的。<u>只有在某个函数执行过程中才是固定的，在函数调用与函数执行完毕后会发生改变。</u></p><p><u>在函数调用之前，将调用者的函数（caller）的ebp存入栈，以便于在执行完毕后恢复现场是还原ebp的值。下一步，必须为它的局部变量</u>分配空间，同时，也必须为它可能用到的<u>一些临时变量分配空间</u>。</p>`,18),q=s("code",null," sub esp, 0E4h；",-1),I=o('<p>之后会根据情况看是否保存某些特定的寄存器（EBX，ESI和EDI）</p><p><u>之后ebp的值会保持固定。此后局部变量和临时存储都可以通过基准指针EBP加偏移量找到了</u></p><p>在函数执行完毕，控制流返回到调用者的函数（caller）之前会进行下述操作</p><figure><img src="'+e+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>所谓有始有终，这是会还原上面保存的寄存器值（edi esi ebx），之后<u>还原esp的值（上一个函数调用之前的esp被保存在固定的ebp中）与ebp值。这一过程被称为还原现场之后通过ret返回上一个函数</u></p><h3 id="main函数内" tabindex="-1"><a class="header-anchor" href="#main函数内" aria-hidden="true">#</a> main函数内</h3><figure><img src="'+A+`" alt="image-20240130182232318" tabindex="0" loading="lazy"><figcaption>image-20240130182232318</figcaption></figure><p>接下来是<code>int ret = sum(a,b)</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">17</span><span style="color:#ABB2BF;">	    </span><span style="color:#98C379;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">=&gt; </span><span style="color:#D19A66;">0x56555614</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+1</span><span style="color:#ABB2BF;">6&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">mov</span><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">DWORD</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">PTR</span><span style="color:#ABB2BF;"> [ebp-0xc],0xa</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">18</span><span style="color:#ABB2BF;">	    </span><span style="color:#98C379;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">b</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x5655561b</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+2</span><span style="color:#ABB2BF;">3&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">mov</span><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">DWORD</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">PTR</span><span style="color:#ABB2BF;"> [ebp-0x8],0x14</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">19</span><span style="color:#ABB2BF;">	    </span><span style="color:#98C379;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">ret</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">a,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">b</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x56555622</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+3</span><span style="color:#ABB2BF;">0&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">push</span><span style="color:#ABB2BF;">   </span><span style="color:#98C379;">DWORD</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">PTR</span><span style="color:#ABB2BF;"> [ebp-0x8]	</span><span style="color:#7F848E;font-style:italic;">#b</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x56555625</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+3</span><span style="color:#ABB2BF;">3&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">push</span><span style="color:#ABB2BF;">   </span><span style="color:#98C379;">DWORD</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">PTR</span><span style="color:#ABB2BF;"> [ebp-0xc]	</span><span style="color:#7F848E;font-style:italic;">#a</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x56555628</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+3</span><span style="color:#ABB2BF;">6&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">call</span><span style="color:#ABB2BF;">   </span><span style="color:#D19A66;">0x565555dd</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">int,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">int</span><span style="color:#ABB2BF;">)&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x5655562d</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+4</span><span style="color:#ABB2BF;">1&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">add</span><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">esp,0x8</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">0x56555630</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">+4</span><span style="color:#ABB2BF;">4&gt;</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">mov</span><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">DWORD</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">PTR</span><span style="color:#ABB2BF;"> [ebp-0x4],eax</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="函数调用参数的压栈顺序-参数由右向左压入堆栈。" tabindex="-1"><a class="header-anchor" href="#函数调用参数的压栈顺序-参数由右向左压入堆栈。" aria-hidden="true">#</a> <strong>函数调用参数的压栈顺序:参数由右向左压入堆栈。</strong></h4><p>先将b的值压入堆栈，再将a的值压入堆栈</p><figure><img src="`+u+'" alt="image-20240130182849062" tabindex="0" loading="lazy"><figcaption>image-20240130182849062</figcaption></figure><h4 id="执行call-sum-0f8108ch-执行call" tabindex="-1"><a class="header-anchor" href="#执行call-sum-0f8108ch-执行call" aria-hidden="true">#</a> <strong>执行<code>call sum (0F8108Ch) #执行call</code></strong> ：</h4><p><strong>call函数首先会将下一行执行的地址入栈</strong>：假设下一行指令的地址位<code>0x08124458</code></p><figure><img src="'+m+'" alt="image-20240130183016130" tabindex="0" loading="lazy"><figcaption>image-20240130183016130</figcaption></figure><p><strong>第二步进入函数调用：sum</strong></p><figure><img src="'+v+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>函数调用第一步： 将调用函数（main）函数的栈底指针ebp压栈</p><p>第二步：将新的栈底ebp指向原来的栈顶esp</p><p>第三步：将esp指向新的栈顶（开辟了函数的栈帧）：大小：0cch</p><figure><img src="'+b+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><code> temp = a + b;</code>由于a,b的值之前入栈，可以通过ebp+12字节找到b的值，ebp+8字节找到a的值，最后将运算结果赋值给temp</p><figure><img src="'+C+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>接着运行<code>return temp;</code>:<code> mov eax,dword ptr [temp]</code></p><figure><img src="'+g+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>接着是<code>函数的右括号“}”</code></p><figure><img src="'+_+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',27),U=s("li",null,[s("p",null,[s("code",null,"mov esp,ebp "),n(" 回退栈帧 将栈顶指针指向栈底")])],-1),M=s("li",null,[s("p",null,[s("code",null,"pop ebp "),n("栈顶出栈,并将出栈内容赋值给ebp，也是将main的栈底重新赋值给ebp")])],-1),L=s("code",null,"ret",-1),X=o('<p>接着调用函数完毕，回到主函数： 利用了<code>PC寄存器</code>，使得程序知道退出sum后运行哪一条指令：</p><figure><img src="'+x+'" alt="image-20240130203609288" tabindex="0" loading="lazy"><figcaption>image-20240130203609288</figcaption></figure><figure><img src="'+h+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>最后<code>return 0</code>，程序结束</p><h2 id="栈空间大小" tabindex="-1"><a class="header-anchor" href="#栈空间大小" aria-hidden="true">#</a> 栈空间大小</h2>',5),$=s("code",null,"ulimit -s 16384",-1),K=s("code",null,"/etc/security/limits.conf",-1),ss=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">zw</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20</span><span style="color:#98C379;">:41:13</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">~</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#E06C75;">$ulimit</span><span style="color:#ABB2BF;"> -s</span></span>
<span class="line"><span style="color:#61AFEF;">8192</span></span>
<span class="line"><span style="color:#61AFEF;">zw</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20</span><span style="color:#98C379;">:41:19</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">~</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#E06C75;">$ulimit</span><span style="color:#ABB2BF;"> -a</span></span>
<span class="line"><span style="color:#61AFEF;">core</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">file</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">size</span><span style="color:#ABB2BF;">          (blocks, </span><span style="color:#D19A66;">-c</span><span style="color:#ABB2BF;">) 0</span></span>
<span class="line"><span style="color:#61AFEF;">data</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">seg</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">size</span><span style="color:#ABB2BF;">           (kbytes, </span><span style="color:#D19A66;">-d</span><span style="color:#ABB2BF;">) unlimited</span></span>
<span class="line"><span style="color:#61AFEF;">scheduling</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">priority</span><span style="color:#ABB2BF;">             (-e) 0</span></span>
<span class="line"><span style="color:#61AFEF;">file</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">size</span><span style="color:#ABB2BF;">               (blocks, </span><span style="color:#D19A66;">-f</span><span style="color:#ABB2BF;">) unlimited</span></span>
<span class="line"><span style="color:#61AFEF;">pending</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">signals</span><span style="color:#ABB2BF;">                 (-i) 7558</span></span>
<span class="line"><span style="color:#61AFEF;">max</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">locked</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">memory</span><span style="color:#ABB2BF;">       (kbytes, </span><span style="color:#D19A66;">-l</span><span style="color:#ABB2BF;">) 65536</span></span>
<span class="line"><span style="color:#61AFEF;">max</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">memory</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">size</span><span style="color:#ABB2BF;">         (kbytes, </span><span style="color:#D19A66;">-m</span><span style="color:#ABB2BF;">) unlimited</span></span>
<span class="line"><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">files</span><span style="color:#ABB2BF;">                      (-n) 1024</span></span>
<span class="line"><span style="color:#61AFEF;">pipe</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">size</span><span style="color:#ABB2BF;">            (512 </span><span style="color:#98C379;">bytes,</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-p</span><span style="color:#ABB2BF;">) 8</span></span>
<span class="line"><span style="color:#61AFEF;">POSIX</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">message</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">queues</span><span style="color:#ABB2BF;">     (bytes, </span><span style="color:#D19A66;">-q</span><span style="color:#ABB2BF;">) 819200</span></span>
<span class="line"><span style="color:#61AFEF;">real-time</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">priority</span><span style="color:#ABB2BF;">              (-r) 0</span></span>
<span class="line"><span style="color:#61AFEF;">stack</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">size</span><span style="color:#ABB2BF;">              (kbytes, </span><span style="color:#D19A66;">-s</span><span style="color:#ABB2BF;">) 8192</span></span>
<span class="line"><span style="color:#61AFEF;">cpu</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">time</span><span style="color:#ABB2BF;">               (seconds, </span><span style="color:#D19A66;">-t</span><span style="color:#ABB2BF;">) unlimited</span></span>
<span class="line"><span style="color:#61AFEF;">max</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">user</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">processes</span><span style="color:#ABB2BF;">              (-u) 7558</span></span>
<span class="line"><span style="color:#61AFEF;">virtual</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">memory</span><span style="color:#ABB2BF;">          (kbytes, </span><span style="color:#D19A66;">-v</span><span style="color:#ABB2BF;">) unlimited</span></span>
<span class="line"><span style="color:#61AFEF;">file</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">locks</span><span style="color:#ABB2BF;">                      (-x) unlimited</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+f+'" alt="image-20240130204306887" tabindex="0" loading="lazy"><figcaption>image-20240130204306887</figcaption></figure><h2 id="栈溢出" tabindex="-1"><a class="header-anchor" href="#栈溢出" aria-hidden="true">#</a> 栈溢出</h2><p>出现栈内存溢出的常见原因有2个：</p><ol><li><u>函数调用层次过深</u>,每调用一次,函数的参数、局部变量等信息就压一次栈。</li><li><u>局部静态变量体积太大</u></li></ol>',5),ns=s("u",null,"深度几十层我想是没问题的",-1),as=o(`<p>第二种情况比较常见 在函数里定义了一个局部变量,是一个类对象,该类中有一个大数组</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">即如果函数这样写：</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test_stack_overflow</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">char</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> chdata </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#56B6C2;">*</span><span style="color:#D19A66;">1024</span><span style="color:#56B6C2;">*</span><span style="color:#D19A66;">1024</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> []chdata;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">   是不会出现这个错误的，而这样写则不行：</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test_stack_overflow</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">chdata</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#56B6C2;">*</span><span style="color:#D19A66;">1024</span><span style="color:#56B6C2;">*</span><span style="color:#D19A66;">1024</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">   大多数情况下都会出现内存溢出的错误,</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决办法大致说来也有两种：</p>`,3);function ls(ps,os){const a=t("font");return r(),B("div",null,[D,k,i("more"),z,s("p",null,[W,n("是一种具有一定规则的"),l(a,{color:"red"},{default:p(()=>[R]),_:1}),n("，我们可以按照一定的规则进行添加和删除数据。它使用的是"),P,n("的原则。在x86等汇编集合中堆栈与弹栈的操作指令分别为：")]),w,O,S,s("p",null,[s("strong",null,[l(a,{color:"green"},{default:p(()=>[T,n("的时候，"),Y,n("以及"),J,n("等等都会被记录在ESP、EBP中间的区域。"),N,n("。C"),Z]),_:1})])]),s("ul",null,[V,s("li",null,[s("p",null,[j,n("：当前函数"),G,n("指针（虚拟内存空间中"),l(a,{color:"red"},{default:p(()=>[n("栈底是高地址")]),_:1}),n("）；"),H])])]),s("p",null,[s("u",null,[n("ESP是可变的,随着栈的生产而逐渐变小（因为栈向低地址扩充，栈顶寄存器数值不断变小）,而EBP寄存器是固定的,"),l(a,{color:"red"},{default:p(()=>[n("只有当函数的调用后,发生入栈操作而改变")]),_:1}),n("。")])]),Q,s("p",null,[n("​ "),q,l(a,{color:"red"},{default:p(()=>[n("减去的值根据程序而定")]),_:1})]),I,s("ol",null,[U,M,s("li",null,[s("p",null,[L,n(),l(a,{color:"red"},{default:p(()=>[n("栈顶出栈，并将出栈的内容赋值给pc寄存器，也就是将之前压榨的call sun的下一条指令赋值到pc寄存器执行")]),_:1})])])]),X,s("ul",null,[s("li",null,[l(a,{color:"red"},{default:p(()=>[n("Linux默认栈的空间大小为8M，Windows默认为1M")]),_:1})]),s("li",null,[n("linux"),$,n("将把默认栈大小设置为16384 KB（或16MB）（以 kbytes 为单位）。 "),s("ul",null,[s("li",null,[n("这个设置仅对"),l(a,{color:"red"},{default:p(()=>[n("当前会话有效")]),_:1}),n("，当你重新启动终端时，它会恢复为系统默认值。")]),s("li",null,[n("如果你希望更改"),l(a,{color:"red"},{default:p(()=>[n("系统范围内的默认栈大小")]),_:1}),n("，你可能需要编辑 "),K,n(" 文件，并添加相应的条目。")])])])]),ss,s("p",null,[n("第一种情况不太常见,因为"),l(a,{color:"red"},{default:p(()=>[n("很多情况下我们都用其他方法来代替递归调用")]),_:1}),n(",所以只要不出现无限制的调用都应该是没有问题的,起码"),ns,n("。检查是否是此原因的方法为，在引起溢出的那个函数处设一个断点,然后执行程序使其停在断点处, 然后按下快捷键Alt+7调出call stack窗口,在窗口中可以看到函数调用的层次关系。")]),as,s("ol",null,[s("li",null,[l(a,{color:"red"},{default:p(()=>[n("增加栈内存的数目")]),_:1})]),s("li",null,[l(a,{color:"red"},{default:p(()=>[n("使用堆内存")]),_:1}),n("🍗")])])])}const ts=c(E,[["render",ls],["__file","指令角度堆栈调用过程.html.vue"]]);export{ts as default};
