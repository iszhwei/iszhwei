import{_ as B}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as r,d as n,e as s,f as l,w as a,a as e}from"./app-m9pC5KT-.js";const i="/assets/20200310165640597-7ZHsMuQN.png",y={},F=n("h1",{id:"容器空间适配器allocator简单实现",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#容器空间适配器allocator简单实现","aria-hidden":"true"},"#"),s(" 容器空间适配器allocator简单实现")],-1),A=n("h2",{id:"容器为什么需要空间配置器-不用空间配置器会怎么样",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#容器为什么需要空间配置器-不用空间配置器会怎么样","aria-hidden":"true"},"#"),s(" 容器为什么需要空间配置器，不用空间配置器会怎么样？")],-1),d=e(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Test</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(){cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Test()&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">~Test</span><span style="color:#ABB2BF;">(){cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;~Test&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对其进行实例化：</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">vector</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">Test</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> vec;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),v=n("strong",null,"空容器",-1),D=n("strong",null,"。",-1),u=n("h3",{id:"问题分析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#问题分析","aria-hidden":"true"},"#"),s(" 问题分析：")],-1),C=n("p",null,"①定义容器对象时，底层只是进行空间开辟，而不能去构造对象。但是如果使用new的话，它会同时完成这两件事。 ②析构时用了delete，将_first指针指向的数组每一个元素都当作有效的test对象析构了一遍。数组可能会很长，但是里面有效的元素可能只有几个，我们析构时只析构有效的元素，再将整个数组内存释放。",-1),m=n("h3",{id:"解决思路",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#解决思路","aria-hidden":"true"},"#"),s(" 解决思路")],-1),b=n("h2",{id:"allocator实现",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#allocator实现","aria-hidden":"true"},"#"),s(" allocator实现")],-1),E=e(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//容器的空间配置器</span></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Allocator</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">allocate</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">size</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//只负责内存开辟</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> (T</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;">malloc</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(T) </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> size);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">deallocate</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//只负责内存释放</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#61AFEF;">free</span><span style="color:#ABB2BF;">(p);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">construct</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//已经开辟好的内存上，负责对象构造</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> (p) </span><span style="color:#61AFEF;">T</span><span style="color:#ABB2BF;">(val);</span><span style="color:#7F848E;font-style:italic;">//定位new，指定内存上构造val，T(val)拷贝构造</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">destroy</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//只负责对象析构</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">~T</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;">//~T()代表了T类型的析构函数</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Alloc</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> Allocator&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;&gt;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">vector</span><span style="color:#7F848E;font-style:italic;">//向量容器</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">vector</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">size</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//构造</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//_first = new T[size];</span></span>
<span class="line"><span style="color:#ABB2BF;">		_first </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">allocate</span><span style="color:#ABB2BF;">(size);</span></span>
<span class="line"><span style="color:#ABB2BF;">		_last </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _first;</span></span>
<span class="line"><span style="color:#ABB2BF;">		_end </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _first </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> size;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">~vector</span><span style="color:#ABB2BF;">()</span><span style="color:#7F848E;font-style:italic;">//析构</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//delete[]_first;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (T </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p</span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;">_first; p</span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;">_last; </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">p)</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">destroy</span><span style="color:#ABB2BF;">(p);</span><span style="color:#7F848E;font-style:italic;">//把_first指针指向的数组的有效元素析构</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">deallocate</span><span style="color:#ABB2BF;">(_first);</span><span style="color:#7F848E;font-style:italic;">//释放堆上的数组内存</span></span>
<span class="line"><span style="color:#ABB2BF;">		_first </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _last </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _end </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">vector</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">vector</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">rhs</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//拷贝构造</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> size </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">rhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_end</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">rhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_first</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//空间大小</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//_first = new T[size];</span></span>
<span class="line"><span style="color:#ABB2BF;">		_first </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">allocate</span><span style="color:#ABB2BF;">(size);</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> len </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">rhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_last</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">rhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_first</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//有效元素</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i</span><span style="color:#C678DD;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; i</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">len; </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">i)</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//_first[i] = rhs._first[i];</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">construct</span><span style="color:#ABB2BF;">(_first</span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;">i, </span><span style="color:#E5C07B;">rhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_first</span><span style="color:#ABB2BF;">[i]);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">		_last </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _first </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> len;</span></span>
<span class="line"><span style="color:#ABB2BF;">		_end </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _first </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> size;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">vector</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">=(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">vector</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">rhs</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//赋值运算符重载</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">rhs)</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//delete[]_first;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (T </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p</span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;">_first; p</span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;">_last; </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">p)</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">destory</span><span style="color:#ABB2BF;">(p);</span><span style="color:#7F848E;font-style:italic;">//把_first指针指向的数组的有效元素析构</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">deallocate</span><span style="color:#ABB2BF;">(_first);</span><span style="color:#7F848E;font-style:italic;">//释放堆上的数组内存</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> size </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">rhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_end</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">rhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_first</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//空间大小</span></span>
<span class="line"><span style="color:#ABB2BF;">		_first </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">allocate</span><span style="color:#ABB2BF;">(size);</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> len </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">rhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_last</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">rhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_first</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//有效元素</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i</span><span style="color:#C678DD;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; i</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">len; </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">i)</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">construct</span><span style="color:#ABB2BF;">(_first</span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;">i, </span><span style="color:#E5C07B;">rhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_first</span><span style="color:#ABB2BF;">[i]);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">		_last </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _first </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> len;</span></span>
<span class="line"><span style="color:#ABB2BF;">		_end </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _first </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> size;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">push_back</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//尾插</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">full</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#61AFEF;">expand</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//*_last++ = val;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">construct</span><span style="color:#ABB2BF;">(_last, val);</span><span style="color:#7F848E;font-style:italic;">//_last指针指向的内存构造一个值为val的对象</span></span>
<span class="line"><span style="color:#ABB2BF;">		_last</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">pop_back</span><span style="color:#ABB2BF;">()</span><span style="color:#7F848E;font-style:italic;">//尾删</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">()) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//--_last;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//不仅要把_last指针--，还需要析构删除的元素</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">--</span><span style="color:#ABB2BF;">_last;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">destroy</span><span style="color:#ABB2BF;">(_last);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">back</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">const</span><span style="color:#7F848E;font-style:italic;">//返回容器末尾元素值</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">(_last </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">full</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">const</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> _last </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> _end;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">const</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> _first </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> _last;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">size</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">const</span><span style="color:#7F848E;font-style:italic;">//返回容器中元素个数</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> _last </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> _first;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">	T </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">_first;</span><span style="color:#7F848E;font-style:italic;">//起始数组位置</span></span>
<span class="line"><span style="color:#ABB2BF;">	T </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">_last;</span><span style="color:#7F848E;font-style:italic;">//指向最后一个有效元素后继位置</span></span>
<span class="line"><span style="color:#ABB2BF;">	T </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">_end;</span><span style="color:#7F848E;font-style:italic;">//指向数组空间的后继位置</span></span>
<span class="line"><span style="color:#ABB2BF;">	Alloc _allocator;</span><span style="color:#7F848E;font-style:italic;">//定义容器的空间配置器对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">expand</span><span style="color:#ABB2BF;">()</span><span style="color:#7F848E;font-style:italic;">//扩容</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> size </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _end </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> _first;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//T *ptmp = new T[2*size];</span></span>
<span class="line"><span style="color:#ABB2BF;">		T </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">ptmp </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">allocate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">size);</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i</span><span style="color:#C678DD;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; i</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">size; </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">i)</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">construct</span><span style="color:#ABB2BF;">(ptmp</span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;">i, </span><span style="color:#E5C07B;">_first</span><span style="color:#ABB2BF;">[i]);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//ptmp[i] = _first[i];</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//delete[]_first;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (T </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p</span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;">_first; p</span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;">_last; </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">p)</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">destroy</span><span style="color:#ABB2BF;">(p);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">_allocator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">deallocate</span><span style="color:#ABB2BF;">(_first);</span></span>
<span class="line"><span style="color:#ABB2BF;">		_first </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> ptmp;</span></span>
<span class="line"><span style="color:#ABB2BF;">		_last </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _first </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> size;</span></span>
<span class="line"><span style="color:#ABB2BF;">		_end </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _first </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">size;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Test</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(){cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Test()&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">~Test</span><span style="color:#ABB2BF;">(){cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;~Test&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Test</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">){cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Test(const Test&amp;)&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	Test t1, t2, t3;</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;-------------------------&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	vector</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">Test</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> vec;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">vec</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push_back</span><span style="color:#ABB2BF;">(t1);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">vec</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push_back</span><span style="color:#ABB2BF;">(t2);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">vec</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push_back</span><span style="color:#ABB2BF;">(t3);</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;-------------------------&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">vec</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop_back</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;">//只需要析构</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;-------------------------&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+i+'" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure>',2);function _(f,h){const t=o("RouterLink"),p=o("font");return c(),r("div",null,[F,A,n("p",null,[s("我们还是"),l(t,{to:"/ccpp/04%20%E6%A8%A1%E6%9D%BF/STL%E5%90%91%E9%87%8F%E5%AE%B9%E5%99%A8vector%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0.html#%E7%AE%80%E5%8D%95%E7%89%88"},{default:a(()=>[s("前面简单实现的vector容器")]),_:1}),s("，用Test来实例化：")]),d,n("p",null,[s("此时什么都没有做，这是一个"),v,s("，但是却**"),l(p,{color:"red"},{default:a(()=>[s("构造了10个Test对象，又析构了10次")]),_:1}),D,l(p,{color:"green"},{default:a(()=>[s("因为构造时用了new，它不仅仅会开辟空间，还会去构造对象")]),_:1}),s("**，因此构造了10个对象，使用十分不合理。")]),u,C,m,n("p",null,[n("strong",null,[s("①需要我们把"),l(p,{color:"cornflowerblue"},{default:a(()=>[s("内存开辟")]),_:1}),s("与"),l(p,{color:"cornflowerblue"},{default:a(()=>[s("对象构造")]),_:1}),s("分开处理了。②析构容器有有效的元素，然后释放_first指针指向的堆内存。③只需要析构对象，将对象的析构和内存分离开。")]),s(" 此时就需要我们的容器空间配置器了。")]),b,n("p",null,[n("strong",null,[s("容器的空间配置器allocator："),l(p,{color:"red"},{default:a(()=>[s("空间配置器的核心功能就是把对象的内存开辟和对象构造的过程分解开，对象析构和内存释放的过程分解开。")]),_:1}),s("容器底层内存开辟，内存释放，对象构造和析构，都通过allocator空间适配器来实现。")])]),E])}const z=B(y,[["render",_],["__file","容器空间适配器allocator的简单实现.html.vue"]]);export{z as default};
