import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as c,c as i,d as n,e as s,f as a,w as p,a as e}from"./app-mYdPlPhZ.js";const B={},r=e(`<h1 id="c-对象的优化" tabindex="-1"><a class="header-anchor" href="#c-对象的优化" aria-hidden="true">#</a> C++对象的优化</h1><h2 id="_1、对象使用过程中背后调用了哪些方法" tabindex="-1"><a class="header-anchor" href="#_1、对象使用过程中背后调用了哪些方法" aria-hidden="true">#</a> 1、对象<strong>使用过程中</strong>背后调用了哪些方法？</h2><p>了解构造和析构的调用，以及调用顺序</p><h3 id="用临时对象生成新对象" tabindex="-1"><a class="header-anchor" href="#用临时对象生成新对象" aria-hidden="true">#</a> 用临时对象生成新对象</h3><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Test</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">) :</span><span style="color:#61AFEF;">ma</span><span style="color:#ABB2BF;">(a) </span></span>
<span class="line"><span style="color:#ABB2BF;">	{ cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Test(int)&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">~Test</span><span style="color:#ABB2BF;">() </span></span>
<span class="line"><span style="color:#ABB2BF;">	{ cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;~Test()&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Test</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">t</span><span style="color:#ABB2BF;">) :</span><span style="color:#61AFEF;">ma</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ma</span><span style="color:#ABB2BF;">) </span></span>
<span class="line"><span style="color:#ABB2BF;">	{ cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Test(const Test&amp;)&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">Test</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">=(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Test</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">t</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;operator=&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">		ma </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ma</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> ma;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	Test t1;</span><span style="color:#7F848E;font-style:italic;">//调用构造函数 </span></span>
<span class="line"><span style="color:#ABB2BF;">	Test </span><span style="color:#61AFEF;">t2</span><span style="color:#ABB2BF;">(t1);</span><span style="color:#7F848E;font-style:italic;">//调用拷贝构造函数 </span></span>
<span class="line"><span style="color:#ABB2BF;">	Test t3 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> t1;</span><span style="color:#7F848E;font-style:italic;">//调用拷贝构造函数，因为t3还没有生成 </span></span>
<span class="line"><span style="color:#ABB2BF;">	</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//Test(20) 显示生成临时对象，是没有名字的，所以其生存周期：所在的语句</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//语句结束，临时对象就析构了 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	C++编译器对于对象构造的优化：用临时对象生成新对象的时候，临时对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	就不产生了，直接构造新对象就可以了</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	*/</span></span>
<span class="line"><span style="color:#ABB2BF;">	Test t4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//和Test t4(20);没有区别的！</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;--------------&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),y=n("strong",null,"C++编译器对于对象构造的优化",-1),d=n("strong",null,"用临时对象生成新对象的时候",-1),F=e(`<h3 id="用临时对象给已存在对象赋值" tabindex="-1"><a class="header-anchor" href="#用临时对象给已存在对象赋值" aria-hidden="true">#</a> 用临时对象给已存在对象赋值</h3><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	Test t1;</span><span style="color:#7F848E;font-style:italic;">//调用构造函数 </span></span>
<span class="line"><span style="color:#ABB2BF;">	Test </span><span style="color:#61AFEF;">t2</span><span style="color:#ABB2BF;">(t1);</span><span style="color:#7F848E;font-style:italic;">//调用拷贝构造函数 </span></span>
<span class="line"><span style="color:#ABB2BF;">	Test t3 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> t1;</span><span style="color:#7F848E;font-style:italic;">//调用拷贝构造函数，因为t3还没有生成 </span></span>
<span class="line"><span style="color:#ABB2BF;">	</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//Test(20) 显示生成临时对象，是没有名字的，所以其生存周期：所在的语句</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//语句结束，临时对象就析构了 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	C++编译器对于对象构造的优化：用临时对象生成新对象的时候，临时对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	就不产生了，直接构造新对象就可以了</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	*/</span></span>
<span class="line"><span style="color:#ABB2BF;">	Test t4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//和Test t4(20);没有区别的！</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;--------------&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//t4.operator=(t2)</span></span>
<span class="line"><span style="color:#ABB2BF;">	t4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> t2;</span><span style="color:#7F848E;font-style:italic;">//调用赋值重载函数，因为t4原本已存在 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//Test(30)显式生成临时对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//t4原本已存在，所以不是构造，这个临时对象肯定要构造生成的 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//临时对象生成后，给t4赋值 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//出语句后，临时对象析构 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//t4.operator=(const Test &amp;t)</span></span>
<span class="line"><span style="color:#ABB2BF;">	t4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;--------------&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),A=e(`<h3 id="显示生成临时对象和隐式生成临时对象" tabindex="-1"><a class="header-anchor" href="#显示生成临时对象和隐式生成临时对象" aria-hidden="true">#</a> 显示生成临时对象和隐式生成临时对象</h3><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	Test t1;</span></span>
<span class="line"><span style="color:#ABB2BF;">	Test </span><span style="color:#61AFEF;">t2</span><span style="color:#ABB2BF;">(t1);</span></span>
<span class="line"><span style="color:#ABB2BF;">	Test t3 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> t1;</span></span>
<span class="line"><span style="color:#ABB2BF;">	Test t4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;--------------&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	t4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> t2;</span><span style="color:#7F848E;font-style:italic;">//t4调用赋值重载函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	t4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//显式生成临时对象，赋值给t4，出语句后，临时对象析构 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	t4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (Test)</span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		把30强转成Test类型int-&gt;Test(int)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		把其他类型转成类类型的时候，编译器就看这个类类型	有没有合适的构造函数 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		把整型转成Test，就看这个类类型有没有带int类型参数的构造函数 ，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		有，就可以显式生成临时对象，然后赋值给t4 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		出语句后，临时对象析构 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//隐式生成临时对象,然后赋值给t4，出语句后，临时对象析构 </span></span>
<span class="line"><span style="color:#ABB2BF;">	t4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//把整型转成Test，Test(30) int-&gt;Test(int)  char*-&gt;Test(char*)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;--------------&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),v=n("h3",{id:"临时对象的指针和引用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#临时对象的指针和引用","aria-hidden":"true"},"#"),s(" 临时对象的指针和引用")],-1),u=n("strong",null,"指针指向临时对象",-1),m=n("strong",null,"引用指向临时对象",-1),D=e(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	Test t1;</span></span>
<span class="line"><span style="color:#ABB2BF;">	Test </span><span style="color:#61AFEF;">t2</span><span style="color:#ABB2BF;">(t1);</span></span>
<span class="line"><span style="color:#ABB2BF;">	Test t3 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> t1;</span></span>
<span class="line"><span style="color:#ABB2BF;">	Test t4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;--------------&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	t4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> t2;</span></span>
<span class="line"><span style="color:#ABB2BF;">	t4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	t4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (Test)</span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	t4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;--------------&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	Test</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">40</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//指针指向临时对象，这个临时对象肯定是要生成的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//然后p指向这个临时对象的地址</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//出语句后，临时对象析构 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//此时p指向的是一个已经析构的临时对象，p相当于野指针了 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> Test</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;"> ref </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//引用一个临时对象，这个临时对象也是要生成的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//出语句后，临时对象不析构，因为引用相当于是别名，临时对象出语句析构是因为没有名字 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//用引用变量引用临时对象是安全的，临时对象就是有名字了，临时对象的生存周期就变成引用变量的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//生存周期了。引用变量是这个函数的局部变量，return完，这个临时对象才析构 </span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;--------------&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),b=e(`<h3 id="示例二" tabindex="-1"><a class="header-anchor" href="#示例二" aria-hidden="true">#</a> 示例二</h3><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Test</span></span>
<span class="line"><span style="color:#ABB2BF;">{ </span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//因为a,b有默认值，所以构造有3种方式：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//Test() Test(10) Test(10, 10)</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//构造函数 </span></span>
<span class="line"><span style="color:#ABB2BF;">		:</span><span style="color:#61AFEF;">ma</span><span style="color:#ABB2BF;">(a), </span><span style="color:#61AFEF;">mb</span><span style="color:#ABB2BF;">(b)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Test(int, int)&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">~Test</span><span style="color:#ABB2BF;">()</span><span style="color:#7F848E;font-style:italic;">//析构函数 </span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;~Test()&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Test</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//拷贝构造函数 </span></span>
<span class="line"><span style="color:#ABB2BF;">		:</span><span style="color:#61AFEF;">ma</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ma</span><span style="color:#ABB2BF;">), </span><span style="color:#61AFEF;">mb</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mb</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Test(const Test&amp;)&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">=(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Test</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//赋值重载函数 </span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		ma </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ma</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		mb </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mb</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;operator=&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> ma;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> mb;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//对象的构造顺序标识：1,2,3...14</span></span>
<span class="line"><span style="color:#E5C07B;">Test</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">t1</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//1.Test(int, int)</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	Test </span><span style="color:#61AFEF;">t2</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//3.Test(int, int)</span></span>
<span class="line"><span style="color:#ABB2BF;">	Test t3 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> t2;</span><span style="color:#7F848E;font-style:italic;">//4.Test(const Test&amp;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//第一次运行到它才初始化的，static Test t4(30, 30);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> Test t4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//5.Test(int, int)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	t2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">40</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">40</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//6.Test(int, int) operator= 出语句调用 ~Test()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//(50,50)是逗号表达式，(表达式1，表达式2，表达式n)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//(50,50)的最后的结果是最后一个表达式n的结果 50</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//(50, 50) =  (Test)50; Test(int)</span></span>
<span class="line"><span style="color:#ABB2BF;">	t2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (Test)(</span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//7.Test(int,int) operator= 出语句调用~Test()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	t2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">60</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//Test(int) 8.Test(int,int) operator=出语句调用~Test()</span></span>
<span class="line"><span style="color:#ABB2BF;">	Test</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> p1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">70</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">70</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//9. Test(int,int) 要调用delete才析构对象</span></span>
<span class="line"><span style="color:#ABB2BF;">	Test</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> p2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Test</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">];</span><span style="color:#7F848E;font-style:italic;">//10. Test(int,int) Test(int,int) 要调用delete[]才析构对象</span></span>
<span class="line"><span style="color:#ABB2BF;">	Test</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> p3 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">80</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">80</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//11. Test(int,int) 出语句调用~Test()</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> Test</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;"> p4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">90</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">90</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//12. Test(int,int)</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> p1;</span><span style="color:#7F848E;font-style:italic;">//13.~Test()</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;">[]p2;</span><span style="color:#7F848E;font-style:italic;">//14. ~Test() ~Test()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">Test</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">t5</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//2.Test(int, int)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),C=n("code",null,"t2 = (Test)(50, 50);",-1),E=n("strong",null,"逗号表达式",-1),f=n("code",null,"Test(50)",-1),T=n("code",null,"Test t5(100, 100);//2.Test(int, int)",-1),h=n("code",null,"mian()",-1),_=n("li",null,[n("p",null,[n("strong",null,"析构顺序："),s(),n("code",null,"p1->p2(析构2次)->p4->t3->t2->t4->t5->t1")])],-1),g=e(`<h2 id="_2、函数调用过程中对象被后续调用的方法太多" tabindex="-1"><a class="header-anchor" href="#_2、函数调用过程中对象被后续调用的方法太多" aria-hidden="true">#</a> 2、<strong>函数调用过程中</strong>对象被后续调用的方法太多</h2><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Test</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//有默认值，可以有2种构造方式：Test()  Test(20)</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">) :</span><span style="color:#61AFEF;">ma</span><span style="color:#ABB2BF;">(data)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Test(int)&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">~Test</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;~Test()&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Test</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">t</span><span style="color:#ABB2BF;">) :</span><span style="color:#61AFEF;">ma</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ma</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Test(const Test&amp;)&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">=(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Test</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">t</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;operator=&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">		ma </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ma</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getData</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> ma; }</span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> ma;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Test</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">GetObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Test</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">t</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">	//不能返回局部的或临时的对象的指针或引用</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> val </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getData</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	Test </span><span style="color:#61AFEF;">tmp</span><span style="color:#ABB2BF;">(val);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> tmp;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	Test t1;</span><span style="color:#7F848E;font-style:italic;">//1、调用带整型参数的构造函数 </span></span>
<span class="line"><span style="color:#ABB2BF;">	Test t2;</span><span style="color:#7F848E;font-style:italic;">//2、调用带整型参数的构造函数</span></span>
<span class="line"><span style="color:#ABB2BF;">	t2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">GetObject</span><span style="color:#ABB2BF;">(t1);</span><span style="color:#7F848E;font-style:italic;">//函数调用，实参传递给形参，是初始化还是赋值？</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//当然是初始化，对象初始化是调用构造函数，赋值是两个对象都存在 调用左边对象的=重载</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//t1是已经构造好的Test对象，而形参是t是正在定义的Test对象 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//3、调用Test(const Test&amp;) 拿t1拷贝构造形参t</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//4、调用Test(int)的构造，构造tmp对象 然后return tmp;tmp是不能直接给t2赋值的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//因为tmp和t2是两个不同函数栈帧上的对象，是不能直接进行赋值的 GetObject函数完成调用时</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//tmp对象作为局部对象就析构了 ，为了把返回值带出来， 在return tmp;这里，首先要在main函数栈帧</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//上构建一个临时对象，目的就是把tmp对象带出来， </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//5、调用 Test(const Test&amp;)，tmp拷贝构造main函数栈帧上的临时对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//6、出 GetObject作用域，tmp析构</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//7、形参t对象析构</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//8、operator =，把main函数刚才构建的临时对象赋值给t2，临时对象没名字，出了语句就要析构 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//9、把main函数刚才构建的临时对象析构 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//10、main函数结束，t2析构</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//11、t1析构 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、总结三条对象优化原则" tabindex="-1"><a class="header-anchor" href="#_3、总结三条对象优化原则" aria-hidden="true">#</a> 3、总结三条对象优化原则</h2>`,3),q=n("strong",null,"参数传递",-1),x=n("strong",null,"返回对象",-1),k=n("strong",null,"收返回值是对象的",-1),j=e(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Test</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">GetObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Test</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">t</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">	//引用传递</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> val </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getData</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//Test tmp(val);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//return tmp;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//返回临时对象</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(val);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	Test t1;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	Test t2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">GetObject</span><span style="color:#ABB2BF;">(t1);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//t2 = GetObject(t1);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function G(O,w){const l=t("font");return c(),i("div",null,[r,n("p",null,[y,s("："),a(l,{color:"red"},{default:p(()=>[d,s("，临时对象就不产生了，直接构造新对象就可以了")]),_:1})]),F,n("p",null,[n("strong",null,[a(l,{color:"red"},{default:p(()=>[s("t4原本已存在")]),_:1}),s("，所以不是构造，"),a(l,{color:"red"},{default:p(()=>[s("这个临时对象肯定要构造生成的")]),_:1}),s("，给t4赋值出语句后，临时对象析构")])]),A,n("p",null,[n("strong",null,[s("把"),a(l,{color:"green"},{default:p(()=>[s("其他类型")]),_:1}),s("转成"),a(l,{color:"green"},{default:p(()=>[s("类类型")]),_:1}),s("的时候，编译器就看这个类类型 有没有合适的"),a(l,{color:"red"},{default:p(()=>[s("构造函数")]),_:1})])]),v,n("ul",null,[n("li",null,[u,s("，出了语句，"),a(l,{color:"red"},{default:p(()=>[s("临时对象会析构")]),_:1}),s("；")]),n("li",null,[m,s("，出了语句，"),a(l,{color:"red"},{default:p(()=>[s("临时对象不会析构")]),_:1}),s("。引用相当于给临时对象起了一个名字。")])]),D,a(l,{color:"red"},{default:p(()=>[s("用引用变量**引用**临时对象，临时对象就是有名字了，**临时对象**的生存周期就变成这个函数的**局部变量**的生命周期")]),_:1}),b,n("ul",null,[n("li",null,[n("p",null,[C,s("由于"),a(l,{color:"red"},{default:p(()=>[E]),_:1}),s("将（50，50）等价于50，所以最后调用"),f])]),n("li",null,[n("p",null,[s("注意"),T,s("在"),h,s("前，因为**"),a(l,{color:"red"},{default:p(()=>[s("全局变量的初始化在main()之前")]),_:1}),s("**")])]),_]),g,n("ol",null,[n("li",null,[n("p",null,[s("函数"),q,s("过程中，"),n("strong",null,[s("对象优先按"),a(l,{color:"green"},{default:p(()=>[s("引用传递")]),_:1})]),s("，这样可以"),a(l,{color:"red"},{default:p(()=>[s("省去一个形参t的拷贝构造调用，形参没有构建新的对象，出作用域也不用析构了，所以不要按值传")]),_:1}),s("！")])]),n("li",null,[n("p",null,[s("函数"),x,s("的时候，应该"),n("strong",null,[s("优先返回一个"),a(l,{color:"green"},{default:p(()=>[s("临时对象")]),_:1})]),s("，而"),a(l,{color:"red"},{default:p(()=>[s("不要返回一个定义过的对象")]),_:1})])]),n("li",null,[n("p",null,[k,s("函数调用的时候，"),n("strong",null,[s("优先按"),a(l,{color:"green"},{default:p(()=>[s("初始化")]),_:1}),s("的方式接收")]),s("，"),a(l,{color:"red"},{default:p(()=>[s("不要按赋值的方式接收")]),_:1})])])]),j])}const S=o(B,[["render",G],["__file","C__对象的优化.html.vue"]]);export{S as default};
