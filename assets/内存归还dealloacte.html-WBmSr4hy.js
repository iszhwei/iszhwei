import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as l,a}from"./app-mYdPlPhZ.js";const e="/assets/watermark_type_ZHJvaWRzYW5zZmFsbGJhY2s_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-OZ8hVcpd.png",o={},p=a('<h1 id="内存归还dealloacte" tabindex="-1"><a class="header-anchor" href="#内存归还dealloacte" aria-hidden="true">#</a> 内存归还dealloacte</h1><p>归还分配出去的<code>__chunk</code>块，并</p><ol><li>修改<code>_S_free_list</code>对应的元素（<strong>保存当前还未分配出去<code>__chunk</code>块的首地址</strong>）</li><li><strong>修改归还的<code>__chunk</code>块的next域</strong></li></ol><figure><img src="'+e+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>归还__p指向的__n字节chunk块到内存池</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 归还__p指向的__n字节内存空间到内存池</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">deallocate</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void*</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">__p</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">__n</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (__n </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;">) _MAX_BYTES)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //因为大于128字节的是由malloc分配，所以释放的底层是free</span></span>
<span class="line"><span style="color:#ABB2BF;">        malloc_alloc::</span><span style="color:#61AFEF;">deallocate</span><span style="color:#ABB2BF;">(__p, __n);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    	// _S_freelist_index(__n):获取__n字节在_S_free_list中哪个小的内存池分配的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    	// __my_free_list 指向小内存池的起始地址</span></span>
<span class="line"><span style="color:#ABB2BF;">        _Obj</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> __STL_VOLATILE</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> __my_free_list </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _S_free_list </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">_S_freelist_index</span><span style="color:#ABB2BF;">(__n);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // __q指向要归还的__chunk块</span></span>
<span class="line"><span style="color:#ABB2BF;">        _Obj</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> __q </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (_Obj</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)__p;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">		 </span><span style="color:#C678DD;">#ifndef</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">_NOTHREADS</span></span>
<span class="line"><span style="color:#ABB2BF;">		      _Lock __lock_instance;</span><span style="color:#7F848E;font-style:italic;">//因为要修改静态链表，加锁保证线程安全</span></span>
<span class="line"><span style="color:#C678DD;">		 #endif</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> 		// 即将归还__chunk块的next被赋值成当前还未分配出去__chunk块的首地址</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">__q </span><span style="color:#ABB2BF;">-&gt; </span><span style="color:#E06C75;">_M_free_list_link</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">__my_free_list;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 修改_S_free_list的元素，即修改了当前还未分配出去__chunk块的首地址</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">__my_free_list </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> __q;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),c=[p];function t(i,r){return n(),l("div",null,c)}const y=s(o,[["render",t],["__file","内存归还dealloacte.html.vue"]]);export{y as default};
