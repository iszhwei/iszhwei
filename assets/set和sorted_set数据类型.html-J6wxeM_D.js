import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as e,a as n}from"./app-mYdPlPhZ.js";const l="/assets/b81c84a7a5114f88a9a3b97302a8aff5-lf5DrNuL.png",i="/assets/8126edca32264069b6ec638898090aad-3-Yxtp66.png",r="/assets/2b584ea690d841a491c4fdc59efa2fa2-R-ZIBfTQ.png",o="/assets/d2ba960c5c6c49d990f849d106f55f14-TCOOR25f.png",t="/assets/74e9ba9aa81e45e8bbb8cf79b68b25c2-s-NCTFwB.png",p="/assets/fe086d28bd254ba798af0c4c1221ff18-UhFNDZQt.png",c="/assets/4eaaf73ba48a403e8466c0e14ec67e92-pbKhV58B.png",d="/assets/e00069613a114c118d930f1f860d37ea-HDTMVuDZ.png",g="/assets/a912035fbea247989a66471d391e0e58-fQJ7BmVc.png",u="/assets/88e2b53d58194f6b8ad4f8c3ade99805-CjV3-65F.png",b="/assets/94c1c188ff5045d4b7ee97677b46376a-171476680203426--hNoiiMw.png",B="/assets/69ea64b9781b40c7a9cbdc63cf8b363d-YIWZlzdu.png",y="/assets/62905b629e3f4fbe8c8b8365ff68e4f2-DjKAd70c.png",m="/assets/image-20240504040800980-LNCY9IHI.png",f="/assets/b2cd930ff84a4c8d9d5c70e6ad3b3a15-WVaQNFgZ.png",h="/assets/e12b70b0bfe64b1b895628c83546feef-ywSUT7MF.png",v="/assets/c4939759c9fb4f27b84d61a8c08c15f7-2U5YNMu4.png",k="/assets/image-20240504040908759-LrrFom6b.png",_="/assets/image-20240504040957885-afSYGFVJ.png",x="/assets/1d93bebd658a4c028a80053a8a893c02-Eb3tpysD.png",A="/assets/96c56c90f0134a66b3410d1063d3869a-OPUZfNkg.png",F="/assets/a95371ed19a74fcb8771ee70cad018b4-ib8tjW6o.png",D="/assets/871541797b3146debf5a890d555a5774-7K2d2EpO.png",C={},z=n('<h1 id="set和sorted-set数据类型" tabindex="-1"><a class="header-anchor" href="#set和sorted-set数据类型" aria-hidden="true">#</a> set和sorted_set数据类型</h1><h2 id="一、set类型概念" tabindex="-1"><a class="header-anchor" href="#一、set类型概念" aria-hidden="true">#</a> 一、set类型概念</h2><p>新的存储需求：存储大量的数据，在查询方面提供更高的效率 需要的存储结构：能够保存大量的数据，高效的内部存储机制，便于查询 set类型：<strong>与hash存储结构完全相同，底层数据结构使用哈希表，仅存储field，不存储value（nil），并且field不允许重复</strong></p><figure><img src="'+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="二、set类型数据的基本操作" tabindex="-1"><a class="header-anchor" href="#二、set类型数据的基本操作" aria-hidden="true">#</a> 二、set类型数据的基本操作</h2><p><strong>添加数据</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">sadd </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> member1 </span><span style="color:#E06C75;">[member2]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取全部数据</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">smembers </span><span style="color:#C678DD;">key</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>删除数据</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">srem </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> member1 </span><span style="color:#E06C75;">[member2]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取集合数据总量</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">scard </span><span style="color:#C678DD;">key</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>判断集合中是否包含指定数据</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">sismember </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> member</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>set底层使用的是拉链法哈希表，没有顺序可言（sorted_set底层是跳跃表，有顺序）</strong></p><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="三、set类型数据的扩展操作" tabindex="-1"><a class="header-anchor" href="#三、set类型数据的扩展操作" aria-hidden="true">#</a> 三、set类型数据的扩展操作</h2><h3 id="_1-业务场景一-资讯推荐" tabindex="-1"><a class="header-anchor" href="#_1-业务场景一-资讯推荐" aria-hidden="true">#</a> 1. 业务场景一：资讯推荐</h3><p>每位用户首次使用进入头条时候会设置3项爱好的内容，但是后期为了增加用户的活跃度，必须让用户对其他信息类别逐渐产生兴趣，增加客户留存度，如何实现？</p><p><strong>业务分析</strong></p><p>平台分析出各个分类的最新或最热点信息并组织成set集合，随机挑选其中部分信息，配合用户关注信息分类中的热点信息，组织展示信息集合</p><p><strong>解决方案</strong></p><p><strong>随机获取集合中指定数量的数据</strong>（推荐后还从这个集合中继续推荐）</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">srandmember </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">[count]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>随机获取集合中的某个数据并将该数据移出集合</strong>（推荐过的类别就不推荐了）</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">spop </span><span style="color:#C678DD;">key</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>redis应用于随机推荐类信息检索，例如热点歌单推荐，热点新闻推荐，热点旅游线路，应用APP推荐，大V推荐等</p><h3 id="_2-业务场景二-可能认识的好友推荐" tabindex="-1"><a class="header-anchor" href="#_2-业务场景二-可能认识的好友推荐" aria-hidden="true">#</a> 2. 业务场景二：可能认识的好友推荐</h3><ul><li>脉脉为了促进用户间的交流，保障业务成单率的提升，需要让每位用户拥有大量的好友，事实上职场新人不具有更多的职场好友，如何快速为用户积累更多的好友？（推荐同一所学校的，推荐朋友的朋友…）</li><li>新浪微博为了增加用户热度，提高用户留存性，需要微博用户在关注更多的人，以此获得更多的信息或热门话题，如何提高用户关注他人的总量？（推荐关注同一个博主的…）</li><li>QQ新用户入网年龄越来越低，这些用户的朋友圈交际圈非常小，往往集中在一所学校甚至一个班级中，如何帮助用户快速积累好友用户带来更多的活跃度？（推荐朋友的朋友…）</li><li>微信公众号是微信信息流通的渠道之一，增加用户关注的公众号成为提高用户活跃度的一种方式，如何帮助用户积累更多关注的公众号？（推荐关注相同公众号的…）</li></ul><p>求两个集合的交、并、差集</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">sinter key1 </span><span style="color:#E06C75;">[key2]</span></span>
<span class="line"><span style="color:#ABB2BF;">sunion key1 </span><span style="color:#E06C75;">[key2]</span></span>
<span class="line"><span style="color:#ABB2BF;">sdiff key1 </span><span style="color:#E06C75;">[key2]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>求两个集合的交、并、差集并存储到指定集合中</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">sinterstore destination key1 </span><span style="color:#E06C75;">[key2]</span></span>
<span class="line"><span style="color:#ABB2BF;">sunionstore destination key1 </span><span style="color:#E06C75;">[key2]</span></span>
<span class="line"><span style="color:#ABB2BF;">sdiffstore destination key1 </span><span style="color:#E06C75;">[key2]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将指定元素从原始集合移动到目标集合中</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">smove source destination member  # source里面的member移到destination</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>redis应用于同类信息的关联搜索，二度关联搜索，深度关联搜索</li><li>显示共同关注（一度）</li><li>显示共同好友（一度）</li><li>由用户A出发，获取到好友用户B的好友信息列表（一度）</li><li>由用户A出发，获取到好友用户B的购物清单列表（二度）</li><li>由用户A出发，获取到好友用户B的游戏充值列表（二度）</li></ul><h3 id="_3-业务场景三-多角色权限校验" tabindex="-1"><a class="header-anchor" href="#_3-业务场景三-多角色权限校验" aria-hidden="true">#</a> 3. 业务场景三：多角色权限校验</h3><p>集团公司共具有12000名员工，内部OA系统中具有700多个角色，3000多个业务操作，23000多种数据，每位员工具有一个或多个角色，如何判断某员工是否能执行某个操作呢？</p><figure><img src="`+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>解决方案</strong></p><ul><li>利用set集合数据不重复的特征，完成数据过滤与快速查询</li><li>根据用户id获取用户所有角色</li><li>把人对应的角色所有的操作放在一个set集合中</li></ul><p>一个用户有两个角色，每个角色有2~3个允许的操作</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此外，我们还可以用sismember判断要执行的操作是否在允许范围内</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>redis提供基础数据还是提供校验结果？</strong></p><p>需要注意一下，第二种判断方式是在redis中进行的，然而<strong>redis只负责读写数据，业务逻辑不应该在redis中执行，第二种方式耦合性高</strong>。相较之下，第一种方式只是从redis中获取了所有允许的操作，然后再用业务代码判断当前操作是否允许执行，这样就把业务和数据分开了，耦合性低</p><h3 id="_4-业务场景四-统计网站访问量" tabindex="-1"><a class="header-anchor" href="#_4-业务场景四-统计网站访问量" aria-hidden="true">#</a> 4. 业务场景四：统计网站访问量</h3><p>公司对旗下新的网站做推广，需要统计网站的PV（访问量），UV（独立访客），IP（独立IP）</p><ul><li>PV：网站被访问次数，可通过刷新页面提高访问量</li><li>UV：网站被不同用户访问的次数，可通过cookie统计访问量，相同用户切换IP地址，UV不变</li><li>IP：网站被不同IP地址访问的总次数，可通过IP地址统计访问量，相同IP不同用户访问，IP不变</li></ul><p><strong>解决方案</strong></p><ul><li>利用set集合的数据去重特征，记录各种访问数据</li><li>建立string类型数据，利用incr统计日访问量（PV)</li><li>建立set模型，记录不同的cookie数量（UV)，以及不同的IP数量（IP)</li></ul><h3 id="_5-业务场景五-黑名单" tabindex="-1"><a class="header-anchor" href="#_5-业务场景五-黑名单" aria-hidden="true">#</a> 5. 业务场景五：黑名单</h3><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>周期性更新满足规则的用户黑名单，加入set集合</li><li>用户行为信息达到后与黑名单进行比对，确认行为去向</li><li>黑名单过滤IP地址：应用于开放游客访问权限的信息源</li><li>黑名单过滤设备信息：应用于限定访问设备的信息源</li><li>黑名单过滤用户：应用于基于访问权限的信息源</li></ul><h2 id="四、set数据类型使用的注意事项" tabindex="-1"><a class="header-anchor" href="#四、set数据类型使用的注意事项" aria-hidden="true">#</a> 四、set数据类型使用的注意事项</h2><ul><li>set类型不允许数据重复，如果添加的数据在set中已经存在，将只保留一份</li><li>set虽然与hash的存储结构相同，但是无法启用set中存储value的空间</li></ul><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="五、sorted-set类型概念" tabindex="-1"><a class="header-anchor" href="#五、sorted-set类型概念" aria-hidden="true">#</a> 五、sorted_set类型概念</h2><ul><li>新的存储需求：根据排序有利于数据的有效显示，需要提供一种可以排序的存储方式（<strong>sorted_set底层基于跳跃表</strong>）</li><li>需要的存储结构：新的存储模型，可以保存可排序的数据</li><li>sorted_set类型：在set的存储结构基础上添加可排序字段</li></ul><figure><img src="'+B+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在hash数据类型存储空间的基础上，增加了一列score，sorted_set使用score进行排序，同样的field存数据，value依然不存数据</p><h2 id="六、sorted-set类型数据的基本操作" tabindex="-1"><a class="header-anchor" href="#六、sorted-set类型数据的基本操作" aria-hidden="true">#</a> 六、sorted_set类型数据的基本操作</h2><p><strong>添加数据</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">zadd </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> score1 member1 </span><span style="color:#E06C75;">[score2 member2]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+y+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>获取全部数据</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">zrange </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">start</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">stop</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">[WITHSCORES]</span><span style="color:#ABB2BF;">      # 升序排列，WITHSCORES表示带score输出</span></span>
<span class="line"><span style="color:#ABB2BF;">zrevrange </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">start</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">stop</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">[WITHSCORES]</span><span style="color:#ABB2BF;">   # 降序排列</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>删除数据</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">zrem </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> member </span><span style="color:#E06C75;">[member …]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+f+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>按score条件获取数据</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">zrangebyscore </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> min max </span><span style="color:#E06C75;">[WITHSCORES]</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">[LIMIT]</span><span style="color:#ABB2BF;">  # limit表示显示几条数据，通常用于分页，左闭右开</span></span>
<span class="line"><span style="color:#ABB2BF;">zrevrangebyscore </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> max min </span><span style="color:#E06C75;">[WITHSCORES]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+v+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>按score条件以及索引删除</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">zremrangebyscore </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> min max     # 删除key对应的sorted_set中，score介于</span><span style="color:#E06C75;">[min, max]</span><span style="color:#ABB2BF;">之间的元素</span></span>
<span class="line"><span style="color:#ABB2BF;">zremrangebyrank </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">start</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">stop</span><span style="color:#ABB2BF;">   # 由于sorted_set是排序的，可按照索引删除</span><span style="color:#E06C75;">[start, stop]</span><span style="color:#ABB2BF;">之间的元素</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>注意：</strong></p><ul><li>min与max用于限定搜索查询的条件</li><li>start与stop用于限定查询范围，作用于索引，表示开始和结束索引</li><li>offset与count用于限定查询范围，作用于查询结果，表示开始位置和数据总量</li></ul><p><strong>获取集合数据总量</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">zcard </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;">               # 获取sorted_set中元素个数</span></span>
<span class="line"><span style="color:#ABB2BF;">zcount </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> min max      # 获取sorted_set中，score介于</span><span style="color:#E06C75;">[min, max]</span><span style="color:#ABB2BF;">的元素个数</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>集合交、并操作</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;"># 求交集，默认把相同元素的score求和（也可以求 MIN|MAX），numkeys表示求交集的sorted_set的数量</span></span>
<span class="line"><span style="color:#ABB2BF;">zinterstore destination numkeys </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">[key …]</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">[WEIGHTS weight]</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">[AGGREGATE SUM|MIN|MAX]</span></span>
<span class="line"><span style="color:#ABB2BF;">zunionstore destination numkeys </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">[key …]</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">[WEIGHTS weight]</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">[AGGREGATE SUM|MIN|MAX]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="七、sorted-set类型数据的扩展操作" tabindex="-1"><a class="header-anchor" href="#七、sorted-set类型数据的扩展操作" aria-hidden="true">#</a> 七、sorted_set类型数据的扩展操作</h2><h3 id="_1-业务场景一-实时显示资讯热度" tabindex="-1"><a class="header-anchor" href="#_1-业务场景一-实时显示资讯热度" aria-hidden="true">#</a> 1. 业务场景一：实时显示资讯热度</h3><ul><li>票选广东十大杰出青年，各类综艺选秀海选投票</li><li>各类资源网站TOP10（电影，歌曲，文档，电商，游戏等）</li><li>聊天室活跃度统计</li><li>游戏好友亲密度</li></ul><figure><img src="'+x+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>获取数据对应的索引（排名）</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">zrank </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> member</span></span>
<span class="line"><span style="color:#ABB2BF;">zrevrank </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> member</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+A+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>score 值获取与修改</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">zscore </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> member</span></span>
<span class="line"><span style="color:#ABB2BF;">zincrby </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> increment member</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-业务场景二-限时操作" tabindex="-1"><a class="header-anchor" href="#_2-业务场景二-限时操作" aria-hidden="true">#</a> 2.业务场景二：限时操作</h3><p><strong>某网盘有限时体验VIP加速功能，如何用redis实现限时操作？</strong></p><ul><li>对于基于时间线限定的任务处理，将处理时间记录为score，利用排序功能区分处理的先后顺序</li><li>为提升sorted_set的性能，通常将任务根据特征存储成若干个sorted_set。例如1小时内，1天内，年度等，操作时逐渐提升，将即将操作的若干个任务纳入到1小时内处理队列中</li></ul><figure><img src="'+D+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>获取当前系统时间命令：time</p><h2 id="八、sorted-set数据类型使用的注意事项" tabindex="-1"><a class="header-anchor" href="#八、sorted-set数据类型使用的注意事项" aria-hidden="true">#</a> 八、sorted_set数据类型使用的注意事项</h2><ul><li>score 保存的数据存储空间是64位，如果是整数范围是-9007199254740992~9007199254740992</li><li>score保存的数据也可以是一个双精度的double值，基于双精度浮点数的特征，可能会丢失精度，使用时侯要慎重</li><li>sorted_set底层存储还是基于set结构的，因此元素（field）不能重复，如果重复添加相同的数据，score值将被覆盖，保留最后一次修改的结果</li></ul>',108),E=[z];function q(I,P){return a(),e("div",null,E)}const V=s(C,[["render",q],["__file","set和sorted_set数据类型.html.vue"]]);export{V as default};
