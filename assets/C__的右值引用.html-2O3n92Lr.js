import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as r,c,d as p,e as s,f as a,w as l,a as o}from"./app-rY1SOIco.js";const B="/assets/image-20240423202141851-tVJXjRIQ.png",i="/assets/image-20240423211232707-hz9o_42i.png",y={},F=o(`<h1 id="c-的右值引用的应用" tabindex="-1"><a class="header-anchor" href="#c-的右值引用的应用" aria-hidden="true">#</a> C++的右值引用的应用</h1><h2 id="_1、cmystirng代码的问题分析" tabindex="-1"><a class="header-anchor" href="#_1、cmystirng代码的问题分析" aria-hidden="true">#</a> 1、CMyStirng代码的问题分析</h2><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CMyString</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">CMyString</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char*</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;CMyString(const char*)&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (str </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			mptr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;">[</span><span style="color:#61AFEF;">strlen</span><span style="color:#ABB2BF;">(str) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#61AFEF;">strcpy</span><span style="color:#ABB2BF;">(mptr, str);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">else</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 最少都初始化只有一个\\0的字符串，使得不需要对字符串判空操作</span></span>
<span class="line"><span style="color:#ABB2BF;">			mptr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">mptr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;</span><span style="color:#56B6C2;">\\0</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">~CMyString</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;~CMyString&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;">[]mptr;</span></span>
<span class="line"><span style="color:#ABB2BF;">		mptr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 带左值引用参数的拷贝构造</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">CMyString</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CMyString</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;CMyString(const CMyString&amp;)&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">		mptr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;">[</span><span style="color:#61AFEF;">strlen</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#61AFEF;">strcpy</span><span style="color:#ABB2BF;">(mptr, </span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 带左值引用参数的赋值重载函数</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">CMyString</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">=(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CMyString</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;operator=(const CMyString&amp;)&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">str)</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;">[]mptr;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		mptr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;">[</span><span style="color:#61AFEF;">strlen</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#61AFEF;">strcpy</span><span style="color:#ABB2BF;">(mptr, </span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char*</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">c_str</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> mptr; }</span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">char</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> mptr;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">CMyString</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">GetString</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">CMyString</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> pstr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">c_str</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	CMyString </span><span style="color:#61AFEF;">tmpStr</span><span style="color:#ABB2BF;">(pstr);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> tmpStr;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	CMyString </span><span style="color:#61AFEF;">str1</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;aaaaaaaaaaaaaaaaaaaa&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	CMyString str2;</span></span>
<span class="line"><span style="color:#ABB2BF;">	str2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">GetString</span><span style="color:#ABB2BF;">(str1);</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">str2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">c_str</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">CMyString(const char*)</span></span>
<span class="line"><span style="color:#abb2bf;">CMyString(const char*)</span></span>
<span class="line"><span style="color:#abb2bf;">CMyString(const char*)</span></span>
<span class="line"><span style="color:#abb2bf;">CMyString(const CMyString&amp;) // m1</span></span>
<span class="line"><span style="color:#abb2bf;">~CMyString</span></span>
<span class="line"><span style="color:#abb2bf;">operator=(const CMyString&amp;) // m2</span></span>
<span class="line"><span style="color:#abb2bf;">~CMyString</span></span>
<span class="line"><span style="color:#abb2bf;">aaaaaaaaaaaaaaaaaaaa</span></span>
<span class="line"><span style="color:#abb2bf;">~CMyString</span></span>
<span class="line"><span style="color:#abb2bf;">~CMyString</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),d=p("strong",null,"m1位置处，是GetString返回时候",-1),A=p("strong",null,"m2位置是main函数上临时对象给str2拷贝赋值",-1),v=o('<figure><img src="'+B+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="解决方法" tabindex="-1"><a class="header-anchor" href="#解决方法" aria-hidden="true">#</a> 解决方法</h3><p>[引用 | 张威的编程学习笔记 (gitee.io)](https://iszhwei.gitee.io/ccpp/02 c__基础/引用.html#右值引用)</p><p>右值引用、实现接收<strong>右值的拷贝构造和拷贝赋值函数</strong>（<strong>移动构造和赋值</strong>）</p><p>临时对象是右值</p><p>添加的函数如下：</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 带右值引用参数的拷贝构造，移动构造</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 将右边的资源直接窃取过来</span></span>
<span class="line"><span style="color:#61AFEF;">CMyString</span><span style="color:#ABB2BF;">(CMyString</span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> str)</span><span style="color:#7F848E;font-style:italic;"> // str传入的就是右值亦称为将亡值</span></span>
<span class="line"><span style="color:#ABB2BF;">{ </span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;CMyString(CMyString&amp;&amp; str)&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	mptr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 带右值引用参数的赋值重载函数,移动赋值</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 将右边的资源直接窃取过来</span></span>
<span class="line"><span style="color:#E5C07B;">CMyString</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">=(</span><span style="color:#E5C07B;">CMyString</span><span style="color:#C678DD;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;operator=(CMyString&amp;&amp; str)&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">str)</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">delete[]</span><span style="color:#ABB2BF;"> mptr;</span></span>
<span class="line"><span style="color:#ABB2BF;">	mptr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">CMyString(const char*)</span></span>
<span class="line"><span style="color:#abb2bf;">CMyString(const char*)</span></span>
<span class="line"><span style="color:#abb2bf;">CMyString(const char*)</span></span>
<span class="line"><span style="color:#abb2bf;">CMyString(CMyString&amp;&amp; str)</span></span>
<span class="line"><span style="color:#abb2bf;">~CMyString</span></span>
<span class="line"><span style="color:#abb2bf;">operator=(CMyString&amp;&amp; str)</span></span>
<span class="line"><span style="color:#abb2bf;">~CMyString</span></span>
<span class="line"><span style="color:#abb2bf;">aaaaaaaaaaaaaaaaaaaa</span></span>
<span class="line"><span style="color:#abb2bf;">~CMyString</span></span>
<span class="line"><span style="color:#abb2bf;">~CMyString</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两次拷贝全都走<strong>移动构造</strong>和<strong>移动赋值</strong>，全都是进行<strong>指针指向的改变</strong>，而不是<strong>内存</strong>空间的重新分配，这样必然可以极大的提高效率</p><h3 id="operator-效率问题" tabindex="-1"><a class="header-anchor" href="#operator-效率问题" aria-hidden="true">#</a> <code>operator+()</code>效率问题</h3><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">CMyString</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">+ (</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">lhs</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">rhs</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">char</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> ptmp </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;">[</span><span style="color:#61AFEF;">strlen</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">lhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_ptr</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">strlen</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">rhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_ptr</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span><span style="color:#7F848E;font-style:italic;">//内存泄漏</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">strcpy</span><span style="color:#ABB2BF;">(ptmp, </span><span style="color:#E5C07B;">lhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">strcat</span><span style="color:#ABB2BF;">(ptmp, </span><span style="color:#E5C07B;">rhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">CMyString</span><span style="color:#ABB2BF;">(ptmp);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),C=o(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">CMyString</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">+(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CMyString</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">lhs</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CMyString</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">rhs</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">char</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> ptmp </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;">[</span><span style="color:#61AFEF;">strlen</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">lhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">strlen</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">rhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">strcpy</span><span style="color:#ABB2BF;">(ptmp, </span><span style="color:#E5C07B;">lhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">strcat</span><span style="color:#ABB2BF;">(ptmp, </span><span style="color:#E5C07B;">rhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    CMyString </span><span style="color:#61AFEF;">tmpStr</span><span style="color:#ABB2BF;">(ptmp);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">delete[]</span><span style="color:#ABB2BF;"> ptmp;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> tmpStr;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //return CMyString(ptmp);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),m=o(`<h4 id="解决办法" tabindex="-1"><a class="header-anchor" href="#解决办法" aria-hidden="true">#</a> 解决办法</h4><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">CMyString</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">+(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CMyString</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">lhs</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CMyString</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">rhs</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//char *ptmp = new char[strlen(lhs.mptr) + strlen(rhs.mptr) + 1];</span></span>
<span class="line"><span style="color:#ABB2BF;">	CMyString tmpStr;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">tmpStr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;">[</span><span style="color:#61AFEF;">strlen</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">lhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">strlen</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">rhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">strcpy</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">tmpStr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">lhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">strcat</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">tmpStr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">rhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//delete []ptmp;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> tmpStr;</span><span style="color:#7F848E;font-style:italic;">//直接调用右值拷贝构造函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//return CMyString(ptmp);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CMyString</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">CMyString</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char*</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;CMyString(const char*)&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (str </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			mptr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;">[</span><span style="color:#61AFEF;">strlen</span><span style="color:#ABB2BF;">(str) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#61AFEF;">strcpy</span><span style="color:#ABB2BF;">(mptr, str);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">else</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			mptr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">mptr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;</span><span style="color:#56B6C2;">\\0</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">~CMyString</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;~CMyString&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;">[]mptr;</span></span>
<span class="line"><span style="color:#ABB2BF;">		mptr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//带左值引用参数的拷贝构造</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">CMyString</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CMyString</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;CMyString(const CMyString&amp;)&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">		mptr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;">[</span><span style="color:#61AFEF;">strlen</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#61AFEF;">strcpy</span><span style="color:#ABB2BF;">(mptr, </span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//带右值引用参数的拷贝构造</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">CMyString</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">CMyString</span><span style="color:#C678DD;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//str引用的就是一个临时对象</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;CMyString(CMyString&amp;&amp;)&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">		mptr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//带左值引用参数的赋值重载函数</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">CMyString</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">=(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CMyString</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;operator=(const CMyString&amp;)&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">str)</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;">[]mptr;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		mptr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;">[</span><span style="color:#61AFEF;">strlen</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#61AFEF;">strcpy</span><span style="color:#ABB2BF;">(mptr, </span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//带右值引用参数的赋值重载函数</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">CMyString</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">=(</span><span style="color:#E5C07B;">CMyString</span><span style="color:#C678DD;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//str引用的是临时对象</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;operator=(CMyString&amp;&amp;)&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">str)</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;">[]mptr;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		mptr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char*</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">c_str</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> mptr; }</span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">char</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> mptr;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">friend</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CMyString</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">+(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CMyString</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">lhs</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CMyString</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">rhs</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">friend</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ostream</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">&lt;&lt;(</span><span style="color:#E5C07B;">ostream</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">out</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CMyString</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">CMyString</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">+(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CMyString</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">lhs</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CMyString</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">rhs</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//char *ptmp = new char[strlen(lhs.mptr) + strlen(rhs.mptr) + 1];</span></span>
<span class="line"><span style="color:#ABB2BF;">	CMyString tmpStr;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">tmpStr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;">[</span><span style="color:#61AFEF;">strlen</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">lhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">strlen</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">rhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">strcpy</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">tmpStr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">lhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">strcat</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">tmpStr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">rhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//delete []ptmp;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> tmpStr;</span><span style="color:#7F848E;font-style:italic;">//直接调用右值拷贝构造函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//return CMyString(ptmp);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">ostream</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">&lt;&lt;(</span><span style="color:#E5C07B;">ostream</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">out</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CMyString</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> out;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">CMyString</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">GetString</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">CMyString</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> pstr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">c_str</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	CMyString </span><span style="color:#61AFEF;">tmpStr</span><span style="color:#ABB2BF;">(pstr);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> tmpStr;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	CMyString str1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;hello &quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	CMyString str2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;world!&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;--------------------------&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	CMyString str3 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> str1 </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> str2;</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;--------------------------&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> str3 </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="分析下面打印什么" tabindex="-1"><a class="header-anchor" href="#分析下面打印什么" aria-hidden="true">#</a> 分析下面打印什么</h2><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	CMyString str1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;aaa&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	vector</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">CMyString</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> vec;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">vec</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reserve</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;----------------------------------&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">vec</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push_back</span><span style="color:#ABB2BF;">(str1);</span><span style="color:#7F848E;font-style:italic;"> // 调用左值引用的拷贝</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">vec</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push_back</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">CMyString</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;nnn&quot;</span><span style="color:#ABB2BF;">));</span><span style="color:#7F848E;font-style:italic;"> // 调用构造 和 右值引用的拷贝</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;----------------------------------&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>匹配左值：</strong> 调用左值引用的拷贝构造；</p><p><strong>匹配右值：</strong> 调用右值引用的拷贝构造；</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">CMyString(const char*)</span></span>
<span class="line"><span style="color:#abb2bf;">----------------------------------</span></span>
<span class="line"><span style="color:#abb2bf;">CMyString(const CMyString&amp;)</span></span>
<span class="line"><span style="color:#abb2bf;">CMyString(const char*)</span></span>
<span class="line"><span style="color:#abb2bf;">CMyString(CMyString&amp;&amp; str)</span></span>
<span class="line"><span style="color:#abb2bf;">~CMyString</span></span>
<span class="line"><span style="color:#abb2bf;">----------------------------------</span></span>
<span class="line"><span style="color:#abb2bf;">~CMyString</span></span>
<span class="line"><span style="color:#abb2bf;">~CMyString</span></span>
<span class="line"><span style="color:#abb2bf;">~CMyString</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function D(u,b){const n=t("font");return r(),c("div",null,[F,p("p",null,[d,s("调用拷贝构造返回main函数栈帧的临时对象，这里会做"),a(n,{color:"red"},{default:l(()=>[s("深拷贝")]),_:1}),s("，因为对象存放一个动态开辟的char数组。并且拷贝完立马就"),a(n,{color:"red"},{default:l(()=>[s("析构")]),_:1}),s("释放了。")]),p("p",null,[A,s("，等于说又做一次"),a(n,{color:"red"},{default:l(()=>[s("深拷贝")]),_:1}),s("，并且拷贝完立马就"),a(n,{color:"red"},{default:l(()=>[s("析构")]),_:1}),s("释放了。")]),p("p",null,[s("这两次操作的"),a(n,{color:"red"},{default:l(()=>[s("开销十分巨大")]),_:1}),s("，我们"),a(n,{color:"green"},{default:l(()=>[s("应该设法减小深拷贝带来的动态开辟空间和释放空间的开销")]),_:1})]),v,p("p",null,[s("如果上面这样写会导致"),a(n,{color:"red"},{default:l(()=>[s("ptmp指向的内存没有释放，内存泄漏")]),_:1}),s("，因此不能直接返回临时对象")]),C,p("p",null,[s("这样写虽然解决了内存泄漏问题，"),a(n,{color:"red"},{default:l(()=>[s("但是CMyString拷贝构造函数构造对象时又会重新一个相同大小的内存开辟内存**（然后拷贝数据，然后出函数，又自己析构了，效率低）**")]),_:1})]),m])}const h=e(y,[["render",D],["__file","C__的右值引用.html.vue"]]);export{h as default};
