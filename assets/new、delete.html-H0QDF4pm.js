import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as r,c as i,b as B,d as n,e as s,f as a,w as e,a as p}from"./app-9OmaxHRC.js";const d="/assets/1681303112683-41ec0262-0bfb-46e8-a571-0e4cd626492a-l17XWuQd.png",y="/assets/image-20240202222822996-20t02A9T.png",A="/assets/2b5c2509c62349a09e89468830b5d5d0-5k1zOaZm.png",F="/assets/1272978-20180331234606622-1002180609-Ht3pg4An.png",u="/assets/1272978-20180401001410119-1260458771-B0Aencmk.png",v="/assets/1272978-20180401114045068-157165349-CInyZt2-.png",D="/assets/1272978-20180401133748351-1053485282-Iqt3fDGd.png",b="/assets/1272978-20180401192651824-881262420-Aa1ambGq.png",m={},C=n("h1",{id:"new-delete关键字",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#new-delete关键字","aria-hidden":"true"},"#"),s(" new/delete关键字")],-1),g=n("figure",null,[n("img",{src:d,alt:"1681303112683-41ec0262-0bfb-46e8-a571-0e4cd626492a",tabindex:"0",loading:"lazy"}),n("figcaption",null,"1681303112683-41ec0262-0bfb-46e8-a571-0e4cd626492a")],-1),h=n("code",null,"malloc/free ",-1),f=n("strong",null,"即初始化",-1),k=n("code",null,"calloc",-1),E=n("u",null,"手动进行初始化",-1),_=p(`<h2 id="开辟一个元素的空间" tabindex="-1"><a class="header-anchor" href="#开辟一个元素的空间" aria-hidden="true">#</a> 开辟一个元素的空间</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> p;</span></span>
<span class="line"><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">	//无论是c还是c++释放内存后要把指针制空，养成好的习惯</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="有几种new的方式" tabindex="-1"><a class="header-anchor" href="#有几种new的方式" aria-hidden="true">#</a> 有几种new的方式</h2>`,3),x=p(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//最常用操作,通过抛出异常判断内存开辟失败</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),w=p(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> (nothrow) </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//不抛出异常，开辟失败判断情况与malloc一样</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),L=p(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p3 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">40</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//在堆上开辟了一个常量</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),q=p(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//定位new</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> data </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 在&amp;data位置分配内存并初始化</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">data) </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//在指定的内存上划分了一块初值为4字节大小的内存，初值为50</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="开辟一个数组的空间" tabindex="-1"><a class="header-anchor" href="#开辟一个数组的空间" aria-hidden="true">#</a> 开辟一个数组的空间</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">]();</span><span style="color:#7F848E;font-style:italic;">//开辟数组时，要记得采用[]</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> idx </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; idx </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">; </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">idx)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">[idx] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> idx;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> []p;</span><span style="color:#7F848E;font-style:italic;">//回收时，也要采用[]，1.[]写在数组名前，2.[]不要写数组的大小，编译器会自动推断大小，写了反而会报错（和编译器有关）</span></span>
<span class="line"><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常考题-new-delete表达式与malloc-free的区别是" tabindex="-1"><a class="header-anchor" href="#常考题-new-delete表达式与malloc-free的区别是" aria-hidden="true">#</a> 常考题：<mark>new/delete表达式与malloc/free的区别是？</mark></h3><p><mark>相同：</mark><mark>1、都是用来<u>申请堆空间</u>的</mark><mark>2、malloc与free，new与delete要<u>成对出现</u>，否则可能造成内存泄漏</mark></p><p><mark>不同：</mark></p><ol><li><p><mark>malloc与new的区别</mark></p><p><mark>①malloc按<strong>字节</strong>开辟内存的；new开辟内存时需要<strong>指定类型</strong>；</mark><mark>②malloc开辟内存<strong>返回的都是void *** ，new相当于<u>运算符重载函数</u>，返回值自动转为</strong>指定的类型的指针。**</mark><mark>③malloc<u>只负责开辟内存空间</u>，new不仅仅也有malloc功能，<u>还可以进行数据的<strong>初始化</strong></u>。</mark><mark>④malloc开辟内存失败<strong>返回nullptr</strong>指针；new<strong>抛出的是bad_alloc类型的异常</strong>。</mark><mark>⑤malloc<u>开辟<strong>单个元素内存</strong>与<strong>数组内存</strong>都是给<strong>字节数</strong></u>；new开辟时对<u>单个元素内存后面不需要[]，而</u><u>数<strong>组需要[]并给上元素个数</strong></u>。</mark></p></li><li><p><mark>free和delete的区别：</mark></p><p><mark>①free不管释放单个元素内存还是数组内存，<u>只需要传入内存的<strong>起始地址</strong>即可</u>。</mark><mark>②delet<u>e释放单个元素内存，不需要加中括号，但释放数据内存时需要加<strong>中括号</strong></u>。</mark><mark>③delete执行其实有<strong>两步</strong>，<u>先调用析构，再释放</u>；free只有<strong>一步</strong>。</mark></p></li></ol><h3 id="既然new-delete的功能完全覆盖了malloc-free-为什么c-还保留malloc-free呢" tabindex="-1"><a class="header-anchor" href="#既然new-delete的功能完全覆盖了malloc-free-为什么c-还保留malloc-free呢" aria-hidden="true">#</a> 既然new/delete的功能完全覆盖了malloc/free，为什么C++还保留malloc/free呢？</h3>`,8),z=p(`<h2 id="课堂代码" tabindex="-1"><a class="header-anchor" href="#课堂代码" aria-hidden="true">#</a> 课堂代码</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;stdlib.h&gt;</span><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">//memset()的头文件</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::cout;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test2</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> number </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;sizeof(number) = </span><span style="color:#D19A66;">%lu</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(number));</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;sizeof number = </span><span style="color:#D19A66;">%lu</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, sizeof number);</span><span style="color:#7F848E;font-style:italic;">//sizeof是一个运算符，不是一个函数，因为函数不能这么写</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//面试中常问的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//内存溢出？踩内存？内存越界？野指针</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//面试题</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//malloc/free与new/delete异同点？</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//1、都是用来申请堆空间的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//2、malloc与free，new与delete要成对出现，否则可能造成内存泄漏</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//不同点：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//1、malloc/free是C里面的库函数，new/delete是C++中的表达式</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//2、malloc申请的是未初始化的堆空间，new申请是已经初始化的堆空间</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pInt </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;">malloc</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">));</span><span style="color:#7F848E;font-style:italic;">//1、申请堆空间</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">memset</span><span style="color:#ABB2BF;">(pInt, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">));</span><span style="color:#7F848E;font-style:italic;">//2、初始化</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pInt </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//3、赋值</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">free</span><span style="color:#ABB2BF;">(pInt);</span><span style="color:#7F848E;font-style:italic;">//4、释放堆空间</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* pInt = NULL;//0 */</span></span>
<span class="line"><span style="color:#ABB2BF;">    pInt </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//void *</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pArray </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)(</span><span style="color:#61AFEF;">malloc</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">memset</span><span style="color:#ABB2BF;">(pArray, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">free</span><span style="color:#ABB2BF;">(pArray);</span></span>
<span class="line"><span style="color:#ABB2BF;">    pArray </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test3</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pInt </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//1、申请堆空间，并初始化，还可以进行赋值</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;*pInt = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pInt </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> pInt;</span><span style="color:#7F848E;font-style:italic;">//2、释放堆空间</span></span>
<span class="line"><span style="color:#ABB2BF;">    pInt </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pArray </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">]();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">pArray</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">120</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">[]</span><span style="color:#ABB2BF;"> pArray;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">argc</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">**</span><span style="color:#E06C75;font-style:italic;">argv</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Hello world&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="new和deletea原理" tabindex="-1"><a class="header-anchor" href="#new和deletea原理" aria-hidden="true">#</a> new和deletea原理</h2><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">{  </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">public:</span><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">T</span><span style="color:#ABB2BF;">(){  </span></span>
<span class="line"><span style="color:#ABB2BF;">            cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;构造函数。&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;  </span></span>
<span class="line"><span style="color:#ABB2BF;">        }  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">~T</span><span style="color:#ABB2BF;">(){  </span></span>
<span class="line"><span style="color:#ABB2BF;">            cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;析构函数。&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;  </span></span>
<span class="line"><span style="color:#ABB2BF;">        }  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;"> new(</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">sz</span><span style="color:#ABB2BF;">){  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            T </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> t </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (T</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;">malloc</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(T));</span><span style="color:#7F848E;font-style:italic;">  //operator new就是简单的分配内存即可</span></span>
<span class="line"><span style="color:#ABB2BF;">            cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;内存分配。&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> t;  </span></span>
<span class="line"><span style="color:#ABB2BF;">        }  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;"> delete(</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">){  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#61AFEF;">free</span><span style="color:#ABB2BF;">(p);  </span></span>
<span class="line"><span style="color:#ABB2BF;">            cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;内存释放。&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;  </span></span>
<span class="line"><span style="color:#ABB2BF;">        }  </span></span>
<span class="line"><span style="color:#ABB2BF;">    };  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()  </span></span>
<span class="line"><span style="color:#ABB2BF;">    {  </span></span>
<span class="line"><span style="color:#ABB2BF;">        T </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> t </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">T</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;"> // 先 内存分配 ，再 构造函数  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> t;</span><span style="color:#7F848E;font-style:italic;"> // 先 析构函数， 再 内存释放  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;  </span></span>
<span class="line"><span style="color:#ABB2BF;">    }  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>error: ‘nullptr’ was not declared in this scope 解决办法 <strong>编译语句</strong>中添加<code>-std=c++11</code>，在<strong>链接语句</strong>不需要添加</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">g++</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-g</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">main.cc</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-std=c++11</span></span>
<span class="line"><span style="color:#61AFEF;">objdump</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-M</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">intel</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-S</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-C</span><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">a.out</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">#-C 选项用于进行名称修饰</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+y+`" alt="image-20240202222822996" tabindex="0" loading="lazy"><figcaption>image-20240202222822996</figcaption></figure><h2 id="new-和delete-或者说new和delete-能混用吗-c-如何区分单个元素和数组内存分配和释放" tabindex="-1"><a class="header-anchor" href="#new-和delete-或者说new和delete-能混用吗-c-如何区分单个元素和数组内存分配和释放" aria-hidden="true">#</a> new[] 和delete 或者说new和delete[]能混用吗？C++如何区分单个元素和数组内存分配和释放</h2><p>不能混用，数组<code>new[]</code>时，编译器会在开头多分配<strong>4B空间</strong>记录new对象的<strong>数量</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Test</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">) { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Test()&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">~Test</span><span style="color:#ABB2BF;">() {  cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;~Test()&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> ma;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	Test</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> p1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Test</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">delete[]</span><span style="color:#ABB2BF;"> p1;</span><span style="color:#7F848E;font-style:italic;"> // 从operator delete(p1-4),即从最顶上存储对象的数量的内存起始地址开始释放</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+A+`" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><p>注意返回的地址不是最顶上的地址！！</p><p>若混用new[]和delete：</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">Test</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> p1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Test</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">];</span><span style="color:#7F848E;font-style:italic;">  // 输出operator new[] addr:0157F6C0</span></span>
<span class="line"><span style="color:#ABB2BF;">cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;p1:&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> p1 </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span><span style="color:#7F848E;font-style:italic;">  // p1:0157F6C4</span></span>
<span class="line"><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> p1;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出返回的是p1[0]对象的地址，调用delete p1也只是析构p1[0]对象，不合法，抛出异常</p><p>若混用new 和delete[]更好理解，delete[]会传入【new返回的地址-4】来调用析构，这块空间根本就没分配，必然就出错</p><p>可以通过重载new和delete来解决内存泄漏</p>`,17),T={id:"深入理解c-new-delete-new-delete-动态内存管理",tabindex:"-1"},N=n("a",{class:"header-anchor",href:"#深入理解c-new-delete-new-delete-动态内存管理","aria-hidden":"true"},"#",-1),U={href:"https://www.cnblogs.com/tp-16b/p/8684298.html",target:"_blank",rel:"noopener noreferrer"},I=p(`<p>在C++ Primer书中有提到说： new/delete的表达式与标准库函数同名了，所以系统并没有重载new或delete表达式。new/delete真正的实现其实是依赖下面这几个内存管理接口的。c++中称之为“<strong>placement版”内存管理接口</strong>。<strong>接口原型：</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;"> new (</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">size</span><span style="color:#ABB2BF;">);　　</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;"> delete (</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">size</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;"> new [](</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">size</span><span style="color:#ABB2BF;">);　　</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;"> delete[] (</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">size</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>探究它，不妨从这样一个类AA开始</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">AA</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">AA</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">count</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        _a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">[count];</span></span>
<span class="line"><span style="color:#ABB2BF;">        cout</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#98C379;">&quot;AA()&quot;</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;">endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">~AA</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">delete[]</span><span style="color:#ABB2BF;"> _a;</span></span>
<span class="line"><span style="color:#ABB2BF;">        cout</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#98C379;">&quot;~AA()&quot;</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;">endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> _a;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用AA* pA = new AA[10]创建对象,VS下通过调试进入new表达式内部系统函数,得到下面两个图：</p><figure><img src="`+F+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="'+u+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>通过上面两个图，大致可以看出来new表达式并不直接开辟内存出来，而是通过调用operator new来获得的内存，而<strong>operator new获得的内存实质上还是用malloc开辟出来的</strong>。这便证实了前面所述的：开空间出来还是得 malloc来。</p><p>同样的道理，delete表达式也不是直接去释放掉内存。比如对上面的对象数组进行delete</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">AA</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> pA </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">AA</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">delete[]</span><span style="color:#ABB2BF;"> pa;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="delete-实际做了这样几件事情" tabindex="-1"><a class="header-anchor" href="#delete-实际做了这样几件事情" aria-hidden="true">#</a> delete[]实际做了这样几件事情：</h3><ul><li><p><mark><strong>依次</strong>调用pA指向<u>对象数组</u>中<u>每个对象的析构函数</u>，共10次</mark></p></li><li><p><mark>调用<code>operator delete[]()</code>，它将再调用<code>operator delete</code></mark></p></li><li><p><mark>底层用<code>free</code>执行<code>operator delete</code>表达式，依次释放内存</mark></p></li></ul><p>小结<strong>operator new/ operator delete</strong>：</p><ol><li><p><strong>operator new/operator delete operator new[]/operator delete[] 和 malloc/free用法一样。</strong></p></li><li><p><mark><strong>他们只负责分配空间/释放空间，不会调用对象构造函数/析构函数来初始化/清理对象。</strong></mark></p></li><li><p><mark><strong>实际operator new和operator delete只是malloc和free的一层封装</strong></mark></p></li></ol>`,14),V={id:"new最后将开辟好内存用指针p返回-pa接收它。可为什么p-和pa-会差上4字节",tabindex:"-1"},M=n("a",{class:"header-anchor",href:"#new最后将开辟好内存用指针p返回-pa接收它。可为什么p-和pa-会差上4字节","aria-hidden":"true"},"#",-1),O=p('<p>这其实是因为编译器用相差的这4个字节用来保存一个东西——<strong>对象个数，即</strong>AA* p = new AA[10] 中的‘10’。这也就不难解释 为什么在delete[] 的时候，不用传给它对象个数。</p><p>​ <img src="'+v+'" alt="img" loading="lazy"></p><p>delete[] 删除时，将new[] <strong>返回的地址再往前移4个字节</strong>便可以拿到要析构的对象个数了。</p><p>但是注意：new type[] ,只有type显示定义析构函数时，编译器才会多开4字节来保存对象个数。所以像new int、char这样的内置类型编译器不会多开这4字节，编译器自行优化。</p><p>它们之间可用下面的图展示：</p><figure><img src="'+D+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="new-delete-new-delete-malloc-free配套使用" tabindex="-1"><a class="header-anchor" href="#new-delete-new-delete-malloc-free配套使用" aria-hidden="true">#</a> new/delete, new []/delete[], malloc/free配套使用！</h3><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">AA</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">AA</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">count</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        _a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">[count];</span></span>
<span class="line"><span style="color:#ABB2BF;">        cout</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#98C379;">&quot;AA()&quot;</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;">endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">~AA</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">delete[]</span><span style="color:#ABB2BF;"> _a;</span></span>
<span class="line"><span style="color:#ABB2BF;">        cout</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#98C379;">&quot;~AA()&quot;</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;">endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> _a;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="malloc-delete的组合" tabindex="-1"><a class="header-anchor" href="#malloc-delete的组合" aria-hidden="true">#</a> malloc/delete的组合</h4><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Test1</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    AA</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> p1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (AA</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;">malloc</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(AA));</span><span style="color:#7F848E;font-style:italic;">   //没有报错，但不建议采用，容易引起混淆</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> p1;                       </span></span>
<span class="line"><span style="color:#ABB2BF;">    AA</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> p2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (AA</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;">malloc</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(AA));</span><span style="color:#7F848E;font-style:italic;">   //报错，同上，释放位置也不对</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">delete[]</span><span style="color:#ABB2BF;"> p2;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),S={id:"delete-delete-之间误用-值得注意",tabindex:"-1"},G=n("a",{class:"header-anchor",href:"#delete-delete-之间误用-值得注意","aria-hidden":"true"},"#",-1),H=n("strong",null,"delete, delete[] 之间误用（值得注意）",-1),Z=p(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Test2</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    AA</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> p3 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> AA;</span><span style="color:#7F848E;font-style:italic;">         //不报错，但未清理干净。p3的构造函数开辟的空间没有被释放</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">free</span><span style="color:#ABB2BF;">(p3);</span></span>
<span class="line"><span style="color:#ABB2BF;">    AA</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> p4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">AA</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">];</span><span style="color:#7F848E;font-style:italic;">   //崩溃卡死，存在问题，释放位置被后移了4字节。同时只调用了一次析构函数</span></span>
<span class="line"><span style="color:#ABB2BF;">　　 </span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> p4; ，</span></span>
<span class="line"><span style="color:#ABB2BF;">　　 AA</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> p5 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> AA;</span><span style="color:#7F848E;font-style:italic;">     //报错 非法访问内存</span></span>
<span class="line"><span style="color:#ABB2BF;">　　 </span><span style="color:#C678DD;">delete[]</span><span style="color:#ABB2BF;"> p5; </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>①delete p4错误在于释放位置不对（和编译器实现new []的机制有关），导致内存泄漏</p><figure><img src="`+b+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>②delete[] p5 直接就崩了，这次new AA的时候并未多开4字节保存对象个数，编译器便无法知道要调用多少次析构函数（这里仅仅调用一次析构函数就好了）但编译器内部还是试图去访问p5前4字节的内存，以此获得对象个数;这便非法内存访问了，所以程序就挂了。</p><h4 id="针对内置类型" tabindex="-1"><a class="header-anchor" href="#针对内置类型" aria-hidden="true">#</a> 针对内置类型</h4><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Test3</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> p6 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">];</span><span style="color:#7F848E;font-style:italic;">  //没问题</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">delete[]</span><span style="color:#ABB2BF;"> p6;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> p7 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">];</span><span style="color:#7F848E;font-style:italic;">  //没问题</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> p7;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> p8 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">];</span><span style="color:#7F848E;font-style:italic;">  //没问题</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">free</span><span style="color:#ABB2BF;">(p8);</span></span>
<span class="line"><span style="color:#ABB2BF;">           </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),j=n("u",null,"编译器会自行对处理的数据做记录，然后处理;所以即便是不匹配的使用，它们也没出现什么问题",-1),P={id:"null、0、nullptr-区别分析",tabindex:"-1"},Q=n("a",{class:"header-anchor",href:"#null、0、nullptr-区别分析","aria-hidden":"true"},"#",-1),W={href:"https://www.cnblogs.com/porter/p/3611718.html",target:"_blank",rel:"noopener noreferrer"},X=n("h3",{id:"c的null",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#c的null","aria-hidden":"true"},"#"),s(" C的NULL")],-1),J=p(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">NULL</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">foo_t</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">f </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">NULL</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上在C语言中，NULL通常被定义为如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">#define NULL ((void *)0)	//void *指针赋值给int *和foo_t *的指针的时候，隐式转换成相应的类型</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),K=p(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#ifdef</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">__cplusplus</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">---</span><span style="color:#ABB2BF;">简称：</span><span style="color:#61AFEF;">cpp</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">c</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> 文件</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">NULL</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#C678DD;">#else</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">NULL</span><span style="color:#ABB2BF;"> ((</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">)</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">#endif</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="c-的0" tabindex="-1"><a class="header-anchor" href="#c-的0" aria-hidden="true">#</a> C++的0</h3><p>因为C++中不能将void *类型的指针隐式转换成其他指针类型，而又为了解决空指针的问题，所以<u>C++中引入0来表示空指针</u>（注：0表示，还是有缺陷不完美），这样就有了类似上面的代码来定义NULL。实际上C++的书都会推荐说C++中更习惯使用0来表示空指针而不是NULL，尽管NULL在C++编译器下就是0。</p><h4 id="为什么c-的书都推荐使用0而不是null来表示空指针呢" tabindex="-1"><a class="header-anchor" href="#为什么c-的书都推荐使用0而不是null来表示空指针呢" aria-hidden="true">#</a> <strong>为什么C++的书都推荐使用0而不是NULL来表示空指针呢？</strong></h4><p>我们看一个例子：</p><p>在foo.h文件中声明了一个函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bar</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sometype1 </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> sometype2 </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个函数在a.cpp、b.cpp中调用了，分别是：</p><p>a.cpp:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">bar</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>b.cpp:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">bar</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,12),R=p(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bar</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sometype1 </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> sometype2 </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bar</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sometype1 </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候危险了，a.cpp和b.cpp中的调用代码这个时候就不能按照期望的运行了。但是我们很快就会发现<u>b.cpp中的0是整数，也就是在overload resolution的时候，我们知道它调用的是<code>void bar(sometype1 a, int i)</code>这个重载函数</u>，于是我们可以做出如下<strong>修改</strong>让代码按照期望运行：</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">bar</span><span style="color:#ABB2BF;">(a, static_cast</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">sometype2 </span><span style="color:#56B6C2;">*</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">));  </span><span style="color:#C678DD;">--</span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> 我们的游戏项目就遇到这个问题，这样用开起来别扭</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我知道，如果我们一开始就有bar的这两个重载函数的话，我们会在一开始就想办法避免这个问题（不使用重载）或者我们写出正确的调用代码，然而后面的这个重载函数或许是<u>我们几个月或者很长一段时间后加上的话，那我们出错的可能性就会加大了不少</u>。貌似我们现在说道的这些跟C++通常使用0来表示空指针没什么关系，好吧，假设我们的调用代码是这样的：</p><p>foo.h</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">void bar(sometype1 a, sometype2 *b);</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>a.cpp</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">bar(a, b);</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>b.cpp</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">bar</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">NULL</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当bar的重载函数在后面加上来了之后，我们会发现出错了，但是<u>出错的时候，我们找到b.cpp中的调用代码也很快可能忽略过去了，因为我们用的是NULL空指针啊，应该是调用的void bar(sometype1 a, sometype2 *b)这个重载函数啊。<strong>实际上NULL在C++中就是0，写NULL这个反而会让你没那么警觉，因为NULL不够“明显”，而这里如果是使用0来表示空指针，那就会够“明显”，因为0是空指针，它更是一个整形常量</strong>。</u></p><p>在C++中，使用0来做为空指针会比使用NULL来做空指针会让你更加警觉。</p><h3 id="c-11的nullptr" tabindex="-1"><a class="header-anchor" href="#c-11的nullptr" aria-hidden="true">#</a> C++ 11的nullptr</h3><p>虽然上面我们说明了0比NULL可以让我们更加警觉，但是我们并没有避免这个问题。这个时候C++ 11的nullptr就很好的<u>解决了这个问题</u>，我们<u>在C++ 11中使用nullptr来表示空指针</u>，这样最早的代码是这样的，</p><p>foo.h</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">void bar(sometype1 a, sometype2 *b);</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>a.cpp</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">bar(a, b);</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>b.cpp</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">bar(a, nullptr);</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在我们后来把bar的重载加上了之后，代码是这样：</p><p>foo.h</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">void bar(sometype1 a, sometype2 *b);</span></span>
<span class="line"><span style="color:#abb2bf;">void bar(sometype1 a, int i);</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>a.cpp</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">bar(a, b);</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>b.cpp</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">bar</span><span style="color:#ABB2BF;">(a, </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这时候，我们的代码还是能够如预期的一样正确运行。</p><h4 id="在没有c-11的nullptr的时候-我们怎么解决避免这个问题呢" tabindex="-1"><a class="header-anchor" href="#在没有c-11的nullptr的时候-我们怎么解决避免这个问题呢" aria-hidden="true">#</a> <strong>在没有C++ 11的nullptr的时候，我们怎么解决避免这个问题呢？</strong></h4><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 定义一个名为 nullptr_t 的类，用于模拟 C++11 中的空指针常量 nullptr</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">nullptr_t</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 转换操作符，将 nullptr_t 转换为任意指针类型 T*</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">inline</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;"> T*() </span><span style="color:#C678DD;">const</span></span>
<span class="line"><span style="color:#ABB2BF;">        { </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 转换操作符，将 nullptr_t 转换为类 C 中成员指针类型 T C::*</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">C</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">inline</span><span style="color:#ABB2BF;"> operator T C::</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">const</span></span>
<span class="line"><span style="color:#ABB2BF;">        { </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; }</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 私有成员函数，禁止取地址操作符&amp;的使用,以避免与普通指针混淆。</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">&amp;() </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {};</span><span style="color:#7F848E;font-style:italic;">  // 创建一个名为 nullptr 的 nullptr_t 类型的实例并初始化为一个匿名对象</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30),Y=p('<h2 id="内存溢出、踩内存、内存越界、野指针、悬空指针" tabindex="-1"><a class="header-anchor" href="#内存溢出、踩内存、内存越界、野指针、悬空指针" aria-hidden="true">#</a> 内存溢出、踩内存、内存越界、野指针、悬空指针</h2><ul><li><p>&quot;内存溢出&quot;（Memory Overflow）是指程序尝试<u><strong>写入超出</strong>其所分配的<strong>内存范围</strong>的区域</u>，导致数据覆盖或程序崩溃。也可以是<u>指系统中可用内存不足</u>，无法满足程序的内存需求，导致程序运行异常或崩溃。</p></li><li><p>&quot;踩内存&quot;（Memory Leak）指的是程序在动态分配内存时，<u><strong>没有</strong>正确<strong>释放</strong>已经不需要的内存，导致内存占用不断增加</u>，最终导致程序崩溃或系统资源不足。</p></li><li><p>&quot;内存越界&quot;（Array Out of Bounds）指的是程序试图<u><strong>访问</strong>数组的<strong>越界元素</strong></u>（即访问数组中不存在的元素），导致程序异常或崩溃。</p></li><li><p>野指针：指针定义时<strong>未被初始化</strong>，它的默认值是随机的。（因为任何指针变量（除了static修饰的指针变量）在被定义的时候是不会被置空的）</p></li><li><p>悬空指针：指针指向的内存空间已被释放或不再有效，<strong>没有及时置空</strong></p></li></ul>',2);function $(ss,ns){const l=c("font"),o=c("ExternalLinkIcon");return r(),i("div",null,[C,g,B("more"),n("p",null,[s("在C语言中，我们写程序时，总是会有动态开辟内存的需求，每到这个时候我们就会想到用"),h,s("去从堆里面动态申请出来一段内存给我们用。但对这一块申请出来的内存，往往还需要我们对它进行稍许的“加工”后"),f,s(" 才能为我们所用，"),n("u",null,[s("虽然C语言为我们提供了"),k,s("来开辟一段初始化好（0)的一段内存，但"),a(l,{color:"red"},{default:e(()=>[s("面向对象中各是各样的数据成员初始化")]),_:1}),s("，它同样束手无策")]),s("。同时，为了保持良好的编程习惯，我们也都应该对申请出来的内存作"),E,s("。于是到了C++中就有了new/delete, new []/delete[] 。用它们便可实现动态的内存管理。")]),_,n("p",null,[s("情况1：最常用操作，"),n("strong",null,[a(l,{color:"green"},{default:e(()=>[s("抛出异常的new")]),_:1})]),s("，抛异常处理内存开辟失败")]),x,n("p",null,[s("情况2："),n("strong",null,[a(l,{color:"green"},{default:e(()=>[s("不抛出异常的new")]),_:1})])]),w,n("p",null,[s("情况3：堆上开辟常量，"),n("strong",null,[a(l,{color:"green"},{default:e(()=>[s("常量new")]),_:1})])]),L,n("p",null,[s("情况4："),n("strong",null,[a(l,{color:"green"},{default:e(()=>[s("定位new")]),_:1})])]),q,n("ul",null,[n("li",null,[n("strong",null,[a(l,{color:"green"},{default:e(()=>[s("为了兼容c")]),_:1})]),s("：因为C++程序经常要调用C函数，而C程序只能用malloc/free管理动态内存。")])]),z,n("h2",T,[N,s(" [深入理解C++ new/delete, new "),n("a",U,[s("]/delete[]动态内存管理 "),a(o)])]),I,n("h3",V,[M,s(),a(l,{color:"red"},{default:e(()=>[s("new最后将开辟好内存用指针p返回，pA接收它。可为什么p 和pA 会差上4字节？")]),_:1})]),O,n("h4",S,[G,s(),a(l,{color:"red"},{default:e(()=>[H]),_:1})]),Z,n("p",null,[s("内存管理内置类型，它们的析构函数其实上是可调可不调的，所以它的实现机制不像前面的new []/delete[]，"),j,s("。不仅仅这种内置类型如此，那种无自定义类型析构函数的类对象，这样的用法同样不会表现出什么问题。但即便如此，"),a(l,{color:"red"},{default:e(()=>[s("为保存良好的编程习惯，还是要配对地使用它们")]),_:1})]),n("h2",P,[Q,s(),n("a",W,[s(" NULL、0、nullptr 区别分析"),a(o)])]),X,n("p",null,[s("在"),n("u",null,[s("C语言中，我们使用NULL表示"),a(l,{color:"red"},{default:e(()=>[s("空指针")]),_:1})])]),J,a(l,{color:"red"},{default:e(()=>[s("C++是强类型的，void *是不能隐式转换成其他指针类型的")]),_:1}),s("，所以通常情况下，编译器提供的头文件会这样定义NULL："),K,n("p",null,[s("都是正常完美的编译运行。但是突然在某个时候我们"),n("u",null,[s("功能扩展，需要对bar函数进行扩展，我们使用了"),a(l,{color:"red"},{default:e(()=>[s("重载")]),_:1})]),s("，现在foo.h的声明如下：")]),R,n("p",null,[s("结论："),a(l,{color:"red"},{default:e(()=>[s("如果使用 nullptr 初始化对象，就能避免 0 指针的二义性的问题")]),_:1}),s("。 cocos2d-x3.0 采用 c++11的新特性了... c++ 二春来了...")]),Y])}const es=t(m,[["render",$],["__file","new、delete.html.vue"]]);export{es as default};
