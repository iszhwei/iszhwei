import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as i,c as r,d as s,e as n,f as a,w as l,a as o}from"./app-2pke9_a8.js";const B="/assets/watermark_type_ZmFuZ3poZW5naGVpdGk_shadow_10_text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDQxNjkz_size_16_color_FFFFFF_t_70-c-sWiOHT.png",d="/assets/watermark_type_ZmFuZ3poZW5naGVpdGk_shadow_10_text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDQxNjkz_size_16_color_FFFFFF_t_70-171308150159911-tpswoJcs.png",y="/assets/image-20240414161056975-JkNJ4hQ-.png",u="/assets/20200314122107183-CJxAbVDx.png",F={},v=o(`<h1 id="虚函数的访问" tabindex="-1"><a class="header-anchor" href="#虚函数的访问" aria-hidden="true">#</a> 虚函数的访问</h1><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Base</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Base</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">):</span><span style="color:#61AFEF;">ma</span><span style="color:#ABB2BF;">(data){}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">virtual</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Base::show()&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">protected:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> ma;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Derive</span><span style="color:#ABB2BF;"> : </span><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Base</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Derive</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">):</span><span style="color:#61AFEF;">Base</span><span style="color:#ABB2BF;">(data), </span><span style="color:#61AFEF;">mb</span><span style="color:#ABB2BF;">(data){}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Derive::show()&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> mb;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="指针访问" tabindex="-1"><a class="header-anchor" href="#指针访问" aria-hidden="true">#</a> 指针访问</h2>`,3),A=s("strong",null,"非虚函数",-1),_=s("strong",null,"指针本身的类型",-1),h=s("strong",null,"虚函数",-1),b=s("strong",null,"指针所指对象的类型",-1),m=o(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">Base b;</span></span>
<span class="line"><span style="color:#ABB2BF;">Derive d;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">Base </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pb1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">b;</span><span style="color:#7F848E;font-style:italic;">//基类指针指向基类对象</span></span>
<span class="line"><span style="color:#E5C07B;">pb1</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+B+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">Base b;</span></span>
<span class="line"><span style="color:#ABB2BF;">Derive d;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">Base </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pb2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">d;</span><span style="color:#7F848E;font-style:italic;">//基类指针指向派生类对象</span></span>
<span class="line"><span style="color:#E5C07B;">pb2</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//派生类指针调用派生类对象，派生类引用调用派生类对象</span></span>
<span class="line"><span style="color:#ABB2BF;">Derive </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pd1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">d;</span></span>
<span class="line"><span style="color:#E5C07B;">pd1</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">Derive </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">rd1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> d;</span></span>
<span class="line"><span style="color:#E5C07B;">rd1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),D=o('<h3 id="向下强转-不安全" tabindex="-1"><a class="header-anchor" href="#向下强转-不安全" aria-hidden="true">#</a> 向下强转（不安全）</h3><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>指针指向的是虚函数，属于动态绑定，但是此时<u>派生类的虚函数表里只有基类的虚函数地址，所以最终访问到是基类的虚函数</u></p><h2 id="引用访问" tabindex="-1"><a class="header-anchor" href="#引用访问" aria-hidden="true">#</a> 引用访问</h2>',4),g=s("u",null,"与使用指针访问虚函数类似",-1),C=s("strong",null,"表现出动态多态",-1),f=s("strong",null,"引用变量本身无论如何改变，其调用的函数就不会再改变，始终指向其开始定义时的函数",-1),E=s("u",null,[n("在使用上"),s("strong",null,"有一定限制"),n("，但这在一定程度上提高了代码的"),s("strong",null,"安全性")],-1),x=o(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">Base </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">rb1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> b;</span></span>
<span class="line"><span style="color:#E5C07B;">rb1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">Base </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">rb2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> d;</span></span>
<span class="line"><span style="color:#E5C07B;">rb2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象访问" tabindex="-1"><a class="header-anchor" href="#对象访问" aria-hidden="true">#</a> 对象访问</h2>`,2),k=s("strong",null,"静态联编",-1),w=s("strong",null,"对象名的类型",-1),z=s("u",null,"对象类型是基类时，就调用基类的函数；对象类型是子类时，就调用子类的函数。",-1),N=o(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">	Base b;</span></span>
<span class="line"><span style="color:#ABB2BF;">	Derive d;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//静态绑定</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;">//虚函数 call Base::show();</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">d</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;">//虚函数 call Derive::show();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="成员函数中访问" tabindex="-1"><a class="header-anchor" href="#成员函数中访问" aria-hidden="true">#</a> 成员函数中访问</h2><p>在类内的成员函数中访问该类层次中的虚函数，<u>采用<strong>动态联编</strong>，要使用this指针。</u></p>',4),V=s("h2",{id:"构造函数和析构函数中访问",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#构造函数和析构函数中访问","aria-hidden":"true"},"#"),n(" 构造函数和析构函数中访问")],-1),G=s("strong",null,"静态联编",-1),L=s("u",null,[n("在构造函数或析构函数内，即使是使用“"),s("code",null,"this->虚函数名"),n("”的形式来调用，编译器仍将其解释为静态联编的“"),s("code",null,"本类名::虚函数名"),n("”")],-1),Z=s("h2",{id:"注意",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#注意","aria-hidden":"true"},"#"),n(" 注意")],-1),H=s("h3",{id:"虚函数的调用一定就是动态绑定吗",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#虚函数的调用一定就是动态绑定吗","aria-hidden":"true"},"#"),n(),s("strong",null,"虚函数的调用一定就是动态绑定吗？")],-1),Q=s("p",null,"在类的构造函数当中，调用虚函数，也是静态绑定。构造函数中调用其他函数，包括虚函数，不会发生动态绑定。",-1),q=s("p",null,[s("strong",null,"注意：")],-1),J=s("li",null,[s("p",null,"用对象本身调用虚函数，是静态绑定。")],-1),R=s("strong",null,"虚函数前面必须是指针或引用调用才能发生动态绑定：基类指针指向基类对象，基类指针指向派生类对象，都是动态绑定。",-1),W=s("li",null,[s("p",null,"如果不是通过指针或者引用来调用虚函数，那就是静态绑定。")],-1);function j(M,T){const e=p("font"),c=p("RouterLink");return i(),r("div",null,[v,s("ul",null,[s("li",null,[s("p",null,[n("使用指针访问"),A,n("时，编译器根据"),a(e,{color:"green"},{default:l(()=>[_]),_:1}),n("决定要调用哪个函数，而不是根据指针指向的对象类型；")])]),s("li",null,[s("p",null,[n("使用指针访问"),h,n("时，编译器根据"),a(e,{color:"green"},{default:l(()=>[b]),_:1}),n("决定要调用哪个函数(动态联编)，而与指针本身的类型无关。")]),m])]),D,s("p",null,[n("使用引用访问虚函数，"),g,n("，"),C,n("特性。不同的是，引用一经声明后，"),a(e,{color:"red"},{default:l(()=>[f]),_:1}),n("。因此"),E,n("，特别体现在函数参数传递等场合中，可以将引用理解成一种“受限制的指针”。")]),x,s("p",null,[n("和普通函数一样，虚函数一样可以"),s("u",null,[n("通过对象名来调用，此时编译器采用的是"),a(e,{color:"red"},{default:l(()=>[k]),_:1})]),n("。通过对象名访问虚函数时, 调用哪个类的函数取决于定义"),w,n("。"),z]),N,s("p",null,[a(c,{to:"/ccpp/07%20%E5%A4%9A%E6%80%81/%E7%BA%AF%E8%99%9A%E5%87%BD%E6%95%B0%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB.html#%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%BD%A2%E5%BC%8F"},{default:l(()=>[n("例如：汽车类中获取汽车剩余油量还能跑的公里数")]),_:1})]),V,s("p",null,[n("构造函数和析构函数是特殊的成员函数，在其中访问虚函数时，C++采用"),a(e,{color:"red"},{default:l(()=>[G]),_:1}),n("，即"),L,n("。即**它们所调用的虚函数是自己类中定义的函数，如果在自己的类中"),a(e,{color:"red"},{default:l(()=>[n("没有")]),_:1}),n("实现该函数，"),a(e,{color:"red"},{default:l(()=>[n("则调用的是基类中的虚函数")]),_:1}),n("。但绝不会调用任何在派生类中重定义的虚函数。 **")]),Z,H,Q,q,s("ol",null,[J,s("li",null,[s("p",null,[n("动态绑定："),a(e,{color:"red"},{default:l(()=>[R]),_:1})])]),W])])}const S=t(F,[["render",j],["__file","虚函数的访问.html.vue"]]);export{S as default};
