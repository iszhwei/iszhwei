const s=JSON.parse('{"key":"v-152dfd8d","path":"/algo/02%20%E9%93%BE%E8%A1%A8/234.%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8.html","title":"Leetcode 234. 回文链表","lang":"zh-CN","frontmatter":{"title":"Leetcode 234. 回文链表","icon":"code","order":13,"category":["数据结构与算法"],"tag":["链表","数组","双指针"],"description":"Leetcode 234. 回文链表 题目描述：给你一个单链表的头节点 head ，请你判断该链表是否为回文链表。如果是，返回 true ；否则，返回 false 。 方法一：数组+双指针 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: bool isPalindrome(ListNode* head) { vector&lt;int&gt; vec; for(ListNode* p = head; p != nullptr; p = p-&gt;next) {//O(n) vec.push_back(p-&gt;val);\\t//空间复杂度O(n) } for(int i = 0, j = vec.size() - 1; i &lt; j; ++i, --j) {\\t//O(n/2) if(vec[i] != vec[j]) { return false; } } return true; } };","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/algo/02%20%E9%93%BE%E8%A1%A8/234.%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"Leetcode 234. 回文链表"}],["meta",{"property":"og:description","content":"Leetcode 234. 回文链表 题目描述：给你一个单链表的头节点 head ，请你判断该链表是否为回文链表。如果是，返回 true ；否则，返回 false 。 方法一：数组+双指针 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: bool isPalindrome(ListNode* head) { vector&lt;int&gt; vec; for(ListNode* p = head; p != nullptr; p = p-&gt;next) {//O(n) vec.push_back(p-&gt;val);\\t//空间复杂度O(n) } for(int i = 0, j = vec.size() - 1; i &lt; j; ++i, --j) {\\t//O(n/2) if(vec[i] != vec[j]) { return false; } } return true; } };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"链表"}],["meta",{"property":"article:tag","content":"数组"}],["meta",{"property":"article:tag","content":"双指针"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Leetcode 234. 回文链表\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[{"level":2,"title":"方法一：数组+双指针","slug":"方法一-数组-双指针","link":"#方法一-数组-双指针","children":[]},{"level":2,"title":"方法二：反转后半部链表（空间复杂度O(1))","slug":"方法二-反转后半部链表-空间复杂度o-1","link":"#方法二-反转后半部链表-空间复杂度o-1","children":[]}],"git":{},"readingTime":{"minutes":2.5,"words":749},"filePathRelative":"algo/02 链表/234.回文链表.md","excerpt":"<p><a href=\\"https://leetcode.cn/problems/palindrome-linked-list/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Leetcode 234. 回文链表</a></p>\\n<p><strong>题目描述</strong>：给你一个单链表的头节点 <code>head</code> ，请你判断该链表是否为回文链表。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\\n<!--more-->\\n<h2> 方法一：数组+双指针</h2>\\n<div class=\\"language-c++ line-numbers-mode\\" data-ext=\\"c++\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> * Definition for singly-linked list.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> * struct ListNode {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> *     int val;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> *     ListNode *next;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> *     ListNode() : val(0), next(nullptr) {}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> *     ListNode(int x) : val(x), next(nullptr) {}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> *     ListNode(int x, ListNode *next) : val(x), next(next) {}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> * };</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Solution</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">public:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">bool</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">isPalindrome</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">ListNode</span><span style=\\"color: #C678DD\\">*</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">head</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        vector</span><span style=\\"color: #C678DD\\">&lt;int&gt;</span><span style=\\"color: #ABB2BF\\"> vec;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\">(ListNode</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\"> p </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> head; p </span><span style=\\"color: #C678DD\\">!=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">nullptr</span><span style=\\"color: #ABB2BF\\">; p </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">p</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">next</span><span style=\\"color: #ABB2BF\\">) {</span><span style=\\"color: #7F848E; font-style: italic\\">//O(n)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #E5C07B\\">vec</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">push_back</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">p</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">val</span><span style=\\"color: #ABB2BF\\">);</span><span style=\\"color: #7F848E; font-style: italic\\">\\t//空间复杂度O(n)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> i </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">,  j </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">vec</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">size</span><span style=\\"color: #ABB2BF\\">() </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">; i </span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\"> j; </span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">i, </span><span style=\\"color: #C678DD\\">--</span><span style=\\"color: #ABB2BF\\">j) {</span><span style=\\"color: #7F848E; font-style: italic\\">\\t//O(n/2)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">vec</span><span style=\\"color: #ABB2BF\\">[i] </span><span style=\\"color: #C678DD\\">!=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">vec</span><span style=\\"color: #ABB2BF\\">[j]) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">                </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">false</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">true</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{s as data};
