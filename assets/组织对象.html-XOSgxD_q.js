import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as B,c as t,d as p,e as s,f as l,w as a,a as o}from"./app-mYdPlPhZ.js";const r="/assets/1683811475267-5da9c012-06ad-47d4-aecc-2d9d5c89fc41-MIl0UzEX.png",i={},y=o('<h1 id="对象的组织" tabindex="-1"><a class="header-anchor" href="#对象的组织" aria-hidden="true">#</a> <strong>对象</strong>的组织</h1><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>有了自己定义的类，或者使用别人定义好的类创建对象，其机制与使用int等创建普通变量几乎完全一致，同样可以创建const对象、创建指向对象的指针、创建对象数组，还可使用new和delete等创建动态对象。</p><h2 id="const对象" tabindex="-1"><a class="header-anchor" href="#const对象" aria-hidden="true">#</a> const对象</h2>',4),d=p("strong",null,"构造函数",-1),A=p("strong",null,"，便只有",-1),F=o(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">pt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">pt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="指向对象的指针" tabindex="-1"><a class="header-anchor" href="#指向对象的指针" aria-hidden="true">#</a> 指向对象的指针</h2>`,2),v=o(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">类名 </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">指针名 [</span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;">初始化表达式];</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),u=p("u",null,"可以通过取地址（&对象名）给指针初始化，也可以通过申请动态内存给指针初始化，或者干脆不初始化（比如置为nullptr），在程序中再对该指针赋值",-1),D=o(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">pt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);                 </span></span>
<span class="line"><span style="color:#ABB2BF;">Point </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">Point </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">pt;</span></span>
<span class="line"><span style="color:#ABB2BF;">Point </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p3 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Point</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">Point </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">p3</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;">//合法</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p3).</span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;">//合法</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象数组" tabindex="-1"><a class="header-anchor" href="#对象数组" aria-hidden="true">#</a> 对象数组</h2>`,2),b=o(`<h3 id="对象数组的声明" tabindex="-1"><a class="header-anchor" href="#对象数组的声明" aria-hidden="true">#</a> 对象数组的声明:</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">类名 数组名[对象个数];</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),m=o(`<h3 id="对象数组的初始化-可以在声明时进行初始化。" tabindex="-1"><a class="header-anchor" href="#对象数组的初始化-可以在声明时进行初始化。" aria-hidden="true">#</a> 对象数组的初始化：可以在声明时进行初始化。</h3><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">Point </span><span style="color:#E5C07B;">pts</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {</span><span style="color:#61AFEF;">Point</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">), </span><span style="color:#61AFEF;">Point</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">)};</span></span>
<span class="line"><span style="color:#ABB2BF;">Point pts[] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {</span><span style="color:#61AFEF;">Point</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">), </span><span style="color:#61AFEF;">Point</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">)};</span></span>
<span class="line"><span style="color:#ABB2BF;">Point </span><span style="color:#E5C07B;">pts</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {</span><span style="color:#61AFEF;">Point</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">), </span><span style="color:#61AFEF;">Point</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">)};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//或者</span></span>
<span class="line"><span style="color:#ABB2BF;">Point </span><span style="color:#E5C07B;">pts</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {{</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">}, {</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">}};</span><span style="color:#7F848E;font-style:italic;">//这里需要注意，除了去掉Point，还换了大括号</span></span>
<span class="line"><span style="color:#ABB2BF;">Point pts[] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {{</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">}, {</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">}};</span></span>
<span class="line"><span style="color:#ABB2BF;">Point </span><span style="color:#E5C07B;">pts</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {{</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">}, {</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">}};  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="堆对象" tabindex="-1"><a class="header-anchor" href="#堆对象" aria-hidden="true">#</a> 堆对象</h2>`,3),C=o(`<u>这里主要讨论如何为对象和对象数组动态分配内存。如：</u><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    Point </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pt1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Point</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">pt1</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> pt1;</span></span>
<span class="line"><span style="color:#ABB2BF;">    pt1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    Point </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> pt2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">]();</span><span style="color:#7F848E;font-style:italic;">//注意</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">pt2</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    (pt2 </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)-&gt;</span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">[]</span><span style="color:#ABB2BF;"> pt2;</span><span style="color:#7F848E;font-style:italic;">//可以试试使用free去进行释放会发生什么？为什么会发生这个问题？</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),E=p("strong",null,"注意",-1),h=o(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::cout;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Point</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">Point</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">ix</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">iy</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    : </span><span style="color:#61AFEF;">_ix</span><span style="color:#ABB2BF;">(ix)</span></span>
<span class="line"><span style="color:#ABB2BF;">    , </span><span style="color:#61AFEF;">_iy</span><span style="color:#ABB2BF;">(iy)</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Point(int = 0, int = 0)&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;(&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">_ix</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;, &quot;</span><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">_iy</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;)&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;">  endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">~Point</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;~Point()&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> _ix;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> _iy;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //int number = 10;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //int *pInt = &amp;number;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    Point </span><span style="color:#61AFEF;">pt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    Point </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">ptr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">pt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //int *pInt = new int(10);</span></span>
<span class="line"><span style="color:#ABB2BF;">    Point </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pc </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Point</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test2</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //int arr[2] = {1, 2};</span></span>
<span class="line"><span style="color:#ABB2BF;">    Point </span><span style="color:#E5C07B;">pt</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {</span><span style="color:#61AFEF;">Point</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">), </span><span style="color:#61AFEF;">Point</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)};</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">pt</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //逗号表达式</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* Point ptemp[2] = {(1, 2), (4, 3)}; */</span></span>
<span class="line"><span style="color:#ABB2BF;">    Point </span><span style="color:#E5C07B;">ptemp</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {{</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">}, {</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">}};</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">ptemp</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test3</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pInt </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">]();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    Point </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pArr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">]();</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;222&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">pArr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;333&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">pArr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Point</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//临时对象/匿名对象，生命周期只在本行,对象在本行创建，也在本行销毁</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;111&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">[]</span><span style="color:#ABB2BF;"> pArr;</span><span style="color:#7F848E;font-style:italic;">//堆对象数组</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* free(pArr);//error */</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">argc</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">**</span><span style="color:#E06C75;font-style:italic;">argv</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">test3</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function f(_,g){const n=c("font");return B(),t("div",null,[y,p("p",null,[s("类对象也可以声明为const对象，一般来说，"),p("u",null,[s("能作用于const对象的成员函数除了"),l(n,{color:"green"},{default:a(()=>[d]),_:1}),s("和**"),l(n,{color:"green"},{default:a(()=>[s("析构函数")]),_:1}),A,l(n,{color:"green"},{default:a(()=>[s("const成员函数")]),_:1}),s("**了，"),p("strong",null,[s("因为const对象只能被"),l(n,{color:"cornflowerblue"},{default:a(()=>[s("创建")]),_:1}),s("、"),l(n,{color:"cornflowerblue"},{default:a(()=>[s("撤销")]),_:1}),s("以及"),l(n,{color:"cornflowerblue"},{default:a(()=>[s("只读访问")]),_:1})]),s("，"),l(n,{color:"red"},{default:a(()=>[s("改写是不允许的")]),_:1})]),s("。")]),F,p("p",null,[s("对象占据一定的内存空间，"),l(n,{color:"red"},{default:a(()=>[s("和普通变量一致")]),_:1}),s("， C++ 程序中采用如下形式声明指向对象的指针：")]),v,p("p",null,[s("初始化表达式是可选的，既"),u,s("。 "),p("u",null,[s("指针中存储的是对象所占内存空间的**"),l(n,{color:"green"},{default:a(()=>[s("首地址")]),_:1}),s("**")]),s("。针对上述定义，则下列形式都是合法的：")]),D,p("p",null,[s("对象数组"),l(n,{color:"red"},{default:a(()=>[s("和标准类型数组的使用方法并没有什么不同")]),_:1}),s("，也有声明、初始化和使用3个步骤")]),b,p("p",null,[s("这种格式"),p("strong",null,[s("会"),l(n,{color:"green"},{default:a(()=>[s("自动调用")]),_:1}),l(n,{color:"cornflowerblue"},{default:a(()=>[s("默认构造函数")]),_:1}),s("或"),l(n,{color:"cornflowerblue"},{default:a(()=>[s("所有参数都是缺省值的构造函数")]),_:1})]),s("。")]),m,l(n,{color:"red"},{default:a(()=>[s("和把一个简单变量创建在动态存储区一样")]),_:1}),s("，可以用new和delete表达式为对象分配动态存储区，在复制构造函数一节中已经介绍了为类内的指针成员分配动态内存的相关范例，"),C,p("p",null,[E,s(": "),p("u",null,[s("使用new表达式为对象数组分配动态空间时，"),l(n,{color:"red"},{default:a(()=>[s("不能显式调用对象的构造函数")]),_:1})]),s("，因此，"),p("u",null,[s("对象要么没有定义任何形式的构造函数（由"),l(n,{color:"cornflowerblue"},{default:a(()=>[s("编译器缺省提供")]),_:1}),s("），要么显式定义了一个（且只能有一个）"),l(n,{color:"cornflowerblue"},{default:a(()=>[s("所有参数都有缺省值的构造函数")]),_:1})]),s("。")]),h])}const k=e(i,[["render",f],["__file","组织对象.html.vue"]]);export{k as default};
