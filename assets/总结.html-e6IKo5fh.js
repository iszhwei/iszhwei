import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as c,c as o,a as t}from"./app-m9pC5KT-.js";const a="/assets/92332be0cc2f485895e69b422832ab29-zY6_HXB1.png",_={},i=t('<h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><p>SGI STL二级空间配置器内存池的实现优点：</p><ol><li>对于每一个字节数的chunk块分配，都是给出一部分进行使用，另一部分作为备用，这个备用可以给当前字节数使用，也可以给其它字节数使用</li><li>对于备用内存池划分完chunk块以后，如果还有剩余的很小的内存块，再次分配的时候，会把这些小的内存块挂到<code>_S_free_list</code>的对应位置，再次分配出去，备用内存池使用的干干净净！</li><li>当指定字节数内存分配失败以后，有一个异常处理的过程，查看<code>_S_free_list</code>从<code>__size -&gt; 128</code>字节所有的chunk块，如果哪个字节数有空闲的chunk块，直接借一个出去。如果上面操作失败，还会调用<code>_S_oom_malloc</code>，其内部有一个预先设置好的malloc内存分配失败的回调函数，若分配不成功则会不停地调用次回调函数释放空间。若没设置回调函数，则直接<code>malloc throw bad_alloc</code></li></ol><figure><img src="'+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>源码阅读的方法：先拎清主要逻辑（主要干的什么），再关注侧枝（其他的函数），不要一行行的阅读，可以辅助画图理解</p>',5),l=[i];function n(r,d){return c(),o("div",null,l)}const h=e(_,[["render",n],["__file","总结.html.vue"]]);export{h as default};
