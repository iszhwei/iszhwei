import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as c,c as B,d as n,f as l,w as o,e as s,a as p}from"./app-m9pC5KT-.js";const r="/assets/image-20240413100255722-uB3624jb.png",i="/assets/004b84845cb44c28ace0aa058b8386f6-MsgNruJF.png",y="/assets/832a02cf9e554b1dbada7c652ca4981f-q2coPsKl.png",d="/assets/22eb08c4df5049c89f2c45bf40f6587a-G8fDmtmy.png",u="/assets/aaebdeb2c12a4521a92eb36af3b828c1-vOy-eoeB.png",F="/assets/ff724de717fc4c7db50ae9a0d0d3c031-pKl84e5n.png",A="/assets/08a5b3f8e3af4416bc55452b91a5c8a5-dS9lEwUM.png",v="/assets/050addb3c57e453a9c965d8505d2efff-S0EDSKQs.png",m={},C=n("h1",{id:"json简介及使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#json简介及使用","aria-hidden":"true"},"#"),s(" Json简介及使用")],-1),D=n("h2",{id:"一、json简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、json简介","aria-hidden":"true"},"#"),s(" 一、Json简介")],-1),b=n("u",null,"网络中TCP传输数据时为字节流，因此我们需要数据序列化将其转为字节流发送到对端主机，对端主机读取字节流上报应用服务，再将数据反序列化出来解析使用",-1),g=p('<figure><img src="'+r+'" alt="image-20240413100255722" tabindex="0" loading="lazy"><figcaption>image-20240413100255722</figcaption></figure><p><strong>优秀的Json开源库JSON for Modern C++：由德国大牛 nlohmann 编写的在 C++ 下使用的 Json 库，具有以下优点：</strong></p><ol><li><p><u>直观的语法</u>；</p></li><li><p>整个代码由<u>一个头文件组成 json.hpp</u>，没有子项目、依赖关系、复杂的构建系统，<u>使用起来非常方便</u>；</p></li><li><p><u>使用 C++ 11 标准编写，使用 Json 像使用 STL 容器一样</u>；</p></li><li><p><u>STL 和 Json 容器</u>之间可以<strong>相互转换</strong>；</p></li><li><p>所有类都经过严格的<u>单元测试</u>，覆盖了 100％ 的代码，包括所有特殊的行为。此外，还检查了 <u>Valgrind 是否有内存泄漏</u>。为了保持<strong>高质量</strong>，该项目遵循核心基础设施倡议(CII)的最佳实践。</p></li></ol><h2 id="二、json语法" tabindex="-1"><a class="header-anchor" href="#二、json语法" aria-hidden="true">#</a> 二、Json语法</h2><h3 id="_2-1-json语法" tabindex="-1"><a class="header-anchor" href="#_2-1-json语法" aria-hidden="true">#</a> 2.1 Json语法</h3>',5),h=n("u",null,"名称/值",-1),f=n("code",null,"逗号 ,",-1),q=n("code",null,"反斜杆 \\",-1),_=n("code",null,"大括号 {}",-1),E=n("code",null,"中括号 []",-1),j=n("u",null,"多个",-1),x=n("h3",{id:"_2-2-json的两种结构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-2-json的两种结构","aria-hidden":"true"},"#"),s(" 2.2 Json的两种结构：")],-1),k=p("<li><p>对象：</p><p><code>大括号 {}</code> 保存的对象是一个<strong>无序的</strong>名称/值对集合。<u>一个对象以<code>左括号 {</code> 开始， <code>右括号 }</code> 结束。每个&quot;键&quot;后跟一个<code>冒号 :</code>，名称/值对使用<code>逗号 ,</code> 分隔。</u></p></li>",1),J=n("p",null,"数组：",-1),z=n("code",null,"中括号 []",-1),S=n("strong",null,"值(value)的有序集合",-1),M=n("u",null,[s("一个数组以"),n("code",null,"左中括号["),s("开始， "),n("code",null,"右中括号 ]"),s("结束，值之间使用"),n("code",null,"逗号 ,"),s(" 分隔。")],-1),N=n("strong",null,"或者",-1),w=p(`<h3 id="_2-3-书写格式" tabindex="-1"><a class="header-anchor" href="#_2-3-书写格式" aria-hidden="true">#</a> 2.3 书写格式</h3><p><u><mark>key : value格式</mark>，类似于我们C++中的<mark>map容器</mark></u>，十分简洁清晰，例如：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">json js;</span></span>
<span class="line"><span style="color:#ABB2BF;">js[</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">] = </span><span style="color:#98C379;">&quot;xiaoming&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、数据序列化实例" tabindex="-1"><a class="header-anchor" href="#三、数据序列化实例" aria-hidden="true">#</a> 三、数据序列化实例</h2><p><strong>Json序列化</strong>： 在网络中，常用的数据传输序列化格式有XML、Json、ProtoBuf，在公司级别的项目中，大量的在使用ProtoBuf作为数据序列化的方式，它数据压缩编码传输，占用带宽小，同样的数据信息，是Json的1/10，XML的1/20，但是使用起来比Json稍复杂一些，学习成本较高，所以项目中我们选择常用的Json格式来打包传输数据。</p>`,5),V=p(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;json.hpp&quot;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">json</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> nlohmann::</span><span style="color:#E5C07B;">json</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-1-普通数据序列化" tabindex="-1"><a class="header-anchor" href="#_3-1-普通数据序列化" aria-hidden="true">#</a> 3.1 普通数据序列化</h3><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//1、Json普通数据序列化</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test1</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    json js;</span><span style="color:#7F848E;font-style:italic;">	//添加Json对象</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;msg_type&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;from&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;zhangsan&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;to&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;lisi&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;msg&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;hello, good morning!&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> js </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>序列化输出Json字符串：</p><figure><img src="`+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="利用dump-方法-将dict类型的数据转成str。" tabindex="-1"><a class="header-anchor" href="#利用dump-方法-将dict类型的数据转成str。" aria-hidden="true">#</a> <strong>利用<code>dump()</code>方法，将dict类型的数据转成str。</strong></h4><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test1</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    json js;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;msg_type&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;from&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;zhangsan&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;to&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;lisi&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;msg&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;hello, good morning!&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    string sendBuf </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dump</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;">//Json数据对象 =》 Json字符串</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">sendBuf</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">c_str</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),L=p('<figure><img src="'+y+`" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><h3 id="_3-2-json添加数组类型" tabindex="-1"><a class="header-anchor" href="#_3-2-json添加数组类型" aria-hidden="true">#</a> 3.2 Json添加数组类型</h3><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//2、Json添加数组类型</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test2</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">	json js;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;id&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">}</span><span style="color:#7F848E;font-style:italic;">	//添加数组</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;zhangsan&quot;</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">	//添加key-value</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;msg&quot;</span><span style="color:#ABB2BF;">][</span><span style="color:#98C379;">&quot;zhangsan&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;good noon!&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;msg&quot;</span><span style="color:#ABB2BF;">][</span><span style="color:#98C379;">&quot;lisi&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;good night!&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //添加Json对象,上面两句等同于此句一次性添加数组对象</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;msg&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {{</span><span style="color:#98C379;">&quot;zhangsan&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;good noon!&quot;</span><span style="color:#ABB2BF;">}, {</span><span style="color:#98C379;">&quot;lisi&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;good night!&quot;</span><span style="color:#ABB2BF;">}};</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> js </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;    </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><p>数组尽量使用vector可以动态地调整大小</p><h3 id="_3-3-容器序列化" tabindex="-1"><a class="header-anchor" href="#_3-3-容器序列化" aria-hidden="true">#</a> 3.3 容器序列化：</h3><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//3、容器序列化</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test3</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    json js;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //直接序列化一个vector容器</span></span>
<span class="line"><span style="color:#ABB2BF;">    vector</span><span style="color:#C678DD;">&lt;int&gt;</span><span style="color:#ABB2BF;"> vec;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">vec</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push_pack</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">vec</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push_pack</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">vec</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push_pack</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;list&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> vec;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //直接序列化一个map容器</span></span>
<span class="line"><span style="color:#ABB2BF;">    map</span><span style="color:#C678DD;">&lt;int</span><span style="color:#ABB2BF;">, string</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> m;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">m</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">({</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;黄山&quot;</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">m</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">({</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;华山&quot;</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">m</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">({</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;泰山&quot;</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;local&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> m;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> js </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="四、json-parse-数据反序列化实例" tabindex="-1"><a class="header-anchor" href="#四、json-parse-数据反序列化实例" aria-hidden="true">#</a> 四、<code>json::parse()</code>数据反序列化实例</h2><p>parse : 解析</p><p><strong>Json反序列化：</strong> 当我们从网络接<u>收到字符串为Json格式时</u>，可以用JSON for Modern C++ 直接<u>反序列化<strong>取得数据</strong>或者直接反序列化出对象，甚至是容器</u>。</p><h3 id="_4-1-普通数据反序列化" tabindex="-1"><a class="header-anchor" href="#_4-1-普通数据反序列化" aria-hidden="true">#</a> 4.1 普通数据反序列化</h3><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test4</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">	json js;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;msg_type&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;form&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;zhangsan&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;to&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;lisi&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;msg&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;good morning!&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    string sendBuf </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dump</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> sendBuf;    </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    string recvBuf </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test4</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //反序列化,Json字符串 =&gt; 数据对象</span></span>
<span class="line"><span style="color:#ABB2BF;">    json jsBuf </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> json::</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(recvBuf);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">jsbuf</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;msg_type&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">jsbuf</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;from&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">jsbuf</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;to&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">jsbuf</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;msg&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反序列化输出结果如下，<strong>还保留了相应数据类型</strong>。</p><figure><img src="`+F+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-2-数组类型数据反序列化" tabindex="-1"><a class="header-anchor" href="#_4-2-数组类型数据反序列化" aria-hidden="true">#</a> <strong>4.2 数组类型数据反序列化：</strong></h3><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test5</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    json js;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;id&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;zhangsan&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;msg&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {{</span><span style="color:#98C379;">&quot;zhangsan&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;good noon!&quot;</span><span style="color:#ABB2BF;">}, {</span><span style="color:#98C379;">&quot;lisi&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;good night!&quot;</span><span style="color:#ABB2BF;">}};</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dump</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    string recvBuf </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test5</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    json jsBuf </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> json::</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(recvBuf);</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">jsBuf</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;id&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">auto</span><span style="color:#ABB2BF;"> jsMsg </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">jsBuf</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;msg&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">jsMsg</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;zhangsan&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">jsMsg</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;lisi&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+A+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="容器反序列化" tabindex="-1"><a class="header-anchor" href="#容器反序列化" aria-hidden="true">#</a> 容器反序列化</h3><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test6</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">	vector</span><span style="color:#C678DD;">&lt;int&gt;</span><span style="color:#ABB2BF;"> vec </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">    json js;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;list&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> vec;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    map</span><span style="color:#C678DD;">&lt;int</span><span style="color:#ABB2BF;">, string</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> m </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {{</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;黄山&quot;</span><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#ABB2BF;">                         {</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;华山&quot;</span><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#ABB2BF;">                         {</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;泰山&quot;</span><span style="color:#ABB2BF;">}};</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;local&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> m;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">js</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dump</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    string recvBuf </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test6</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    json jsBuf </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> json::</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(recvBuf);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //将js对象中数组类型直接放入vector容器中</span></span>
<span class="line"><span style="color:#ABB2BF;">    vector</span><span style="color:#C678DD;">&lt;int&gt;</span><span style="color:#ABB2BF;"> vec </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">jsBuf</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;list&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> v : vec) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> v </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot; &quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //将js对象中数组类型直接放入map容器中</span></span>
<span class="line"><span style="color:#ABB2BF;">    map</span><span style="color:#C678DD;">&lt;int</span><span style="color:#ABB2BF;">, string</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> mp </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">jsBuf</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;local&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">auto</span><span style="color:#ABB2BF;"> it : mp) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">it</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">first</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot; &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">it</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">second</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',21);function O(P,T){const a=t("font");return c(),B("div",null,[C,D,n("p",null,[n("strong",null,[l(a,{color:"red"},{default:o(()=>[s("Json(JavaScript Object Notation)")]),_:1})]),s("："),n("strong",null,[s("是一种轻量级的"),l(a,{color:"red"},{default:o(()=>[s("数据交换格式(也叫数据序列化方式")]),_:1}),s(")，采用完全"),n("u",null,[s("独立于编程语言的"),l(a,{color:"red"},{default:o(()=>[s("文本格式")]),_:1}),s("来存储和表示数据")]),s("。 简洁和清晰的层次结构使得 Json 成为理想的数据交换语言，易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率")]),s("。")]),n("p",null,[s("例如：聊天软件的业务，消息种类分为很多种，例如：登录消息、注册消息、聊天消息、加好友消息等等，"),n("strong",null,[l(a,{color:"green"},{default:o(()=>[s("需要进行具体消息种类的区分，还需要知道消息从谁来，要到哪去，以及消息内容是什么等字段")]),_:1})]),s("。而"),b,s("。")]),g,n("p",null,[n("strong",null,[l(a,{color:"red"},{default:o(()=>[s("Json语法")]),_:1}),s("：它是"),l(a,{color:"green"},{default:o(()=>[s("JavaScript 对象表示语法的子集")]),_:1}),s("，主要有以下特点：")])]),n("ol",null,[n("li",null,[n("p",null,[n("strong",null,[l(a,{color:"green"},{default:o(()=>[s("数据")]),_:1}),s("在"),h,s("对的"),l(a,{color:"green"},{default:o(()=>[s("中间")]),_:1}),s("；")])])]),n("li",null,[n("p",null,[n("strong",null,[s("数据由"),f,s(),l(a,{color:"green"},{default:o(()=>[s("分隔")]),_:1}),s("；")])])]),n("li",null,[n("p",null,[n("strong",null,[s("使用"),q,s(" 来"),l(a,{color:"green"},{default:o(()=>[s("转义")]),_:1}),s("字符；")])])]),n("li",null,[n("p",null,[n("strong",null,[_,s(" 保存"),l(a,{color:"green"},{default:o(()=>[s("对象")]),_:1}),s("；")])])]),n("li",null,[n("p",null,[n("strong",null,[E,s(" 保存"),l(a,{color:"green"},{default:o(()=>[s("数组")]),_:1}),s("，数组可以包含"),j,s("对象；")])])])]),x,n("ol",null,[k,n("li",null,[J,n("p",null,[z,s(" 保存的数组是"),S,s("。"),M,n("strong",null,[l(a,{color:"green"},{default:o(()=>[s("值(value)")]),_:1}),s("可以是"),l(a,{color:"green"},{default:o(()=>[s("双引号")]),_:1}),s("括起来的"),l(a,{color:"cornflowerblue"},{default:o(()=>[s("字符串、数值、true、false、 null、对象")]),_:1}),N,l(a,{color:"cornflowerblue"},{default:o(()=>[s("数组")]),_:1})]),s("，"),n("strong",null,[s("也可以是他们的"),l(a,{color:"cornflowerblue"},{default:o(()=>[s("嵌套类型")]),_:1})]),s("。")])])]),w,l(a,{color:"green"},{default:o(()=>[s("**使用前准备：需要提前下载好Json.hpp，使用时引入头文件即可。**")]),_:1}),V,n("p",null,[s("输出**"),l(a,{color:"red"},{default:o(()=>[s("string字符串")]),_:1}),s("，可以在网络中进行"),l(a,{color:"green"},{default:o(()=>[s("传输")]),_:1}),s("**：")]),L])}const X=e(m,[["render",O],["__file","Json简介及使用.html.vue"]]);export{X as default};
