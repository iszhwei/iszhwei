import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as c,c as i,d as s,e as n,f as l,w as e,a as o}from"./app-m9pC5KT-.js";const B="/assets/image-20240413175814411-oxpSPA3O.png",d={},y=o('<h1 id="剖析new与delete实现原理" tabindex="-1"><a class="header-anchor" href="#剖析new与delete实现原理" aria-hidden="true">#</a> 剖析new与delete实现原理</h1><p>[new/delete关键字 | 张威的编程学习笔记 (gitee.io)](https://iszhwei.gitee.io/ccpp/02 c__基础/new、delete.html)</p><h2 id="我们先来看一下-malloc与new、delete与free区别" tabindex="-1"><a class="header-anchor" href="#我们先来看一下-malloc与new、delete与free区别" aria-hidden="true">#</a> 我们先来看一下：malloc与new、delete与free区别</h2><ol><li>malloc与new的区别：</li></ol><p>①malloc<strong>按字节</strong>开辟内存的；new开辟内存时需要指定类型； ②malloc开辟内存<strong>返回的都是void *** ，new相当于运算符重载函数，返回值自动转为</strong>指定的类型的指针。** ③malloc<strong>只负责开辟内存</strong>空间，new不仅仅也有malloc功能，<strong>还可以进行数据的初始化</strong>。 ④malloc开辟内存<strong>失败返回nullptr</strong>指针；new<strong>抛出的是bad_alloc类型的异常</strong>。 ⑤malloc开辟<strong>单个元素内存与数组内存是一样的，都是给字节数</strong>；new开辟时对<strong>单个元素内存后面不需要[]，而数组需要[]并给上元素个数</strong>。</p><ol start="2"><li>free和delete的区别：</li></ol>',6),u=s("strong",null,"有两步，先调用析构，再释放；free只有一步",-1),F=o(`<h2 id="new与delete实现原理进行剖析" tabindex="-1"><a class="header-anchor" href="#new与delete实现原理进行剖析" aria-hidden="true">#</a> new与delete实现原理进行剖析</h2><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> p;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,2),v={href:"https://iszhwei.gitee.io/ccpp/00%20%E5%9F%BA%E7%A1%80%E5%BF%85%E5%A4%87/%E5%8F%8D%E6%B1%87%E7%BC%96%E5%B0%8F%E7%BB%93.html",target:"_blank",rel:"noopener noreferrer"},A=o(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">new </span><span style="color:#ABB2BF;">-&gt; </span><span style="color:#E06C75;">operator</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span></span>
<span class="line"><span style="color:#E5C07B;">delete </span><span style="color:#ABB2BF;">-&gt; </span><span style="color:#E06C75;">operator</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">delete</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>那么我们自己实现一下它：</p><h3 id="operator-new的实现" tabindex="-1"><a class="header-anchor" href="#operator-new的实现" aria-hidden="true">#</a> operator new的实现：</h3><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//new:先调用operator开辟内存空间，然后调用对象的构造函数</span></span>
<span class="line"><span style="color:#C678DD;">void*</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;"> new(</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">size</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">malloc</span><span style="color:#ABB2BF;">(size);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (p </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">throw</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bad_alloc</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;operator new addr:&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> p </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;">endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> p;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//operator new[]实现</span></span>
<span class="line"><span style="color:#C678DD;">void*</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;"> new[](</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">size</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">malloc</span><span style="color:#ABB2BF;">(size);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (p </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">throw</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bad_alloc</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;operator new[] addr:&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> p </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;">endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> p;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="operator-delete的实现" tabindex="-1"><a class="header-anchor" href="#operator-delete的实现" aria-hidden="true">#</a> operator delete的实现：</h3><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//delete p:调用p指向对象的析构函数，再调用operator delete释放内存空间</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;"> delete(</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">ptr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;operator delete addr:&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> ptr </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;">endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">free</span><span style="color:#ABB2BF;">(ptr);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//operator delete[]实现</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;"> delete[](</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">ptr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;operator delete[] addr:&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> ptr </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;">endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">free</span><span style="color:#ABB2BF;">(ptr);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="问题一-平常我们new与delete都是正常使用的-但是new与delete能混用吗-c-为什么区分单个元素和数组的内存分配和释放呢" tabindex="-1"><a class="header-anchor" href="#问题一-平常我们new与delete都是正常使用的-但是new与delete能混用吗-c-为什么区分单个元素和数组的内存分配和释放呢" aria-hidden="true">#</a> 问题一：平常我们new与delete都是正常使用的，但是new与delete能混用吗？C++为什么区分单个元素和数组的内存分配和释放呢？</h2><h3 id="情况1-int类型下将其混用" tabindex="-1"><a class="header-anchor" href="#情况1-int类型下将其混用" aria-hidden="true">#</a> 情况1：int类型下将其混用</h3><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;">[]p;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">q </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> q;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试一下：能够混用。对于整型来说，没有构造函数与析构函数，针对于int类型，<strong>new与delete功能只剩下malloc与free功能，可以将其混用</strong></p><h3 id="情况2-类类型下将其混用" tabindex="-1"><a class="header-anchor" href="#情况2-类类型下将其混用" aria-hidden="true">#</a> 情况2：类类型下将其混用</h3><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Test</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">):</span><span style="color:#61AFEF;">ptr</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">(data))</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Test()&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">~Test</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> ptr;</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;~Test()&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">ptr;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>先来看一下对单个元素正常使用：</li></ol><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">Test </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> p1;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>但是如果我们将单个元素与delete[]混用：</strong></li></ol><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">Test </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Test</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;">[]p1;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,16),D=o(`<ol start="3"><li>再对数组类型正常使用：</li></ol><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">Test </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Test</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;">[]p2;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>最后将数组与delete进行混用：</strong></li></ol><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">Test </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Test</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> p2;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,4),m=s("h3",{id:"分析",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#分析","aria-hidden":"true"},"#"),n(),s("strong",null,"分析")],-1),b=s("p",null,"正常情况下，每一个test对象有一个整型成员变量，我们这里分配了5个test对象。delete时先调用析构函数，this指针将正确的对象的地址传入析构函数中，加了[]表示有好几个对象，有一个数组其中每一个对象都要进行析构。但delete真正执行指令时，底层是malloc按字节开辟，并不知道是否开辟了5个test对象的数组，因此还要再多开辟一个4字节来存储对象的个数，假设它的地址是0x100；但是new完之后p2返回的地址是0x104地址，当我们执行delete[]时，会到4字节来取一下对象的个数，将知道了是5个并将这块内存平均分为5份，将其每一份对象起始地址传给相应的析构函数，正常析构，最后将0x100开始的4字节也释放。 而我们p2出错是给用户返回的存对象开始的起始地址，delete p2认为p2只是指向了一个对象，只将Test[0]对象析构，直接从0x104 free(p2)，但底层实际是从0x100开辟的，因此崩溃；而p1出错：p1只是单个元素，从0x104开始开辟内存，但是delete[]p1，里面并没有那么多元素，最后还释放了4个字节的存储对象个数的内存(即从0x100释放)因此崩溃。",-1),h=s("figure",null,[s("img",{src:B,alt:"image-20240413175814411",tabindex:"0",loading:"lazy"}),s("figcaption",null,"image-20240413175814411")],-1),C=s("p",null,[s("strong",null,[n("结论："),s("mark",null,"自定义的类类型，有析构函数，为了调用正确的析构函数，那么开辟对象数组时会多开辟4个字节记录对象的个数，不能混用。")])],-1),g={id:"问题二-c-中如何设计一个程序检查内训泄露问题",tabindex:"-1"},_=s("a",{class:"header-anchor",href:"#问题二-c-中如何设计一个程序检查内训泄露问题","aria-hidden":"true"},"#",-1),f=s("strong",null,[n("在全局中重写new与delete；new操作中用"),s("u",null,"映射表记录"),n("一下都有哪些内存被开辟过了；delete时候，将相应的内存资源用内存地址标识，再删除掉。如果整个系统运行完发现映射表中有一些内存还没有被释放则存在内存泄露。")],-1),w={id:"要求一个类只能创建栈对象",tabindex:"-1"},x=s("a",{class:"header-anchor",href:"#要求一个类只能创建栈对象","aria-hidden":"true"},"#",-1),E=o(`<p>意思是不能创建堆对象，栈上可以正常创建对象</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test0</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //思考：栈对象的创建需要哪些条件?是不是只要构造函数不为私有就ok？</span></span>
<span class="line"><span style="color:#ABB2BF;">    Student </span><span style="color:#61AFEF;">s1</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">101</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;John&quot;</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//ok</span></span>
<span class="line"><span style="color:#ABB2BF;">    Student </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pstu </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Student</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">101</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Mark&quot;</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//error</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要达到以上的效果，咱们只需要</p>`,3),k=s("li",null,[s("p",null,[s("strong",null,"构造函数不为私有")])],-1),q=s("strong",null,"将operator new放入Student类的private区域",-1),T=o(`<h2 id="要求一个类只能创建堆对象" tabindex="-1"><a class="header-anchor" href="#要求一个类只能创建堆对象" aria-hidden="true">#</a> 要求一个类只能创建堆对象</h2><p>创建出堆对象的同时，不能创建栈对象。</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test1</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    Student </span><span style="color:#61AFEF;">s1</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">101</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;John&quot;</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//error</span></span>
<span class="line"><span style="color:#ABB2BF;">    Student </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pstu </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Student</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">101</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Mark&quot;</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//ok</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),S=s("strong",null,"将Student类的构函数放入private区域。",-1),z=s("li",null,[s("p",null,[s("strong",null,"operator new不私有")])],-1);function N(V,I){const a=p("font"),t=p("ExternalLinkIcon");return c(),i("div",null,[y,s("p",null,[n("①free不管释放"),s("strong",null,[n("单个元素内存还是数组内存，只需要传入内存的"),l(a,{color:"green"},{default:e(()=>[n("起始地址")]),_:1}),n("即可")]),n("。 ②delete"),s("strong",null,[n("释放单个元素内存，不需要加中括号，但释放数据内存时需要加"),l(a,{color:"green"},{default:e(()=>[n("中括号")]),_:1})]),n("。 ③delete执行其实"),u,n("。")]),F,s("p",null,[n("将其转为"),s("a",v,[n("反汇编"),l(t)]),n("后：")]),s("p",null,[s("strong",null,[n("我们发现，"),l(a,{color:"red"},{default:e(()=>[n("new与delete其本质")]),_:1}),n("也是"),l(a,{color:"green"},{default:e(()=>[n("函数的调用")]),_:1}),n("。")])]),A,s("p",null,[n("测试结果："),s("strong",null,[l(a,{color:"red"},{default:e(()=>[n("程序崩溃")]),_:1})]),n("。new与delete不能再混用了。")]),D,s("p",null,[n("测试结果："),s("strong",null,[l(a,{color:"red"},{default:e(()=>[n("程序崩溃。")]),_:1})])]),m,b,h,C,s("h2",g,[_,n(" 问题二：C++中如何设计一个程序"),l(a,{color:"cornflowerblue"},{default:e(()=>[n("检查内训泄露")]),_:1}),n("问题？")]),s("p",null,[s("strong",null,[n("核心是用new与delete运算符重载接管整个应用的内存管理，对"),l(a,{color:"red"},{default:e(()=>[n("内存开辟释放都要记录")]),_:1})]),n("。 检查内存泄露，new操作没有对应的delete，"),l(a,{color:"green"},{default:e(()=>[f]),_:1})]),s("h2",w,[x,n(" 要求一个类"),l(a,{color:"red"},{default:e(()=>[n("只能创建栈对象")]),_:1})]),E,s("ol",null,[k,s("li",null,[s("p",null,[s("mark",null,[l(a,{color:"green"},{default:e(()=>[q]),_:1})])])])]),T,s("ol",null,[s("li",null,[s("p",null,[s("mark",null,[l(a,{color:"green"},{default:e(()=>[S]),_:1})])])]),z])])}const M=r(d,[["render",N],["__file","剖析new和delete实习原理.html.vue"]]);export{M as default};
