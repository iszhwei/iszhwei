import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as a,o as p,c as e,d as s,e as o,f as c,a as i}from"./app-rY1SOIco.js";const t={},B=i(`<h1 id="最大空闲时间回收连接扫描线程的实现" tabindex="-1"><a class="header-anchor" href="#最大空闲时间回收连接扫描线程的实现" aria-hidden="true">#</a> 最大空闲时间回收连接扫描线程的实现</h1><p>给对象添加一个属性-记录时间</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 实现MySQL数据库的操作</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#ifndef</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">_CONNECTION_H</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">_CONNECTION_H</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;string&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;mysql/mysql.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;ctime&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::string;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Connection</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 刷新一下连接的起始的空闲时间点</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">refreshAliveTime</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">        _aliveTime </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">clock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 返回存活的时间</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">clock_t</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getAliveTime</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">clock</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> _aliveTime;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">    MYSQL</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> _conn;</span><span style="color:#7F848E;font-style:italic;">    //表示和MySQL的一条连接</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">clock_t</span><span style="color:#ABB2BF;"> _aliveTime;</span><span style="color:#7F848E;font-style:italic;"> // 记录进入空闲状态后的起始存活时间</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#endif</span><span style="color:#7F848E;font-style:italic;">  // _CONNECTION_H</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>空闲时间-也就是进入队列了</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#ifndef</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">_CONNECTIONPOOL_H</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">_CONNECTIONPOOL_H</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;string&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;queue&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;mutex&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;atomic&gt;</span><span style="color:#ABB2BF;">   </span><span style="color:#7F848E;font-style:italic;">//atomic_int  原子类型</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;memory&gt;</span><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">//shared_ptr</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;thread&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;condition_variable&gt;</span><span style="color:#ABB2BF;">	</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;functional&gt;</span><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">//bind</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;connection.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::string;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::queue;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::mutex;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::thread;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::atomic_int;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::shared_ptr;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::bind;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::condition_variable;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::unique_lock;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ConnectionPool</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 获取连接池对象实例</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ConnectionPool</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getConnectionPool</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 给外部提供接口，从连接池中获取一个可用的空闲连接</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">shared_ptr</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Connection</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#61AFEF;">getConnection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">ConnectionPool</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">~ConnectionPool</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 运行在独立的线程中，专门负责生产新连接</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//之所以写成成员函数而不是全局函数，是因为可以更好访问成员变量</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">produceConnectionTask</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 扫描超过maxIdleTime时间的空闲连接，进行对于的连接回收</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">scannerConnectionTask</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">	string _ip;</span><span style="color:#7F848E;font-style:italic;"> // mysql的ip地址</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">unsigned</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">short</span><span style="color:#ABB2BF;"> _port;</span><span style="color:#7F848E;font-style:italic;"> // mysql的端口号 3306</span></span>
<span class="line"><span style="color:#ABB2BF;">	string _username;</span><span style="color:#7F848E;font-style:italic;"> // mysql登录用户名</span></span>
<span class="line"><span style="color:#ABB2BF;">	string _password;</span><span style="color:#7F848E;font-style:italic;"> // mysql登录密码</span></span>
<span class="line"><span style="color:#ABB2BF;">	string _dbname;</span><span style="color:#7F848E;font-style:italic;"> // 连接的数据库名称</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> _initSize;</span><span style="color:#7F848E;font-style:italic;"> // 连接池的初始连接量</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> _maxSize;</span><span style="color:#7F848E;font-style:italic;"> // 连接池的最大连接量</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> _maxIdleTime;</span><span style="color:#7F848E;font-style:italic;"> // 连接池最大空闲时间</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> _connectionTimeout;</span><span style="color:#7F848E;font-style:italic;"> // 连接池获取连接的超时时间</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    queue</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">Connection</span><span style="color:#56B6C2;">*</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> _connectionQue;</span><span style="color:#7F848E;font-style:italic;">  // 存储mysql连接的队列</span></span>
<span class="line"><span style="color:#ABB2BF;">    mutex _queueMutex;</span><span style="color:#7F848E;font-style:italic;">  // 维护连接队列的线程安全互斥锁</span></span>
<span class="line"><span style="color:#ABB2BF;">    atomic_int _connectionCnt;</span><span style="color:#7F848E;font-style:italic;"> // 记录连接所创建的connection连接的总数量 </span></span>
<span class="line"><span style="color:#ABB2BF;">	condition_variable cond;</span><span style="color:#7F848E;font-style:italic;">	// 设置条件变量，用于连接生产线程和连接消费线程的通信</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#endif</span><span style="color:#7F848E;font-style:italic;"> //_CONNECTIONPOOL_H</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加入队列的连接需要刷新时间</p><ul><li>初始化时创建_initSize个连接</li><li>生产者创建连接</li><li>智能指针析构函数放回队列</li></ul><p>线程处理函数则定时检查队头元素（FIFO，最先加入队列的元素）是否超时</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;connectionPool.h&quot;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;public.h&quot;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::cout;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">ConnectionPool</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">ConnectionPool</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">loadConfigFile</span><span style="color:#ABB2BF;">()) {</span><span style="color:#7F848E;font-style:italic;"> // 配置文件加载失败</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 创建初始的数量连接</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 这一块是在连接池启动的时候做的，不用考虑线程安全</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; i </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> _initSize; </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">i) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        Connection </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">conn </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Connection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">conn</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">connection</span><span style="color:#ABB2BF;">(_ip, _port, _username, _password, _dbname);</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">conn</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">refreshAliveTime</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;"> // 刷新一下开始空闲的起始时间</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">_connectionQue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(conn);</span></span>
<span class="line"><span style="color:#ABB2BF;">        _connectionCnt</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 启动一个新的线程，作为连接的生产者 linux thread =&gt; pthread_create</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 因为本身还是c接口，所以线程处理函数void* (*)(void*)类型，需要使用bind</span></span>
<span class="line"><span style="color:#ABB2BF;">    thread </span><span style="color:#61AFEF;">produce</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">ConnectionPool::produceConnectionTask, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">));</span><span style="color:#7F848E;font-style:italic;"> // 线程对象</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">produce</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">detach</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;">                                                   // 设置成分离线程</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 启动一个新的定时线程，扫描超过maxIdleTime时间的空闲连接，进行对于的连接回收</span></span>
<span class="line"><span style="color:#ABB2BF;">    thread </span><span style="color:#61AFEF;">scanner</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">ConnectionPool::scannerConnectionTask, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">scanner</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">detach</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ConnectionPool</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">produceConnectionTask</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        unique_lock</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">mutex</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">(_queueMutex);</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">_connectionQue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">()) {</span><span style="color:#7F848E;font-style:italic;"> // 队列不为空</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">cond</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">(lock);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (_connectionCnt </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> _maxSize) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            Connection </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">conn </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Connection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">conn</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">connection</span><span style="color:#ABB2BF;">(_ip, _port, _username, _password, _dbname);</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">conn</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">refreshAliveTime</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;"> // 刷新一下开始空闲的起始时间</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">_connectionQue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(conn);</span></span>
<span class="line"><span style="color:#ABB2BF;">            _connectionCnt</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 通知消费者线程，可以消费连接了</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">cond</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify_all</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 扫描超过maxIdleTime时间的空闲连接，进行对于的连接回收</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ConnectionPool</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">scannerConnectionTask</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 通过sleep模拟定时效果</span></span>
<span class="line"><span style="color:#ABB2BF;">        std::</span><span style="color:#E5C07B;">this_thread</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">sleep_for</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">chrono</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">seconds</span><span style="color:#ABB2BF;">(_maxIdleTime));</span></span>
<span class="line"><span style="color:#ABB2BF;">       </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">       // 扫描整个队列，释放多余的连接</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (_connectionCnt </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> _initSize) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            Connection </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_connectionQue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">front</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">getAliveTime</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> _maxIdleTime) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E5C07B;">_connectionQue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> p;</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#C678DD;">--</span><span style="color:#ABB2BF;">_connectionCnt;</span><span style="color:#7F848E;font-style:italic;">   // 调用~Connection()释放连接</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#C678DD;">break</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">  // 队头的连接没有超过_maxIdleTime，其它连接肯定没有</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 消费者线程函数，从队列中获取连接</span></span>
<span class="line"><span style="color:#E5C07B;">shared_ptr</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Connection</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E5C07B;">ConnectionPool</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">getConnection</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    unique_lock</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">mutex</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">(_queueMutex);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">_connectionQue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (std::cv_status::timeout </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">cond</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wait_for</span><span style="color:#ABB2BF;">(lock, std::</span><span style="color:#E5C07B;">chrono</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">milliseconds</span><span style="color:#ABB2BF;">(_connectionTimeout))) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">_connectionQue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#61AFEF;">LOG</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;获取空闲连接超时了...获取连接失败!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    shared_ptr智能指针析构时，会把connection资源直接delete掉，相当于</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    调用connection的析构函数，connection就被close掉了。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    这里需要自定义shared_ptr的释放资源的方式，把connection直接归还到queue当中</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    */</span></span>
<span class="line"><span style="color:#ABB2BF;">    shared_ptr</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">Connection</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sp</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">_connectionQue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">front</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">                              [</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">](</span><span style="color:#E5C07B;">Connection</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">pconn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                                  // 这里是在服务器应用线程中调用的，所以一定要考虑队列的线程安全操作</span></span>
<span class="line"><span style="color:#ABB2BF;">                                  </span><span style="color:#E5C07B;">unique_lock</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">mutex</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">_queueMutex</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                                  </span><span style="color:#E5C07B;">pconn</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">refreshAliveTime</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                                  </span><span style="color:#E5C07B;">_connectionQue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(pconn);</span></span>
<span class="line"><span style="color:#ABB2BF;">                              });</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">_connectionQue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">_connectionQue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">cond</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify_all</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> sp;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),r={href:"https://blog.csdn.net/jinking01/article/details/108619470",target:"_blank",rel:"noopener noreferrer"};function y(d,F){const n=a("ExternalLinkIcon");return p(),e("div",null,[B,s("p",null,[s("a",r,[o("C++ 多线程detach()操作的坑以及传参_c++ thread detach-CSDN博客"),c(n)])])])}const u=l(t,[["render",y],["__file","最大空闲时间回收连接扫描线程的实现.html.vue"]]);export{u as default};
