import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as r,c as t,d as n,e as s,f as l,w as e,a as o}from"./app-2pke9_a8.js";const c="/assets/c1ec228992c54b2a963fb44445ca4166-_siTDHaC.png",d="/assets/f4b94062dbb84c6dabe6d170d4a1dd69-36kIKyrZ.png",B="/assets/e75b79f8d00f4a2fa579e465cc481929-AHXpQR63.png",u="/assets/c7ec0af394484c3fb8413d993b89d569-po2_Yqgg.png",y="/assets/9124f9fa261d4372af1e8ebbf33b5127-aPIiIavk.png",g="/assets/fbe38f83c3ee4a7a9c6c4c89f7864916-lMD8ligu.png",h="/assets/fc4c86ce2526421d8b7deb3ac21524a9-eSsXK7Pl.png",f="/assets/64ada9587836413a8ead50549ad74bc1-0kS08xRJ.png",b="/assets/f5c1aab4e695495cb2ec2bdc27256219-1BBXaN1R.png",v="/assets/33811e3a1b8e423a85b4a754263c787d-FG2UgKCp.png",A="/assets/cb87f74b48e9476c9bdab41c27f437f8-FHAq3QCa.png",_="/assets/9ade08d9ead5441380499eb9dc16cc32--xUE4W5J.png",m="/assets/63e311055be9494b9e208c8211b2dfd7-1jBkpnpd.png",D="/assets/049c236b109f49df85fe26fee0b874a3-9TyZB4EM.png",F="/assets/9ea17e63fe7140f59c9cefa4ec51d8bf-iydjPdCb.png",k="/assets/f0a5e4e7b7974d8c9ad2ea30442cfbf8-VR1cdOV8.png",x="/assets/f444e93322324fb99c0d9368f21863a9-mXSZR9S4.png",C="/assets/cc3bf1ff2df8474391cbcaf66a7d29fa-7vmK6TsN.png",q="/assets/c5ea9113c76749a0a0c1b91032a55878-99FnLyr5.png",z="/assets/6754bdb3c7f742cb8dfd814c127b4fbe-sUXb_GPO.png",E="/assets/9408614c5072438bacceb0b0f3a49bb7-0Xs2ImRP.png",S="/assets/30166aafca9e43179a8ecb4113a16c52-bFQJ8mJ5.png",T="/assets/ae857ce6150e4475bb78fe126c06cb63-J1eRWe1A.png",H="/assets/bb04e88c1f074b799d98706643f1b25a-dt7Nacbx.png",N="/assets/ccd78077b39a4731bf6a3007c6652015-BGeDYcUb.png",M="/assets/aaf2c7791bd5450398472a082a107844-vY995HVE.png",G="/assets/1911e32d9f54458c9d6ec35746827f01-B2d2ZB-N.png",R="/assets/3f7653d13731480eb34fe1c9df4792af-QKdNCvjj.png",V="/assets/a0075985c2334f8d93736e8cfe066cc5-ZDtnHiSd.png",j="/assets/c8215d7c945145d38ac3e24824382740-kT8qHrND.png",I="/assets/5d7190ef29d34d39bdd9bb3bce1112dc-hSKD-6fa.png",K={},L=o('<h1 id="string和hash数据类型" tabindex="-1"><a class="header-anchor" href="#string和hash数据类型" aria-hidden="true">#</a> string和hash数据类型</h1><h2 id="一、redis-数据存储格式" tabindex="-1"><a class="header-anchor" href="#一、redis-数据存储格式" aria-hidden="true">#</a> 一、redis 数据存储格式</h2><p>redis<u>自身是一个Map，其中所有的数据都是采用<strong>key:value</strong>的形式存储</u>，<strong>数据类型指的是存储的value的类型，key部分永远都是字符串</strong></p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="常用数据类型" tabindex="-1"><a class="header-anchor" href="#常用数据类型" aria-hidden="true">#</a> 常用数据类型</h3>',5),O=n("thead",null,[n("tr",null,[n("th",null,"类型"),n("th",null,"简介"),n("th",null,"特性"),n("th",null,"场景")])],-1),X=n("td",null,"String(字符串)",-1),P=n("td",null,"二进制安全",-1),J=n("strong",null,"任何数据",-1),Q=n("td",null,"---",-1),U=n("td",null,"Hash(字典)",-1),Y=n("td",null,"键值对集合，即编程语言中的Map类型",-1),Z=n("td",null,[s("存储、读取、修改"),n("strong",null,"用户属性")],-1),w=n("tr",null,[n("td",null,"List(列表)"),n("td",null,"链表(双向链表)"),n("td",null,"增删快，提供了操作某一段元素的API"),n("td",null,[s("1、最新消息"),n("strong",null,"排行"),s("等功能(比如朋友圈的"),n("strong",null,"时间线"),s(") 2、"),n("strong",null,"消息队列")])],-1),W=n("td",null,"Set(集合)",-1),$=n("td",null,[s("哈希表实现，元素"),n("strong",null,"不重复")],-1),ss=n("strong",null,"共同",-1),ns=n("strong",null,"唯一性",-1),as=n("u",null,[s("好友推荐时,根据tag求"),n("strong",null,"交集"),s("，大于某个阈值就可以推荐")],-1),ls=n("tr",null,[n("td",null,"Sorted Set(zset，有序集合)"),n("td",null,[s("将Set中的元素增加"),n("strong",null,"一个权重参数score"),s("，元素按score"),n("strong",null,"有序排列"),s("；元素"),n("strong",null,"不重复")]),n("td",null,"数据插入集合时，已经进行天然排序"),n("td",null,[s("1、"),n("strong",null,"排行榜"),s(" 2、带"),n("strong",null,"权重的消息队列"),s(" l")])],-1),es=n("h2",{id:"二、string",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二、string","aria-hidden":"true"},"#"),s(" 二、string")],-1),os=n("strong",null,"最常用",-1),ps=n("u",null,"一个存储空间保存一个数据",-1),is=o('<figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-string基本操作" tabindex="-1"><a class="header-anchor" href="#_1-string基本操作" aria-hidden="true">#</a> 1. string基本操作</h3><p><strong>添加/修改多个数据</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">mset key1 valueq key2 value2 …</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取多个数据</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">mget key1 key2 …</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+B+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>获取数据字符个数（value的长度）</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">strlen </span><span style="color:#C678DD;">key</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>追加信息到原始信息后部（如果原始信息存在就追加，否则新建）</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">append</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">value</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>单数据操作和多数据操作有什么区别？</strong></p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',14),rs=o(`<h3 id="_2-string扩展操作" tabindex="-1"><a class="header-anchor" href="#_2-string扩展操作" aria-hidden="true">#</a> 2. string扩展操作</h3><h4 id="业务场景一" tabindex="-1"><a class="header-anchor" href="#业务场景一" aria-hidden="true">#</a> 业务场景一</h4><p>大型企业级应用中，<strong>分表操作是基本操作，使用多张表存储同类型数据，但是对应的主键id必须保证统一性，不能重复</strong>。Oracle数据库具有sequence设定，可以解决该问题，但是MySQL数据库并不具有类似的机制，那么如何解决？</p><p><strong>redis解决方案：</strong></p><p>设置数值数据增加指定范围的值</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">incr </span><span style="color:#C678DD;">key</span></span>
<span class="line"><span style="color:#ABB2BF;">incrby </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> 数值（正/负）</span></span>
<span class="line"><span style="color:#ABB2BF;">incrbyfloat </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> 数值（正/负）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置数值数据减少指定范围的值</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">decr </span><span style="color:#C678DD;">key</span></span>
<span class="line"><span style="color:#ABB2BF;">decrby </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> 数值（正/负）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>String作为数值操作</strong></p>',11),ts=n("li",null,[s("string在redis内部存储"),n("u",null,[s("默认就是一个"),n("strong",null,"字符串"),s("，当遇到增减类操作"),n("code",null,"incr,decr"),s("时会转成"),n("strong",null,"数值型"),s("进行计算")])],-1),cs=n("strong",null,"redis所有的操作都是原子性的",-1),ds=o('<p>Tips1：</p><ul><li>redis的单线程、原子性等用于控制数据库表主键id，为数据库表主键提供生成策略，保障数据库表的主键唯一性</li><li>此方案适用于所有数据库，且支持数据库集群</li></ul><h4 id="业务场景二" tabindex="-1"><a class="header-anchor" href="#业务场景二" aria-hidden="true">#</a> 业务场景二</h4><ol><li>“最强女生”启动海选<strong>投票</strong>，只能通过微信投票，每个微信号<u>每 4 小时只能投1票</u>。</li><li>电商商家开启热门商品推荐，热门商品不能一直处于<strong>热门期</strong>，每种商品热门期维持3天，<u>3天后自动取消热门</u></li><li>新闻网站会出现热点新闻，热点新闻最大的特征是<strong>时效性</strong>，<u>如何自动控制热点新闻的时效性</u>。</li></ol>',4),Bs=n("strong",null,"都是信息在一段时间之内有效",-1),us=n("u",null,"比如我们要实现4小时有效的数据，我们可以给数据设置有效时间为4小时，时间过了就删除该数据，用户可以继续投票",-1),ys=o(`<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">setex </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> 秒  数值               # 秒</span></span>
<span class="line"><span style="color:#ABB2BF;">psetex </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> 毫秒  数值            # 毫秒</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Tips 2:</p><ul><li>redis 控制数据的生命周期，通过数据是否失效控制业务行为，适用于所有具有时效性限定控制的操作</li></ul><p><strong>业务场景三</strong></p><p>主页<strong>高频访问信息显示控制</strong>，例如新浪微博大V主页<u>显示粉丝数与微博数量需要<strong>实时刷新</strong></u></p><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>redis中可以以两种方式存储这些数据</p><figure><img src="'+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',10),gs=o('<p>Tips 3：</p><ul><li>redis应用于各种结构型和非结构型高热度数据访问加速</li></ul><h3 id="_3-数据库中热点数据key命名规范" tabindex="-1"><a class="header-anchor" href="#_3-数据库中热点数据key命名规范" aria-hidden="true">#</a> 3. 数据库中热点数据key命名规范</h3><figure><img src="'+_+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-string类型注意事项" tabindex="-1"><a class="header-anchor" href="#_4-string类型注意事项" aria-hidden="true">#</a> 4. string类型注意事项</h3><p>数据操作不成功的反馈与数据正常操作之间的差异</p><ul><li>表示运行结果是否成功：（integer)0–&gt;false 失败、（integer)1–&gt;true 成功</li><li>表示运行结果值：（integer)3、（integer)1</li><li>数据未获取到：(nil）等同于null</li></ul><p>数据最大存储量：512MB 数值计算最大范围：java中的long的最大值，9223372036854775807</p><h3 id="常用命令小结" tabindex="-1"><a class="header-anchor" href="#常用命令小结" aria-hidden="true">#</a> 常用命令小结</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">SET</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">value</span><span style="color:#ABB2BF;">  #设定指定key的值</span></span>
<span class="line"><span style="color:#C678DD;">GET</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> #获取指定key的值</span></span>
<span class="line"><span style="color:#ABB2BF;">GETRANGE </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">start</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">end</span><span style="color:#ABB2BF;"> #返回字符串的子串</span></span>
<span class="line"><span style="color:#ABB2BF;">SETRANGE </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> offset </span><span style="color:#C678DD;">value</span><span style="color:#ABB2BF;"> #用value覆盖字符串的值，从offset开始</span></span>
<span class="line"><span style="color:#ABB2BF;">MGET/MSET key1 </span><span style="color:#E06C75;">[value1]</span><span style="color:#ABB2BF;"> key2 </span><span style="color:#E06C75;">[value2]</span><span style="color:#ABB2BF;"> #获取设置多个给定的key值</span></span>
<span class="line"><span style="color:#ABB2BF;">GETSET </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">value</span><span style="color:#ABB2BF;"> #将给定key的值设为value ，并返回key的旧值(old </span><span style="color:#C678DD;">value</span><span style="color:#ABB2BF;">)。</span></span>
<span class="line"><span style="color:#ABB2BF;">SETEX 将值 </span><span style="color:#C678DD;">value</span><span style="color:#ABB2BF;"> #关联到 </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;">,并设置 </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> 的过期时间为 </span><span style="color:#C678DD;">seconds</span><span style="color:#ABB2BF;"> (以秒为单位)。</span></span>
<span class="line"><span style="color:#ABB2BF;">INCR/INCRBY </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">[num]</span><span style="color:#ABB2BF;">  #对value值加1/加num，value必须是数字</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、hash" tabindex="-1"><a class="header-anchor" href="#三、hash" aria-hidden="true">#</a> 三、hash</h2><figure><img src="`+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们用这种json的方式存储数据，查看数据很方便，修改数据较麻烦</p><figure><img src="'+D+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>第二种方式修改起来很方便，查看又不方便了</p><figure><img src="'+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',16),hs=n("u",null,[s("一个key对应一个hash类型的数据，我们把"),n("strong",null,"value理解为一个字典")],-1),fs=o(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">map</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">key, map</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">key1, value</span><span style="color:#C678DD;">&gt;&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-hash类型介绍" tabindex="-1"><a class="header-anchor" href="#_1-hash类型介绍" aria-hidden="true">#</a> 1. hash类型介绍</h3><ul><li>新的存储需求：对一系列存储的数据进行编组，方便管理，典型应用存储对象信息</li><li>需要的内存结构：一个存储空间保存多少个键值对数据</li><li>hash类型：底层使用哈希表结构实现数据存储</li></ul><figure><img src="`+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-hash类型基本操作" tabindex="-1"><a class="header-anchor" href="#_2-hash类型基本操作" aria-hidden="true">#</a> 2. hash类型基本操作</h3><p>添加/修改数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">hset </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> field </span><span style="color:#C678DD;">value</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+x+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>获取数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">hget </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> field</span></span>
<span class="line"><span style="color:#ABB2BF;">hgetall </span><span style="color:#C678DD;">key</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+C+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>删除数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">hdel </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> field1 </span><span style="color:#E06C75;">[field2]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+q+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>添加/修改多个数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">hmset </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> field1 value1 field2 value2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取多个数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">hmget </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> field1 field2 …</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+z+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>获取哈希表中<strong>field的数量</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">hlen </span><span style="color:#C678DD;">key</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+E+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>获取哈希表中是否存在指定的字段</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">hexists </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> field</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+S+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-hash类型扩展操作" tabindex="-1"><a class="header-anchor" href="#_3-hash类型扩展操作" aria-hidden="true">#</a> 3. hash类型扩展操作</h3><p>获取哈希表中所有的字段名和字段值</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">hkeys </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;">     # 获取key对应的hash数据类型中所有field</span></span>
<span class="line"><span style="color:#ABB2BF;">hvals </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;">     # 获取key对应的hash数据类型中所有value</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+T+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>设置指定字段的数值数据增加指定范围的值</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">hincrby </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> field increment</span></span>
<span class="line"><span style="color:#ABB2BF;">hincrbyfloat </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> field increment</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+H+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-hash类型数据操作的注意事项" tabindex="-1"><a class="header-anchor" href="#_4-hash类型数据操作的注意事项" aria-hidden="true">#</a> 4. hash类型数据操作的注意事项</h3>',33),bs=n("sup",null,"32",-1),vs=o('<h3 id="_5-hash类型实际应用场景" tabindex="-1"><a class="header-anchor" href="#_5-hash类型实际应用场景" aria-hidden="true">#</a> 5. hash类型实际应用场景</h3><p><strong>购物车场景一</strong></p><figure><img src="'+N+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>电商购物车中，将用户的id作为key；商品id作为field；数量作为value；hget可以获取value；hincrby增加value；hset设置value；删除商品就是删除一个field，可以使用hdel；全选所有商品，即获取所有的field，可以使用hgetall；商品数量即field的个数，可以使用hlen</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#D19A66;">127</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">6379</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> hmset user1 g01 </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;"> g02 </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">          # user1在购物车添加100个g01商品，200个g02商品</span></span>
<span class="line"><span style="color:#ABB2BF;">OK</span></span>
<span class="line"><span style="color:#D19A66;">127</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">6379</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> hmset user2 g02 </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> g04 </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;"> g05 </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">      # user2在购物车添加1个g02商品，7个g04商品，100个g05商品</span></span>
<span class="line"><span style="color:#ABB2BF;">OK</span></span>
<span class="line"><span style="color:#D19A66;">127</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">6379</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> hset user1 g03 </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">                     # user1在购物车中添加5个g03</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">integer</span><span style="color:#ABB2BF;">) </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#D19A66;">127</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">6379</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> hgetall user1                        # 查看user1的购物车</span></span>
<span class="line"><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">&quot;g01&quot;</span></span>
<span class="line"><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">&quot;100&quot;</span></span>
<span class="line"><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">&quot;g02&quot;</span></span>
<span class="line"><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">&quot;200&quot;</span></span>
<span class="line"><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">&quot;g03&quot;</span></span>
<span class="line"><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">&quot;5&quot;</span></span>
<span class="line"><span style="color:#D19A66;">127</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">6379</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> hdel user1 g01                      # user1删除购物车的g01商品</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">integer</span><span style="color:#ABB2BF;">) </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#D19A66;">127</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">6379</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> hgetall user1                       # 查看user1的购物车</span></span>
<span class="line"><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">&quot;g02&quot;</span></span>
<span class="line"><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">&quot;200&quot;</span></span>
<span class="line"><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">&quot;g03&quot;</span></span>
<span class="line"><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">&quot;5&quot;</span></span>
<span class="line"><span style="color:#D19A66;">127</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">6379</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> hincrby user1 g03 </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">                 # user1在购物车增加1个g03商品</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">integer</span><span style="color:#ABB2BF;">) </span><span style="color:#D19A66;">6</span></span>
<span class="line"><span style="color:#D19A66;">127</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">6379</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> hgetall user1                       # 查看user1的购物车</span></span>
<span class="line"><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">&quot;g02&quot;</span></span>
<span class="line"><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">&quot;200&quot;</span></span>
<span class="line"><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">&quot;g03&quot;</span></span>
<span class="line"><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">&quot;6&quot;</span></span>
<span class="line"><span style="color:#D19A66;">127</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">6379</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>当前设计是否加速了购物车的呈现？</strong></p>`,6),As=n("figure",null,[n("img",{src:M,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),_s=n("figure",null,[n("img",{src:G,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),ms=n("strong",null,"重复存储",-1),Ds=n("figure",null,[n("img",{src:R,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),Fs=n("p",null,[n("u",null,[s("那每次买东西都添加商品信息，这不也会重复吗？我们使用hsetnx，已经添加过的商品（field）就不会再添加，相当于"),n("code",null,"hexists + hset")])],-1),ks=n("strong",null,"hsetnx",-1),xs=n("strong",null,"hset",-1),Cs=o(`<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">hsetnx </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> field </span><span style="color:#C678DD;">value</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+V+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>销售场景二</strong></p><p>双11活动日，销售手机充值卡的商家对移动、联通、电信的30元、50元、100元商品推出抢购活动，每种商品抢购上限1000张</p><figure><img src="'+j+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>以商家id作为key、将参与抢购的商品id作为field、将参与抢购的商品数量作为对应的value、抢购时使用降值的方式控制产品数量</p><figure><img src="'+I+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',7),qs=n("strong",null,"string存储对象（json）与hash存储对象的区别",-1),zs=o(`<h3 id="常用命令小结-1" tabindex="-1"><a class="header-anchor" href="#常用命令小结-1" aria-hidden="true">#</a> 常用命令小结</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">HSET </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> field </span><span style="color:#C678DD;">value</span><span style="color:#ABB2BF;"> #将哈希表 </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> 中的字段 field 的值设为 </span><span style="color:#C678DD;">value</span></span>
<span class="line"><span style="color:#ABB2BF;">HMSET </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> field1 value1 </span><span style="color:#E06C75;">[field2 value2 …]</span><span style="color:#ABB2BF;"> #同时将多个 field-</span><span style="color:#C678DD;">value</span><span style="color:#ABB2BF;"> (域-值)对设置到哈希表 </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> 中</span></span>
<span class="line"><span style="color:#ABB2BF;">HGET </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> field  / HMGET </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> field1 </span><span style="color:#E06C75;">[field2]</span><span style="color:#ABB2BF;">  #获取给定字段的值</span></span>
<span class="line"><span style="color:#ABB2BF;">HGETALL </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> 获取在哈希表中指定 </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> 的所有字段和值</span></span>
<span class="line"><span style="color:#ABB2BF;">HKEYS </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> #获取所有哈希表中的字段</span></span>
<span class="line"><span style="color:#ABB2BF;">HVALS </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> #获取哈希表中所有值</span></span>
<span class="line"><span style="color:#ABB2BF;">HLEN </span><span style="color:#C678DD;">key</span><span style="color:#ABB2BF;"> #获取哈希表中字段的数量</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function Es(Ss,Ts){const a=i("font");return r(),t("div",null,[L,n("table",null,[O,n("tbody",null,[n("tr",null,[X,P,n("td",null,[s("可以包含"),J,s("，比如jpg"),l(a,{color:"green"},{default:e(()=>[s("图片")]),_:1}),s("或者"),l(a,{color:"green"},{default:e(()=>[s("序列化的对象")]),_:1}),s("，一个键"),l(a,{color:"red"},{default:e(()=>[s("最大能存储512M")]),_:1})]),Q]),n("tr",null,[U,Y,n("td",null,[s("适合"),l(a,{color:"green"},{default:e(()=>[s("存储对象")]),_:1}),s("，并且"),l(a,{color:"green"},{default:e(()=>[s("可以")]),_:1}),s("像数据库中update一个属性一样"),l(a,{color:"green"},{default:e(()=>[s("只修改某一项属性值")]),_:1}),s("("),l(a,{color:"red"},{default:e(()=>[s("Memcached中需要取出整个字符串反序列化成对象修改完再序列化存回去")]),_:1}),s(")")]),Z]),w,n("tr",null,[W,$,n("td",null,[s("1、添加、删除、查找的"),l(a,{color:"green"},{default:e(()=>[s("复杂度都是O(1) ")]),_:1}),s(" 2、为集合"),l(a,{color:"green"},{default:e(()=>[s("提供了求交集、并集、差集等操作 ")]),_:1})]),n("td",null,[s("1、"),ss,s("好友 2、利用"),ns,s("，统计访问网站的"),l(a,{color:"green"},{default:e(()=>[s("所有独立ip")]),_:1}),s(" 3、"),as])]),ls])]),es,n("p",null,[s("存储的数据：单个数据，最简单数据存储类型，也是"),os,s("的数据存储类型 存储数据的格式："),ps,s(" 存储内容：通常使用字符串，"),l(a,{color:"blue"},{default:e(()=>[s("如果字符串以整数的形式展示，可以作为数字操作使用")]),_:1})]),is,n("p",null,[s("操作同样数据量的情况下，单指令发送和接收次数多。"),l(a,{color:"red"},{default:e(()=>[s("我们使用的时候需要权衡，如果我们一次性发送的数据太少，就会导致频繁的收发，效率极低。如果我们一次性发过多的数据，由于redis服务器是单线程模型，请求无法得到即使的处理")]),_:1}),s("。最好的情况是，"),l(a,{color:"green"},{default:e(()=>[s("大量数据切分成多分小数据，让redis服务器能及时处理，也能保证收发次数不会过多")]),_:1})]),rs,n("ul",null,[ts,n("li",null,[cs,s("，采用"),l(a,{color:"green"},{default:e(()=>[s("单线程")]),_:1}),s("处理所有业务，命令是一个一个执行的，因此"),l(a,{color:"green"},{default:e(()=>[s("无需考虑并发带来的数据影响")]),_:1}),s("。")]),n("li",null,[s("注意：按数值进行操作的数据，如果原始数据"),l(a,{color:"red"},{default:e(()=>[s("不能转成数值")]),_:1}),s("，或"),l(a,{color:"red"},{default:e(()=>[s("超过了redis数值上限范围")]),_:1}),s("，将会"),l(a,{color:"red"},{default:e(()=>[s("报错")]),_:1}),s("。9223372036854775807 (java中long型数据最大值，Long.MAX_VALUE)")])]),ds,n("p",null,[s("以上三点场景说的"),l(a,{color:"red"},{default:e(()=>[Bs]),_:1}),s(" ，"),us]),ys,n("p",null,[s("第一种方式"),l(a,{color:"green"},{default:e(()=>[s("修改value较简单")]),_:1}),s("，但是"),l(a,{color:"red"},{default:e(()=>[s("需要存储多条数据，查看不方便")]),_:1}),s("；第二种方式"),l(a,{color:"green"},{default:e(()=>[s("查看方便")]),_:1}),s("，但是"),l(a,{color:"red"},{default:e(()=>[s("修改较麻烦")]),_:1})]),gs,n("p",null,[s("我们使用第三种hash的方式存储，这就能做到"),l(a,{color:"green"},{default:e(()=>[s("读取和修改都方便")]),_:1}),s("了，现在"),hs,s("即可")]),fs,n("ul",null,[n("li",null,[n("p",null,[n("strong",null,[s("hash类型下的value只能存储"),l(a,{color:"red"},{default:e(()=>[s("字符串")]),_:1}),s("，不允许存储其他类型数据，不存在嵌套现象")]),s("。如果数据未获取到，对应的值为**(nil)**")])]),n("li",null,[n("p",null,[s("每个hash类型可以存储**"),l(a,{color:"red"},{default:e(()=>[s("2"),bs,s("−1")]),_:1}),s("个键值对**")])]),n("li",null,[n("p",null,[s("hash类型十分贴近对象的数据存储形式，并且可以灵活添加删除对象属性。但hash设计初衷不是为了存储大量对象而设计的，"),l(a,{color:"red"},{default:e(()=>[s("切记不可滥用，更不可以将hash作为对象列表使用")]),_:1})])]),n("li",null,[n("p",null,[s("hgetall操作可以获取key对应哈希类型所有的field以及value，"),l(a,{color:"red"},{default:e(()=>[s("如果内部field过多，遍历整体数据效率就会很低，有可能成为数据访问瓶颈")]),_:1}),s("，"),n("strong",null,[s("所以一般建议"),l(a,{color:"green"},{default:e(()=>[s("用哪个取哪个")]),_:1}),s("，"),l(a,{color:"red"},{default:e(()=>[s("不建议hgetall全部获取")]),_:1})])])])]),vs,l(a,{color:"red"},{default:e(()=>[s("当前仅仅是将数据存储到redis中，还需要通过磁盘IO查询数据库，用商品id查询出商品的描述信息，然后将得到的数据传给前端显示给用户，并没有起到加速的作用")]),_:1}),n("p",null,[s("我们用如下方式解决，"),l(a,{color:"green"},{default:e(()=>[s("不经过磁盘IO查询数据库，所有的数据都存放在redis")]),_:1})]),As,_s,n("p",null,[s("这个方法也是有"),l(a,{color:"red"},{default:e(()=>[s("缺点的，假如还有很多用户也购买了g01商品，那redis就会很多份g01商品的描述信息，这就在内存上存在"),ms]),_:1})]),Ds,l(a,{color:"green"},{default:e(()=>[s("于是我们**将商品描述信息独立存储成一个hash类型**，就不会重复存储了")]),_:1}),s("，用户存储商品id，就能通过商品id在redis中查找商品信息。商品被购买了，就要到这个hash存储中添加信息"),Fs,n("ul",null,[n("li",null,[ks,s(" ：key对应的hash类型中，"),l(a,{color:"red"},{default:e(()=>[s("有field就不修改value，没有field就设置为value")]),_:1})]),n("li",null,[xs,s("：key对应的hash类型中，"),l(a,{color:"red"},{default:e(()=>[s("无论有没有field，都设置为value")]),_:1})])]),Cs,l(a,{color:"red"},{default:e(()=>[s("redis**只做数据的修改和保存**，尽量不要把业务相关的操作放在redis上，比如**判断是否存在等**")]),_:1}),n("p",null,[qs,s("：string存储对象讲究整体性，要么一次性更新，要么一次性获取，以读为主；"),l(a,{color:"green"},{default:e(()=>[s("hash存储可以把属性用field隔离开，比较灵活，便于修改")]),_:1})]),zs])}const Ms=p(K,[["render",Es],["__file","string和hash数据类型.html.vue"]]);export{Ms as default};
