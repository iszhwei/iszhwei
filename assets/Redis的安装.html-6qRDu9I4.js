import{_ as c}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as r,c as i,d as s,e as n,f as a,w as e,a as l}from"./app-2pke9_a8.js";const B="/assets/image-20240503153158588-mtD0FWse.png",y="/assets/image-20240503155914895-TcKkWyDT.png",d="/assets/image-20240503160050654--Ovv9wpR.png",F="/assets/image-20240503161755320-m57fzyJa.png",A="/assets/image-20240503163057169-p_TToHV0.png",u="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAc2htaWxvdmV5b3U__size_20_color_FFFFFF_t_70_g_se_x_16-7G0HuE2o.png",v="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAc2htaWxvdmV5b3U__size_20_color_FFFFFF_t_70_g_se_x_16-17148077050683-BLVopDA9.png",m="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAc2htaWxvdmV5b3U__size_18_color_FFFFFF_t_70_g_se_x_16-_Hn_TqKW.png",b="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAc2htaWxvdmV5b3U__size_14_color_FFFFFF_t_70_g_se_x_16-VPF-XpQE.png",C="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAc2htaWxvdmV5b3U__size_20_color_FFFFFF_t_70_g_se_x_16-171480821081110-ZSfW8EYn.png",E={},D=l(`<h1 id="redis的安装" tabindex="-1"><a class="header-anchor" href="#redis的安装" aria-hidden="true">#</a> Redis的安装</h1><h2 id="redis的安装-1" tabindex="-1"><a class="header-anchor" href="#redis的安装-1" aria-hidden="true">#</a> Redis的安装</h2><ol><li><p>redis官网上下载最新安装包到家目录</p></li><li><p>解压压缩包，然后会在家目录下面生成一个对应文件夹redis-6.0.8。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">tar</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">zxvf</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">redis-6.0.8.tar.gz</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>进入到解压后的目录redis-6.0.8，然后执行make</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">redis-6.0.8</span></span>
<span class="line"><span style="color:#61AFEF;">make</span></span>
<span class="line"><span style="color:#61AFEF;">sudo</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">make</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>进入utils目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">utils</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着进入到<code>install_server.sh</code>文件，注释掉下面的内容（大于在77行，有8行，shell的注释是以<code>#</code>进行的注释）</p><figure><img src="`+B+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>注释之后，保存退出并且执行下面命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">sudo</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">./install_server.sh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ol><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>可以看到，安装完之后redis server已启动，默认监听6379</li></ul><p>执行<code>redis-server</code>即可启动redis服务器（默认端口6379）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">redis-server</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">#启动redis服务器6379</span></span>
<span class="line"><span style="color:#61AFEF;">redis-server</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--port</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">8989</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">#切换8989端口启动redis</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">redis-cli</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">#默认连接6379</span></span>
<span class="line"><span style="color:#61AFEF;">redis-cli</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-p</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">8989</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">#客户端连接服务器的8989端口</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+F+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2><p><code>redis-server --port 8989</code>这种启动方式<code>ctrl + c</code>服务器程序就会结束，该端口也就不被redis服务器监听。实际工作中都是使用配置文件的方式来启动redis-server</p><p>由于redis.conf文件信息过多，我们去掉注释，并且去掉空白，导出主要信息并生成新的配置文件<code>redis-6379.conf</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/etc/redis/</span></span>
<span class="line"><span style="color:#61AFEF;">cat</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">6379</span><span style="color:#98C379;">.conf</span><span style="color:#ABB2BF;"> |</span><span style="color:#61AFEF;">grep</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-v</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;#&quot;</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">grep</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-v</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;^$&quot;</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">redis-6379.conf</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">#root账户执行</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',13),g=s("strong",null,"配置大小单位",-1),h=s("strong",null,"只支持bytes，不支持bit",-1),_=s("strong",null,"对大小写不敏感",-1),f=l(`<h3 id="基本配置" tabindex="-1"><a class="header-anchor" href="#基本配置" aria-hidden="true">#</a> 基本配置</h3><p>基本配置(指定端口、后台启动、日志文件名和路径)，其他暂时不管，保存配置文件</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#redis-6380.conf</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 绑定的port</span></span>
<span class="line"><span style="color:#98C379;">port 6380	</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#守护进程方法启动，yes则后台启动，没有打印信息；no则前台启动</span></span>
<span class="line"><span style="color:#98C379;">daemonize yes </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 后台启动时，日志文件名</span></span>
<span class="line"><span style="color:#98C379;">logfile /var/log/redis_6380.log	 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 后台显示时，日志文件路径</span></span>
<span class="line"><span style="color:#98C379;">dir /var/lib/redis/6380		</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">redis-server</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">redis-6380.conf</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">#以配置文件启动redis,启动后就是守护进程</span></span>
<span class="line"><span style="color:#61AFEF;">redis-cli</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-p</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">6380</span></span>
<span class="line"><span style="color:#61AFEF;">redis-cli</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-h</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">127.0</span><span style="color:#98C379;">.0.1</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-p</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">6380</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他相关配置" tabindex="-1"><a class="header-anchor" href="#其他相关配置" aria-hidden="true">#</a> 其他相关配置</h3><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#服务器配置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#绑定主机地址</span></span>
<span class="line"><span style="color:#98C379;">bind 127.0.0.1 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 保护模式</span></span>
<span class="line"><span style="color:#98C379;">protected-mode yes </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#设置数据库数量</span></span>
<span class="line"><span style="color:#98C379;">databases 16 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#设置服务器以指定日志记录级别</span></span>
<span class="line"><span style="color:#98C379;">loglevel debug|verbose|notice|warning </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<strong>日志级别开发期设置为verbose即可，生产环境中配置为notice，简化日志输出量，降低写日志IO的频度。开发阶段一般使用debug，会打印较多的信息</strong></p><blockquote><p>Protected-mode 是为了禁止公网访问redis cache，加强redis安全的。</p><p>它启用的条件，有两个： 1） 没有bind IP 2） 没有设置访问密码</p><p>如果启用了，则只能够通过lookback ip（127.0.0.1）访问Redis cache，如果从外网访问，则会返回相应的错误信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">) DENIED Redis is running </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the lookback interface. If you want to connect from external computers to Redis you may adopt one of the following solutions: 1) Just disable protected mode sending the command </span><span style="color:#98C379;">&#39;CONFIG SET protected-mode no&#39;</span><span style="color:#ABB2BF;"> from the loopback interface by connecting to Redis from the same host the server is running, however MAKE SURE Redis is not publicly accessible from internet </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">you</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">do</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">so.</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Use</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">CONFIG</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">REWRITE</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">to</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">make</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">this</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">change</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">permanent.</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">) Alternatively you can just disable the protected mode by editing the Redis configuration file, and setting the protected mode option to </span><span style="color:#98C379;">&#39;no&#39;</span><span style="color:#ABB2BF;">, and </span><span style="color:#C678DD;">then</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">restarting</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">the</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">server.</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">) If you started the server manually just </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">testing, restart it with the --portected-mode no option. 4) Setup a bind address or an authentication password. NOTE: You only need to do one of the above things</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> order </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> the server to start accepting connections from the outside.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#客户端配置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#设置同一时间最大客户链接数，默认无限制。当客户端连接到达上线，Redis会关闭新的链接</span></span>
<span class="line"><span style="color:#98C379;">maxclients 0  </span><span style="color:#7F848E;font-style:italic;"># 0表示没有限制</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#客户端不活动占用连接最大时长，达到最大时长后关闭连接。如需关闭该功能，设置为0</span></span>
<span class="line"><span style="color:#98C379;">timeout 300  </span><span style="color:#7F848E;font-style:italic;"># 300s</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#多服务器快捷配置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#导入并加载指定配置文件信息，用于快速创建redis公共配置较多的redis实例配置文件，便于维护。这里有点像继承了，先include一个基础配置文件，然后再添加其他的配置</span></span>
<span class="line"><span style="color:#98C379;">include /path/base_server.conf</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#RDB，快照相关配置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#保存快照</span></span>
<span class="line"><span style="color:#98C379;">save 900 1              </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#在900秒(15分钟)之后，如果至少有1个key发生变化，则dump内存快照。</span></span>
<span class="line"><span style="color:#98C379;">save 300 10            </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#在300秒(5分钟)之后，如果至少有10个key发生变化，则dump内存快照。</span></span>
<span class="line"><span style="color:#98C379;">save 60 10000       </span></span>
<span class="line"><span style="color:#98C379;"> </span><span style="color:#7F848E;font-style:italic;">#在60秒(1分钟)之后，如果至少有10000个key发生变化，则dump内存快照。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#快照文件名</span></span>
<span class="line"><span style="color:#98C379;">dbfilename dump.rdb</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#保存目录名</span></span>
<span class="line"><span style="color:#98C379;">dir /var/lib/redis/6379</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#AOF持久化方式配置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 是否使用AOF持久化方式。默认不使用</span></span>
<span class="line"><span style="color:#98C379;">appendonly yes  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#持久化的AOF文件名</span></span>
<span class="line"><span style="color:#98C379;">appendfilename </span><span style="color:#98C379;">&quot;appendonly6381.aof&quot;</span><span style="color:#98C379;">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#在Redis的配置文件中存在三种AOF同步方式，它们分别是：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#每次有数据修改发生时都会写入AOF文件。</span></span>
<span class="line"><span style="color:#98C379;">appendfsync always    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#每秒钟同步一次，该策略为AOF的缺省策略。</span></span>
<span class="line"><span style="color:#98C379;">appendfsync everysec  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#从不同步。高效但是数据不会被持久化。</span></span>
<span class="line"><span style="color:#98C379;">appendfsync no          </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编译安装库文件" tabindex="-1"><a class="header-anchor" href="#编译安装库文件" aria-hidden="true">#</a> 编译安装库文件</h2><p><strong>编译顺序为：先编译hiredis，后编译redis_plus_plus</strong></p>`,14),q={href:"https://github.com/redis/hiredis",target:"_blank",rel:"noopener noreferrer"},k=l(`<p>redis-plus-plus库：https://github.com/sewenew/redis-plus-plus</p><h3 id="编译hiredis" tabindex="-1"><a class="header-anchor" href="#编译hiredis" aria-hidden="true">#</a> 编译hiredis</h3><p>编译最新版，安装到默认路径(<em><code>/usr/local</code></em>)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">clone</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">https://github.com/redis/hiredis.git</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">cd</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">hiredis</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">make</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">sudo</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">make</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>make install只做了如下简单的操作 ，想移除hiredis的安装只需要做如下操作的逆操作即可</p><figure><img src="`+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="编译redis-plus-plus" tabindex="-1"><a class="header-anchor" href="#编译redis-plus-plus" aria-hidden="true">#</a> 编译redis_plus_plus</h3>',7),x=l(`<p>如果cmake没有安装，可以自行安装：<code>$ sudo apt install cmake</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">clone</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">https://github.com/sewenew/redis-plus-plus.git</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">cd</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">redis-plus-plus</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">mkdir</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">build</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">cd</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">build</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">cmake</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-DREDIS_PLUS_PLUS_CXX_STANDARD=17</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">..</span><span style="color:#ABB2BF;">   </span><span style="color:#7F848E;font-style:italic;">#使用C++17版本，C++11则修改为11，C++14则修改为14</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">make</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">sudo</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">make</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>make install做了如下操作：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">dog@dog:build$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">sudo</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">make</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span></span>
<span class="line"><span style="color:#ABB2BF;">[ </span><span style="color:#D19A66;">47</span><span style="color:#ABB2BF;">%] Built target redis++</span></span>
<span class="line"><span style="color:#ABB2BF;">[ </span><span style="color:#D19A66;">94</span><span style="color:#ABB2BF;">%] Built target redis++_static</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">%] Built target test_redis++</span></span>
<span class="line"><span style="color:#61AFEF;">Install</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">the</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">project...</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Install</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">configuration:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Release&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/lib/libredis++.a</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/lib/libredis++.so.1.3.3</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/lib/libredis++.so.1</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/lib/libredis++.so</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Set</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">runtime</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">path</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;/usr/local/lib/libredis++.so.1.3.3&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">to</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/share/cmake/redis++/redis++-targets.cmake</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/share/cmake/redis++/redis++-targets-release.cmake</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/include/sw/redis++/cmd_formatter.h</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/include/sw/redis++/command.h</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/include/sw/redis++/command_args.h</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/include/sw/redis++/command_options.h</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/include/sw/redis++/connection.h</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/include/sw/redis++/connection_pool.h</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/include/sw/redis++/errors.h</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/include/sw/redis++/pipeline.h</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/include/sw/redis++/queued_redis.h</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/include/sw/redis++/queued_redis.hpp</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/include/sw/redis++/redis++.h</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/include/sw/redis++/redis.h</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/include/sw/redis++/redis.hpp</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/include/sw/redis++/redis_cluster.h</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/include/sw/redis++/redis_cluster.hpp</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/include/sw/redis++/reply.h</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/include/sw/redis++/sentinel.h</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/include/sw/redis++/shards.h</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/include/sw/redis++/shards_pool.h</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/include/sw/redis++/subscriber.h</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/include/sw/redis++/transaction.h</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/include/sw/redis++/utils.h</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/include/sw/redis++/tls.h</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/include/sw/redis++/cxx_utils.h</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/share/cmake/redis++/redis++-config.cmake</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/share/cmake/redis++/redis++-config-version.cmake</span></span>
<span class="line"><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Installing:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/local/lib/pkgconfig/redis++.pc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="测试redis-plus-plus" tabindex="-1"><a class="header-anchor" href="#测试redis-plus-plus" aria-hidden="true">#</a> 测试redis_plus_plus</h4><p>查看redis_server状态：</p><figure><img src="`+v+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">systemctl</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">restart</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">redis-server</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;"># 重启</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">systemctl</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">stop</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">redis-server</span><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># 停止</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">systemctl</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">start</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">redis-server</span><span style="color:#ABB2BF;">   </span><span style="color:#7F848E;font-style:italic;"># 启动</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试代码</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;sw/redis++/redis++.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;unordered_set&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;algorithm&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> sw::</span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// cout &lt;&lt; vector</span></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">std::</span><span style="color:#E5C07B;">ostream</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;operator</span><span style="color:#ABB2BF;">&lt;&lt;(std::</span><span style="color:#E5C07B;">ostream</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">out</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> std::</span><span style="color:#E5C07B;">vector</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">v</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">v</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        out </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;[&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        std::</span><span style="color:#61AFEF;">copy</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">v</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">begin</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">v</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">(), std::</span><span style="color:#61AFEF;">ostream_iterator</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;(out, </span><span style="color:#98C379;">&quot;, &quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">        out </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\b\\b</span><span style="color:#98C379;">]&quot;</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // 删除末尾的&quot;, &quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> out;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// cout &lt;&lt; unordered_map</span></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">std::</span><span style="color:#E5C07B;">ostream</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;operator</span><span style="color:#ABB2BF;">&lt;&lt;(std::</span><span style="color:#E5C07B;">ostream</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">out</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> std::</span><span style="color:#E5C07B;">unordered_map</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">umap</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    out </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;[&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">auto</span><span style="color:#ABB2BF;"> item : umap)</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        out </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;(&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">first</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;,&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">second</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;),&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    out </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\b</span><span style="color:#98C379;">]&quot;</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // 删除末尾的&quot;,&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> out;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// cout &lt;&lt; unorderd_set</span></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">std::</span><span style="color:#E5C07B;">ostream</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;operator</span><span style="color:#ABB2BF;">&lt;&lt;(std::</span><span style="color:#E5C07B;">ostream</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">out</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> std::</span><span style="color:#E5C07B;">unordered_set</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">uset</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    out </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;(&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">auto</span><span style="color:#ABB2BF;"> item : uset)</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> item </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;,&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    out </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\b</span><span style="color:#98C379;">)&quot;</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // 删除末尾的&quot;,&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> out;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">try</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Create an Redis object, which is movable but NOT copyable.</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">auto</span><span style="color:#ABB2BF;"> redis </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Redis</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;tcp://127.0.0.1:6379&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /// ***** STRING commands *****</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;key&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;val&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">auto</span><span style="color:#ABB2BF;"> val </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;key&quot;</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // val is of type OptionalString. See &#39;API Reference&#39; section for details.</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (val)</span></span>
<span class="line"><span style="color:#ABB2BF;">        {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // Dereference val to get the returned value of std::string type.</span></span>
<span class="line"><span style="color:#ABB2BF;">            std::cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">val </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span><span style="color:#7F848E;font-style:italic;"> // else key doesn&#39;t exist.</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /// ***** LIST commands *****</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // std::vector&lt;std::string&gt; to Redis LIST.</span></span>
<span class="line"><span style="color:#ABB2BF;">        std::vector</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">std::string</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> vec </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;c&quot;</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">rpush</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;list&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">vec</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">begin</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">vec</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // std::initializer_list to Redis LIST.</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">rpush</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;list&quot;</span><span style="color:#ABB2BF;">, {</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;c&quot;</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Redis LIST to std::vector&lt;std::string&gt;.</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">vec</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clear</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lrange</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;list&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, std::</span><span style="color:#61AFEF;">back_inserter</span><span style="color:#ABB2BF;">(vec));</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">        cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;list: &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> vec </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /// ***** HASH commands *****</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hset</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hash&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;field&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;val&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Another way to do the same job.</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hset</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hash&quot;</span><span style="color:#ABB2BF;">, std::</span><span style="color:#61AFEF;">make_pair</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;field&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;val&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // std::unordered_map&lt;std::string, std::string&gt; to Redis HASH.</span></span>
<span class="line"><span style="color:#ABB2BF;">        std::unordered_map</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">std::string, std::string</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> m </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">            {</span><span style="color:#98C379;">&quot;field1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;val1&quot;</span><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#ABB2BF;">            {</span><span style="color:#98C379;">&quot;field2&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;val2&quot;</span><span style="color:#ABB2BF;">}};</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hmset</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hash&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">m</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">begin</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">m</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Redis HASH to std::unordered_map&lt;std::string, std::string&gt;.</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">m</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clear</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hgetall</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hash&quot;</span><span style="color:#ABB2BF;">, std::</span><span style="color:#61AFEF;">inserter</span><span style="color:#ABB2BF;">(m, </span><span style="color:#E5C07B;">m</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">begin</span><span style="color:#ABB2BF;">()));</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">        cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;hash:&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> m </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Get value only.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // NOTE: since field might NOT exist, so we need to parse it to OptionalString.</span></span>
<span class="line"><span style="color:#ABB2BF;">        std::vector</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">OptionalString</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> vals;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hmget</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hash&quot;</span><span style="color:#ABB2BF;">, {</span><span style="color:#98C379;">&quot;field1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;field2&quot;</span><span style="color:#ABB2BF;">}, std::</span><span style="color:#61AFEF;">back_inserter</span><span style="color:#ABB2BF;">(vals));</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /// ***** SET commands *****</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sadd</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;set&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;m1&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // std::unordered_set&lt;std::string&gt; to Redis SET.</span></span>
<span class="line"><span style="color:#ABB2BF;">        std::unordered_set</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">std::string</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> set </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {</span><span style="color:#98C379;">&quot;m2&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;m3&quot;</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sadd</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;set&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">set</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">begin</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">set</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // std::initializer_list to Redis SET.</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sadd</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;set&quot;</span><span style="color:#ABB2BF;">, {</span><span style="color:#98C379;">&quot;m2&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;m3&quot;</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Redis SET to std::unordered_set&lt;std::string&gt;.</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">set</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clear</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">smembers</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;set&quot;</span><span style="color:#ABB2BF;">, std::</span><span style="color:#61AFEF;">inserter</span><span style="color:#ABB2BF;">(set, </span><span style="color:#E5C07B;">set</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">begin</span><span style="color:#ABB2BF;">()));</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">        cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;set:&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> set </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sismember</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;set&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;m1&quot;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">        {</span></span>
<span class="line"><span style="color:#ABB2BF;">            std::cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;m1 exists&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span><span style="color:#7F848E;font-style:italic;"> // else NOT exist.</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /// ***** SORTED SET commands *****</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">zadd</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;sorted_set&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;m1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1.3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // std::unordered_map&lt;std::string, double&gt; to Redis SORTED SET.</span></span>
<span class="line"><span style="color:#ABB2BF;">        std::unordered_map</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">std::string, </span><span style="color:#C678DD;">double&gt;</span><span style="color:#ABB2BF;"> scores </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">            {</span><span style="color:#98C379;">&quot;m2&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2.3</span><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#ABB2BF;">            {</span><span style="color:#98C379;">&quot;m3&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4.5</span><span style="color:#ABB2BF;">}};</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">zadd</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;sorted_set&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">scores</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">begin</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">scores</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Redis SORTED SET to std::vector&lt;std::pair&lt;std::string, double&gt;&gt;.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // NOTE: The return results of zrangebyscore are ordered, if you save the results</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // in to \`std::unordered_map&lt;std::string, double&gt;\`, you&#39;ll lose the order.</span></span>
<span class="line"><span style="color:#ABB2BF;">        std::vector</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">std::pair</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">std::string, </span><span style="color:#C678DD;">double&gt;&gt;</span><span style="color:#ABB2BF;"> zset_result;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">zrangebyscore</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;sorted_set&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">                            UnboundedInterval</span><span style="color:#C678DD;">&lt;double&gt;</span><span style="color:#ABB2BF;">{},</span><span style="color:#7F848E;font-style:italic;"> // (-inf, +inf)</span></span>
<span class="line"><span style="color:#ABB2BF;">                            std::</span><span style="color:#61AFEF;">back_inserter</span><span style="color:#ABB2BF;">(zset_result));</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Only get member names:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // pass an inserter of std::vector&lt;std::string&gt; type as output parameter.</span></span>
<span class="line"><span style="color:#ABB2BF;">        std::vector</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">std::string</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> without_score;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">zrangebyscore</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;sorted_set&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">                            </span><span style="color:#61AFEF;">BoundedInterval</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#D19A66;">1.5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3.4</span><span style="color:#ABB2BF;">, BoundType::CLOSED),</span><span style="color:#7F848E;font-style:italic;"> // [1.5, 3.4]</span></span>
<span class="line"><span style="color:#ABB2BF;">                            std::</span><span style="color:#61AFEF;">back_inserter</span><span style="color:#ABB2BF;">(without_score));</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Get both member names and scores:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // pass an back_inserter of std::vector&lt;std::pair&lt;std::string, double&gt;&gt; as output parameter.</span></span>
<span class="line"><span style="color:#ABB2BF;">        std::vector</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">std::pair</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">std::string, </span><span style="color:#C678DD;">double&gt;&gt;</span><span style="color:#ABB2BF;"> with_score;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">zrangebyscore</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;sorted_set&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">                            </span><span style="color:#61AFEF;">BoundedInterval</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#D19A66;">1.5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3.4</span><span style="color:#ABB2BF;">, BoundType::LEFT_OPEN),</span><span style="color:#7F848E;font-style:italic;"> // (1.5, 3.4]</span></span>
<span class="line"><span style="color:#ABB2BF;">                            std::</span><span style="color:#61AFEF;">back_inserter</span><span style="color:#ABB2BF;">(with_score));</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /// ***** SCRIPTING commands *****</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Script returns a single element.</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">auto</span><span style="color:#ABB2BF;"> num </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">eval</span><span style="color:#C678DD;">&lt;long</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">long&gt;</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;return 1&quot;</span><span style="color:#ABB2BF;">, {}, {});</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Script returns an array of elements.</span></span>
<span class="line"><span style="color:#ABB2BF;">        std::vector</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">std::string</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> nums;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">eval</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;return {ARGV[1], ARGV[2]}&quot;</span><span style="color:#ABB2BF;">, {}, {</span><span style="color:#98C379;">&quot;1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;2&quot;</span><span style="color:#ABB2BF;">}, std::</span><span style="color:#61AFEF;">back_inserter</span><span style="color:#ABB2BF;">(nums));</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // mset with TTL</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">auto</span><span style="color:#ABB2BF;"> mset_with_ttl_script </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">R&quot;(</span></span>
<span class="line"><span style="color:#98C379;">        local len = #KEYS</span></span>
<span class="line"><span style="color:#98C379;">        if (len == 0 or len + 1 ~= #ARGV) then return 0 end</span></span>
<span class="line"><span style="color:#98C379;">        local ttl = tonumber(ARGV[len + 1])</span></span>
<span class="line"><span style="color:#98C379;">        if (not ttl or ttl &lt;= 0) then return 0 end</span></span>
<span class="line"><span style="color:#98C379;">        for i = 1, len do redis.call(&quot;SET&quot;, KEYS[i], ARGV[i], &quot;EX&quot;, ttl) end</span></span>
<span class="line"><span style="color:#98C379;">        return 1</span></span>
<span class="line"><span style="color:#98C379;">    )&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Set multiple key-value pairs with TTL of 60 seconds.</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">auto</span><span style="color:#ABB2BF;"> keys </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {</span><span style="color:#98C379;">&quot;key1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;key2&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;key3&quot;</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">        std::vector</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">std::string</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> args </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {</span><span style="color:#98C379;">&quot;val1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;val2&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;val3&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;60&quot;</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">eval</span><span style="color:#C678DD;">&lt;long</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">long&gt;</span><span style="color:#ABB2BF;">(mset_with_ttl_script, </span><span style="color:#E5C07B;">keys</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">begin</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">keys</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">args</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">begin</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">args</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /// ***** Pipeline *****</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Create a pipeline.</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">auto</span><span style="color:#ABB2BF;"> pipe </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pipeline</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Send mulitple commands and get all replies.</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">auto</span><span style="color:#ABB2BF;"> pipe_replies </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">pipe</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;key&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;value&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                                .</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;key&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                                .</span><span style="color:#61AFEF;">rename</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;key&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;new-key&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                                .</span><span style="color:#61AFEF;">rpush</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;list&quot;</span><span style="color:#ABB2BF;">, {</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;c&quot;</span><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#ABB2BF;">                                .</span><span style="color:#61AFEF;">lrange</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;list&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                                .</span><span style="color:#61AFEF;">exec</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Parse reply with reply type and index.</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">auto</span><span style="color:#ABB2BF;"> set_cmd_result </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">pipe_replies</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">get</span><span style="color:#C678DD;">&lt;bool&gt;</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">auto</span><span style="color:#ABB2BF;"> get_cmd_result </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">pipe_replies</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">get</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">OptionalString</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // rename command result</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">pipe_replies</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">get</span><span style="color:#C678DD;">&lt;void&gt;</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">auto</span><span style="color:#ABB2BF;"> rpush_cmd_result </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">pipe_replies</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">get</span><span style="color:#C678DD;">&lt;long</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">long&gt;</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">        std::vector</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">std::string</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> lrange_cmd_result;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">pipe_replies</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">back_inserter</span><span style="color:#ABB2BF;">(lrange_cmd_result));</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /// ***** Transaction *****</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Create a transaction.</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">auto</span><span style="color:#ABB2BF;"> tx </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">transaction</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Run multiple commands in a transaction, and get all replies.</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">auto</span><span style="color:#ABB2BF;"> tx_replies </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">tx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">incr</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;num0&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                              .</span><span style="color:#61AFEF;">incr</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;num1&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                              .</span><span style="color:#61AFEF;">mget</span><span style="color:#ABB2BF;">({</span><span style="color:#98C379;">&quot;num0&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;num1&quot;</span><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#ABB2BF;">                              .</span><span style="color:#61AFEF;">exec</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Parse reply with reply type and index.</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">auto</span><span style="color:#ABB2BF;"> incr_result0 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">tx_replies</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">get</span><span style="color:#C678DD;">&lt;long</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">long&gt;</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">auto</span><span style="color:#ABB2BF;"> incr_result1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">tx_replies</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">get</span><span style="color:#C678DD;">&lt;long</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">long&gt;</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">        std::vector</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">OptionalString</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> mget_cmd_result;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">tx_replies</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">back_inserter</span><span style="color:#ABB2BF;">(mget_cmd_result));</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /// ***** Generic Command Interface *****</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // There&#39;s no *Redis::client_getname* interface.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // But you can use *Redis::command* to get the client name.</span></span>
<span class="line"><span style="color:#ABB2BF;">        val </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">command</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">OptionalString</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;client&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;getname&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (val)</span></span>
<span class="line"><span style="color:#ABB2BF;">        {</span></span>
<span class="line"><span style="color:#ABB2BF;">            std::cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">val </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Same as above.</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">auto</span><span style="color:#ABB2BF;"> getname_cmd_str </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {</span><span style="color:#98C379;">&quot;client&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;getname&quot;</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">        val </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">command</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">OptionalString</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">getname_cmd_str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">begin</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">getname_cmd_str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // There&#39;s no *Redis::sort* interface.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // But you can use *Redis::command* to send sort the list.</span></span>
<span class="line"><span style="color:#ABB2BF;">        std::vector</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">std::string</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> sorted_list;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">command</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;sort&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;list&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;ALPHA&quot;</span><span style="color:#ABB2BF;">, std::</span><span style="color:#61AFEF;">back_inserter</span><span style="color:#ABB2BF;">(sorted_list));</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Another *Redis::command* to do the same work.</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">auto</span><span style="color:#ABB2BF;"> sort_cmd_str </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {</span><span style="color:#98C379;">&quot;sort&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;list&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;ALPHA&quot;</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">command</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">sort_cmd_str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">begin</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">sort_cmd_str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">(), std::</span><span style="color:#61AFEF;">back_inserter</span><span style="color:#ABB2BF;">(sorted_list));</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /// ***** Redis Cluster *****</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Create a RedisCluster object, which is movable but NOT copyable.</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">auto</span><span style="color:#ABB2BF;"> redis_cluster </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">RedisCluster</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;tcp://127.0.0.1:7000&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // RedisCluster has similar interfaces as Redis.</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis_cluster</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;key&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;value&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        val </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">redis_cluster</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;key&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (val)</span></span>
<span class="line"><span style="color:#ABB2BF;">        {</span></span>
<span class="line"><span style="color:#ABB2BF;">            std::cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">val </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span><span style="color:#7F848E;font-style:italic;"> // else key doesn&#39;t exist.</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Keys with hash-tag.</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis_cluster</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;key{tag}1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;val1&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis_cluster</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;key{tag}2&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;val2&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis_cluster</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;key{tag}3&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;val3&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">        std::vector</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">OptionalString</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> hash_tag_res;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">redis_cluster</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mget</span><span style="color:#ABB2BF;">({</span><span style="color:#98C379;">&quot;key{tag}1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;key{tag}2&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;key{tag}3&quot;</span><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#ABB2BF;">                           std::</span><span style="color:#61AFEF;">back_inserter</span><span style="color:#ABB2BF;">(hash_tag_res));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> Error </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">e)</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Error handling.</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用静态库：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">g++</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-std=c++17</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-o</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">app</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">main.cpp</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/path/to/your/libredis++.a</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/path/to/your/libhiredis.a</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-pthread</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用动态库：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">$ g++ -std</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">c++</span><span style="color:#D19A66;">17</span><span style="color:#ABB2BF;"> -o app </span><span style="color:#D19A66;">main</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">cpp</span><span style="color:#ABB2BF;"> -lredis++ -lhiredis -pthread</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行提示找不到“libredis++.so.1 :</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">./app</span></span>
<span class="line"><span style="color:#61AFEF;">./app:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">error</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">while</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">loading</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">shared</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">libraries:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">libredis++.so.1:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">cannot</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">open</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">shared</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">object</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">file:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">No</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">such</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">file</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">or</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">directory</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>因为找不到<code>libredis++.so.1</code>的路径，需要将其路径添加到<code>LD_LIBRARY_PATH</code>中。redis_plus_plus库默认安装路径如下：</p><figure><img src="`+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在“<code>~/.bashrc</code>”末尾为<code>LD_LIBRARY_PATH</code>添加“<code>/usr/local/lib</code>”路径即可：</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>保存“<code>~/.bashrc</code>”修改，关闭terminal终端，重启打开新terminal终端，在新终端运行app:</p><figure><img src="'+C+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',22);function w(I,R){const p=o("font"),t=o("ExternalLinkIcon");return r(),i("div",null,[D,s("ul",null,[s("li",null,[n("带注释的配置文件中给出了"),g,n("，定义了一些基本度量单位，"),a(p,{color:"red"},{default:e(()=>[h,n("，"),_]),_:1})])]),f,s("p",null,[s("a",q,[n("redis/hiredis: Minimalistic C client for Redis >= 1.2 (github.com)"),a(t)])]),k,s("p",null,[n("默认编译生成动态库和静态库，使用C++17标准(注意：你的应用程序也必须使用C++17版本，即"),a(p,{color:"red"},{default:e(()=>[n("redis_plus_plus库和应用程序需要使用相同的C++语言标准")]),_:1}),n(")。redis_plus_plus支持C++11、C++14、C++17语言标准。")]),x])}const O=c(E,[["render",w],["__file","Redis的安装.html.vue"]]);export{O as default};
