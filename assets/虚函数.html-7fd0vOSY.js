const s=JSON.parse('{"key":"v-7ef7d845","path":"/ccpp/07%20%E5%A4%9A%E6%80%81/%E8%99%9A%E5%87%BD%E6%95%B0.html","title":"虚函数","lang":"zh-CN","frontmatter":{"title":"虚函数","icon":"file","order":1,"headerDepth":4,"category":["c/c++"],"tag":["多态"],"description":"虚函数 虚函数的定义 虚函数就是在基类中被声明为virtual，并在一个或多个派生类中被重新定义的成员函数。 // 类内部 class 类名 { virtual 返回类型 函数名(参数表) &nbsp; { &nbsp; &nbsp; &nbsp; &nbsp;//... &nbsp; } }; //类之外 virtual 返回类型 类名::函数名(参数表) { &nbsp; &nbsp;//... }","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/07%20%E5%A4%9A%E6%80%81/%E8%99%9A%E5%87%BD%E6%95%B0.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"虚函数"}],["meta",{"property":"og:description","content":"虚函数 虚函数的定义 虚函数就是在基类中被声明为virtual，并在一个或多个派生类中被重新定义的成员函数。 // 类内部 class 类名 { virtual 返回类型 函数名(参数表) &nbsp; { &nbsp; &nbsp; &nbsp; &nbsp;//... &nbsp; } }; //类之外 virtual 返回类型 类名::函数名(参数表) { &nbsp; &nbsp;//... }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"多态"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"虚函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[{"level":2,"title":"虚函数的定义","slug":"虚函数的定义","link":"#虚函数的定义","children":[]},{"level":2,"title":"派生类对虚函数的重定义","slug":"派生类对虚函数的重定义","link":"#派生类对虚函数的重定义","children":[]},{"level":2,"title":"虚函数的实现机制🍗🍗🍗","slug":"虚函数的实现机制🍗🍗🍗","link":"#虚函数的实现机制🍗🍗🍗","children":[{"level":3,"title":"虚函数描述、特点：","slug":"虚函数描述、特点","link":"#虚函数描述、特点","children":[]}]},{"level":2,"title":"虚函数机制是如何被激活的呢，或者说动态多态是怎么表现出来的呢？","slug":"虚函数机制是如何被激活的呢-或者说动态多态是怎么表现出来的呢","link":"#虚函数机制是如何被激活的呢-或者说动态多态是怎么表现出来的呢","children":[]}],"git":{},"readingTime":{"minutes":3.65,"words":1096},"filePathRelative":"ccpp/07 多态/虚函数.md","excerpt":"<h1> 虚函数</h1>\\n<h2> 虚函数的定义</h2>\\n<p>虚函数就是在<u>基类中<strong>被声明为<code>virtual</code></strong>，并在一个或多个<strong>派生类中被重新定义的成员函数</strong></u>。</p>\\n<div class=\\"language-c++ line-numbers-mode\\" data-ext=\\"c++\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">// 类内部</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> 类名 </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">virtual</span><span style=\\"color: #ABB2BF\\"> 返回类型 函数名(参数表)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\"> &nbsp;  {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> &nbsp; &nbsp; &nbsp; &nbsp;//...</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\"> &nbsp;  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">//类之外</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">virtual</span><span style=\\"color: #ABB2BF\\"> 返回类型 类名::函数名(参数表)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> &nbsp; &nbsp;//...</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{s as data};
