const t=JSON.parse('{"key":"v-73dfb9d4","path":"/ccpp/10%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E3%80%81%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F.html","title":"代理模式、适配器模式、装饰器模式","lang":"zh-CN","frontmatter":{"title":"代理模式、适配器模式、装饰器模式","icon":"file","order":4,"headerDepth":4,"category":["c/c++"],"tag":["设计模式"],"description":"代理模式、适配器模式、装饰器模式 代理模式、适配器模式、装饰器模式属于结构型设计模式，这些模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式 1、代理模式 不是所有的客户都能访问到老板，老板的助理，即通过代理类，来控制实际对象的访问权限。 代理类和委托类是组合关系！！！","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/10%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E3%80%81%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"代理模式、适配器模式、装饰器模式"}],["meta",{"property":"og:description","content":"代理模式、适配器模式、装饰器模式 代理模式、适配器模式、装饰器模式属于结构型设计模式，这些模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式 1、代理模式 不是所有的客户都能访问到老板，老板的助理，即通过代理类，来控制实际对象的访问权限。 代理类和委托类是组合关系！！！"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"设计模式"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"代理模式、适配器模式、装饰器模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[{"level":2,"title":"1、代理模式","slug":"_1、代理模式","link":"#_1、代理模式","children":[]},{"level":2,"title":"2、装饰器模式","slug":"_2、装饰器模式","link":"#_2、装饰器模式","children":[]},{"level":2,"title":"3、适配器模式","slug":"_3、适配器模式","link":"#_3、适配器模式","children":[]}],"git":{},"readingTime":{"minutes":6.21,"words":1863},"filePathRelative":"ccpp/10 设计模式/代理模式、适配器模式、装饰器模式.md","excerpt":"<h1> 代理模式、适配器模式、装饰器模式</h1>\\n<p>代理模式、适配器模式、装饰器模式属于<strong>结构型设计模式</strong>，这些模式关注<strong>类和对象的组合</strong>。继承的概念被用来组合接口和定义组合对象获得新功能的方式</p>\\n<h2> 1、代理模式</h2>\\n<figure><figcaption></figcaption></figure>\\n<p>不是所有的客户都能访问到老板，老板的助理，即通过代理类，来控制实际对象的访问权限。</p>\\n<blockquote>\\n<p><strong>代理类和委托类是组合关系！！！</strong></p>\\n</blockquote>","autoDesc":true}');export{t as data};
