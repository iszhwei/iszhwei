const s=JSON.parse('{"key":"v-0aad1b8c","path":"/ccpp/05%20%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/vector%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0.html","title":"vector迭代器的实现","lang":"zh-CN","frontmatter":{"title":"vector迭代器的实现","icon":"file","order":5,"headerDepth":4,"category":["c/c++"],"tag":["运算符重载","迭代器"],"description":"vector迭代器的实现 泛型算法：给所有容器都可以使用，参数接受的都是容器的迭代器。 //容器的空间配置器 template &lt;typename T&gt; struct Allocator { \\tT* allocate(size_t size)//只负责内存开辟 \\t{ \\t\\treturn (T*)malloc(sizeof(T) * size); \\t} \\tvoid deallocate(void *p)//只负责内存释放 \\t{ \\t\\tfree(p); \\t} \\tvoid construct(T *p, const T &amp;val)//已经开辟好的内存上，负责对象构造 \\t{ \\t\\tnew (p) T(val);//定位new，指定内存上构造val，T(val)拷贝构造 \\t} \\tvoid destroy(T *p)//只负责对象析构 \\t{ \\t\\tp-&gt;~T();//~T()代表了T类型的析构函数 \\t} }; template &lt;typename T, typename Alloc = Allocator&lt;T&gt;&gt; class vector//向量容器 { public: \\tvector(int size = 10)//构造 \\t{ \\t\\t//_first = new T[size]; \\t\\t_first = _allocator.allocate(size); \\t\\t_last = _first; \\t\\t_end = _first + size; \\t} \\t~vector()//析构 \\t{ \\t\\t//delete[]_first; \\t\\tfor (T *p=_first; p!=_last; ++p) \\t\\t{ \\t\\t\\t_allocator.destroy(p);//把_first指针指向的数组的有效元素析构 \\t\\t} \\t\\t_allocator.deallocate(_first);//释放堆上的数组内存 \\t\\t_first = _last = _end = nullptr; \\t} \\tvector(const vector&lt;T&gt; &amp;rhs)//拷贝构造 \\t{ \\t\\tint size = rhs._end - rhs._first;//空间大小 \\t\\t//_first = new T[size]; \\t\\t_first = _allocator.allocate(size); \\t\\tint len = rhs._last - rhs._first;//有效元素 \\t\\tfor (int i=0; i&lt;len; ++i) \\t\\t{ \\t\\t\\t//_first[i] = rhs._first[i]; \\t\\t\\t_allocator.construct(_first+i, rhs._first[i]); \\t\\t} \\t\\t_last = _first + len; \\t\\t_end = _first + size; \\t} \\tvector&lt;T&gt;&amp; operator=(const vector&lt;T&gt; &amp;rhs)//赋值运算符重载 \\t{ \\t\\tif (this == &amp;rhs) \\t\\t{ \\t\\t\\treturn *this; \\t\\t} \\t\\t//delete[]_first; \\t\\tfor (T *p=_first; p!=_last; ++p) \\t\\t{ \\t\\t\\t_allocator.destory(p);//把_first指针指向的数组的有效元素析构 \\t\\t} \\t\\t_allocator.deallocate(_first);//释放堆上的数组内存 \\t\\tint size = rhs._end - rhs._first;//空间大小 \\t\\t_first = _allocator.allocate(size); \\t\\tint len = rhs._last - rhs._first;//有效元素 \\t\\tfor (int i=0; i&lt;len; ++i) \\t\\t{ \\t\\t\\t_allocator.construct(_first+i, rhs._first[i]); \\t\\t} \\t\\t_last = _first + len; \\t\\t_end = _first + size; \\t\\treturn *this; \\t} \\tvoid push_back(const T &amp;val)//尾插 \\t{ \\t\\tif (full()) \\t\\t{ \\t\\t\\texpand(); \\t\\t} \\t\\t//*_last++ = val; \\t\\t_allocator.construct(_last, val);//_last指针指向的内存构造一个值为val的对象 \\t\\t_last++; \\t} \\tvoid pop_back()//尾删 \\t{ \\t\\tif (empty()) return; \\t\\t//--_last; \\t\\t//不仅要把_last指针--，还需要析构删除的元素 \\t\\t--_last; \\t\\t_allocator.destroy(_last); \\t} \\tT back()const//返回容器末尾元素值 \\t{ \\t\\treturn *(_last - 1); \\t} \\tbool full()const \\t{ \\t\\treturn _last == _end; \\t} \\tbool empty()const \\t{ \\t\\treturn _first == _last; \\t} \\tint size()const//返回容器中元素个数 \\t{ \\t\\treturn _last - _first; \\t} \\tT&amp; operator[](int index) \\t{ \\t\\tif (index &lt; 0 || index &gt;= size()) \\t\\t{ \\t\\t\\tthrow \\"OutOfRangeException\\"; \\t\\t} \\t\\treturn _first[index]; \\t} \\t//迭代器一般实现成容器的嵌套类型 \\tclass iterator \\t{ \\tpublic: \\t\\titerator(T *ptr = nullptr) \\t\\t\\t:_ptr(ptr){} \\t\\tbool operator!=(const iterator &amp;it)const \\t\\t{ \\t\\t\\treturn _ptr != it._ptr; \\t\\t} \\t\\tvoid operator++() \\t\\t{ \\t\\t\\t_ptr++; \\t\\t} \\t\\tT&amp; operator*() \\t\\t{ \\t\\t\\treturn *_ptr; \\t\\t} \\t\\tconst T&amp; operator*()const \\t\\t{ \\t\\t\\treturn *_ptr; \\t\\t} \\tprivate: \\t\\tT *_ptr; \\t}; \\titerator begin() \\t{ \\t\\treturn iterator(_first); \\t} \\titerator end() \\t{ \\t\\treturn iterator(_last); \\t} private: \\tT *_first;//起始数组位置 \\tT *_last;//指向最后一个有效元素后继位置 \\tT *_end;//指向数组空间的后继位置 \\tAlloc _allocator;//定义容器的空间配置器对象 \\tvoid expand()//扩容 \\t{ \\t\\tint size = _end - _first; \\t\\t//T *ptmp = new T[2*size]; \\t\\tT *ptmp = _allocator.allocate(2*size); \\t\\tfor (int i=0; i&lt;size; ++i) \\t\\t{ \\t\\t\\t_allocator.construct(ptmp+i, _first[i]); \\t\\t\\t//ptmp[i] = _first[i]; \\t\\t} \\t\\t//delete[]_first; \\t\\tfor (T *p=_first; p!=_last; ++p) \\t\\t{ \\t\\t\\t_allocator.destroy(p); \\t\\t} \\t\\t_allocator.deallocate(_first); \\t\\t_first = ptmp; \\t\\t_last = _first + size; \\t\\t_end = _first + 2*size; \\t} }; int main() { \\tvector&lt;int&gt; vec; \\tfor (int i=0; i&lt;20; ++i) \\t{ \\t\\tvec.push_back(rand()%100); \\t} \\tint size = vec.size();//[]重载针对vector有意义 \\tfor (int i=0; i&lt;size; ++i) \\t{ \\t\\tcout &lt;&lt; vec[i] &lt;&lt; \\" \\";//底层是数组，O(1) \\t} \\tcout &lt;&lt; endl; \\tvector&lt;int&gt;::iterator it = vec.begin(); \\t//auto it = vec.begin(); \\tfor (; it!=vec.end(); ++it) \\t{ \\t\\tcout &lt;&lt; *it &lt;&lt; \\" \\"; \\t} \\tcout &lt;&lt; endl; \\tfor(int val : vec)//底层还是通过容器的迭代器来实现遍历的 \\t{ \\t\\tcout &lt;&lt; val &lt;&lt; \\" \\"; \\t} \\tcout &lt;&lt; endl; \\treturn 0; }","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/05%20%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/vector%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"vector迭代器的实现"}],["meta",{"property":"og:description","content":"vector迭代器的实现 泛型算法：给所有容器都可以使用，参数接受的都是容器的迭代器。 //容器的空间配置器 template &lt;typename T&gt; struct Allocator { \\tT* allocate(size_t size)//只负责内存开辟 \\t{ \\t\\treturn (T*)malloc(sizeof(T) * size); \\t} \\tvoid deallocate(void *p)//只负责内存释放 \\t{ \\t\\tfree(p); \\t} \\tvoid construct(T *p, const T &amp;val)//已经开辟好的内存上，负责对象构造 \\t{ \\t\\tnew (p) T(val);//定位new，指定内存上构造val，T(val)拷贝构造 \\t} \\tvoid destroy(T *p)//只负责对象析构 \\t{ \\t\\tp-&gt;~T();//~T()代表了T类型的析构函数 \\t} }; template &lt;typename T, typename Alloc = Allocator&lt;T&gt;&gt; class vector//向量容器 { public: \\tvector(int size = 10)//构造 \\t{ \\t\\t//_first = new T[size]; \\t\\t_first = _allocator.allocate(size); \\t\\t_last = _first; \\t\\t_end = _first + size; \\t} \\t~vector()//析构 \\t{ \\t\\t//delete[]_first; \\t\\tfor (T *p=_first; p!=_last; ++p) \\t\\t{ \\t\\t\\t_allocator.destroy(p);//把_first指针指向的数组的有效元素析构 \\t\\t} \\t\\t_allocator.deallocate(_first);//释放堆上的数组内存 \\t\\t_first = _last = _end = nullptr; \\t} \\tvector(const vector&lt;T&gt; &amp;rhs)//拷贝构造 \\t{ \\t\\tint size = rhs._end - rhs._first;//空间大小 \\t\\t//_first = new T[size]; \\t\\t_first = _allocator.allocate(size); \\t\\tint len = rhs._last - rhs._first;//有效元素 \\t\\tfor (int i=0; i&lt;len; ++i) \\t\\t{ \\t\\t\\t//_first[i] = rhs._first[i]; \\t\\t\\t_allocator.construct(_first+i, rhs._first[i]); \\t\\t} \\t\\t_last = _first + len; \\t\\t_end = _first + size; \\t} \\tvector&lt;T&gt;&amp; operator=(const vector&lt;T&gt; &amp;rhs)//赋值运算符重载 \\t{ \\t\\tif (this == &amp;rhs) \\t\\t{ \\t\\t\\treturn *this; \\t\\t} \\t\\t//delete[]_first; \\t\\tfor (T *p=_first; p!=_last; ++p) \\t\\t{ \\t\\t\\t_allocator.destory(p);//把_first指针指向的数组的有效元素析构 \\t\\t} \\t\\t_allocator.deallocate(_first);//释放堆上的数组内存 \\t\\tint size = rhs._end - rhs._first;//空间大小 \\t\\t_first = _allocator.allocate(size); \\t\\tint len = rhs._last - rhs._first;//有效元素 \\t\\tfor (int i=0; i&lt;len; ++i) \\t\\t{ \\t\\t\\t_allocator.construct(_first+i, rhs._first[i]); \\t\\t} \\t\\t_last = _first + len; \\t\\t_end = _first + size; \\t\\treturn *this; \\t} \\tvoid push_back(const T &amp;val)//尾插 \\t{ \\t\\tif (full()) \\t\\t{ \\t\\t\\texpand(); \\t\\t} \\t\\t//*_last++ = val; \\t\\t_allocator.construct(_last, val);//_last指针指向的内存构造一个值为val的对象 \\t\\t_last++; \\t} \\tvoid pop_back()//尾删 \\t{ \\t\\tif (empty()) return; \\t\\t//--_last; \\t\\t//不仅要把_last指针--，还需要析构删除的元素 \\t\\t--_last; \\t\\t_allocator.destroy(_last); \\t} \\tT back()const//返回容器末尾元素值 \\t{ \\t\\treturn *(_last - 1); \\t} \\tbool full()const \\t{ \\t\\treturn _last == _end; \\t} \\tbool empty()const \\t{ \\t\\treturn _first == _last; \\t} \\tint size()const//返回容器中元素个数 \\t{ \\t\\treturn _last - _first; \\t} \\tT&amp; operator[](int index) \\t{ \\t\\tif (index &lt; 0 || index &gt;= size()) \\t\\t{ \\t\\t\\tthrow \\"OutOfRangeException\\"; \\t\\t} \\t\\treturn _first[index]; \\t} \\t//迭代器一般实现成容器的嵌套类型 \\tclass iterator \\t{ \\tpublic: \\t\\titerator(T *ptr = nullptr) \\t\\t\\t:_ptr(ptr){} \\t\\tbool operator!=(const iterator &amp;it)const \\t\\t{ \\t\\t\\treturn _ptr != it._ptr; \\t\\t} \\t\\tvoid operator++() \\t\\t{ \\t\\t\\t_ptr++; \\t\\t} \\t\\tT&amp; operator*() \\t\\t{ \\t\\t\\treturn *_ptr; \\t\\t} \\t\\tconst T&amp; operator*()const \\t\\t{ \\t\\t\\treturn *_ptr; \\t\\t} \\tprivate: \\t\\tT *_ptr; \\t}; \\titerator begin() \\t{ \\t\\treturn iterator(_first); \\t} \\titerator end() \\t{ \\t\\treturn iterator(_last); \\t} private: \\tT *_first;//起始数组位置 \\tT *_last;//指向最后一个有效元素后继位置 \\tT *_end;//指向数组空间的后继位置 \\tAlloc _allocator;//定义容器的空间配置器对象 \\tvoid expand()//扩容 \\t{ \\t\\tint size = _end - _first; \\t\\t//T *ptmp = new T[2*size]; \\t\\tT *ptmp = _allocator.allocate(2*size); \\t\\tfor (int i=0; i&lt;size; ++i) \\t\\t{ \\t\\t\\t_allocator.construct(ptmp+i, _first[i]); \\t\\t\\t//ptmp[i] = _first[i]; \\t\\t} \\t\\t//delete[]_first; \\t\\tfor (T *p=_first; p!=_last; ++p) \\t\\t{ \\t\\t\\t_allocator.destroy(p); \\t\\t} \\t\\t_allocator.deallocate(_first); \\t\\t_first = ptmp; \\t\\t_last = _first + size; \\t\\t_end = _first + 2*size; \\t} }; int main() { \\tvector&lt;int&gt; vec; \\tfor (int i=0; i&lt;20; ++i) \\t{ \\t\\tvec.push_back(rand()%100); \\t} \\tint size = vec.size();//[]重载针对vector有意义 \\tfor (int i=0; i&lt;size; ++i) \\t{ \\t\\tcout &lt;&lt; vec[i] &lt;&lt; \\" \\";//底层是数组，O(1) \\t} \\tcout &lt;&lt; endl; \\tvector&lt;int&gt;::iterator it = vec.begin(); \\t//auto it = vec.begin(); \\tfor (; it!=vec.end(); ++it) \\t{ \\t\\tcout &lt;&lt; *it &lt;&lt; \\" \\"; \\t} \\tcout &lt;&lt; endl; \\tfor(int val : vec)//底层还是通过容器的迭代器来实现遍历的 \\t{ \\t\\tcout &lt;&lt; val &lt;&lt; \\" \\"; \\t} \\tcout &lt;&lt; endl; \\treturn 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"运算符重载"}],["meta",{"property":"article:tag","content":"迭代器"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vector迭代器的实现\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":2.85,"words":856},"filePathRelative":"ccpp/05 运算符重载/vector迭代器的实现.md","excerpt":"<h1> vector迭代器的实现</h1>\\n<p><strong>泛型算法：给所有容器都可以使用，参数接受的都是容器的迭代器。</strong></p>\\n<div class=\\"language-c++ line-numbers-mode\\" data-ext=\\"c++\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">//容器的空间配置器</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">template</span><span style=\\"color: #ABB2BF\\"> &lt;</span><span style=\\"color: #C678DD\\">typename</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">struct</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Allocator</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #C678DD\\">*</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">allocate</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">size_t</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">size</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #7F848E; font-style: italic\\">//只负责内存开辟</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> (T</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #61AFEF\\">malloc</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">sizeof</span><span style=\\"color: #ABB2BF\\">(T) </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\"> size);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">deallocate</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">*</span><span style=\\"color: #E06C75; font-style: italic\\">p</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #7F848E; font-style: italic\\">//只负责内存释放</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #61AFEF\\">free</span><span style=\\"color: #ABB2BF\\">(p);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">construct</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">*</span><span style=\\"color: #E06C75; font-style: italic\\">p</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #E06C75; font-style: italic\\">val</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #7F848E; font-style: italic\\">//已经开辟好的内存上，负责对象构造</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">new</span><span style=\\"color: #ABB2BF\\"> (p) </span><span style=\\"color: #61AFEF\\">T</span><span style=\\"color: #ABB2BF\\">(val);</span><span style=\\"color: #7F848E; font-style: italic\\">//定位new，指定内存上构造val，T(val)拷贝构造</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">destroy</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">*</span><span style=\\"color: #E06C75; font-style: italic\\">p</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #7F848E; font-style: italic\\">//只负责对象析构</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #E5C07B\\">p</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #61AFEF\\">~T</span><span style=\\"color: #ABB2BF\\">();</span><span style=\\"color: #7F848E; font-style: italic\\">//~T()代表了T类型的析构函数</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">template</span><span style=\\"color: #ABB2BF\\"> &lt;</span><span style=\\"color: #C678DD\\">typename</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">typename</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Alloc</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> Allocator&lt;</span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #ABB2BF\\">&gt;&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">vector</span><span style=\\"color: #7F848E; font-style: italic\\">//向量容器</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">public:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #61AFEF\\">vector</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">size</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">10</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #7F848E; font-style: italic\\">//构造</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t\\t//_first = new T[size];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_first </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">allocate</span><span style=\\"color: #ABB2BF\\">(size);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_last </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> _first;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_end </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> _first </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> size;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #61AFEF\\">~vector</span><span style=\\"color: #ABB2BF\\">()</span><span style=\\"color: #7F848E; font-style: italic\\">//析构</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t\\t//delete[]_first;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (T </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">p</span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\">_first; p</span><span style=\\"color: #C678DD\\">!=</span><span style=\\"color: #ABB2BF\\">_last; </span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">p)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">destroy</span><span style=\\"color: #ABB2BF\\">(p);</span><span style=\\"color: #7F848E; font-style: italic\\">//把_first指针指向的数组的有效元素析构</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">deallocate</span><span style=\\"color: #ABB2BF\\">(_first);</span><span style=\\"color: #7F848E; font-style: italic\\">//释放堆上的数组内存</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_first </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> _last </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> _end </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">nullptr</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #61AFEF\\">vector</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">vector</span><span style=\\"color: #ABB2BF\\">&lt;</span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #ABB2BF\\">&gt; </span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #E06C75; font-style: italic\\">rhs</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #7F848E; font-style: italic\\">//拷贝构造</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> size </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">rhs</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_end</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">rhs</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_first</span><span style=\\"color: #ABB2BF\\">;</span><span style=\\"color: #7F848E; font-style: italic\\">//空间大小</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t\\t//_first = new T[size];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_first </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">allocate</span><span style=\\"color: #ABB2BF\\">(size);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> len </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">rhs</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_last</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">rhs</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_first</span><span style=\\"color: #ABB2BF\\">;</span><span style=\\"color: #7F848E; font-style: italic\\">//有效元素</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> i</span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">; i</span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\">len; </span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">i)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t\\t\\t//_first[i] = rhs._first[i];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">construct</span><span style=\\"color: #ABB2BF\\">(_first</span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\">i, </span><span style=\\"color: #E5C07B\\">rhs</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_first</span><span style=\\"color: #ABB2BF\\">[i]);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_last </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> _first </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> len;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_end </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> _first </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> size;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #E5C07B\\">vector</span><span style=\\"color: #ABB2BF\\">&lt;</span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #ABB2BF\\">&gt;</span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">operator</span><span style=\\"color: #ABB2BF\\">=(</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">vector</span><span style=\\"color: #ABB2BF\\">&lt;</span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #ABB2BF\\">&gt; </span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #E06C75; font-style: italic\\">rhs</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #7F848E; font-style: italic\\">//赋值运算符重载</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E5C07B\\">this</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">==</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\">rhs)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #E5C07B\\">this</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t\\t//delete[]_first;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (T </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">p</span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\">_first; p</span><span style=\\"color: #C678DD\\">!=</span><span style=\\"color: #ABB2BF\\">_last; </span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">p)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">destory</span><span style=\\"color: #ABB2BF\\">(p);</span><span style=\\"color: #7F848E; font-style: italic\\">//把_first指针指向的数组的有效元素析构</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">deallocate</span><span style=\\"color: #ABB2BF\\">(_first);</span><span style=\\"color: #7F848E; font-style: italic\\">//释放堆上的数组内存</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> size </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">rhs</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_end</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">rhs</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_first</span><span style=\\"color: #ABB2BF\\">;</span><span style=\\"color: #7F848E; font-style: italic\\">//空间大小</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_first </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">allocate</span><span style=\\"color: #ABB2BF\\">(size);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> len </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">rhs</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_last</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">rhs</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_first</span><span style=\\"color: #ABB2BF\\">;</span><span style=\\"color: #7F848E; font-style: italic\\">//有效元素</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> i</span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">; i</span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\">len; </span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">i)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">construct</span><span style=\\"color: #ABB2BF\\">(_first</span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\">i, </span><span style=\\"color: #E5C07B\\">rhs</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_first</span><span style=\\"color: #ABB2BF\\">[i]);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_last </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> _first </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> len;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_end </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> _first </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> size;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #E5C07B\\">this</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">push_back</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #E06C75; font-style: italic\\">val</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #7F848E; font-style: italic\\">//尾插</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #61AFEF\\">full</span><span style=\\"color: #ABB2BF\\">())</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #61AFEF\\">expand</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t\\t//*_last++ = val;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">construct</span><span style=\\"color: #ABB2BF\\">(_last, val);</span><span style=\\"color: #7F848E; font-style: italic\\">//_last指针指向的内存构造一个值为val的对象</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_last</span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">pop_back</span><span style=\\"color: #ABB2BF\\">()</span><span style=\\"color: #7F848E; font-style: italic\\">//尾删</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #61AFEF\\">empty</span><span style=\\"color: #ABB2BF\\">()) </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t\\t//--_last;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t\\t//不仅要把_last指针--，还需要析构删除的元素</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">--</span><span style=\\"color: #ABB2BF\\">_last;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">destroy</span><span style=\\"color: #ABB2BF\\">(_last);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">back</span><span style=\\"color: #ABB2BF\\">()</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #7F848E; font-style: italic\\">//返回容器末尾元素值</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">(_last </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">bool</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">full</span><span style=\\"color: #ABB2BF\\">()</span><span style=\\"color: #C678DD\\">const</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> _last </span><span style=\\"color: #C678DD\\">==</span><span style=\\"color: #ABB2BF\\"> _end;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">bool</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">empty</span><span style=\\"color: #ABB2BF\\">()</span><span style=\\"color: #C678DD\\">const</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> _first </span><span style=\\"color: #C678DD\\">==</span><span style=\\"color: #ABB2BF\\"> _last;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">size</span><span style=\\"color: #ABB2BF\\">()</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #7F848E; font-style: italic\\">//返回容器中元素个数</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> _last </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #ABB2BF\\"> _first;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">operator</span><span style=\\"color: #ABB2BF\\">[](</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">index</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (index </span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">||</span><span style=\\"color: #ABB2BF\\"> index </span><span style=\\"color: #C678DD\\">&gt;=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">size</span><span style=\\"color: #ABB2BF\\">())</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #C678DD\\">throw</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"OutOfRangeException\\"</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">_first</span><span style=\\"color: #ABB2BF\\">[index];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t//迭代器一般实现成容器的嵌套类型</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">iterator</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">public:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #61AFEF\\">iterator</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">*</span><span style=\\"color: #E06C75; font-style: italic\\">ptr</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">nullptr</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t:</span><span style=\\"color: #61AFEF\\">_ptr</span><span style=\\"color: #ABB2BF\\">(ptr){}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">bool</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">operator</span><span style=\\"color: #ABB2BF\\">!=(</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">iterator</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #E06C75; font-style: italic\\">it</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #C678DD\\">const</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> _ptr </span><span style=\\"color: #C678DD\\">!=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">it</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_ptr</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">operator</span><span style=\\"color: #ABB2BF\\">++()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t_ptr</span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">operator</span><span style=\\"color: #ABB2BF\\">*()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">_ptr;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">T</span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">operator</span><span style=\\"color: #ABB2BF\\">*()</span><span style=\\"color: #C678DD\\">const</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">_ptr;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">private:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\tT </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">_ptr;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t};</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #E5C07B\\">iterator</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">begin</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">iterator</span><span style=\\"color: #ABB2BF\\">(_first);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #E5C07B\\">iterator</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">end</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">iterator</span><span style=\\"color: #ABB2BF\\">(_last);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">private:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tT </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">_first;</span><span style=\\"color: #7F848E; font-style: italic\\">//起始数组位置</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tT </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">_last;</span><span style=\\"color: #7F848E; font-style: italic\\">//指向最后一个有效元素后继位置</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tT </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">_end;</span><span style=\\"color: #7F848E; font-style: italic\\">//指向数组空间的后继位置</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tAlloc _allocator;</span><span style=\\"color: #7F848E; font-style: italic\\">//定义容器的空间配置器对象</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">expand</span><span style=\\"color: #ABB2BF\\">()</span><span style=\\"color: #7F848E; font-style: italic\\">//扩容</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> size </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> _end </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #ABB2BF\\"> _first;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t\\t//T *ptmp = new T[2*size];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\tT </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">ptmp </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">allocate</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #D19A66\\">2</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">size);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> i</span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">; i</span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\">size; </span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">i)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">construct</span><span style=\\"color: #ABB2BF\\">(ptmp</span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\">i, </span><span style=\\"color: #E5C07B\\">_first</span><span style=\\"color: #ABB2BF\\">[i]);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t\\t\\t//ptmp[i] = _first[i];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t\\t//delete[]_first;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (T </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">p</span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\">_first; p</span><span style=\\"color: #C678DD\\">!=</span><span style=\\"color: #ABB2BF\\">_last; </span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">p)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">destroy</span><span style=\\"color: #ABB2BF\\">(p);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #E5C07B\\">_allocator</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">deallocate</span><span style=\\"color: #ABB2BF\\">(_first);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_first </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> ptmp;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_last </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> _first </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> size;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t_end </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> _first </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">2</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">size;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">main</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tvector</span><span style=\\"color: #C678DD\\">&lt;int&gt;</span><span style=\\"color: #ABB2BF\\"> vec;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> i</span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">; i</span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #D19A66\\">20</span><span style=\\"color: #ABB2BF\\">; </span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">i)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #E5C07B\\">vec</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">push_back</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #61AFEF\\">rand</span><span style=\\"color: #ABB2BF\\">()</span><span style=\\"color: #56B6C2\\">%</span><span style=\\"color: #D19A66\\">100</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> size </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">vec</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">size</span><span style=\\"color: #ABB2BF\\">();</span><span style=\\"color: #7F848E; font-style: italic\\">//[]重载针对vector有意义</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> i</span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">; i</span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\">size; </span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">i)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\tcout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">vec</span><span style=\\"color: #ABB2BF\\">[i] </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\" \\"</span><span style=\\"color: #ABB2BF\\">;</span><span style=\\"color: #7F848E; font-style: italic\\">//底层是数组，O(1)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tcout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tvector&lt;</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\">&gt;::iterator it </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">vec</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">begin</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t//auto it = vec.begin();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (; it</span><span style=\\"color: #C678DD\\">!=</span><span style=\\"color: #E5C07B\\">vec</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">end</span><span style=\\"color: #ABB2BF\\">(); </span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">it)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\tcout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">it </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\" \\"</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tcout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> val : vec)</span><span style=\\"color: #7F848E; font-style: italic\\">//底层还是通过容器的迭代器来实现遍历的</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\tcout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> val </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\" \\"</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tcout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{s as data};
