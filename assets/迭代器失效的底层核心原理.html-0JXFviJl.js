const e=JSON.parse('{"key":"v-62b6f00d","path":"/ccpp/05%20%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%A4%B1%E6%95%88%E7%9A%84%E5%BA%95%E5%B1%82%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86.html","title":"迭代器失效的底层核心原理","lang":"zh-CN","frontmatter":{"title":"迭代器失效的底层核心原理","icon":"file","order":6,"headerDepth":4,"category":["c/c++"],"tag":["运算符重载","迭代器"],"description":"迭代器失效的底层核心原理 迭代器失效问题 对容器的操作，称为。 迭代器失效情况 当容器调用**erase()方法后，到**的所有迭代器全部失效。 当容器调用**insert()方法后，到**的所有迭代器全部失效。 如果容器**，在其他地方重新又开辟了一块内存。原来容器底层的内存上所保存的迭代器**了。 不同容器的迭代器，是不能进行比较运算的。","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/05%20%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%A4%B1%E6%95%88%E7%9A%84%E5%BA%95%E5%B1%82%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"迭代器失效的底层核心原理"}],["meta",{"property":"og:description","content":"迭代器失效的底层核心原理 迭代器失效问题 对容器的操作，称为。 迭代器失效情况 当容器调用**erase()方法后，到**的所有迭代器全部失效。 当容器调用**insert()方法后，到**的所有迭代器全部失效。 如果容器**，在其他地方重新又开辟了一块内存。原来容器底层的内存上所保存的迭代器**了。 不同容器的迭代器，是不能进行比较运算的。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"运算符重载"}],["meta",{"property":"article:tag","content":"迭代器"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"迭代器失效的底层核心原理\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[{"level":2,"title":"迭代器失效问题","slug":"迭代器失效问题","link":"#迭代器失效问题","children":[]},{"level":2,"title":"迭代器失效情况","slug":"迭代器失效情况","link":"#迭代器失效情况","children":[{"level":3,"title":"失效问题1：把vec容器中所有的偶数全部删除","slug":"失效问题1-把vec容器中所有的偶数全部删除","link":"#失效问题1-把vec容器中所有的偶数全部删除","children":[]},{"level":3,"title":"失效问题2：给vec容器中所有的偶数前面添加一个小于偶数值1的数字","slug":"失效问题2-给vec容器中所有的偶数前面添加一个小于偶数值1的数字","link":"#失效问题2-给vec容器中所有的偶数前面添加一个小于偶数值1的数字","children":[]}]},{"level":2,"title":"如何解决迭代器失效问题","slug":"如何解决迭代器失效问题","link":"#如何解决迭代器失效问题","children":[{"level":3,"title":"解决失效问题1：解决删除问题","slug":"解决失效问题1-解决删除问题","link":"#解决失效问题1-解决删除问题","children":[]},{"level":3,"title":"解决失效问题2：解决增加问题","slug":"解决失效问题2-解决增加问题","link":"#解决失效问题2-解决增加问题","children":[]}]},{"level":2,"title":"解决迭代器失效底层原理","slug":"解决迭代器失效底层原理","link":"#解决迭代器失效底层原理","children":[]}],"git":{},"readingTime":{"minutes":7.91,"words":2373},"filePathRelative":"ccpp/05 运算符重载/迭代器失效的底层核心原理.md","excerpt":"<h1> 迭代器失效的底层核心原理</h1>\\n<h2> 迭代器失效问题</h2>\\n<p><strong>对容器的操作，称为。</strong></p>\\n<h2> 迭代器失效情况</h2>\\n<ol>\\n<li>\\n<p>当容器调用**<code>erase()</code><strong>方法后，</strong><strong>到</strong>**的所有迭代器全部失效。</p>\\n</li>\\n<li>\\n<p>当容器调用**<code>insert()</code><strong>方法后，</strong><strong>到</strong>**的所有迭代器全部失效。</p>\\n</li>\\n<li>\\n<p>如果容器**<strong>，在其他地方重新又开辟了一块内存。原来容器底层的内存上所保存的迭代器</strong>**了。</p>\\n</li>\\n<li>\\n<p><strong>不同容器的迭代器，是不能进行比较运算的</strong>。</p>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
