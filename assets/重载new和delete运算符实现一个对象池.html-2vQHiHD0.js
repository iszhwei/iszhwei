import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as t,c as B,d as n,e as s,f as a,w as p,a as c}from"./app-2pke9_a8.js";const r="/assets/image-20240410192158623-9v6Ceirv.png",i={},y=n("h1",{id:"重载new和delete运算符实现一个对象池",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#重载new和delete运算符实现一个对象池","aria-hidden":"true"},"#"),s(" 重载new和delete运算符实现一个对象池")],-1),F=n("p",null,"[new/delete关键字 | 张威的编程学习笔记 (github.io)](https://iszhwei.github.io/ccpp/02 c__基础/new、delete.html)",-1),d=n("strong",null,"会使得我们的程序进程的",-1),A=c('<h2 id="使用队列的push和pop入队和出队操作模拟一个简单对象池的实现的例子" tabindex="-1"><a class="header-anchor" href="#使用队列的push和pop入队和出队操作模拟一个简单对象池的实现的例子" aria-hidden="true">#</a> 使用队列的push和pop入队和出队操作模拟一个简单对象池的实现的例子</h2><figure><img src="'+r+`" alt="image-20240410192158623" tabindex="0" loading="lazy"><figcaption>image-20240410192158623</figcaption></figure><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;ctime&gt;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Queue</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Queue</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		_front </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _rear </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">QueueItem</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">~Queue</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		QueueItem</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> cur </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _front;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (cur </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			_front </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_front</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">_next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> cur;</span></span>
<span class="line"><span style="color:#ABB2BF;">			cur </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _front;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 有了对象池后，这个操作在多数情况下只需要构造而没有分配内存的操作</span></span>
<span class="line"><span style="color:#ABB2BF;">		QueueItem</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> item </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">QueueItem</span><span style="color:#ABB2BF;">(val);</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">_rear</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">_next</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> item;</span></span>
<span class="line"><span style="color:#ABB2BF;">		_rear </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> item;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// _front指向队首元素前一个位置</span></span>
<span class="line"><span style="color:#ABB2BF;">		QueueItem</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> first </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_front</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">_next</span><span style="color:#ABB2BF;">;;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">_front</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">_next</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">first</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">_next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">_front</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">_next</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			_rear </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _front;</span><span style="color:#7F848E;font-style:italic;"> // 置空</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> first;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">front</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">const</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_front</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E5C07B;">_next</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">_data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> _front </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> _rear; }</span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 内部类，队列的元素抽象</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">QueueItem</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#61AFEF;">QueueItem</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">T</span><span style="color:#ABB2BF;">()) : </span><span style="color:#61AFEF;">_data</span><span style="color:#ABB2BF;">(data), </span><span style="color:#61AFEF;">_next</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 给QueueItem提供自定义内存管理</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">void*</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;"> new(</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">size</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 提前开辟POOL_ITEM_SIZE个对象的空间，不构造</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (_itemPool </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">			{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 分配字节，如果用new QueueItem会陷入递归调用</span></span>
<span class="line"><span style="color:#ABB2BF;">				_itemPool </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (QueueItem</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;">[POOL_ITEM_SIZE </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(QueueItem)];</span></span>
<span class="line"><span style="color:#ABB2BF;">				QueueItem</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _itemPool;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 将每个对象空间组织成链表</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 每次循环跳跃空间大小为sizeof(QueueItem)</span></span>
<span class="line"><span style="color:#ABB2BF;">				</span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (; p </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> _itemPool </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> POOL_ITEM_SIZE </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">; </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">p)</span></span>
<span class="line"><span style="color:#ABB2BF;">				{</span></span>
<span class="line"><span style="color:#ABB2BF;">					</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">_next</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> p </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">				</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">_next</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 已经有对象池，则从头取出一块对象空间来</span></span>
<span class="line"><span style="color:#ABB2BF;">			QueueItem</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _itemPool;</span></span>
<span class="line"><span style="color:#ABB2BF;">			_itemPool </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_itemPool</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">_next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> p;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;"> delete(</span><span style="color:#C678DD;">void*</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">ptr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 头插法归还空间</span></span>
<span class="line"><span style="color:#ABB2BF;">			QueueItem</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (QueueItem</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)ptr;</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">_next</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> _itemPool;</span></span>
<span class="line"><span style="color:#ABB2BF;">			_itemPool </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> p;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		T _data;</span></span>
<span class="line"><span style="color:#ABB2BF;">		QueueItem</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> _next;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> QueueItem</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> _itemPool;</span><span style="color:#7F848E;font-style:italic;"> // 指向对象池首个元素的指针</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> POOL_ITEM_SIZE </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">100000</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // 对象池大小</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	QueueItem</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> _front;</span><span style="color:#7F848E;font-style:italic;"> // 队头不指向具体元素</span></span>
<span class="line"><span style="color:#ABB2BF;">	QueueItem</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> _rear;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// typename Queue&lt;T&gt;::QueueItem是告知编译器 Queue&lt;T&gt;::QueueItem是类型而不是成员变量，从而把后面*当乘号</span></span>
<span class="line"><span style="color:#C678DD;">template</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">typename</span><span style="color:#ABB2BF;"> Queue&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;::</span><span style="color:#E5C07B;">QueueItem</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">Queue&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;::QueueItem::_itemPool </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">clock_t</span><span style="color:#ABB2BF;"> startTime, endTime;</span></span>
<span class="line"><span style="color:#ABB2BF;">	startTime </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">clock</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;">//计时开始</span></span>
<span class="line"><span style="color:#ABB2BF;">	Queue</span><span style="color:#C678DD;">&lt;int&gt;</span><span style="color:#ABB2BF;"> que;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; i </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1000000</span><span style="color:#ABB2BF;">; </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">i)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">que</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(i);</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">que</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	endTime </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">clock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;The run time is:&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;">)(endTime </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> startTime) </span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;"> CLOCKS_PER_SEC </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;ms&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function v(u,m){const l=o("font");return t(),B("div",null,[y,F,n("p",null,[s("当我们需要，"),n("strong",null,[a(l,{color:"green"},{default:p(()=>[s("多次使用new和delete操作向系统申请和释放堆空间")]),_:1}),d,a(l,{color:"red"},{default:p(()=>[s("开销变得非常的大而且效率也非常低")]),_:1})]),s("。")]),n("p",null,[s("通过**"),a(l,{color:"green"},{default:p(()=>[s("重载new和delete构建")]),_:1}),s("**一个对象池，提高程序的效率和减少不必要的开销。")]),A])}const b=e(i,[["render",v],["__file","重载new和delete运算符实现一个对象池.html.vue"]]);export{b as default};
