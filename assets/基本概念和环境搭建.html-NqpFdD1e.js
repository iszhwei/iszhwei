import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as r,c as p,d as a,f as l,w as o,e as s,a as e}from"./app-mYdPlPhZ.js";const c="/assets/33975fc104d3457b89f30b9e51f59193-8h1ujsrV.png",d="/assets/48969874bcb047e79d16b5d43a5373e8-lN1FSno2.png",g="/assets/e1d96592243c4d3f938c5d2b15adf502-bvaWhkUb.png",u="/assets/image-20240503031243200-MaXbiUmD.png",B="/assets/00531903fcad4fc6a645001956350d4c-hMK7L89P.png",h="/assets/6418b801105d401b983becacb629ff06-jhX9QWd2.png",y="/assets/image-20240503031757393-Vmg88FQU.png",b="/assets/cf105e1a1d3b4ee2a3675fbdc3097e2c-BL3mS3A3.png",f="/assets/image-20240503032009152-0x0xXbg0.png",m={},_=a("h1",{id:"基本概念和环境搭建",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#基本概念和环境搭建","aria-hidden":"true"},"#"),s(" 基本概念和环境搭建")],-1),F=a("h2",{id:"一、不使用版本控制工具带来的问题",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#一、不使用版本控制工具带来的问题","aria-hidden":"true"},"#"),s(" 一、不使用版本控制工具带来的问题")],-1),A=a("p",null,"大家在开发项目的过程中，如果直接在本地系统上维护源码目录，经常会碰见下面的问题：",-1),v=a("strong",null,"想回到之前的版本",-1),x=a("li",null,[s("新功能添加完了，编译运行一切很顺利，功能也正常，但有时候运行会出现以前没见过的运行错误，非必现的，"),a("strong",null,"想查看和之前代码的差异"),s("，看看都在哪些源文件中修改了代码，该怎么办？")],-1),C=a("li",null,[s("团队开发项目，但是项目成员都不在一起，"),a("strong",null,"各自写的代码该如何添加到一块"),s("，还能避免错误，不会出现谁把谁的代码给覆盖了？")],-1),k=e('<h2 id="二、git分布式介绍" tabindex="-1"><a class="header-anchor" href="#二、git分布式介绍" aria-hidden="true">#</a> 二、git分布式介绍</h2><h3 id="_1-svn集中式版本控制系统" tabindex="-1"><a class="header-anchor" href="#_1-svn集中式版本控制系统" aria-hidden="true">#</a> 1.SVN<strong>集中式</strong>版本控制系统</h3><p>没有本地仓库，<strong>只有远程仓库</strong>；</p><ul><li>所有的<u>版本控制相关操作都是在SVN Server上进行</u>，</li><li>client和server必须<u>通过网络连接，client才能发送处理请求以及访问server上代码</u>，</li><li>client<u>没有本地仓库，只能提交到远程仓库</u></li></ul><figure><img src="'+c+'" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><h4 id="_2-git分布式版本控制系统" tabindex="-1"><a class="header-anchor" href="#_2-git分布式版本控制系统" aria-hidden="true">#</a> 2. git<strong>分布式</strong>版本控制系统</h4><p><strong>有本地仓库和远程仓库</strong>；</p><ul><li><p><u>不需要网络</u>，</p></li><li><p>可以由各自的本地仓库管理代码版本，<u>本地仓库记录了本地所有的代码的修改和提交</u>。</p></li><li><p>由于有了本地仓库，<u>客户端可以利用本地仓库恢复以前任意阶段的代码版本</u></p></li></ul><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最后<strong>合并时</strong>，大家把各自本地的代码<u>统一的提交到git server上，</u>就可以进行代码的合并了</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="三、github介绍" tabindex="-1"><a class="header-anchor" href="#三、github介绍" aria-hidden="true">#</a> 三、GitHub介绍</h2><p>新建一个HelloWorld项目</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>这里有一个<strong>Branch选项</strong>，可以理解为<u>代码的不同版本，默认是main分支。可以创建更多的分支进行管理，各分支代码也可以合并</u></li></ul><figure><img src="'+B+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><strong>commit</strong>：现在只提交了一个文件</li><li><strong>branch</strong>：现在只有master分支</li><li><strong>contributor</strong>：现在有一个贡献者</li></ul><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',18),q=a("strong",null,"远程的加密传输",-1),E=e(`<h2 id="四、windows搭建git环境" tabindex="-1"><a class="header-anchor" href="#四、windows搭建git环境" aria-hidden="true">#</a> 四、windows搭建git环境</h2><p>总共四个步骤：本地客户端生成公钥、配置本地远程通信的公钥、验证通信、配置用于标识客户端的用户名和邮箱</p><p>下载软件：https://git-scm.com/download/win</p><p><u>git bash和github之间是<strong>通过ssh加密传输的</strong>，因此每个客户端都需要配置公钥，<strong>一个公钥对应一个客户端</strong></u></p><p>【step 1】打开git bash，<strong>生成公私密钥</strong>，在github上进行公钥配置</p><p>输入如下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">ssh-keygen</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-t</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">rsa</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-C</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;github注册邮箱&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>【step 2】生成公钥id_rsa.pub后，<strong>拷贝公钥内容到github远程仓库</strong></p><figure><img src="'+b+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>到这里，客户端就可以和github服务器通信了</p><p>【step 3】输入命令<strong>验证</strong>是否可以通过配置的公钥通信</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">ssh</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-T</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">git@github.com</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+f+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>【step 4】<strong>配置客户端邮箱和用户名</strong>，以后你在github上提交的任何代码文件，都会附带客户端的邮箱用户名信息，<strong>用于标识提交文件的开发者</strong>，如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">config</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--global</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">user.name</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;xxx&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">config</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--global</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">user.email</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;xxxxx@qq.com&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、ubuntu搭建git环境" tabindex="-1"><a class="header-anchor" href="#五、ubuntu搭建git环境" aria-hidden="true">#</a> 五、ubuntu搭建git环境</h2><p>首先安装git并打开ssh服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">sudo</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">apt</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">git</span></span>
<span class="line"><span style="color:#61AFEF;">ps</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-elf</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">grep</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">ssh</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">#验证sshd是否启动</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输入命令配置环境</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">ssh-keygen</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-t</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">rsa</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-C</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;github注册邮箱&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">ssh</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-T</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">git@github.com</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">config</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--global</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">user.name</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;xxx&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">config</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--global</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">user.email</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;xxx@qq.com&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21);function D(w,z){const n=i("font");return r(),p("div",null,[_,F,A,a("ol",null,[a("li",null,[l(n,{color:"red"},{default:o(()=>[s("不小心")]),_:1}),s("把源代码的目录或文件"),l(n,{color:"red"},{default:o(()=>[s("删了")]),_:1}),s("，写了好久的代码没了！")]),a("li",null,[s("按需求添加新功能，写了好多代码，但净是"),l(n,{color:"red"},{default:o(()=>[s("编译错误，改都改不完")]),_:1}),s("，"),v,s("，开始大面积删除或者屏蔽代码，很崩溃，如果此时有个代码版本管理工具，该多好！")]),x,C]),k,a("p",null,[s("SSH是"),q,s("，"),l(n,{color:"red"},{default:o(()=>[s("比HTTPS更安全、高效")]),_:1})]),E])}const N=t(m,[["render",D],["__file","基本概念和环境搭建.html.vue"]]);export{N as default};
