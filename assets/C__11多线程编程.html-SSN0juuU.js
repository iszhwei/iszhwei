import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as c,c as i,d as s,f as a,w as e,e as n,a as o}from"./app-m9pC5KT-.js";const r="/assets/5d5102baa5c44740ae16d54dae32ec5d-SbJUCM9c.png",B="/assets/4722d81c73c243df87a042c711940cf4-J7WIWhbl.png",d="/assets/d1fe3c6f957248e2914a4e4747b39c33-iB-zJGdn.png",y="/assets/ea453cd543d14e35a63bbec3c23a8a9f-M_J8wBj4.png",u="/assets/bbc43ea1ccfd4625b053d4c0535a1fa6-vMyhHBSL.png",F="/assets/f87a90716aee4b868b6897cc0d3f2ff5-yJnhAviF.png",A="/assets/68c5d053000b4a93916e1e508bdc0474-v9MVDmIV.png",v="/assets/9417d5bedbf8414581579d3debc4718d-fiZXTMMs.png",m="/assets/426b8af8296b454ab3566417221d0166-P6rtOn0T.png",b="/assets/5d323cb235af4697b1e77e1ec5587501-PuGjc4tw.png",g="/assets/8241b3a709be4a7087e4dedb9a3a97ba-2y5sWPpC.png",C="/assets/fbd51baeabb94284afe8771c05d4733c-yogUwqx-.png",D="/assets/6f67c2b9630b4cfabec0e99457c16ca7-hQQaGh8r.png",f="/assets/2a65104c34fb48dd810d90696e1f378b-Pk67kwfO.png",h="/assets/5ccd55b5661f4640a703079d9fb0b36e-Zm9yPLzJ.png",_="/assets/51b693c10f284ab2924f014679209bf3-1szbWx3U.png",E={},k=o(`<h1 id="c-11多线程编程" tabindex="-1"><a class="header-anchor" href="#c-11多线程编程" aria-hidden="true">#</a> C++11多线程编程</h1><blockquote><p><strong>C++语言级别的多线程编程=》代码可以跨平台 windows/linux/mac</strong></p></blockquote><h2 id="_1、c-多线程介绍" tabindex="-1"><a class="header-anchor" href="#_1、c-多线程介绍" aria-hidden="true">#</a> 1、C++多线程介绍</h2><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">thread</span><span style="color:#ABB2BF;">(线程类)</span></span>
<span class="line"><span style="color:#61AFEF;">mutex</span><span style="color:#ABB2BF;">(互斥锁)</span></span>
<span class="line"><span style="color:#61AFEF;">condition_variable</span><span style="color:#ABB2BF;">(线程间的通信，条件变量)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">智能锁：(自动的加锁解锁)</span></span>
<span class="line"><span style="color:#ABB2BF;">lock_guard</span></span>
<span class="line"><span style="color:#ABB2BF;">unique_lock</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">atomic 原子类型 基于CAS操作的原子类型 线程安全的</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">sleep_for</span><span style="color:#ABB2BF;">(睡眠) </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">C</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">语言层面 thread（底层用的还是下面平台的方法） </span></span>
<span class="line"><span style="color:#ABB2BF;">   windows        linux  strace .</span><span style="color:#56B6C2;">/</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">out</span><span style="color:#ABB2BF;">（程序启动的跟踪打印的命令）</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#56B6C2;">|</span><span style="color:#ABB2BF;">             </span><span style="color:#56B6C2;">|</span></span>
<span class="line"><span style="color:#ABB2BF;">createThread    pthread_create</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),x=s("li",null,"可以通过编译器的编译，加个宏，识别当前的操作系统来适配通过语言层面编写thread底层自动调用相应的函数。",-1),q=o('<h2 id="_2、多线程编程" tabindex="-1"><a class="header-anchor" href="#_2、多线程编程" aria-hidden="true">#</a> 2、多线程编程</h2><p>线程内容：</p><h3 id="_1、怎么创建启动一个线程" tabindex="-1"><a class="header-anchor" href="#_1、怎么创建启动一个线程" aria-hidden="true">#</a> 1、怎么创建启动一个线程？</h3><p><code>std::thread</code>定义一个线程对象，传入线程所需要的线程函数和参数， 线程自动开启</p><h3 id="_2、子线程如何结束" tabindex="-1"><a class="header-anchor" href="#_2、子线程如何结束" aria-hidden="true">#</a> 2、子线程如何结束</h3><p>子线程函数运行完成，线程就结束了</p><h3 id="_3、主线程如何处理子线程" tabindex="-1"><a class="header-anchor" href="#_3、主线程如何处理子线程" aria-hidden="true">#</a> 3、主线程如何处理子线程</h3><p><code>t.join()</code> : 等待t线程结束，当前线程继续往下运行 <code>t.detach()</code> : 把t线程设置为分离线程，主线程结束，整个进程结束，所有子线程都自动结束了！</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p><strong>测试结果：</strong></p></li><li><p><strong>join()：</strong> 主线程会等待子线程运行结束，才继续执行</p></li><li><p>hello thread1会永远运行在main thread之前的，因为主线程join了，在等待子线程。</p></li></ul><h3 id="子线程睡眠" tabindex="-1"><a class="header-anchor" href="#子线程睡眠" aria-hidden="true">#</a> 子线程睡眠：</h3><figure><img src="'+B+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>this_thread()</code>： 是一个namespace，里面有一些方法；</p><ul><li><code>get_id()</code>：获取线程id;</li><li><code>yield()</code>：放弃当前线程这一轮的时间片</li><li><code>sleep_for()</code>：睡眠多长时间</li><li><code>sleep_until()</code>：睡到哪一个时间点</li></ul><p><code>std::chrono()</code>：定义了一些和<u>时间相关的常量</u>。</p><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>问题：主线程运行完成，查看如果当前进程还有未运行完成的子线程，进程就会异常终止</p><p>解决办法：</p><ul><li><p>主线程等待子线程结束，主线程继续往下运行<code>t1.join();</code></p></li><li><p>把子线程设置为分离线程<code>t1.detach();</code></p></li></ul><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;thread&gt;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">threadHandle1</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">time</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//让子线程睡眠time秒</span></span>
<span class="line"><span style="color:#ABB2BF;">	std::</span><span style="color:#E5C07B;">this_thread</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">sleep_for</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">chrono</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">seconds</span><span style="color:#ABB2BF;">(time));</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;hello thread1!&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">threadHandle2</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">time</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//让子线程睡眠time秒ace this_thread是namespace </span></span>
<span class="line"><span style="color:#ABB2BF;">	std::</span><span style="color:#E5C07B;">this_thread</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">sleep_for</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">chrono</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">seconds</span><span style="color:#ABB2BF;">(time));</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;hello thread2!&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//创建了一个线程对象,传入一个线程函数(作为线程入口函数),</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//新线程就开始运行了，没有先后顺序，随着CPU的调度算法执行 </span></span>
<span class="line"><span style="color:#ABB2BF;">	std::thread </span><span style="color:#61AFEF;">t1</span><span style="color:#ABB2BF;">(threadHandle1, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	std::thread </span><span style="color:#61AFEF;">t2</span><span style="color:#ABB2BF;">(threadHandle2, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//主线程(main)运行到这里，等待子线程结束，主线程才继续往下运行</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">t1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">t2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//把子线程设置为分离线程，子线程和主线程就毫无关系了</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//主线程结束的时候查看其他线程</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//但是这个子线程运行完还是没运行完都和这个主线程没关系了</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//这个子线程就从这个main分离出去了</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//运行程序时也看不到这个子线程的任何输出打印了</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//t1.detach();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;main thread done!&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//主线程运行完成，查看如果当前进程还有未运行完成的子线程</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//进程就会异常终止</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、线程间互斥—mutex互斥锁和lock-gard" tabindex="-1"><a class="header-anchor" href="#_3、线程间互斥—mutex互斥锁和lock-gard" aria-hidden="true">#</a> 3、线程间互斥—mutex互斥锁和lock_gard</h2><p><strong>所有线程都在输出，不能串行执行，因为线程都是并行执行的。</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//c++ thread模拟车站三个窗口买票的程序</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> ticketCount </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">	//车站有100张车票，由三个窗口一起卖票</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sellTicket</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;">(tickeCount </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //cout &lt;&lt; &quot;窗口：&quot; &lt;&lt; index &lt;&lt; &quot;卖出第：&quot; </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //&lt;&lt; ticketCount &lt;&lt; &quot;张票&quot; &lt;&lt; endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">        cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> ticketCount </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">        ticketCount</span><span style="color:#C678DD;">--</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        std::</span><span style="color:#E5C07B;">this_thread</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">sleep_for</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">chrono</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">milliseconds</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    list</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">std::thread</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> tlist;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">; i </span><span style="color:#C678DD;">&lt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">; </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">i) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">tlist</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push_back</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">thread</span><span style="color:#ABB2BF;">(sellTicket, i));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;">(std::thread</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;"> t : tlist) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;所以窗口买票结束！&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到有很多问题。（每次运行结果都存在差异，程序存在<strong>竞态条件</strong>）</p>',25),z=s("strong",null,"多线程程序",-1),w=s("strong",null,"线程安全",-1),P=o('<p><strong>竞态条件：</strong> 多线程执行的结果不一致的情况，会随着CPU对线程不同的调用顺序，而产生不同的运行结果。</p><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>不是线程安全的操作！</li><li>每个线程在1个指令周期之内是要保证完成的，但是在多个指令完全由CPU的调度决定的，线程在运行完每个指令的时候，都有可能CPU的时间片到了，线程阻塞住。等待下一轮我们再轮到这个线程执行，才能把剩余的时间片给到这个线程，线程继续执行下面的指令 。 两个线程可能减完的值是相同的，然后把相同的值写回去了</li><li>所以，我们要保证这个操作线程安全！！！每次只有1个线程去做减减操作</li></ul><h3 id="使用mutex-包含头文件-include-mutex" tabindex="-1"><a class="header-anchor" href="#使用mutex-包含头文件-include-mutex" aria-hidden="true">#</a> <strong>使用<code>mutex</code>，包含头文件：<code>#include &lt;mutex&gt;</code></strong></h3><ol><li><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;thread&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;mutex&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;list&gt;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> ticketCount </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">std::mutex mtx;</span><span style="color:#7F848E;font-style:italic;">	//全局的一把互斥锁</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//模拟买票的线程函数</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sellTicket</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">mtx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;">(ticketCount </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">	//特殊情况：ticketCount = 1 所以要进行 锁+双重判断</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //cout &lt;&lt; &quot;窗口：&quot; &lt;&lt; index &lt;&lt; &quot;卖出第：&quot; </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //&lt;&lt; ticketCount &lt;&lt; &quot;张票&quot; &lt;&lt; endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">        cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> ticketCount </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">        ticketCount</span><span style="color:#C678DD;">--</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">     	std::</span><span style="color:#E5C07B;">this_thread</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">sleep_for</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">chrono</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">milliseconds</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">mtx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,5),T=s("strong",null,"会导致",-1),j=s("figure",null,[s("img",{src:F,alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1),U=s("strong",null,"修改：",-1),J=o(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//模拟买票的线程函数</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sellTicket</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;">(ticketCount </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">	//特殊情况：ticketCount = 1 所以要进行 锁+双重判断</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">    	</span><span style="color:#E5C07B;">mtx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //cout &lt;&lt; &quot;窗口：&quot; &lt;&lt; index &lt;&lt; &quot;卖出第：&quot; </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //&lt;&lt; ticketCount &lt;&lt; &quot;张票&quot; &lt;&lt; endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">        cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> ticketCount </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">        ticketCount</span><span style="color:#C678DD;">--</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">     	std::</span><span style="color:#E5C07B;">this_thread</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">sleep_for</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">chrono</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">milliseconds</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">    	</span><span style="color:#E5C07B;">mtx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',2),M=s("strong",null,"原因：",-1),V=o(`<p><strong>注意：这里我把休眠时间挪到解锁之后，为了cpu充分调度！</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//模拟买票的线程函数</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sellTicket</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;">(ticketCount </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)	</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">    	</span><span style="color:#E5C07B;">mtx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(ticketCount </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //cout &lt;&lt; &quot;窗口：&quot; &lt;&lt; index &lt;&lt; &quot;卖出第：&quot; </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        	//&lt;&lt; ticketCount &lt;&lt; &quot;张票&quot; &lt;&lt; endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">        	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> ticketCount </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">        	ticketCount</span><span style="color:#C678DD;">--</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">mtx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        std::</span><span style="color:#E5C07B;">this_thread</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">sleep_for</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">chrono</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">milliseconds</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',3),H=s("strong",null,"在构造函数中执行mutex的lock加锁操作，在析构函数中执行mutex的unlock函数",-1),N=s("h3",{id:"lock-guard",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#lock-guard","aria-hidden":"true"},"#"),n(),s("strong",null,"lock_guard")],-1),S=s("li",null,[s("u",null,[n("将锁封装了，成员变量是一把"),s("strong",null,"互斥锁")]),n("；")],-1),W=s("strong",null,"控制锁的构造和析构",-1),G=o('<figure><img src="'+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>lock_guard构造函数直接加锁；</li><li>lock_guard析构函数直接解锁；</li></ul><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//模拟买票的线程函数</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sellTicket</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;">(ticketCount </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)	</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">    	lock_guard</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">std::mutex</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">(mtx);</span><span style="color:#7F848E;font-style:italic;">//智能指针的思想，是栈上的局部对象，出作用域就自动析构，释放锁</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(ticketCount </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //cout &lt;&lt; &quot;窗口：&quot; &lt;&lt; index &lt;&lt; &quot;卖出第：&quot; </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        	//&lt;&lt; ticketCount &lt;&lt; &quot;张票&quot; &lt;&lt; endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">        	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> ticketCount </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">        	ticketCount</span><span style="color:#C678DD;">--</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">mtx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        std::</span><span style="color:#E5C07B;">this_thread</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">sleep_for</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">chrono</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">milliseconds</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',4),I=o('<h3 id="unique-lock" tabindex="-1"><a class="header-anchor" href="#unique-lock" aria-hidden="true">#</a> unique_lock</h3><ul><li>和unique_ptr类似。</li><li>把带左值引用参数的拷贝构造函数和赋值重载函数删除了。</li><li><strong>支持带右值引用参数的拷贝构造函数和赋值重载函数</strong>（支持 临时对象拷贝构造一个新对象，临时对象给另一个对象赋值）。</li></ul><h4 id="unique-lock源码" tabindex="-1"><a class="header-anchor" href="#unique-lock源码" aria-hidden="true">#</a> unique_lock源码</h4><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>右值引用的拷贝构造：</strong></p><figure><img src="'+C+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>右值引用的赋值重载：</strong></p><figure><img src="'+D+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>左值引用参数的拷贝构造函数和赋值重载函数删除</strong></p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>成员变量：</strong></p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>指向一把锁的指针</li></ul><p><strong>lock()和unlock()方法：</strong></p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',15);function L(O,Q){const l=t("font");return c(),i("div",null,[k,s("ul",null,[x,s("li",null,[a(l,{color:"red"},{default:e(()=>[n("底层还是调用系统创建的API，只是语言层面加个封装")]),_:1}),n("，让用户更加方便使用。")])]),q,s("p",null,[z,n(" 涉及 "),a(l,{color:"red"},{default:e(()=>[w]),_:1}),n("问题；")]),P,s("p",null,[s("strong",null,[n("上面程序还是有问题的："),T,a(l,{color:"red"},{default:e(()=>[n("只有一个窗口在卖票")]),_:1})]),n("；")]),j,s("p",null,[U,a(l,{color:"green"},{default:e(()=>[n("将加锁解锁挪到while里面")]),_:1}),n("；")]),J,s("p",null,[n("代码还是有问题的，"),a(l,{color:"red"},{default:e(()=>[n("出现了-1")]),_:1}),n("！！！ "),M,n(" 当ticketCount = 1时，此时线程1进入临界区执行卖票，此时ticketCount还未变为0，"),a(l,{color:"red"},{default:e(()=>[n("线程2进入while循环，阻塞在互斥锁上，等待拿锁，当线程1执行完之后，释放锁了，线程2拿到互斥锁，记性执行卖票，ticketCount变为-1。")]),_:1}),s("strong",null,[n("解决方法： "),a(l,{color:"green"},{default:e(()=>[n("锁 + 双重判断")]),_:1}),n("。")])]),V,s("p",null,[s("strong",null,[n("问题：如果一个线程中间出现问题，或者其他情况，"),a(l,{color:"red"},{default:e(()=>[n("导致互斥锁没有释放")]),_:1}),n("，怎么办？")])]),s("ul",null,[s("li",null,[s("p",null,[n("还是要采用 "),a(l,{color:"green"},{default:e(()=>[n("智能指针")]),_:1}),n("的思想；")])]),s("li",null,[a(l,{color:"green"},{default:e(()=>[n("lock_guard，unique_lock;（保证所有线程都能释放锁，防止死锁问题的发生）")]),_:1}),n("；")]),s("li",null,[s("p",null,[n("两者都可以"),a(l,{color:"green"},{default:e(()=>[H]),_:1}),n("。")])])]),N,s("ul",null,[S,s("li",null,[W,n("，"),a(l,{color:"red"},{default:e(()=>[n("不允许锁进行拷贝构造和赋值重载")]),_:1}),n("。")]),s("li",null,[a(l,{color:"green"},{default:e(()=>[n("lock_guard保证所有线程都能释放锁，防止死锁问题的发生")]),_:1}),n("，类似scoped_ptr（拷贝构造和赋值函数删除掉）")])]),G,s("p",null,[s("strong",null,[a(l,{color:"red"},{default:e(()=>[n("lock_guard问题：在函数调用过程中，就用不了了，因为lock_guard不支持拷贝构造和赋值重载")]),_:1}),n("。")])]),I])}const K=p(E,[["render",L],["__file","C__11多线程编程.html.vue"]]);export{K as default};
