const e=JSON.parse('{"key":"v-fd4b7500","path":"/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/malloc%E3%80%81free%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0.html","title":"malloc、free的底层实现","lang":"zh-CN","frontmatter":{"title":"malloc、free的底层实现","icon":"file","order":13,"headerDepth":4,"category":["c/c++"],"tag":["c语言基础"],"description":"malloc、free的底层实现 前言 从操作系统角度来看，进程分配内存有2种方式，分别由2个系统调用完成：brk和mmap（不考虑共享内存）。 brk是将数据段(.data)的最高地址指针_edata mmap是在进程的虚拟地址空间中（堆和栈中间，称为文件映射区域的地方）找一块空闲的虚拟内存。","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/malloc%E3%80%81free%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"malloc、free的底层实现"}],["meta",{"property":"og:description","content":"malloc、free的底层实现 前言 从操作系统角度来看，进程分配内存有2种方式，分别由2个系统调用完成：brk和mmap（不考虑共享内存）。 brk是将数据段(.data)的最高地址指针_edata mmap是在进程的虚拟地址空间中（堆和栈中间，称为文件映射区域的地方）找一块空闲的虚拟内存。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"c语言基础"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"malloc、free的底层实现\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"malloc概述","slug":"malloc概述","link":"#malloc概述","children":[{"level":3,"title":"小于128K的内存分配","slug":"小于128k的内存分配","link":"#小于128k的内存分配","children":[]},{"level":3,"title":"大于128K的内存分配","slug":"大于128k的内存分配","link":"#大于128k的内存分配","children":[]}]},{"level":2,"title":"分配虚拟内存的细节","slug":"分配虚拟内存的细节","link":"#分配虚拟内存的细节","children":[{"level":3,"title":"malloc()实现：","slug":"malloc-实现","link":"#malloc-实现","children":[]},{"level":3,"title":"free实现：","slug":"free实现","link":"#free实现","children":[]},{"level":3,"title":"缺页中断","slug":"缺页中断","link":"#缺页中断","children":[]}]}],"git":{},"readingTime":{"minutes":9.15,"words":2744},"filePathRelative":"ccpp/01 c语言基础/malloc、free的底层实现.md","excerpt":"<h1> malloc、free的底层实现</h1>\\n<h2> 前言</h2>\\n<p>从<strong>操作系统角度</strong>来看，进程分配内存有2种方式，分别由2个系统调用完成：<code>brk</code>和<code>mmap</code>（不考虑共享内存）。</p>\\n<ul>\\n<li><code>brk</code>是将<strong>数据段(.data)<strong>的</strong>最高地址指针_edata</strong></li>\\n<li><code>mmap</code>是在进程的虚拟地址空间中（堆和栈中间，称为<strong>文件映射区域</strong>的地方）<strong>找一块空闲的虚拟内存</strong>。</li>\\n</ul>","autoDesc":true}');export{e as data};
