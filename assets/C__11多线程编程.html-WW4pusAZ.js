const e=JSON.parse('{"key":"v-6ce1e1a6","path":"/ccpp/18%20C__11%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/C__11%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B.html","title":"C++11多线程编程","lang":"zh-CN","frontmatter":{"title":"C++11多线程编程","icon":"file","order":2,"headerDepth":4,"category":["c/c++"],"tag":["多线程"],"description":"C++11多线程编程 C++语言级别的多线程编程=》代码可以跨平台 windows/linux/mac 1、C++多线程介绍 thread(线程类) mutex(互斥锁) condition_variable(线程间的通信，条件变量) 智能锁：(自动的加锁解锁) lock_guard unique_lock atomic 原子类型 基于CAS操作的原子类型 线程安全的 sleep_for(睡眠)","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/18%20C__11%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/C__11%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"C++11多线程编程"}],["meta",{"property":"og:description","content":"C++11多线程编程 C++语言级别的多线程编程=》代码可以跨平台 windows/linux/mac 1、C++多线程介绍 thread(线程类) mutex(互斥锁) condition_variable(线程间的通信，条件变量) 智能锁：(自动的加锁解锁) lock_guard unique_lock atomic 原子类型 基于CAS操作的原子类型 线程安全的 sleep_for(睡眠)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"多线程"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++11多线程编程\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[{"level":2,"title":"1、C++多线程介绍","slug":"_1、c-多线程介绍","link":"#_1、c-多线程介绍","children":[]},{"level":2,"title":"2、多线程编程","slug":"_2、多线程编程","link":"#_2、多线程编程","children":[{"level":3,"title":"1、怎么创建启动一个线程？","slug":"_1、怎么创建启动一个线程","link":"#_1、怎么创建启动一个线程","children":[]},{"level":3,"title":"2、子线程如何结束","slug":"_2、子线程如何结束","link":"#_2、子线程如何结束","children":[]},{"level":3,"title":"3、主线程如何处理子线程","slug":"_3、主线程如何处理子线程","link":"#_3、主线程如何处理子线程","children":[]},{"level":3,"title":"子线程睡眠：","slug":"子线程睡眠","link":"#子线程睡眠","children":[]}]},{"level":2,"title":"3、线程间互斥—mutex互斥锁和lock_gard","slug":"_3、线程间互斥—mutex互斥锁和lock-gard","link":"#_3、线程间互斥—mutex互斥锁和lock-gard","children":[{"level":3,"title":"使用mutex，包含头文件：#include <mutex>","slug":"使用mutex-包含头文件-include-mutex","link":"#使用mutex-包含头文件-include-mutex","children":[]},{"level":3,"title":"lock_guard","slug":"lock-guard","link":"#lock-guard","children":[]},{"level":3,"title":"unique_lock","slug":"unique-lock","link":"#unique-lock","children":[]}]}],"git":{},"readingTime":{"minutes":7.62,"words":2285},"filePathRelative":"ccpp/18 C++11知识汇总/C++11多线程编程.md","excerpt":"<h1> C++11多线程编程</h1>\\n<blockquote>\\n<p><strong>C++语言级别的多线程编程=》代码可以跨平台 windows/linux/mac</strong></p>\\n</blockquote>\\n<h2> 1、C++多线程介绍</h2>\\n<div class=\\"language-c++ line-numbers-mode\\" data-ext=\\"c++\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #61AFEF\\">thread</span><span style=\\"color: #ABB2BF\\">(线程类)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #61AFEF\\">mutex</span><span style=\\"color: #ABB2BF\\">(互斥锁)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #61AFEF\\">condition_variable</span><span style=\\"color: #ABB2BF\\">(线程间的通信，条件变量)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">智能锁：(自动的加锁解锁)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">lock_guard</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">unique_lock</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">atomic 原子类型 基于CAS操作的原子类型 线程安全的</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #61AFEF\\">sleep_for</span><span style=\\"color: #ABB2BF\\">(睡眠) </span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
