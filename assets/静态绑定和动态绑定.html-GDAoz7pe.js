import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as e,c as o,d as s,e as c,f as t,a as n}from"./app-mYdPlPhZ.js";const B="/assets/20200314092502553-60wJ2prp.png",r="/assets/20200314093852844-Nd7xE9yF.png",i="/assets/watermark_type_ZmFuZ3poZW5naGVpdGk_shadow_10_text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDQxNjkz_size_16_color_FFFFFF_t_70-171307290271612-rfh_RZf9.png",d="/assets/watermark_type_ZmFuZ3poZW5naGVpdGk_shadow_10_text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDQxNjkz_size_16_color_FFFFFF_t_70-TXyfh3dO.png",y="/assets/image-20240414140425580-iPD9I02k.png",F="/assets/image-20240414140738455-HIGh-W2t.png",A="/assets/image-20240414140701786-6dnqQYi1.png",v={},u=n(`<h1 id="静态绑定和动态绑定" tabindex="-1"><a class="header-anchor" href="#静态绑定和动态绑定" aria-hidden="true">#</a> 静态绑定和动态绑定</h1><h2 id="静态绑定" tabindex="-1"><a class="header-anchor" href="#静态绑定" aria-hidden="true">#</a> 静态绑定</h2><p>静态指的是<u>编译时期</u></p><p>绑定即<u>函数调用</u></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;typeinfo&gt;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Base</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Base</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">): </span><span style="color:#61AFEF;">ma</span><span style="color:#ABB2BF;">(data){}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Base::show()&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Base::show(int)&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">protected:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> ma;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Derive</span><span style="color:#ABB2BF;"> : </span><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Base</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Derive</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">):</span><span style="color:#61AFEF;">Base</span><span style="color:#ABB2BF;">(data),</span><span style="color:#61AFEF;">mb</span><span style="color:#ABB2BF;">(data){}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Derive::show()&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> mb;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	Derive </span><span style="color:#61AFEF;">d</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	Base </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pb </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">d;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">pb</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">pb</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(Base) </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span><span style="color:#7F848E;font-style:italic;">//4</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(Derive) </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span><span style="color:#7F848E;font-style:italic;">//8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> typeid(pb).</span><span style="color:#61AFEF;">name</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span><span style="color:#7F848E;font-style:italic;">//class Base *	//该指针的类型，定义的是Base*,所以打印也是Base*</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> typeid(</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pb).</span><span style="color:#61AFEF;">name</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span><span style="color:#7F848E;font-style:italic;">//class Base		//解引用，表示指针指向的类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>pb是基类类型， 调用的是派生类从基类继承来的方法</p><figure><img src="`+B+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">pb</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;">//静态绑定  call Base::show(01612DAh)</span></span>
<span class="line"><span style="color:#E5C07B;">pb</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//静态绑定 call Base::show(01612B2h)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>编译期间将高级源代码编译为汇编码，指定了<code>call Base::show(01612DAh)</code>与<code>call Base::show(01612B2h)</code>，即<strong>编译期间指定了函数的调用，这就是是静态绑定。</strong></p><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="动态绑定" tabindex="-1"><a class="header-anchor" href="#动态绑定" aria-hidden="true">#</a> 动态绑定</h2><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Base</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Base</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">): </span><span style="color:#61AFEF;">ma</span><span style="color:#ABB2BF;">(data){}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">virtual</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">()</span><span style="color:#7F848E;font-style:italic;">//虚函数</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Base::show()&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">virtual</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//虚函数</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Base::show(int)&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">protected:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> ma;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Derive</span><span style="color:#ABB2BF;"> : </span><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Base</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">Derive</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">):</span><span style="color:#61AFEF;">Base</span><span style="color:#ABB2BF;">(data),</span><span style="color:#61AFEF;">mb</span><span style="color:#ABB2BF;">(data){}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Derive::show()&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> mb;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>虚函数表里的“0”，表示的是虚函数指针vfptr在虚函数表里的偏移量</p></blockquote><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">Derive</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">d</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	Base </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pb </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">d;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">pb</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">pb</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>🍗🍗🍗<mark>pb依然是Base类型的指针，指向的是派生类对象，编译阶段编译器先去Base作用域看一下Base::show()</mark></p><ul><li><mark>若是普通函数，则进行静态绑定，<code>call Base::show()</code></mark></li><li><mark>若是虚函数，则进行动态绑定，</mark></li></ul><div class="language-asm line-numbers-mode" data-ext="asm"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">mov</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">eax</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">dword</span><span style="color:#ABB2BF;"> ptr[pb] #将派生类对象的前4个字节（虚函数表的地址vfptr）放入eax寄存器</span></span>
<span class="line"><span style="color:#C678DD;">mov</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">ecx</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">dword</span><span style="color:#ABB2BF;"> ptr[</span><span style="color:#D19A66;">eax</span><span style="color:#ABB2BF;">] #将vfptr存的地址（派生类虚函数表）的前4字节内存&amp;</span><span style="color:#61AFEF;">Derive:</span><span style="color:#ABB2BF;">:show()地址放入ecx</span></span>
<span class="line"><span style="color:#C678DD;">call</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">ecx</span><span style="color:#ABB2BF;"> #调用ecx，取虚函数地址</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>最终call 一个寄存器，只有在运行时候才知道寄存器的地址，找到哪个地址调用哪个函数，这就是动态绑定</mark></p><h3 id="sizeof变化的原因" tabindex="-1"><a class="header-anchor" href="#sizeof变化的原因" aria-hidden="true">#</a> <strong>sizeof变化的原因：</strong></h3><p>多了virtual，即虚函数会<u>多vfptr指针</u>，因此sizeof()大小也会变。</p><h3 id="pb的类型-typeid" tabindex="-1"><a class="header-anchor" href="#pb的类型-typeid" aria-hidden="true">#</a> <code>*pb</code>的类型：<code>typeid()</code></h3><ul><li>如果Base没有虚函数，<code>pb</code>是<code>*Class Base</code>;<code>*pb</code>识别的就是<strong>编译时期</strong>的类型, <code>*pb</code>就是<code>Class Base</code></li><li>如果Base有虚函数，<code>pb</code>是<code>*Class Base</code>；<code>*pb</code>识别的就是<strong>运行时期的类型</strong>：<strong>RTTI类型</strong>，即 <code>Class Derive</code></li></ul><h3 id="rtti运行时的类型信息" tabindex="-1"><a class="header-anchor" href="#rtti运行时的类型信息" aria-hidden="true">#</a> RTTI运行时的类型信息</h3><p>存储的时候字符串类型，表示该虚函数表是由什么类类型产生的</p><p>RTTI应用：可以通过typeid()判断两个类是否属于同一个类</p>`,27),D={href:"https://blog.csdn.net/aimalove/article/details/117920828#:~:text=%E5%9C%A8%E6%9C%89%E5%A4%9A%E6%80%81%E8%A1%8C%E4%B8%BA%E5%8F%91%E7%94%9F%E7%9A%84%E7%BB%A7%E6%89%BF%E4%BD%93%E7%B3%BB%E4%B8%AD%EF%BC%8C%E9%80%9A%E8%BF%87RTTI%EF%BC%8C%E7%A8%8B%E5%BA%8F%E8%83%BD%E5%A4%9F%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%B1%BB%E7%9A%84%E6%8C%87%E9%92%88%E6%88%96%E8%80%85%E5%BC%95%E7%94%A8%E6%9D%A5%E6%A3%80%E6%9F%A5%E8%BF%99%E4%BA%9B%E6%8C%87%E9%92%88%E6%88%96%E8%80%85%E5%BC%95%E7%94%A8%E6%89%80%E6%8C%87%E7%9A%84%E5%AE%9E%E9%99%85%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%B1%BB%E5%9E%8B%E3%80%82,RTTI%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%98%AF%E7%94%B1dynamic_cast%E5%92%8Ctypeid%E8%BF%90%E7%AE%97%E7%AC%A6%E6%9D%A5%E5%AE%9E%E7%8E%B0%E7%9A%84%E3%80%82",target:"_blank",rel:"noopener noreferrer"},m=n('<h2 id="vs-查看内存分布" tabindex="-1"><a class="header-anchor" href="#vs-查看内存分布" aria-hidden="true">#</a> vs 查看内存分布</h2><figure><img src="'+y+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li><p>cmd找到源文件所在目录</p></li><li><p>输入下面命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">cl</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-d1reportSingleClassLayout(</span><span style="color:#61AFEF;">输出对象内存布局信息，类的名字</span><span style="color:#D19A66;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ol><figure><img src="'+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>注意：在虚函数表中，派生类重写的函数的入口地址应该在基类的函数入口地址的下面，基类被重写的函数的入口地址应该是直接不用了，<strong>派生类的放在基类后</strong></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ol><li><p>静态指的是编译时期</p></li><li><p>动态是运行时期</p></li><li><p>绑定指的是函数调用</p></li><li><p>动态绑定一定是对虚函数的绑定</p></li></ol><p>因此：</p><p><mark>静态绑定会生成一个指令，call一个具体函数地址</mark></p><p><mark>动态绑定：若指针指向的是虚函数，则根据派生类前四个字节获取获取虚函数表指针，进一步获取虚函数表中虚函数地址，指令上是call一个寄存器，寄存器放的地址，只能运行时才能知道</mark></p>',10);function b(E,C){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,s("p",null,[s("a",D,[c("C++ RTTI介绍及使用示例（run-time type Identification）_rtti 使用-CSDN博客"),t(a)])]),m])}const f=l(v,[["render",b],["__file","静态绑定和动态绑定.html.vue"]]);export{f as default};
