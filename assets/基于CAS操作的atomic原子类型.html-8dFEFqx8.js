import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as c,c as r,d as n,e as s,f as a,w as o,a as e}from"./app-rY1SOIco.js";const i="/assets/7e7d24bb6c98400c8d1d70228a12ddeb-PktKz4DK.png",B="/assets/6cfb65e8a0b24c89b7fc6da0e4519bf3-KGn2Rp9K.png",d={},y=e(`<h1 id="基于cas操作的atomic原子类型" tabindex="-1"><a class="header-anchor" href="#基于cas操作的atomic原子类型" aria-hidden="true">#</a> 基于CAS操作的atomic原子类型</h1><p><strong>问题：</strong> 前面在进行卖票操作时，多线程操作不安全，票的数量Count不正确；</p><p><strong>解决方法：</strong> 前面是通过<strong>lock_gard互斥锁</strong>解决的；</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> count</span><span style="color:#C678DD;">=</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">lock_guard</span><span style="color:#ABB2BF;">&lt;std::</span><span style="color:#E5C07B;">mutex</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#61AFEF;">guard</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">mtx</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">count</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">lock_guard</span><span style="color:#ABB2BF;">&lt;std::</span><span style="color:#E5C07B;">mutex</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#61AFEF;">guard</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">mtx</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">count</span><span style="color:#C678DD;">--</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),u=n("p",null,"解决方法：",-1),A=n("li",null,[s("使用CAS保证上面++ --操作的原子特性就足够了，"),n("strong",null,"CAS也叫做无锁操作"),s("；")],-1),F=n("code",null,"exchange/swap指令",-1),v=n("u",null,"也就是说内存有一个数据读到CPU，CPU进行计算再把数据写回内存块的这样一个过程，线程没有做完的话，它是不允许其他线程再去使用总线的",-1),m=n("strong",null,"硬件上实现的加锁操作，对于软件层面可以说是无锁操作",-1),D=n("p",null,[n("strong",null,"无锁队列 => 就是由CAS来实现的")],-1),C=e(`<h2 id="c-11的atomic原子类型" tabindex="-1"><a class="header-anchor" href="#c-11的atomic原子类型" aria-hidden="true">#</a> C++11的atomic原子类型</h2><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;atomic&gt;</span><span style="color:#7F848E;font-style:italic;">//包含了很多原子类型</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',3),b=n("code",null,"yield()",-1),_=e(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;thread&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;atomic&gt;</span><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">//包含了很多原子类型</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;list&gt;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">volatile</span><span style="color:#ABB2BF;"> std::atomic_bool isReady </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">volatile</span><span style="color:#ABB2BF;"> std::atomic_int mycount </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">task</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">isReady)</span><span style="color:#7F848E;font-style:italic;">//还没有准备好 </span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		std::</span><span style="color:#E5C07B;">this_thread</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">yield</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;">//线程出让当前的CPU时间片，等待下一次调度</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//线程相当于还是就绪状态，等待CPU的下一次调度 </span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; i </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">; </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">i)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		mycount</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	list</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">std::thread</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> tlist;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; i </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">; </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">i)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">tlist</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push_back</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">thread</span><span style="color:#ABB2BF;">(task));</span><span style="color:#7F848E;font-style:italic;">//启动10个线程 </span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	std::</span><span style="color:#E5C07B;">this_thread</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">sleep_for</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">chrono</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">seconds</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">));</span><span style="color:#7F848E;font-style:italic;">//主线程睡眠3秒 </span></span>
<span class="line"><span style="color:#ABB2BF;">	isReady </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//所有子线程都进行mycount++ </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (std::thread</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;"> t : tlist)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;mycount:&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> mycount </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+B+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>因为mycount类型就是一个CAS原子操作，如果是普通int，结果就不一定是1000了；</p><p><strong>上面数据段的变量不加volatile出现的问题：</strong></p>',4),g=n("li",null,[s("一个进程中，"),n("strong",null,"不同的线程栈不同，但是堆和数据段都是共享的"),s("；")],-1),h=n("strong",null,"共享的变量，多线程会进行缓存",-1),f=n("strong",null,"读的还是自己的缓存，不能立马反应过来",-1),E=n("strong",null,"volatile，防止多线程对共享变量进行缓存，大家访问的都是原始内存中变量的值",-1),x=n("blockquote",null,[n("p",null,[s("线程缓存可以加快线程运行的效率，因为线程就像人一样，好不容易从内存上跑到CPU上，它还要不断从内存上取东西做运算，它好不容易占1次CPU的时间片，还要在"),n("u",null,[s("CPU和内存中不断来回跑，很"),n("strong",null,"浪费时间"),s("，所以操作系统对线程的执行来说，都是会让线程来CPU执行的时候把它们共享的变量在线程的栈上拷贝一份，统一的都带到CPU的缓存里")]),s("，"),n("u",null,[s("加个volatile ，就是让所有的线程对共享变量不再进行缓存，保证我们代码的"),n("strong",null,"正确性"),s("，一个线程对共享变量的改变马上就可以反映到另外一个线程里面了")]),s("，这就是原子类型。")])],-1);function k(P,U){const l=t("font");return c(),r("div",null,[y,n("p",null,[s("这里使用互斥锁存在的问题："),n("strong",null,[a(l,{color:"red"},{default:o(()=>[s("互斥锁是比较重的，临界区代码做的事情复杂的时候，应该使用；但是这里count++和–操作，非常简单；（大炮打蚊子，不合适）")]),_:1})])]),u,n("ul",null,[A,n("li",null,[s("（并不是说不加锁，只是这个加锁不在我们的软件层面，CPU和内存通信是通过系统总线进行的，"),a(l,{color:"red"},{default:o(()=>[s("CAS就是通过 "),F,s("给总线加锁")]),_:1}),s("，当一个线程在做CPU和内存之间数据的交换，"),v,s("，即"),m,s("）")])]),D,n("p",null,[n("strong",null,[s("优点： 有助于提高"),a(l,{color:"green"},{default:o(()=>[s("多线程操作的效率")]),_:1}),s("。")])]),C,n("p",null,[n("strong",null,[b,s("：线程"),a(l,{color:"red"},{default:o(()=>[s("让出当前CPU的时间片")]),_:1}),s("，等待下一次调度；然后线程处于"),a(l,{color:"red"},{default:o(()=>[s("就绪状态")]),_:1})]),s("，等待下一次CPU的调度，重新获取时间片")]),_,n("ul",null,[g,n("li",null,[h,s("，问题就是main线程中的isReady改成true后，其他线程不能立马看到isReady改成true了，"),a(l,{color:"red"},{default:o(()=>[f]),_:1}),s("；")])]),n("p",null,[s("解决方法： 在数据段的变量前面加上"),a(l,{color:"green"},{default:o(()=>[E]),_:1}),s("，一个线程对共享变量的改变，马上均能反应到另一个线程上。")]),x])}const w=p(d,[["render",k],["__file","基于CAS操作的atomic原子类型.html.vue"]]);export{w as default};
