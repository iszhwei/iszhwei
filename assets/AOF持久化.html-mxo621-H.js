const e=JSON.parse('{"key":"v-5cb072b3","path":"/redis/AOF%E6%8C%81%E4%B9%85%E5%8C%96.html","title":"AOF持久化","lang":"zh-CN","frontmatter":{"title":"AOF持久化","icon":"file","order":9,"headerDepth":4,"category":["redis"],"tag":["redis持久化"],"description":"AOF持久化 一、AOF概念 RDB存储的弊端 存储数据量较大，效率较低——基于快照思想，每次读写都是全部数据，当数据量巨大时，效率非常低 大数据量下的IO性能较低 基于fork创建子进程，内存产生额外消耗 宕机会带来数据丢失 AOF解决思路 不记录数据，记录操作过程 对均进行记录，排除丢失数据的风险 AOF（append only file）持久化：不记录数据，只是以独立日志的方式记录每次写命令，重启时再重新执行AOF文件中命令达到恢复数据的目的 AOF的主要作用是解决了数据持久化的实时性，目前已经是Redis持久化的主流方式（优先用AOF，再使用RDB）","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/redis/AOF%E6%8C%81%E4%B9%85%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"AOF持久化"}],["meta",{"property":"og:description","content":"AOF持久化 一、AOF概念 RDB存储的弊端 存储数据量较大，效率较低——基于快照思想，每次读写都是全部数据，当数据量巨大时，效率非常低 大数据量下的IO性能较低 基于fork创建子进程，内存产生额外消耗 宕机会带来数据丢失 AOF解决思路 不记录数据，记录操作过程 对均进行记录，排除丢失数据的风险 AOF（append only file）持久化：不记录数据，只是以独立日志的方式记录每次写命令，重启时再重新执行AOF文件中命令达到恢复数据的目的 AOF的主要作用是解决了数据持久化的实时性，目前已经是Redis持久化的主流方式（优先用AOF，再使用RDB）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"redis持久化"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"AOF持久化\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[{"level":2,"title":"一、AOF概念","slug":"一、aof概念","link":"#一、aof概念","children":[]},{"level":2,"title":"二、AOF写数据三种策略","slug":"二、aof写数据三种策略","link":"#二、aof写数据三种策略","children":[]},{"level":2,"title":"三、AOF功能配置","slug":"三、aof功能配置","link":"#三、aof功能配置","children":[]},{"level":2,"title":"四、AOF重写机制","slug":"四、aof重写机制","link":"#四、aof重写机制","children":[{"level":3,"title":"AOF重写作用","slug":"aof重写作用","link":"#aof重写作用","children":[]},{"level":3,"title":"AOF重写规则","slug":"aof重写规则","link":"#aof重写规则","children":[]},{"level":3,"title":"AOF重写方式","slug":"aof重写方式","link":"#aof重写方式","children":[]}]},{"level":2,"title":"五、AOF工作流程","slug":"五、aof工作流程","link":"#五、aof工作流程","children":[]},{"level":2,"title":"六、AOF和RDB的区别","slug":"六、aof和rdb的区别","link":"#六、aof和rdb的区别","children":[{"level":3,"title":"基于需求选择RDB和AOF","slug":"基于需求选择rdb和aof","link":"#基于需求选择rdb和aof","children":[]}]}],"git":{},"readingTime":{"minutes":8.41,"words":2523},"filePathRelative":"redis/AOF持久化.md","excerpt":"<h1> AOF持久化</h1>\\n<h2> 一、AOF概念</h2>\\n<p>RDB存储的弊端</p>\\n<ul>\\n<li>存储数据量较大，效率较低——<strong>基于快照思想，每次读写都是全部数据，当数据量巨大时，效率非常低</strong></li>\\n<li>大数据量下的IO性能较低</li>\\n<li>基于fork创建子进程，内存产生额外消耗</li>\\n<li>宕机会带来数据丢失</li>\\n</ul>\\n<p>AOF解决思路</p>\\n<ul>\\n<li>不记录数据，记录操作过程</li>\\n<li><strong>对均进行记录，排除丢失数据的风险</strong></li>\\n</ul>\\n<p>AOF（append only file）持久化：<strong>不记录数据，只是以独立日志的方式记录每次写命令</strong>，重启时再重新执行AOF文件中命令达到恢复数据的目的\\nAOF的主要作用是解决了数据持久化的实时性，目前已经是Redis持久化的<strong>主流方式</strong>（优先用AOF，再使用RDB）</p>","autoDesc":true}');export{e as data};
