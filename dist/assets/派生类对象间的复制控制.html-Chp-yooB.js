const s=JSON.parse('{"key":"v-7eb7ea5a","path":"/ccpp/06%20%E7%BB%A7%E6%89%BF/%E6%B4%BE%E7%94%9F%E7%B1%BB%E5%AF%B9%E8%B1%A1%E9%97%B4%E7%9A%84%E5%A4%8D%E5%88%B6%E6%8E%A7%E5%88%B6.html","title":"派生类对象间的复制控制","lang":"zh-CN","frontmatter":{"title":"派生类对象间的复制控制","icon":"file","order":7,"headerDepth":4,"category":["c/c++"],"tag":["继承"],"description":"派生类对象间的复制控制 从前面的知识，我们知道，基类的拷贝构造函数和operator=运算符函数不能被派生类继承，那么在执行派生类对象间的复制操作时，就需要注意以下几种情况: 如果用户定义了基类的拷贝构造函数，而的拷贝构造函数，那么在用一个派生类对象初始化新的派生类对象时，两对象间的**执行缺省的行为**（只拷贝值），而两对象间的**执行用户定义的基类拷贝构造函数**。 #include &lt;string.h&gt; #include &lt;iostream&gt; using std::cout; using std::endl; class Base { public: Base() : _pbase(nullptr) { cout &lt;&lt; \\"Base()\\" &lt;&lt; endl; } Base(const char *pbase) : _pbase(new char[strlen(pbase) + 1]()) { cout &lt;&lt; \\"Base(const char *)\\" &lt;&lt; endl; strcpy(_pbase, pbase); } Base(const Base &amp;rhs) : _pbase(new char[strlen(rhs._pbase) + 1]()) { cout &lt;&lt; \\"Base(const Base &amp;)\\" &lt;&lt; endl; strcpy(_pbase, rhs._pbase); } Base &amp;operator=(const Base &amp;rhs) { cout &lt;&lt; \\"Base &amp;operator=(const Base &amp;)\\" &lt;&lt; endl; if(this != &amp;rhs) { delete [] _pbase; _pbase = nullptr; _pbase = new char[strlen(rhs._pbase) + 1](); strcpy(_pbase, rhs._pbase); } return *this; } ~Base() { cout &lt;&lt; \\"~Base()\\" &lt;&lt; endl; if(_pbase) { delete [] _pbase; _pbase = nullptr;; } } friend std::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const Base &amp;rhs); private: char *_pbase; }; std::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const Base &amp;rhs) { if(rhs._pbase) { os &lt;&lt; rhs._pbase; } return os; } class Derived : public Base { public: Derived(const char *pbase) : Base(pbase) { cout &lt;&lt; \\"Derived(const char *)\\" &lt;&lt; endl; } ~Derived() { cout &lt;&lt; \\"~Derived()\\" &lt;&lt; endl; } friend std::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const Derived &amp;rhs); }; std::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const Derived &amp;rhs) { const Base &amp;ref = rhs; os &lt;&lt; ref; return os; } int main(int argc, char **argv) { Derived d1(\\"hello\\"); cout &lt;&lt; \\"d1 = \\" &lt;&lt; d1 &lt;&lt; endl; cout &lt;&lt;endl &lt;&lt; endl; Derived d2 = d1; cout &lt;&lt; \\"d1 = \\" &lt;&lt; d1 &lt;&lt; endl; cout &lt;&lt; \\"d2 = \\" &lt;&lt; d2 &lt;&lt; endl; cout &lt;&lt;endl &lt;&lt; endl; Derived d3(\\"world\\"); cout &lt;&lt; \\"d3 = \\" &lt;&lt; d3 &lt;&lt; endl; cout &lt;&lt; endl &lt;&lt; endl; d3 = d1; cout &lt;&lt; \\"d1 = \\" &lt;&lt; d1 &lt;&lt; endl; cout &lt;&lt; \\"d3 = \\" &lt;&lt; d3 &lt;&lt; endl; return 0; }","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/06%20%E7%BB%A7%E6%89%BF/%E6%B4%BE%E7%94%9F%E7%B1%BB%E5%AF%B9%E8%B1%A1%E9%97%B4%E7%9A%84%E5%A4%8D%E5%88%B6%E6%8E%A7%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"派生类对象间的复制控制"}],["meta",{"property":"og:description","content":"派生类对象间的复制控制 从前面的知识，我们知道，基类的拷贝构造函数和operator=运算符函数不能被派生类继承，那么在执行派生类对象间的复制操作时，就需要注意以下几种情况: 如果用户定义了基类的拷贝构造函数，而的拷贝构造函数，那么在用一个派生类对象初始化新的派生类对象时，两对象间的**执行缺省的行为**（只拷贝值），而两对象间的**执行用户定义的基类拷贝构造函数**。 #include &lt;string.h&gt; #include &lt;iostream&gt; using std::cout; using std::endl; class Base { public: Base() : _pbase(nullptr) { cout &lt;&lt; \\"Base()\\" &lt;&lt; endl; } Base(const char *pbase) : _pbase(new char[strlen(pbase) + 1]()) { cout &lt;&lt; \\"Base(const char *)\\" &lt;&lt; endl; strcpy(_pbase, pbase); } Base(const Base &amp;rhs) : _pbase(new char[strlen(rhs._pbase) + 1]()) { cout &lt;&lt; \\"Base(const Base &amp;)\\" &lt;&lt; endl; strcpy(_pbase, rhs._pbase); } Base &amp;operator=(const Base &amp;rhs) { cout &lt;&lt; \\"Base &amp;operator=(const Base &amp;)\\" &lt;&lt; endl; if(this != &amp;rhs) { delete [] _pbase; _pbase = nullptr; _pbase = new char[strlen(rhs._pbase) + 1](); strcpy(_pbase, rhs._pbase); } return *this; } ~Base() { cout &lt;&lt; \\"~Base()\\" &lt;&lt; endl; if(_pbase) { delete [] _pbase; _pbase = nullptr;; } } friend std::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const Base &amp;rhs); private: char *_pbase; }; std::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const Base &amp;rhs) { if(rhs._pbase) { os &lt;&lt; rhs._pbase; } return os; } class Derived : public Base { public: Derived(const char *pbase) : Base(pbase) { cout &lt;&lt; \\"Derived(const char *)\\" &lt;&lt; endl; } ~Derived() { cout &lt;&lt; \\"~Derived()\\" &lt;&lt; endl; } friend std::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const Derived &amp;rhs); }; std::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const Derived &amp;rhs) { const Base &amp;ref = rhs; os &lt;&lt; ref; return os; } int main(int argc, char **argv) { Derived d1(\\"hello\\"); cout &lt;&lt; \\"d1 = \\" &lt;&lt; d1 &lt;&lt; endl; cout &lt;&lt;endl &lt;&lt; endl; Derived d2 = d1; cout &lt;&lt; \\"d1 = \\" &lt;&lt; d1 &lt;&lt; endl; cout &lt;&lt; \\"d2 = \\" &lt;&lt; d2 &lt;&lt; endl; cout &lt;&lt;endl &lt;&lt; endl; Derived d3(\\"world\\"); cout &lt;&lt; \\"d3 = \\" &lt;&lt; d3 &lt;&lt; endl; cout &lt;&lt; endl &lt;&lt; endl; d3 = d1; cout &lt;&lt; \\"d1 = \\" &lt;&lt; d1 &lt;&lt; endl; cout &lt;&lt; \\"d3 = \\" &lt;&lt; d3 &lt;&lt; endl; return 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"继承"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"派生类对象间的复制控制\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":4.1,"words":1231},"filePathRelative":"ccpp/06 继承/派生类对象间的复制控制.md","excerpt":"<h1> 派生类对象间的复制控制</h1>\\n<p>从前面的知识，我们知道，<strong>基类的拷贝构造函数和operator=运算符函数不能被派生类继承</strong>，那么在执行派生类对象间的复制操作时，就需要注意以下几种情况:</p>\\n<ol>\\n<li>如果用户<strong>定义了<u>基类的</u>拷贝构造函数</strong>，而的拷贝构造函数，那么在用一个派生类对象初始化新的派生类对象时，两对象间的**执行缺省的行为**（只拷贝值），而两对象间的**执行用户定义的基类拷贝构造函数**。</li>\\n</ol>\\n<div class=\\"language-c++ line-numbers-mode\\" data-ext=\\"c++\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;string.h&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;iostream&gt;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">using</span><span style=\\"color: #ABB2BF\\"> std::cout;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">using</span><span style=\\"color: #ABB2BF\\"> std::endl;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Base</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">public:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">Base</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    : </span><span style=\\"color: #61AFEF\\">_pbase</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #D19A66\\">nullptr</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"Base()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">Base</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">char</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">*</span><span style=\\"color: #E06C75; font-style: italic\\">pbase</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    : </span><span style=\\"color: #61AFEF\\">_pbase</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">new</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">char</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #61AFEF\\">strlen</span><span style=\\"color: #ABB2BF\\">(pbase) </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">]())</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"Base(const char *)\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #61AFEF\\">strcpy</span><span style=\\"color: #ABB2BF\\">(_pbase, pbase);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">Base</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Base</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #E06C75; font-style: italic\\">rhs</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    : </span><span style=\\"color: #61AFEF\\">_pbase</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">new</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">char</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #61AFEF\\">strlen</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">rhs</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_pbase</span><span style=\\"color: #ABB2BF\\">) </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">]())</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"Base(const Base &amp;)\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #61AFEF\\">strcpy</span><span style=\\"color: #ABB2BF\\">(_pbase, </span><span style=\\"color: #E5C07B\\">rhs</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_pbase</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">Base</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&amp;operator</span><span style=\\"color: #ABB2BF\\">=(</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Base</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #E06C75; font-style: italic\\">rhs</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"Base &amp;operator=(const Base &amp;)\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">this</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">!=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\">rhs)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #C678DD\\">delete</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">[]</span><span style=\\"color: #ABB2BF\\"> _pbase;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            _pbase </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">nullptr</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            _pbase </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">new</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">char</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #61AFEF\\">strlen</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">rhs</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_pbase</span><span style=\\"color: #ABB2BF\\">) </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">]();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #61AFEF\\">strcpy</span><span style=\\"color: #ABB2BF\\">(_pbase, </span><span style=\\"color: #E5C07B\\">rhs</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_pbase</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #E5C07B\\">this</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">~Base</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"~Base()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\">(_pbase)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #C678DD\\">delete</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">[]</span><span style=\\"color: #ABB2BF\\"> _pbase;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            _pbase </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">nullptr</span><span style=\\"color: #ABB2BF\\">;;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">friend</span><span style=\\"color: #ABB2BF\\"> std::</span><span style=\\"color: #E5C07B\\">ostream</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&amp;operator</span><span style=\\"color: #ABB2BF\\">&lt;&lt;(std::</span><span style=\\"color: #E5C07B\\">ostream</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #E06C75; font-style: italic\\">os</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Base</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #E06C75; font-style: italic\\">rhs</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">private:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">char</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">_pbase;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">std::</span><span style=\\"color: #E5C07B\\">ostream</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&amp;operator</span><span style=\\"color: #ABB2BF\\">&lt;&lt;(std::</span><span style=\\"color: #E5C07B\\">ostream</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #E06C75; font-style: italic\\">os</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Base</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #E06C75; font-style: italic\\">rhs</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">rhs</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_pbase</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        os </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">rhs</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">_pbase</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> os;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Derived</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">: </span><span style=\\"color: #C678DD\\">public</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Base</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">public:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">Derived</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">char</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">*</span><span style=\\"color: #E06C75; font-style: italic\\">pbase</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    : </span><span style=\\"color: #61AFEF\\">Base</span><span style=\\"color: #ABB2BF\\">(pbase)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"Derived(const char *)\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">~Derived</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"~Derived()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">friend</span><span style=\\"color: #ABB2BF\\"> std::</span><span style=\\"color: #E5C07B\\">ostream</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&amp;operator</span><span style=\\"color: #ABB2BF\\">&lt;&lt;(std::</span><span style=\\"color: #E5C07B\\">ostream</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #E06C75; font-style: italic\\">os</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Derived</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #E06C75; font-style: italic\\">rhs</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">std::</span><span style=\\"color: #E5C07B\\">ostream</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&amp;operator</span><span style=\\"color: #ABB2BF\\">&lt;&lt;(std::</span><span style=\\"color: #E5C07B\\">ostream</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #E06C75; font-style: italic\\">os</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Derived</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #E06C75; font-style: italic\\">rhs</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> Base </span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\">ref </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> rhs;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    os </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> ref;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> os;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">main</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">argc</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">char</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">**</span><span style=\\"color: #E06C75; font-style: italic\\">argv</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    Derived </span><span style=\\"color: #61AFEF\\">d1</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"hello\\"</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"d1 = \\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> d1 </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\">endl </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    Derived d2 </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> d1;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"d1 = \\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> d1 </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"d2 = \\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> d2 </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\">endl </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    Derived </span><span style=\\"color: #61AFEF\\">d3</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"world\\"</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"d3 = \\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> d3 </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    d3 </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> d1;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"d1 = \\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> d1 </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"d3 = \\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> d3 </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{s as data};
