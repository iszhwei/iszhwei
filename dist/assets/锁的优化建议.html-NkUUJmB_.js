import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as u,o as _,c as s,d as e,e as l,f as o,w as t}from"./app-9OmaxHRC.js";const c={},a=e("h1",{id:"锁的优化建议",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#锁的优化建议","aria-hidden":"true"},"#"),l(" 锁的优化建议")],-1),d=e("li",null,[e("p",null,[l("在能正确完成业务的前提下，为确保效率，"),e("u",null,"尽量使用较低的隔离级别（必须避免脏读）")])],-1),i=e("u",null,"事务越大，包含的SQL越多，可能包含更多的表资源和行资源的锁，增大了锁冲突的概率",-1),f=e("strong",null,"以固定的顺序存取表中的行",-1),h=e("li",null,[e("p",null,[e("strong",null,"不要申请超过实际需要的锁级别")])],-1),p=e("strong",null,"除非必须，查询时不要显示加锁",-1);function g(m,x){const n=u("font");return _(),s("div",null,[a,e("ul",null,[d,e("li",null,[e("p",null,[l("设计合理的索引并**"),o(n,{color:"green"},{default:t(()=>[l("尽量使用索")]),_:1}),l("引访问数据，使加锁更准确，减少锁冲突的机会，提高并发能力**")])]),e("li",null,[e("p",null,[l("选择合理的事务大小，"),e("strong",null,[o(n,{color:"green"},{default:t(()=>[l("小事务")]),_:1}),l("发生锁冲突的概率小")]),l("（"),i,l("）")])]),e("li",null,[e("p",null,[l("不同的程序访问一组表时，应尽量约定"),e("strong",null,[l("以相同的"),o(n,{color:"green"},{default:t(()=>[l("顺序")]),_:1}),l("访问各表")]),l("，对一个表而言，尽可能"),f,l("。这样可以大大减少死锁的机会")])]),e("li",null,[e("p",null,[e("strong",null,[l("尽量用"),o(n,{color:"green"},{default:t(()=>[l("相等条件")]),_:1}),l("访问数据，这样可以避免"),o(n,{color:"red"},{default:t(()=>[l("间隙锁")]),_:1}),l("对并发插入的影响")]),l("（"),o(n,{color:"red"},{default:t(()=>[l("其实等值查询也会加间隙锁")]),_:1}),l("）")])]),h,e("li",null,[e("p",null,[p,l("（"),o(n,{color:"green"},{default:t(()=>[l("在已提交读和可重复读隔离级别，MVCC提供了读取机制，不需要手动加锁")]),_:1}),l("）")])])])])}const v=r(c,[["render",g],["__file","锁的优化建议.html.vue"]]);export{v as default};
