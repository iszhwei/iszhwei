const t=JSON.parse('{"key":"v-66e8cf78","path":"/ccpp/14%20%E9%9D%A2%E8%AF%95%E9%A2%98/%E4%B8%BA%E4%BB%80%E4%B9%88c%E5%92%8Cc__%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BB%8E%E5%8F%B3%E5%BE%80%E5%B7%A6%E5%8E%8B%E6%A0%88.html","title":"为什么c和c++函数参数从右往左压栈？","lang":"zh-CN","frontmatter":{"title":"为什么c和c++函数参数从右往左压栈？","icon":"file","order":1,"headerDepth":4,"category":["c/c++"],"tag":["c++补充"],"description":"为什么c和c++函数参数从右往左压栈？ 因为c/c++支持“函数参数长度可变”这个特性 可变参数函数：函数声明时参数列表有...，如printf（const char* format,…） 函数调用的过程： 将参数从右往左压栈 执行call指令，先将下一行指令的地址压栈，再进入调用函数 进入后，先将调用函数的栈底指针（即esp指针）压栈，然后再开辟栈空间","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/14%20%E9%9D%A2%E8%AF%95%E9%A2%98/%E4%B8%BA%E4%BB%80%E4%B9%88c%E5%92%8Cc__%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BB%8E%E5%8F%B3%E5%BE%80%E5%B7%A6%E5%8E%8B%E6%A0%88.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"为什么c和c++函数参数从右往左压栈？"}],["meta",{"property":"og:description","content":"为什么c和c++函数参数从右往左压栈？ 因为c/c++支持“函数参数长度可变”这个特性 可变参数函数：函数声明时参数列表有...，如printf（const char* format,…） 函数调用的过程： 将参数从右往左压栈 执行call指令，先将下一行指令的地址压栈，再进入调用函数 进入后，先将调用函数的栈底指针（即esp指针）压栈，然后再开辟栈空间"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"c++补充"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"为什么c和c++函数参数从右往左压栈？\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":1.29,"words":386},"filePathRelative":"ccpp/14 面试题/为什么c和c++函数参数从右往左压栈.md","excerpt":"<h1> 为什么c和c++函数参数从右往左压栈？</h1>\\n<p><strong>因为c/c++支持“函数参数长度可变”这个特性</strong></p>\\n<p>可变参数函数：函数声明时参数列表有<code>...</code>，如<code>printf（const char* format,…）</code></p>\\n<p>函数调用的过程：</p>\\n<ol>\\n<li>将参数从右往左压栈</li>\\n<li>执行call指令，先将下一行指令的地址压栈，再进入调用函数</li>\\n<li>进入后，先将调用函数的栈底指针（即esp指针）压栈，然后再开辟栈空间</li>\\n</ol>\\n<figure><figcaption></figcaption></figure>","autoDesc":true}');export{t as data};
