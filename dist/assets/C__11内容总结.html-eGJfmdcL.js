const n=JSON.parse('{"key":"v-25665f14","path":"/ccpp/18%20C__11%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/C__11%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93.html","title":"C++11内容总结","lang":"zh-CN","frontmatter":{"title":"C++11内容总结","icon":"file","order":1,"headerDepth":4,"category":["c/c++"],"tag":["c++11"],"description":"C++11 内容总结 1、关键字和语法 nullptr： 之前的NULL，是一个宏定义，代码上是的 右值引用： 非常强大； auto：可以根据右值，推导出右值的类型，然后左边变量的类型也就已知了 nullptr：给指针专用（能够和整数进行区别） 以前用的NULL是宏定义，在代码上无法区分整数和指针地址 #define NULL 0 （都是4字节，但是毕竟逻辑意义不一样，要区分的！） for each：可以遍历数组（底层是指针遍历），容器（底层是迭代器遍历） for(Type val : container) =&gt; 底层就是通过指针或者迭代器来实现的 { \\tcout&lt;&lt;val&lt;&lt;\\" \\"; } 右值引用：move移动语义函数和forward类型完美转发函数 模板的一个新特性：typename... A 表示可变参（类型参数） 表示参数可能会很多","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/18%20C__11%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/C__11%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"C++11内容总结"}],["meta",{"property":"og:description","content":"C++11 内容总结 1、关键字和语法 nullptr： 之前的NULL，是一个宏定义，代码上是的 右值引用： 非常强大； auto：可以根据右值，推导出右值的类型，然后左边变量的类型也就已知了 nullptr：给指针专用（能够和整数进行区别） 以前用的NULL是宏定义，在代码上无法区分整数和指针地址 #define NULL 0 （都是4字节，但是毕竟逻辑意义不一样，要区分的！） for each：可以遍历数组（底层是指针遍历），容器（底层是迭代器遍历） for(Type val : container) =&gt; 底层就是通过指针或者迭代器来实现的 { \\tcout&lt;&lt;val&lt;&lt;\\" \\"; } 右值引用：move移动语义函数和forward类型完美转发函数 模板的一个新特性：typename... A 表示可变参（类型参数） 表示参数可能会很多"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"c++11"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++11内容总结\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[{"level":2,"title":"1、关键字和语法","slug":"_1、关键字和语法","link":"#_1、关键字和语法","children":[]},{"level":2,"title":"2、绑定器和函数对象","slug":"_2、绑定器和函数对象","link":"#_2、绑定器和函数对象","children":[]},{"level":2,"title":"3、智能指针","slug":"_3、智能指针","link":"#_3、智能指针","children":[]},{"level":2,"title":"4、容器","slug":"_4、容器","link":"#_4、容器","children":[]},{"level":2,"title":"5、C++语言级别支持的多线程编程","slug":"_5、c-语言级别支持的多线程编程","link":"#_5、c-语言级别支持的多线程编程","children":[]}],"git":{},"readingTime":{"minutes":1.41,"words":423},"filePathRelative":"ccpp/18 C++11知识汇总/C++11内容总结.md","excerpt":"<h1> C++11 内容总结</h1>\\n<h2> 1、关键字和语法</h2>\\n<p><strong>nullptr：</strong> 之前的<u>NULL，是一个宏定义</u>，代码上是的</p>\\n<p><strong>右值引用：</strong> 非常强大；</p>\\n<div class=\\"language-c++ line-numbers-mode\\" data-ext=\\"c++\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #C678DD\\">auto</span><span style=\\"color: #ABB2BF\\">：可以根据右值，推导出右值的类型，然后左边变量的类型也就已知了</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #D19A66\\">nullptr</span><span style=\\"color: #ABB2BF\\">：给指针专用（能够和整数进行区别） </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">以前用的NULL是宏定义，在代码上无法区分整数和指针地址 </span><span style=\\"color: #E06C75\\">#define</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">NULL</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">（都是4字节，但是毕竟逻辑意义不一样，要区分的！）</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> each：可以遍历数组（底层是指针遍历），容器（底层是迭代器遍历）</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\">(Type val : container) </span><span style=\\"color: #C678DD\\">=&gt;</span><span style=\\"color: #ABB2BF\\"> 底层就是通过指针或者迭代器来实现的</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tcout</span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\">val</span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #98C379\\">\\" \\"</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">右值引用：move移动语义函数和forward类型完美转发函数</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">模板的一个新特性：typename... A  表示可变参（类型参数）</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">表示参数可能会很多 </span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
