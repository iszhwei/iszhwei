import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o as r,c as B,b as i,d as s,e as n,f as a,w as o,a as p}from"./app--8O2lHwG.js";const y="/assets/1681302938745-c100c3cc-4cb4-4f9d-a1cb-94d6bd99e2ad-Md4Xgr1S.png",d="/assets/image-20240201233908350-y-Zo11-a.png",F={},D=s("h1",{id:"const",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#const","aria-hidden":"true"},"#"),n(" const")],-1),A=s("figure",null,[s("img",{src:y,alt:"1681302938745-c100c3cc-4cb4-4f9d-a1cb-94d6bd99e2ad",tabindex:"0",loading:"lazy"}),s("figcaption",null,"1681302938745-c100c3cc-4cb4-4f9d-a1cb-94d6bd99e2ad")],-1),v=p(`<h2 id="const关键字修饰变量" tabindex="-1"><a class="header-anchor" href="#const关键字修饰变量" aria-hidden="true">#</a> const关键字修饰变量</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> number1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//const关键字修饰的变量称为常量</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> number2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> val;</span><span style="color:#7F848E;font-style:italic;">//error  常量必须要进行初始化</span></span>
<span class="line"><span style="color:#ABB2BF;">number1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//error   常量不能被赋值（初始化后不可修改）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了这种方式可以创建常量外，还可以使用宏定义的方式创建常量</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">NUMBER</span><span style="color:#ABB2BF;"> 1024</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="常考题-const常量与宏定义的区别是什么" tabindex="-1"><a class="header-anchor" href="#常考题-const常量与宏定义的区别是什么" aria-hidden="true">#</a> 常考题：const常量与宏定义的区别是什么？</h3>`,5),u=s("strong",null,"编译器处理方式不同",-1),C=s("strong",null,"预处理阶段",-1),m=s("strong",null,"编译时",-1),b=s("li",null,[s("strong",null,"类型和安全检查不同"),n("。宏定义没有类型，不做任何类型检查（有bug运行时才会报错）；const常量有具体的类型，在编译期会执行类型检查（有bug编译时报错）。")],-1),h=p('<p>在使用中，应尽量以const替换宏定义，可以减小犯错误的概率。</p><h3 id="const和普通变量的区别" tabindex="-1"><a class="header-anchor" href="#const和普通变量的区别" aria-hidden="true">#</a> const和普通变量的区别</h3><ol><li>const修饰的变量<u>不能再作为<strong>左值</strong></u>，<u>初始化后值不能被修改</u></li><li>编译方式不一样</li></ol><h3 id="c和c-中const修饰变量有什么不同" tabindex="-1"><a class="header-anchor" href="#c和c-中const修饰变量有什么不同" aria-hidden="true">#</a> c和c++中const修饰变量有什么不同</h3>',4),f=s("strong",null,"C中",-1),E=s("code",null,"const",-1),g=s("u",null,"可以不初始化，但后面也不能赋值",-1),_=s("strong",null,"不能用作数组下标",-1),k=p(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">array</span><span style="color:#ABB2BF;">[a] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {};</span><span style="color:#7F848E;font-style:italic;"> // error</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),x=p(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int*</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">a;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">// 30 30 30</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;</span><span style="color:#D19A66;">%d</span><span style="color:#98C379;"> </span><span style="color:#D19A66;">%d</span><span style="color:#98C379;"> </span><span style="color:#D19A66;">%d</span><span style="color:#98C379;"> </span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, a, </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">p, </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">a));</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="c-中const特性" tabindex="-1"><a class="header-anchor" href="#c-中const特性" aria-hidden="true">#</a> c++中const特性</h2><p>const修饰的变量<u>必须初始化</u>，可以用作<strong>数组下标</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">array</span><span style="color:#ABB2BF;">[a] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {};</span><span style="color:#7F848E;font-style:italic;"> // pass</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">a;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">	//*p此时确实把&amp;a的值改成了30，但是a在编译时都直接替换成20</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 20 30 20</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;</span><span style="color:#D19A66;">%d</span><span style="color:#98C379;"> </span><span style="color:#D19A66;">%d</span><span style="color:#98C379;"> </span><span style="color:#D19A66;">%d</span><span style="color:#98C379;"> </span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, a, </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p, </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">a));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //printf(&quot;%d %d %d \\n&quot;, 20, *p, 20);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),q=s("strong",null,"都",-1),K=s("strong",null,"叫",-1),O=s("strong",null,"，如果用",-1),N=s("strong",null,"给const初始化的叫",-1),S=s("u",null,"运行时",-1),w=p(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{	</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> b </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> b;	</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//int array[a] = {}; //常变量不能定义数组</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int*</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">a;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 30 30 30</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;</span><span style="color:#D19A66;">%d</span><span style="color:#98C379;"> </span><span style="color:#D19A66;">%d</span><span style="color:#98C379;"> </span><span style="color:#D19A66;">%d</span><span style="color:#98C379;"> </span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, a, </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">p, </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">a));</span><span style="color:#7F848E;font-style:italic;">	//和c语言一样</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),V=s("p",null,"答：",-1),z=s("strong",null,"const的编译方式不同",-1),T=s("strong",null,"变量",-1),M=s("strong",null,"变量的初始化",-1),P=p("<li><mark>c++中const修饰的变量<u>必须初始化</u>；c语言的const可以不初始化叫<strong>常变量</strong></mark></li><li><mark>c++中const初始化值为<strong>立即数</strong>叫<strong>常量</strong>，可以当<strong>数组下标</strong>；如果用<strong>变量</strong>给const初始化的叫<strong>常变量</strong>，常变量不能当数组下标；</mark></li>",2),I=s("strong",null,"常变量除了不能当左值，编译方式和普通变量一样",-1),L=p(`<h3 id="const修饰的量常见错误" tabindex="-1"><a class="header-anchor" href="#const修饰的量常见错误" aria-hidden="true">#</a> const修饰的量常见错误</h3><ul><li>常量不能再作为<u>左值（直接修改常量值）</u></li><li>不能把<strong>常量地址</strong>泄漏给一个普通<u>指针</u>或者普通<u>引用变量（间接修改常量值）</u></li></ul><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">a;</span><span style="color:#7F848E;font-style:italic;"> // error: invalid conversion from ‘const int*’ to ‘int*’ </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //杜绝*p = 30出现</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">a;</span><span style="color:#7F848E;font-style:italic;"> // ok， 保证*p = x;被禁止</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="const关键字修饰指针" tabindex="-1"><a class="header-anchor" href="#const关键字修饰指针" aria-hidden="true">#</a> const关键字修饰指针</h2><h3 id="对于指针需要关注两点" tabindex="-1"><a class="header-anchor" href="#对于指针需要关注两点" aria-hidden="true">#</a> 对于指针需要关注两点：</h3><ol><li>指针指向的<u>变量是什么</u></li><li><u>指针</u>本身<u>是什么</u></li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">int value = 2;</span></span>
<span class="line"><span style="color:#abb2bf;">int value1 = 10;</span></span>
<span class="line"><span style="color:#abb2bf;">int *p1 = &amp;value1;</span></span>
<span class="line"><span style="color:#abb2bf;">p1 = &amp;value;</span></span>
<span class="line"><span style="color:#abb2bf;">*p1 = 20000;</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常量指针和指针常量" tabindex="-1"><a class="header-anchor" href="#常量指针和指针常量" aria-hidden="true">#</a> 常量指针和指针常量</h3><p>常量指针 (const *):不能修改指针所指内容的值，可以改变指针的指向</p><p>指针常量 ( * const):可以修改指针所指内容的值， 不可以改变指针的指向</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> number1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> number2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> p1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">number1;</span><span style="color:#7F848E;font-style:italic;">//常量指针，Pointer to const</span></span>
<span class="line"><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//error   通过p1指针无法修改其所指内容的值</span></span>
<span class="line"><span style="color:#ABB2BF;">p1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">numbers;</span><span style="color:#7F848E;font-style:italic;">//ok  可以改变p1指针的指向</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> p2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">number1;</span><span style="color:#7F848E;font-style:italic;"> //常量指针的第二种写法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> p3 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">number1;</span><span style="color:#7F848E;font-style:italic;">//指针常量，const pointer</span></span>
<span class="line"><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p3 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//ok          通过p3指针可以修改其所指内容的值 </span></span>
<span class="line"><span style="color:#ABB2BF;">p3 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">number2;</span><span style="color:#7F848E;font-style:italic;">//error   不可以改变p1指针的指向</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> p4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">number1;</span><span style="color:#7F848E;font-style:italic;">//两者皆不能进行修改</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="顶层const和底层const" tabindex="-1"><a class="header-anchor" href="#顶层const和底层const" aria-hidden="true">#</a> 顶层const和底层const</h4>`,12),X=s("strong",null,"顶层const",-1),J=s("u",null,[n("修饰的"),s("strong",null,"变量本身"),n("是⼀个常量")],-1),R=s("code",null,"*",-1),U=s("strong",null,"底层const",-1),Z=s("u",null,[n("修饰的变量所"),s("strong",null,"指向的对象"),n("是⼀个常量")],-1),j=s("code",null,"*",-1),G=p(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span><span style="color:#C678DD;">int</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> b1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">a;</span><span style="color:#7F848E;font-style:italic;">        //顶层const，b1本身是⼀个常量</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> b2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">a;</span><span style="color:#7F848E;font-style:italic;">       //底层const，b2本身可变，所指的对象是常量</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> b3 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">       //顶层const，b3是常量不可变</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> b4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">a;</span><span style="color:#7F848E;font-style:italic;">  //前⼀个const为底层，后⼀个为顶层，b4不可变</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;"> b5 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> a;</span><span style="color:#7F848E;font-style:italic;">       //⽤于声明引⽤变量，都是底层const</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p>`,2),H=s("code",null,"const int b3 = 20; ",-1),Q=s("li",null,[s("mark",null,[n("⽤于声明引⽤变量，都是"),s("strong",null,"底层const")])],-1),W=s("p",null,"区分作⽤：",-1),Y=s("li",null,[n("执⾏对象"),s("u",null,"拷⻉时"),n("有限制，"),s("u",null,"常量"),n("的底层const"),s("u",null,"不能赋值给⾮常量"),n("的底层const")],-1),$=s("u",null,"const_cast时",-1),ss=s("u",null,"只能改变运算对象",-1),ns=p('<h3 id="const与二级-多级-指针结合" tabindex="-1"><a class="header-anchor" href="#const与二级-多级-指针结合" aria-hidden="true">#</a> const与二级（多级）指针结合</h3><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>实际上没有多级指针，只有一级指针，<code>const int **q</code> =&gt; <code>const int * *q</code>，<code>p</code>和<code>*q</code>都指向<code>0x100</code>，==<code>const int **q</code>表示<code>*q</code>（ <code>0x100</code>）存放的数据类型应该是常量指针类型<code>const int *</code>==🍗🍗🍗</p></blockquote><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">**</span><span style="color:#ABB2BF;">q;</span><span style="color:#7F848E;font-style:italic;"> // const修饰**q, **q不能被赋值，*q和q可以被赋值</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">q;</span><span style="color:#7F848E;font-style:italic;"> // const修饰*q, *q不能被赋值，**q和 q可被赋值</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">**</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> q;</span><span style="color:#7F848E;font-style:italic;"> // const修饰q, 只有q不能被赋值</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//错误的例子</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">a;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">**</span><span style="color:#ABB2BF;">q </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">p;</span><span style="color:#7F848E;font-style:italic;"> // error, const int ** &lt;= int**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 假如有const int b; *q = &amp;b;    由于*q和p相同，相当于通过p可以间接修改b的值</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在C++中，<code>int*</code> 可以隐式转换为 <code>const int*</code>，因为这样做增加了对数据的保护，不会改变原有数据的非const性质。但是，<code>int**</code>（指向<code>int</code>指针的指针）和<code>const int**</code>（指向<code>const int</code>指针的指针）之间并不是这种简单的类型兼容关系。</p><p>当您尝试将<code>int** p</code>赋值给<code>const int** q</code>时，您实际上是在尝试将一个指向非const指针的指针赋值给一个指向const指针的指针。这两种类型并不兼容，因为<code>q</code>期望的是一个指向<code>const int</code>指针的指针，而<code>p</code>是一个指向可能修改其指向的<code>int</code>值的指针的指针。</p><p>换句话说，即使<code>*p</code>（即<code>p</code>所指向的内容）可以被转换为<code>const int*</code>，<strong><code>p</code>本身（即指向<code>int*</code>的指针）也不能被转换为<code>const int**</code></strong></p></blockquote><p>可修改为如下方可通过编译🍗</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span><span style="color:#7F848E;font-style:italic;"> // 法一</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">a;</span><span style="color:#7F848E;font-style:italic;">	//p存放的是const int *类型的数据</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">**</span><span style="color:#ABB2BF;">q </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">p;</span><span style="color:#7F848E;font-style:italic;"> // ok,*q是的类型是const int *</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span><span style="color:#7F848E;font-style:italic;">  // 法二</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">a;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#C678DD;">const</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">q </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">p;</span><span style="color:#7F848E;font-style:italic;"> // ok，此时*q是常量，*q类型是const int *没有问题</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),as={id:"const和指针的类型转换-没有约束的可以给有约束的赋值-🍗🍗🍗",tabindex:"-1"},ls=s("a",{class:"header-anchor",href:"#const和指针的类型转换-没有约束的可以给有约束的赋值-🍗🍗🍗","aria-hidden":"true"},"#",-1),os=p(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#56B6C2;">*</span><span style="color:#7F848E;font-style:italic;"> // error,因为解引用会修改const的值</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#56B6C2;">*</span><span style="color:#7F848E;font-style:italic;">	//OK</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">**</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">**</span><span style="color:#7F848E;font-style:italic;">  //error</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#56B6C2;">**</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#56B6C2;">**</span><span style="color:#7F848E;font-style:italic;">  // error</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#56B6C2;">**</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#C678DD;">const</span><span style="color:#56B6C2;">*</span><span style="color:#7F848E;font-style:italic;">  //error,const与一级指针结合，可转换成 * &lt;= const *判断，即第一种</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#C678DD;">const</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#56B6C2;">**</span><span style="color:#7F848E;font-style:italic;">  //ok，同第二种情况 </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ps=s("code",null,"*",-1),es=p(`<h4 id="习题" tabindex="-1"><a class="header-anchor" href="#习题" aria-hidden="true">#</a> 习题</h4><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;typeinfo&gt;</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">q1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> q2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//const修饰的是q2，因此q2不能</span></span>
<span class="line"><span style="color:#ABB2BF;">cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> typeid(q1).</span><span style="color:#61AFEF;">name</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span><span style="color:#7F848E;font-style:italic;">	//int*	//Pi</span></span>
<span class="line"><span style="color:#ABB2BF;">cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> typeid(q2).</span><span style="color:#61AFEF;">name</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span><span style="color:#7F848E;font-style:italic;">	//int*	//Pi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">a;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">a;</span><span style="color:#7F848E;font-style:italic;"> //const int * &lt;= int *,OK</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> p3 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">a;</span><span style="color:#7F848E;font-style:italic;">	//int * &lt;= int *,OK</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> p3;</span><span style="color:#7F848E;font-style:italic;">	//int * &lt;= int *,OK	</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">a;</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">q </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> p;</span><span style="color:#7F848E;font-style:italic;">	//int * &lt;= const int * ,error</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意辨析</strong>：p存放的是a的地址，p又赋值给q，a是变量值可以修改，那q可不可以修改❌</p><p><u>q 和有没有a没有关系，不管是变量地址给p还是常量地址给p,<strong>对于编译器来说p存放的就是整型常量的地址</strong><code>const int *</code></u></p></blockquote><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 例一：</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">a;</span><span style="color:#7F848E;font-style:italic;">  // int* &lt;= int*</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">q </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> p;</span><span style="color:#7F848E;font-style:italic;"> // int*  &lt;=  const int*，error</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//例二：</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">a;</span><span style="color:#7F848E;font-style:italic;">  // int* &lt;= int*</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">q </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> p;</span><span style="color:#7F848E;font-style:italic;"> // int*  &lt;=  int* ,ok</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//例三：</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">a;</span><span style="color:#7F848E;font-style:italic;"> // int* &lt;= int*</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">q </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> p;</span><span style="color:#7F848E;font-style:italic;"> // const int* &lt;= int*，OK</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//例四：</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">a;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">**</span><span style="color:#ABB2BF;">q </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">p;</span><span style="color:#7F848E;font-style:italic;"> // const int ** &lt;= int **,error, *q&lt;=&gt;p</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//例五：</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">a;</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">**</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> q </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">p;</span><span style="color:#7F848E;font-style:italic;"> // int** &lt;= int**，OK</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//例六：🍔🍔🍔</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">a;</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#C678DD;">const</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> q </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">p;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//int *const* &lt;= const int**,两个const分开看</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//等号左边const修饰*q,const* &lt;= *, OK</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//因为qcun&#39;cint *类型，int* &lt;= const int * ,error</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),cs={id:"函数指针、指针函数、数组指针、指针数组",tabindex:"-1"},ts=s("a",{class:"header-anchor",href:"#函数指针、指针函数、数组指针、指针数组","aria-hidden":"true"},"#",-1),rs=p(`<p>函数指针：指向函数的<strong>指针</strong></p><p>指针函数：返回类型是指针的<strong>函数</strong></p><p>数值指针：指向数组的<strong>指针</strong></p><p>指针数组：存储类型为指针的<strong>数组</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//函数指针           指针函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//int (*pf)(int)     int*   pf(int)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//数组指针           指针数组</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//int (*pArray)[]    int* pArray[]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;pthread.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">pthread_create</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">pthread_t</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">thread</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">pthread_attr_t</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">attr</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                   </span><span style="color:#C678DD;">void</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">*</span><span style="color:#E06C75;">start_routine</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">),</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">void</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//void *(*start_routine) (void *) 就是函数指针</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),Bs={id:"在-c-语言中-可以通过函数指针和结构体来模拟多态性",tabindex:"-1"},is=s("a",{class:"header-anchor",href:"#在-c-语言中-可以通过函数指针和结构体来模拟多态性","aria-hidden":"true"},"#",-1),ys=p(`<p>在传统的 C 语言中，没有直接的语言支持来实现面向对象编程中的多态性（polymorphism）。多态性是面向对象编程的一个重要特性，可以通过继承和虚函数来实现。然而，我们可以使用一些技巧来模拟多态性的概念。具体而言，可以通过定义一个包含函数指针的结构体，并使用不同的函数实现来实现多态性的效果。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">speak)(</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">} Animal;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    Animal base;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char*</span><span style="color:#ABB2BF;"> name;</span></span>
<span class="line"><span style="color:#ABB2BF;">} Dog;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    Animal base;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char*</span><span style="color:#ABB2BF;"> name;</span></span>
<span class="line"><span style="color:#ABB2BF;">} Cat;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">dogSpeak</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;The dog barks.</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">catSpeak</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;The cat meows.</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    Dog dog;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">dog</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">base</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">speak</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> dogSpeak;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">dog</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Tom&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    Cat cat;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">cat</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">base</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">speak</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> catSpeak;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">cat</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Jerry&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    Animal</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> animals</span><span style="color:#C678DD;">[]</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> { (Animal</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">dog, (Animal</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">cat };</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; i </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">; i</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;</span><span style="color:#D19A66;">%s</span><span style="color:#98C379;">: &quot;</span><span style="color:#ABB2BF;">, i </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">dog</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">cat</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">animals</span><span style="color:#ABB2BF;">[i]-&gt;</span><span style="color:#61AFEF;">speak</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="const关键字修饰成员函数" tabindex="-1"><a class="header-anchor" href="#const关键字修饰成员函数" aria-hidden="true">#</a> const关键字修饰成员函数</h2>`,3),ds={href:"https://iszhwei.gitee.io/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/%E7%89%B9%E6%AE%8A%E7%9A%84%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0.html#const%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0",target:"_blank",rel:"noopener noreferrer"},Fs=p(`<h2 id="const关键字修饰对象" tabindex="-1"><a class="header-anchor" href="#const关键字修饰对象" aria-hidden="true">#</a> const关键字修饰对象</h2><p>[对象的组织 | 张威的编程学习笔记 (gitee.io)](https://iszhwei.gitee.io/ccpp/03 类和对象/组织对象.html)</p><h2 id="课堂代码" tabindex="-1"><a class="header-anchor" href="#课堂代码" aria-hidden="true">#</a> 课堂代码</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::cout;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//宏定义发生的时机是在预处理阶段,字符串替换,有bug会到运行时才会发现</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">MAX</span><span style="color:#ABB2BF;"> 10</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">multiply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) ((x) * (y))</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //发生时机在编译阶段,会进行类型安全检查,如果有bug在编译时候就会出现</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //内置类型：char/short/int/long/double/float/void *</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> number </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//const修饰的变量称为常量，必须在定义的时候进行初始化</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* number = 20;//赋值,常量不能进行赋值 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> number2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//函数指针           指针函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//int (*pf)(int)     int*   pf(int)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//数组指针           指针数组</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//int (*pArray)[]    int* pArray[]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test2</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> value </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> value1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">value1;</span></span>
<span class="line"><span style="color:#ABB2BF;">    p1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">value;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> value2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">value2;</span><span style="color:#7F848E;font-style:italic;">//当const位于*左边的时候，常量指针(pointer to const)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* *p2 = 222;//error,不能修改指针所指变量的值 */</span></span>
<span class="line"><span style="color:#ABB2BF;">    p2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">value;</span><span style="color:#7F848E;font-style:italic;">//ok,可以改变指针本身（指向）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> value3 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">300</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p3 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">value3;</span><span style="color:#7F848E;font-style:italic;">//当const位于*左边的时候，常量指针(pointer to const)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* *p3 = 333;//error,不能修改指针所指变量的值 */</span></span>
<span class="line"><span style="color:#ABB2BF;">    p3 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">value;</span><span style="color:#7F848E;font-style:italic;">//ok,可以改变指针本身（指向）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> value4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">400</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> p4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">value4;</span><span style="color:#7F848E;font-style:italic;">//当const位于*右边的时候，指针常量(const pointer)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">444</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//ok,可以修改指针所指变量的值</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* p4 = &amp;value;//error,不可以改变指针本身（指向） */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> value5 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">500</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> p5 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">value5;</span><span style="color:#7F848E;font-style:italic;">//双const</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* *p5 = 555;//error,不可以修改指针所指变量的值 */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* p5 = &amp;value;//error,不可以改变指针本身（指向） */</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">argc</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">**</span><span style="color:#E06C75;font-style:italic;">argv</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">test2</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function Ds(As,vs){const l=e("font"),c=e("ExternalLinkIcon");return r(),B("div",null,[D,A,i("more"),v,s("ol",null,[s("li",null,[u,n("。宏定义是在"),a(l,{color:"green"},{default:o(()=>[C]),_:1}),n("展开，做字符串的替换；而const常量是在"),a(l,{color:"green"},{default:o(()=>[m]),_:1}),n("。")]),b]),h,s("ol",null,[s("li",null,[f,E,n("修饰的量"),g,n("了，不叫常量，而是叫"),s("u",null,[s("strong",null,[a(l,{color:"red"},{default:o(()=>[n("常变量")]),_:1})]),n("，因此"),_]),n("：")])]),k,a(l,{color:"red"},{default:o(()=>[n("const修饰的量可通过**指针**间接修改")]),_:1}),x,s("ul",null,[s("li",null,[s("mark",null,[n("C++是将a在**"),a(l,{color:"red"},{default:o(()=>[n("编译时")]),_:1}),q,n("直接替换**成20")]),n(",这就是为什么必须初始化，不初始化怎么发生替换")])]),s("p",null,[n("c++中的"),s("u",null,[n("const初始化值为**"),a(l,{color:"green"},{default:o(()=>[n("立即数")]),_:1}),K,a(l,{color:"green"},{default:o(()=>[n("常量")]),_:1}),O,a(l,{color:"red"},{default:o(()=>[n("变量")]),_:1}),N,a(l,{color:"red"},{default:o(()=>[n("常变量")]),_:1}),n("**")]),n("，因为只有"),S,n("才知道变量的值是多少")]),w,s("ul",null,[s("li",null,[a(l,{color:"red"},{default:o(()=>[n("**常变量除了不能当左值，编译方式和普通变量一样**")]),_:1})])]),V,s("ol",null,[s("li",null,[s("mark",null,[z,n("，c中，const就是当作一个"),T,n("编译生成指令的；在C++中，const常量则会被视为一个编译时的常数，并在"),a(l,{color:"red"},{default:o(()=>[n("编译过程中被"),M,n("替换")]),_:1}),n("。")])]),P,s("li",null,[s("mark",null,[a(l,{color:"red"},{default:o(()=>[I]),_:1})]),n("(运行时赋值)")])]),L,s("p",null,[X,n("：指的是const"),J,n("，⽆法修改，指的是"),a(l,{color:"red"},{default:o(()=>[n("指针")]),_:1}),n("，就是 "),a(l,{color:"red"},{default:o(()=>[R,n(" 号的右边")]),_:1}),U,n("：指的是const"),Z,n("，指的是"),a(l,{color:"red"},{default:o(()=>[n("所指变量")]),_:1}),n("，就是 "),a(l,{color:"red"},{default:o(()=>[j,n(" 号的左边")]),_:1})]),G,s("ol",null,[s("li",null,[s("mark",null,[H,n("b3是所修饰的变量，所以是**"),a(l,{color:"red"},{default:o(()=>[n("顶层const")]),_:1}),n("**")])]),Q]),W,s("ul",null,[Y,s("li",null,[n("使⽤命名的强制类型转换函数"),$,n("，"),ss,n("的底层const（即"),a(l,{color:"red"},{default:o(()=>[n("只能改变修饰变量的const,不能改变修饰指针的const")]),_:1}),n("）")])]),ns,s("h3",as,[ls,n(" const和指针的类型转换（"),a(l,{color:"green"},{default:o(()=>[n("没有约束的可以给有约束的赋值")]),_:1}),n("）🍗🍗🍗")]),os,s("p",null,[s("strong",null,[a(l,{color:"red"},{default:o(()=>[n("const如果右边没有指针"),ps,n("的话，const是不参与类型的")]),_:1})])]),es,s("h3",cs,[ts,n(),a(l,{color:"red"},{default:o(()=>[n("函数指针、指针函数、数组指针、指针数组")]),_:1})]),rs,s("h4",Bs,[is,n(" 在 C 语言中，可以通过"),a(l,{color:"red"},{default:o(()=>[n("函数指针和结构体来模拟多态性")]),_:1})]),ys,s("p",null,[s("a",ds,[n("const成员函数"),a(c)])]),Fs])}const ms=t(F,[["render",Ds],["__file","const.html.vue"]]);export{ms as default};
