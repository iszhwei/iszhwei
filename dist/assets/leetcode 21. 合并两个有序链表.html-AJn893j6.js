import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o as p,c as o,d as s,e as n,f as t,b as c,a as i}from"./app--8O2lHwG.js";const r={},B={href:"https://leetcode.cn/problems/merge-two-sorted-lists/",target:"_blank",rel:"noopener noreferrer"},y=s("p",null,[n("**题目表述：**将两个升序链表合并为一个新的 "),s("strong",null,"升序"),n(" 链表并返回。"),s("u",null,"新链表是通过拼接给定的两个链表的所有节点组成的。")],-1),d=s("blockquote",null,[s("p",null,"注意：读清题意，不是用新的链表")],-1),F=i(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * struct ListNode {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *     int val;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *     ListNode *next;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *     ListNode() : val(0), next(nullptr) {}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *     ListNode(int x) : val(x), next(nullptr) {}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *     ListNode(int x, ListNode *next) : val(x), next(next) {}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Solution</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">ListNode</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mergeTwoLists</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ListNode</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">list1</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ListNode</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">list2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        ListNode </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">dummyHead </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">ListNode</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        ListNode </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">res </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> dummyHead;</span></span>
<span class="line"><span style="color:#ABB2BF;">        ListNode </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> list1;</span></span>
<span class="line"><span style="color:#ABB2BF;">        ListNode </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> list2;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;">(p1 </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> p2 </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // ListNode* newNode = nullptr;</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p1</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">p2</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                //newNode = new ListNode(p1-&gt;val,nullptr);</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> p1;</span></span>
<span class="line"><span style="color:#ABB2BF;">                p1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">p1</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">	//记得让p1往前走一位</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // newNode = new ListNode(p2-&gt;val, nullptr);</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> p2;</span></span>
<span class="line"><span style="color:#ABB2BF;">                p2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">p2</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">            res </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//让新链表的指针往前走一位</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // res-&gt;next = newNode;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // res = res-&gt;next;</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(p1 </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">) {</span><span style="color:#7F848E;font-style:italic;">	//if判断哪个还有剩，不需要while遍历后面的所有的结点</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // ListNode* newNode = new ListNode(p1-&gt;val);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // res-&gt;next = newNode;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // res = res-&gt;next;</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> p1;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(p2 </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // ListNode* newNode = new ListNode(p2-&gt;val);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // res-&gt;next = newNode;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // res = res-&gt;next;</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> p2;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        ListNode</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> head </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">dummyHead</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> dummyHead;</span></span>
<span class="line"><span style="color:#ABB2BF;">        dummyHead </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> head;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function v(A,u){const l=e("ExternalLinkIcon");return p(),o("div",null,[s("p",null,[s("a",B,[n("21. 合并两个有序链表"),t(l)])]),y,d,c("more"),F])}const C=a(r,[["render",v],["__file","leetcode 21. 合并两个有序链表.html.vue"]]);export{C as default};
