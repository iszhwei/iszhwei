const t=JSON.parse('{"key":"v-2a36819d","path":"/ccpp/17%20bind%E7%BB%91%E5%AE%9A%E5%99%A8%E5%92%8Cfunction%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/function%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%BA%94%E7%94%A8.html","title":"function函数对象类型的应用","lang":"zh-CN","frontmatter":{"title":"function函数对象类型的应用","icon":"file","order":2,"headerDepth":4,"category":["c/c++"],"tag":["function函数对象"],"description":"function函数对象类型的应用 function：函数对象类； 绑定器、函数对象、lambda表达式实际上都是函数对象。 如果我们最终得到的绑定器、函数对象、lambda表达式，这些函数对象，想在多条语句中应用 ，怎么办？如何将这些函数对象的类型留下来？ 源码中希望你用一个函数类型来实例化function模板。","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/17%20bind%E7%BB%91%E5%AE%9A%E5%99%A8%E5%92%8Cfunction%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/function%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%BA%94%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"function函数对象类型的应用"}],["meta",{"property":"og:description","content":"function函数对象类型的应用 function：函数对象类； 绑定器、函数对象、lambda表达式实际上都是函数对象。 如果我们最终得到的绑定器、函数对象、lambda表达式，这些函数对象，想在多条语句中应用 ，怎么办？如何将这些函数对象的类型留下来？ 源码中希望你用一个函数类型来实例化function模板。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"function函数对象"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"function函数对象类型的应用\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[{"level":2,"title":"区别函数类型和函数指针类型：","slug":"区别函数类型和函数指针类型","link":"#区别函数类型和函数指针类型","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[{"level":3,"title":"无参函数类型","slug":"无参函数类型","link":"#无参函数类型","children":[]},{"level":3,"title":"有参函数类型","slug":"有参函数类型","link":"#有参函数类型","children":[]},{"level":3,"title":"function是对一个函数/函数对象的包装","slug":"function是对一个函数-函数对象的包装","link":"#function是对一个函数-函数对象的包装","children":[]},{"level":3,"title":"function也可以将类的成员方法留下来","slug":"function也可以将类的成员方法留下来","link":"#function也可以将类的成员方法留下来","children":[]}]},{"level":2,"title":"function使用举例","slug":"function使用举例","link":"#function使用举例","children":[]}],"git":{},"readingTime":{"minutes":3.11,"words":933},"filePathRelative":"ccpp/17 bind绑定器和function函数对象/function函数对象类型的应用.md","excerpt":"<h1> function函数对象类型的应用</h1>\\n<figure><figcaption></figcaption></figure>\\n<p><strong>function：函数对象类；</strong></p>\\n<ul>\\n<li>绑定器、函数对象、lambda表达式实际上都是函数对象。</li>\\n</ul>\\n<p>如果我们<u>最终得到的绑定器、函数对象、lambda表达式，这些函数对象，想在多条语句中应用 ，怎么办？</u><strong>如何将这些函数对象的类型留下来？</strong></p>\\n<p>源码中希望你用一个<strong>函数类型</strong>来<strong>实例化function模板</strong>。</p>","autoDesc":true}');export{t as data};
