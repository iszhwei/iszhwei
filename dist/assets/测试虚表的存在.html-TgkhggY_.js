const s=JSON.parse('{"key":"v-54b6e5ba","path":"/ccpp/07%20%E5%A4%9A%E6%80%81/%E6%B5%8B%E8%AF%95%E8%99%9A%E8%A1%A8%E7%9A%84%E5%AD%98%E5%9C%A8.html","title":"测试虚表的存在","lang":"zh-CN","frontmatter":{"title":"测试虚表的存在","icon":"file","order":13,"headerDepth":4,"category":["c/c++"],"tag":["多态"],"description":"测试虚表的存在 #include &lt;iostream&gt; using std::cout; using std::endl; class Base { public: Base(long base = 0) : _base(base) { cout &lt;&lt; \\"Base(long = 0)\\" &lt;&lt; endl; } virtual void f() { cout &lt;&lt; \\"virtual void Base::f()\\" &lt;&lt; endl; } virtual void g() { cout &lt;&lt; \\"virtual void Base::g()\\" &lt;&lt; endl; } virtual void h() { cout &lt;&lt; \\"virtual void Base::h()\\" &lt;&lt; endl; } ~Base() { cout &lt;&lt; \\"~Base()\\" &lt;&lt; endl; } private: long _base; }; class Derived : public Base { public: Derived(long base = 0, long derived = 0) : Base(base) , _derived(derived) { cout &lt;&lt; \\"Derived(long = 0)\\" &lt;&lt; endl; } virtual void f() { cout &lt;&lt; \\"virtual void Derived::f()\\" &lt;&lt; endl; } virtual void g() { cout &lt;&lt; \\"virtual void Derived::g()\\" &lt;&lt; endl; } virtual void h() { cout &lt;&lt; \\"virtual void Derived::h()\\" &lt;&lt; endl; } ~Derived() { cout &lt;&lt; \\"~Derived()\\" &lt;&lt; endl; } private: long _derived; }; int main(int argc, char **argv) { //虚表是存在的，虚表存在于只读段,对于普通的单继承而言，一个类 //只有一张虚表 Derived derived(10, 20); printf(\\"对象derived的地址 : %p\\\\n\\", &amp;derived); printf(\\"对象derived的地址 : %p\\\\n\\", (long *)&amp;derived); /* printf(\\"虚表的地址 : %p\\\\n\\", *(long *)&amp;derived);//ok */ printf(\\"虚表的地址 : %p\\\\n\\", (long *)*(long *)&amp;derived); printf(\\"虚函数的地址 : %p\\\\n\\", (long *)*(long *)*(long *)&amp;derived); cout &lt;&lt; endl &lt;&lt; endl; typedef void (*Function)(); Function pf; pf = (Function)*((long *)*(long *)&amp;derived); pf(); printf(\\"第一个虚函数的地址 : %p\\\\n\\", pf); cout &lt;&lt; endl; pf = (Function)*((long *)*(long *)&amp;derived + 1); pf(); printf(\\"第二个虚函数的地址 : %p\\\\n\\", pf); cout &lt;&lt; endl; pf = (Function)*((long *)*(long *)&amp;derived + 2); pf(); printf(\\"第三个虚函数的地址 : %p\\\\n\\", pf); cout &lt;&lt; endl; Derived derived2(100, 200); printf(\\"对象derived2的地址 : %p\\\\n\\", &amp;derived2); printf(\\"对象derived2的地址 : %p\\\\n\\", (long *)&amp;derived2); /* printf(\\"虚表的地址 : %p\\\\n\\", *(long *)&amp;derived2);//ok */ printf(\\"虚表的地址 : %p\\\\n\\", (long *)*(long *)&amp;derived2); printf(\\"虚函数的地址 : %p\\\\n\\", (long *)*(long *)*(long *)&amp;derived2); cout &lt;&lt; endl; cout &lt;&lt; \\"打印数据成员_base = \\" &lt;&lt; (long)*((long *)&amp;derived + 1) &lt;&lt; endl; cout &lt;&lt; \\"打印数据成员_derived = \\" &lt;&lt; (long)*((long *)&amp;derived + 2) &lt;&lt; endl; return 0; }","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/07%20%E5%A4%9A%E6%80%81/%E6%B5%8B%E8%AF%95%E8%99%9A%E8%A1%A8%E7%9A%84%E5%AD%98%E5%9C%A8.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"测试虚表的存在"}],["meta",{"property":"og:description","content":"测试虚表的存在 #include &lt;iostream&gt; using std::cout; using std::endl; class Base { public: Base(long base = 0) : _base(base) { cout &lt;&lt; \\"Base(long = 0)\\" &lt;&lt; endl; } virtual void f() { cout &lt;&lt; \\"virtual void Base::f()\\" &lt;&lt; endl; } virtual void g() { cout &lt;&lt; \\"virtual void Base::g()\\" &lt;&lt; endl; } virtual void h() { cout &lt;&lt; \\"virtual void Base::h()\\" &lt;&lt; endl; } ~Base() { cout &lt;&lt; \\"~Base()\\" &lt;&lt; endl; } private: long _base; }; class Derived : public Base { public: Derived(long base = 0, long derived = 0) : Base(base) , _derived(derived) { cout &lt;&lt; \\"Derived(long = 0)\\" &lt;&lt; endl; } virtual void f() { cout &lt;&lt; \\"virtual void Derived::f()\\" &lt;&lt; endl; } virtual void g() { cout &lt;&lt; \\"virtual void Derived::g()\\" &lt;&lt; endl; } virtual void h() { cout &lt;&lt; \\"virtual void Derived::h()\\" &lt;&lt; endl; } ~Derived() { cout &lt;&lt; \\"~Derived()\\" &lt;&lt; endl; } private: long _derived; }; int main(int argc, char **argv) { //虚表是存在的，虚表存在于只读段,对于普通的单继承而言，一个类 //只有一张虚表 Derived derived(10, 20); printf(\\"对象derived的地址 : %p\\\\n\\", &amp;derived); printf(\\"对象derived的地址 : %p\\\\n\\", (long *)&amp;derived); /* printf(\\"虚表的地址 : %p\\\\n\\", *(long *)&amp;derived);//ok */ printf(\\"虚表的地址 : %p\\\\n\\", (long *)*(long *)&amp;derived); printf(\\"虚函数的地址 : %p\\\\n\\", (long *)*(long *)*(long *)&amp;derived); cout &lt;&lt; endl &lt;&lt; endl; typedef void (*Function)(); Function pf; pf = (Function)*((long *)*(long *)&amp;derived); pf(); printf(\\"第一个虚函数的地址 : %p\\\\n\\", pf); cout &lt;&lt; endl; pf = (Function)*((long *)*(long *)&amp;derived + 1); pf(); printf(\\"第二个虚函数的地址 : %p\\\\n\\", pf); cout &lt;&lt; endl; pf = (Function)*((long *)*(long *)&amp;derived + 2); pf(); printf(\\"第三个虚函数的地址 : %p\\\\n\\", pf); cout &lt;&lt; endl; Derived derived2(100, 200); printf(\\"对象derived2的地址 : %p\\\\n\\", &amp;derived2); printf(\\"对象derived2的地址 : %p\\\\n\\", (long *)&amp;derived2); /* printf(\\"虚表的地址 : %p\\\\n\\", *(long *)&amp;derived2);//ok */ printf(\\"虚表的地址 : %p\\\\n\\", (long *)*(long *)&amp;derived2); printf(\\"虚函数的地址 : %p\\\\n\\", (long *)*(long *)*(long *)&amp;derived2); cout &lt;&lt; endl; cout &lt;&lt; \\"打印数据成员_base = \\" &lt;&lt; (long)*((long *)&amp;derived + 1) &lt;&lt; endl; cout &lt;&lt; \\"打印数据成员_derived = \\" &lt;&lt; (long)*((long *)&amp;derived + 2) &lt;&lt; endl; return 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"多态"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"测试虚表的存在\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":1.55,"words":465},"filePathRelative":"ccpp/07 多态/测试虚表的存在.md","excerpt":"<h1> 测试虚表的存在</h1>\\n<div class=\\"language-c++ line-numbers-mode\\" data-ext=\\"c++\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;iostream&gt;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">using</span><span style=\\"color: #ABB2BF\\"> std::cout;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">using</span><span style=\\"color: #ABB2BF\\"> std::endl;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Base</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">public:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">Base</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">base</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    : </span><span style=\\"color: #61AFEF\\">_base</span><span style=\\"color: #ABB2BF\\">(base)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"Base(long = 0)\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">virtual</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">f</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"virtual void Base::f()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">virtual</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">g</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"virtual void Base::g()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">virtual</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">h</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"virtual void Base::h()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">~Base</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"~Base()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">private:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\"> _base;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Derived</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">: </span><span style=\\"color: #C678DD\\">public</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Base</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">public:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">Derived</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">base</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">derived</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    : </span><span style=\\"color: #61AFEF\\">Base</span><span style=\\"color: #ABB2BF\\">(base)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    , </span><span style=\\"color: #61AFEF\\">_derived</span><span style=\\"color: #ABB2BF\\">(derived)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"Derived(long = 0)\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">virtual</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">f</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"virtual void Derived::f()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">virtual</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">g</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"virtual void Derived::g()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">virtual</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">h</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"virtual void Derived::h()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">~Derived</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"~Derived()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">private:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\"> _derived;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">main</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">argc</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">char</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">**</span><span style=\\"color: #E06C75; font-style: italic\\">argv</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">    //虚表是存在的，虚表存在于只读段,对于普通的单继承而言，一个类</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">    //只有一张虚表</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    Derived </span><span style=\\"color: #61AFEF\\">derived</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #D19A66\\">10</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #D19A66\\">20</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">printf</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"对象derived的地址 : </span><span style=\\"color: #D19A66\\">%p</span><span style=\\"color: #56B6C2\\">\\\\n</span><span style=\\"color: #98C379\\">\\"</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\">derived);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">printf</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"对象derived的地址 : </span><span style=\\"color: #D19A66\\">%p</span><span style=\\"color: #56B6C2\\">\\\\n</span><span style=\\"color: #98C379\\">\\"</span><span style=\\"color: #ABB2BF\\">, (</span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\">derived);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">    /* printf(\\"虚表的地址 : %p\\\\n\\", *(long *)&amp;derived);//ok */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">printf</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"虚表的地址 : </span><span style=\\"color: #D19A66\\">%p</span><span style=\\"color: #56B6C2\\">\\\\n</span><span style=\\"color: #98C379\\">\\"</span><span style=\\"color: #ABB2BF\\">, (</span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\">derived);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">printf</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"虚函数的地址 : </span><span style=\\"color: #D19A66\\">%p</span><span style=\\"color: #56B6C2\\">\\\\n</span><span style=\\"color: #98C379\\">\\"</span><span style=\\"color: #ABB2BF\\">, (</span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\">derived);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">typedef</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> (*</span><span style=\\"color: #E06C75\\">Function</span><span style=\\"color: #ABB2BF\\">)();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    Function pf;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    pf </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\">  (Function)</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">((</span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\">derived);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">pf</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">printf</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"第一个虚函数的地址 : </span><span style=\\"color: #D19A66\\">%p</span><span style=\\"color: #56B6C2\\">\\\\n</span><span style=\\"color: #98C379\\">\\"</span><span style=\\"color: #ABB2BF\\">, pf);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    pf </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\">  (Function)</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">((</span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\">derived </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">pf</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">printf</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"第二个虚函数的地址 : </span><span style=\\"color: #D19A66\\">%p</span><span style=\\"color: #56B6C2\\">\\\\n</span><span style=\\"color: #98C379\\">\\"</span><span style=\\"color: #ABB2BF\\">, pf);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    pf </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\">  (Function)</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">((</span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\">derived </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">2</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">pf</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">printf</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"第三个虚函数的地址 : </span><span style=\\"color: #D19A66\\">%p</span><span style=\\"color: #56B6C2\\">\\\\n</span><span style=\\"color: #98C379\\">\\"</span><span style=\\"color: #ABB2BF\\">, pf);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    Derived </span><span style=\\"color: #61AFEF\\">derived2</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #D19A66\\">100</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #D19A66\\">200</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">printf</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"对象derived2的地址 : </span><span style=\\"color: #D19A66\\">%p</span><span style=\\"color: #56B6C2\\">\\\\n</span><span style=\\"color: #98C379\\">\\"</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\">derived2);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">printf</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"对象derived2的地址 : </span><span style=\\"color: #D19A66\\">%p</span><span style=\\"color: #56B6C2\\">\\\\n</span><span style=\\"color: #98C379\\">\\"</span><span style=\\"color: #ABB2BF\\">, (</span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\">derived2);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">    /* printf(\\"虚表的地址 : %p\\\\n\\", *(long *)&amp;derived2);//ok */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">printf</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"虚表的地址 : </span><span style=\\"color: #D19A66\\">%p</span><span style=\\"color: #56B6C2\\">\\\\n</span><span style=\\"color: #98C379\\">\\"</span><span style=\\"color: #ABB2BF\\">, (</span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\">derived2);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">printf</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"虚函数的地址 : </span><span style=\\"color: #D19A66\\">%p</span><span style=\\"color: #56B6C2\\">\\\\n</span><span style=\\"color: #98C379\\">\\"</span><span style=\\"color: #ABB2BF\\">, (</span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\">derived2);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"打印数据成员_base = \\"</span><span style=\\"color: #ABB2BF\\"> </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\">   (</span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">((</span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\">derived </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">) </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"打印数据成员_derived = \\"</span><span style=\\"color: #ABB2BF\\"> </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\">   (</span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">((</span><span style=\\"color: #C678DD\\">long</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\">derived </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">2</span><span style=\\"color: #ABB2BF\\">) </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{s as data};
