function Tt(s,n){const e=new Set(s.split(","));return n?l=>e.has(l.toLowerCase()):l=>e.has(l)}const Cs={},Le=[],on=()=>{},$B=()=>!1,fl=s=>s.charCodeAt(0)===111&&s.charCodeAt(1)===110&&(s.charCodeAt(2)>122||s.charCodeAt(2)<97),kt=s=>s.startsWith("onUpdate:"),Ss=Object.assign,Ot=(s,n)=>{const e=s.indexOf(n);e>-1&&s.splice(e,1)},QB=Object.prototype.hasOwnProperty,ys=(s,n)=>QB.call(s,n),ss=Array.isArray,Je=s=>ua(s)==="[object Map]",HB=s=>ua(s)==="[object Set]",as=s=>typeof s=="function",rs=s=>typeof s=="string",da=s=>typeof s=="symbol",Is=s=>s!==null&&typeof s=="object",rr=s=>(Is(s)||as(s))&&as(s.then)&&as(s.catch),zB=Object.prototype.toString,ua=s=>zB.call(s),jB=s=>ua(s).slice(8,-1),UB=s=>ua(s)==="[object Object]",xt=s=>rs(s)&&s!=="NaN"&&s[0]!=="-"&&""+parseInt(s,10)===s,sl=Tt(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),ya=s=>{const n=Object.create(null);return e=>n[e]||(n[e]=s(e))},GB=/-(\w)/g,un=ya(s=>s.replace(GB,(n,e)=>e?e.toUpperCase():"")),WB=/\B([A-Z])/g,Qe=ya(s=>s.replace(WB,"-$1").toLowerCase()),El=ya(s=>s.charAt(0).toUpperCase()+s.slice(1)),Ia=ya(s=>s?`on${El(s)}`:""),Xn=(s,n)=>!Object.is(s,n),Ta=(s,n)=>{for(let e=0;e<s.length;e++)s[e](n)},sa=(s,n,e)=>{Object.defineProperty(s,n,{configurable:!0,enumerable:!1,value:e})},KB=s=>{const n=parseFloat(s);return isNaN(n)?s:n},YB=s=>{const n=rs(s)?Number(s):NaN;return isNaN(n)?s:n};let So;const cr=()=>So||(So=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function St(s){if(ss(s)){const n={};for(let e=0;e<s.length;e++){const l=s[e],a=rs(l)?sd(l):St(l);if(a)for(const t in a)n[t]=a[t]}return n}else if(rs(s)||Is(s))return s}const ZB=/;(?![^(]*\))/g,XB=/:([^]+)/,JB=/\/\*[^]*?\*\//g;function sd(s){const n={};return s.replace(JB,"").split(ZB).forEach(e=>{if(e){const l=e.split(XB);l.length>1&&(n[l[0].trim()]=l[1].trim())}}),n}function Pt(s){let n="";if(rs(s))n=s;else if(ss(s))for(let e=0;e<s.length;e++){const l=Pt(s[e]);l&&(n+=l+" ")}else if(Is(s))for(const e in s)s[e]&&(n+=e+" ");return n.trim()}const nd="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",ed=Tt(nd);function ir(s){return!!s||s===""}let Zs;class ld{constructor(n=!1){this.detached=n,this._active=!0,this.effects=[],this.cleanups=[],this.parent=Zs,!n&&Zs&&(this.index=(Zs.scopes||(Zs.scopes=[])).push(this)-1)}get active(){return this._active}run(n){if(this._active){const e=Zs;try{return Zs=this,n()}finally{Zs=e}}}on(){Zs=this}off(){Zs=this.parent}stop(n){if(this._active){let e,l;for(e=0,l=this.effects.length;e<l;e++)this.effects[e].stop();for(e=0,l=this.cleanups.length;e<l;e++)this.cleanups[e]();if(this.scopes)for(e=0,l=this.scopes.length;e<l;e++)this.scopes[e].stop(!0);if(!this.detached&&this.parent&&!n){const a=this.parent.scopes.pop();a&&a!==this&&(this.parent.scopes[this.index]=a,a.index=this.index)}this.parent=void 0,this._active=!1}}}function ad(s,n=Zs){n&&n.active&&n.effects.push(s)}function Br(){return Zs}function td(s){Zs&&Zs.cleanups.push(s)}let ie;class Rt{constructor(n,e,l,a){this.fn=n,this.trigger=e,this.scheduler=l,this.active=!0,this.deps=[],this._dirtyLevel=3,this._trackId=0,this._runnings=0,this._queryings=0,this._depsLength=0,ad(this,a)}get dirty(){if(this._dirtyLevel===1){this._dirtyLevel=0,this._queryings++,ye();for(const n of this.deps)if(n.computed&&(od(n.computed),this._dirtyLevel>=2))break;ve(),this._queryings--}return this._dirtyLevel>=2}set dirty(n){this._dirtyLevel=n?3:0}run(){if(this._dirtyLevel=0,!this.active)return this.fn();let n=Yn,e=ie;try{return Yn=!0,ie=this,this._runnings++,Po(this),this.fn()}finally{Ro(this),this._runnings--,ie=e,Yn=n}}stop(){var n;this.active&&(Po(this),Ro(this),(n=this.onStop)==null||n.call(this),this.active=!1)}}function od(s){return s.value}function Po(s){s._trackId++,s._depsLength=0}function Ro(s){if(s.deps&&s.deps.length>s._depsLength){for(let n=s._depsLength;n<s.deps.length;n++)dr(s.deps[n],s);s.deps.length=s._depsLength}}function dr(s,n){const e=s.get(n);e!==void 0&&n._trackId!==e&&(s.delete(n),s.size===0&&s.cleanup())}let Yn=!0,lt=0;const ur=[];function ye(){ur.push(Yn),Yn=!1}function ve(){const s=ur.pop();Yn=s===void 0?!0:s}function Mt(){lt++}function Vt(){for(lt--;!lt&&at.length;)at.shift()()}function yr(s,n,e){if(n.get(s)!==s._trackId){n.set(s,s._trackId);const l=s.deps[s._depsLength];l!==n?(l&&dr(l,s),s.deps[s._depsLength++]=n):s._depsLength++}}const at=[];function vr(s,n,e){Mt();for(const l of s.keys())if(!(!l.allowRecurse&&l._runnings)&&l._dirtyLevel<n&&(!l._runnings||n!==2)){const a=l._dirtyLevel;l._dirtyLevel=n,a===0&&(!l._queryings||n!==2)&&(l.trigger(),l.scheduler&&at.push(l.scheduler))}Vt()}const mr=(s,n)=>{const e=new Map;return e.cleanup=s,e.computed=n,e},na=new WeakMap,Be=Symbol(""),tt=Symbol("");function Ws(s,n,e){if(Yn&&ie){let l=na.get(s);l||na.set(s,l=new Map);let a=l.get(e);a||l.set(e,a=mr(()=>l.delete(e))),yr(ie,a)}}function Sn(s,n,e,l,a,t){const o=na.get(s);if(!o)return;let r=[];if(n==="clear")r=[...o.values()];else if(e==="length"&&ss(s)){const i=Number(l);o.forEach((c,B)=>{(B==="length"||!da(B)&&B>=i)&&r.push(c)})}else switch(e!==void 0&&r.push(o.get(e)),n){case"add":ss(s)?xt(e)&&r.push(o.get("length")):(r.push(o.get(Be)),Je(s)&&r.push(o.get(tt)));break;case"delete":ss(s)||(r.push(o.get(Be)),Je(s)&&r.push(o.get(tt)));break;case"set":Je(s)&&r.push(o.get(Be));break}Mt();for(const i of r)i&&vr(i,3);Vt()}function pd(s,n){var e;return(e=na.get(s))==null?void 0:e.get(n)}const rd=Tt("__proto__,__v_isRef,__isVue"),Ar=new Set(Object.getOwnPropertyNames(Symbol).filter(s=>s!=="arguments"&&s!=="caller").map(s=>Symbol[s]).filter(da)),Mo=cd();function cd(){const s={};return["includes","indexOf","lastIndexOf"].forEach(n=>{s[n]=function(...e){const l=is(this);for(let t=0,o=this.length;t<o;t++)Ws(l,"get",t+"");const a=l[n](...e);return a===-1||a===!1?l[n](...e.map(is)):a}}),["push","pop","shift","unshift","splice"].forEach(n=>{s[n]=function(...e){ye(),Mt();const l=is(this)[n].apply(this,e);return Vt(),ve(),l}}),s}function id(s){const n=is(this);return Ws(n,"has",s),n.hasOwnProperty(s)}class fr{constructor(n=!1,e=!1){this._isReadonly=n,this._shallow=e}get(n,e,l){const a=this._isReadonly,t=this._shallow;if(e==="__v_isReactive")return!a;if(e==="__v_isReadonly")return a;if(e==="__v_isShallow")return t;if(e==="__v_raw")return l===(a?t?bd:gr:t?hr:Fr).get(n)||Object.getPrototypeOf(n)===Object.getPrototypeOf(l)?n:void 0;const o=ss(n);if(!a){if(o&&ys(Mo,e))return Reflect.get(Mo,e,l);if(e==="hasOwnProperty")return id}const r=Reflect.get(n,e,l);return(da(e)?Ar.has(e):rd(e))||(a||Ws(n,"get",e),t)?r:qs(r)?o&&xt(e)?r:r.value:Is(r)?a?ee(r):Fl(r):r}}class Er extends fr{constructor(n=!1){super(!1,n)}set(n,e,l,a){let t=n[e];if(!this._shallow){const i=Se(t);if(!ea(l)&&!Se(l)&&(t=is(t),l=is(l)),!ss(n)&&qs(t)&&!qs(l))return i?!1:(t.value=l,!0)}const o=ss(n)&&xt(e)?Number(e)<n.length:ys(n,e),r=Reflect.set(n,e,l,a);return n===is(a)&&(o?Xn(l,t)&&Sn(n,"set",e,l):Sn(n,"add",e,l)),r}deleteProperty(n,e){const l=ys(n,e);n[e];const a=Reflect.deleteProperty(n,e);return a&&l&&Sn(n,"delete",e,void 0),a}has(n,e){const l=Reflect.has(n,e);return(!da(e)||!Ar.has(e))&&Ws(n,"has",e),l}ownKeys(n){return Ws(n,"iterate",ss(n)?"length":Be),Reflect.ownKeys(n)}}class Bd extends fr{constructor(n=!1){super(!0,n)}set(n,e){return!0}deleteProperty(n,e){return!0}}const dd=new Er,ud=new Bd,yd=new Er(!0),qt=s=>s,va=s=>Reflect.getPrototypeOf(s);function Rl(s,n,e=!1,l=!1){s=s.__v_raw;const a=is(s),t=is(n);e||(Xn(n,t)&&Ws(a,"get",n),Ws(a,"get",t));const{has:o}=va(a),r=l?qt:e?Qt:rl;if(o.call(a,n))return r(s.get(n));if(o.call(a,t))return r(s.get(t));s!==a&&s.get(n)}function Ml(s,n=!1){const e=this.__v_raw,l=is(e),a=is(s);return n||(Xn(s,a)&&Ws(l,"has",s),Ws(l,"has",a)),s===a?e.has(s):e.has(s)||e.has(a)}function Vl(s,n=!1){return s=s.__v_raw,!n&&Ws(is(s),"iterate",Be),Reflect.get(s,"size",s)}function Vo(s){s=is(s);const n=is(this);return va(n).has.call(n,s)||(n.add(s),Sn(n,"add",s,s)),this}function qo(s,n){n=is(n);const e=is(this),{has:l,get:a}=va(e);let t=l.call(e,s);t||(s=is(s),t=l.call(e,s));const o=a.call(e,s);return e.set(s,n),t?Xn(n,o)&&Sn(e,"set",s,n):Sn(e,"add",s,n),this}function No(s){const n=is(this),{has:e,get:l}=va(n);let a=e.call(n,s);a||(s=is(s),a=e.call(n,s)),l&&l.call(n,s);const t=n.delete(s);return a&&Sn(n,"delete",s,void 0),t}function $o(){const s=is(this),n=s.size!==0,e=s.clear();return n&&Sn(s,"clear",void 0,void 0),e}function ql(s,n){return function(l,a){const t=this,o=t.__v_raw,r=is(o),i=n?qt:s?Qt:rl;return!s&&Ws(r,"iterate",Be),o.forEach((c,B)=>l.call(a,i(c),i(B),t))}}function Nl(s,n,e){return function(...l){const a=this.__v_raw,t=is(a),o=Je(t),r=s==="entries"||s===Symbol.iterator&&o,i=s==="keys"&&o,c=a[s](...l),B=e?qt:n?Qt:rl;return!n&&Ws(t,"iterate",i?tt:Be),{next(){const{value:u,done:y}=c.next();return y?{value:u,done:y}:{value:r?[B(u[0]),B(u[1])]:B(u),done:y}},[Symbol.iterator](){return this}}}}function Nn(s){return function(...n){return s==="delete"?!1:s==="clear"?void 0:this}}function vd(){const s={get(t){return Rl(this,t)},get size(){return Vl(this)},has:Ml,add:Vo,set:qo,delete:No,clear:$o,forEach:ql(!1,!1)},n={get(t){return Rl(this,t,!1,!0)},get size(){return Vl(this)},has:Ml,add:Vo,set:qo,delete:No,clear:$o,forEach:ql(!1,!0)},e={get(t){return Rl(this,t,!0)},get size(){return Vl(this,!0)},has(t){return Ml.call(this,t,!0)},add:Nn("add"),set:Nn("set"),delete:Nn("delete"),clear:Nn("clear"),forEach:ql(!0,!1)},l={get(t){return Rl(this,t,!0,!0)},get size(){return Vl(this,!0)},has(t){return Ml.call(this,t,!0)},add:Nn("add"),set:Nn("set"),delete:Nn("delete"),clear:Nn("clear"),forEach:ql(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(t=>{s[t]=Nl(t,!1,!1),e[t]=Nl(t,!0,!1),n[t]=Nl(t,!1,!0),l[t]=Nl(t,!0,!0)}),[s,e,n,l]}const[md,Ad,fd,Ed]=vd();function Nt(s,n){const e=n?s?Ed:fd:s?Ad:md;return(l,a,t)=>a==="__v_isReactive"?!s:a==="__v_isReadonly"?s:a==="__v_raw"?l:Reflect.get(ys(e,a)&&a in l?e:l,a,t)}const Fd={get:Nt(!1,!1)},hd={get:Nt(!1,!0)},gd={get:Nt(!0,!1)},Fr=new WeakMap,hr=new WeakMap,gr=new WeakMap,bd=new WeakMap;function Dd(s){switch(s){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function _d(s){return s.__v_skip||!Object.isExtensible(s)?0:Dd(jB(s))}function Fl(s){return Se(s)?s:$t(s,!1,dd,Fd,Fr)}function br(s){return $t(s,!1,yd,hd,hr)}function ee(s){return $t(s,!0,ud,gd,gr)}function $t(s,n,e,l,a){if(!Is(s)||s.__v_raw&&!(n&&s.__v_isReactive))return s;const t=a.get(s);if(t)return t;const o=_d(s);if(o===0)return s;const r=new Proxy(s,o===2?l:e);return a.set(s,r),r}function we(s){return Se(s)?we(s.__v_raw):!!(s&&s.__v_isReactive)}function Se(s){return!!(s&&s.__v_isReadonly)}function ea(s){return!!(s&&s.__v_isShallow)}function Dr(s){return we(s)||Se(s)}function is(s){const n=s&&s.__v_raw;return n?is(n):s}function _r(s){return sa(s,"__v_skip",!0),s}const rl=s=>Is(s)?Fl(s):s,Qt=s=>Is(s)?ee(s):s;class Cr{constructor(n,e,l,a){this._setter=e,this.dep=void 0,this.__v_isRef=!0,this.__v_isReadonly=!1,this.effect=new Rt(()=>n(this._value),()=>la(this,1)),this.effect.computed=this,this.effect.active=this._cacheable=!a,this.__v_isReadonly=l}get value(){const n=is(this);return Ht(n),(!n._cacheable||n.effect.dirty)&&Xn(n._value,n._value=n.effect.run())&&la(n,2),n._value}set value(n){this._setter(n)}get _dirty(){return this.effect.dirty}set _dirty(n){this.effect.dirty=n}}function Cd(s,n,e=!1){let l,a;const t=as(s);return t?(l=s,a=on):(l=s.get,a=s.set),new Cr(l,a,t||!a,e)}function Ht(s){Yn&&ie&&(s=is(s),yr(ie,s.dep||(s.dep=mr(()=>s.dep=void 0,s instanceof Cr?s:void 0))))}function la(s,n=3,e){s=is(s);const l=s.dep;l&&vr(l,n)}function qs(s){return!!(s&&s.__v_isRef===!0)}function U(s){return Lr(s,!1)}function Vs(s){return Lr(s,!0)}function Lr(s,n){return qs(s)?s:new Ld(s,n)}class Ld{constructor(n,e){this.__v_isShallow=e,this.dep=void 0,this.__v_isRef=!0,this._rawValue=e?n:is(n),this._value=e?n:rl(n)}get value(){return Ht(this),this._value}set value(n){const e=this.__v_isShallow||ea(n)||Se(n);n=e?n:is(n),Xn(n,this._rawValue)&&(this._rawValue=n,this._value=e?n:rl(n),la(this,3))}}function de(s){return qs(s)?s.value:s}const wd={get:(s,n,e)=>de(Reflect.get(s,n,e)),set:(s,n,e,l)=>{const a=s[n];return qs(a)&&!qs(e)?(a.value=e,!0):Reflect.set(s,n,e,l)}};function wr(s){return we(s)?s:new Proxy(s,wd)}class Id{constructor(n){this.dep=void 0,this.__v_isRef=!0;const{get:e,set:l}=n(()=>Ht(this),()=>la(this));this._get=e,this._set=l}get value(){return this._get()}set value(n){this._set(n)}}function Ir(s){return new Id(s)}class Td{constructor(n,e,l){this._object=n,this._key=e,this._defaultValue=l,this.__v_isRef=!0}get value(){const n=this._object[this._key];return n===void 0?this._defaultValue:n}set value(n){this._object[this._key]=n}get dep(){return pd(is(this._object),this._key)}}class kd{constructor(n){this._getter=n,this.__v_isRef=!0,this.__v_isReadonly=!0}get value(){return this._getter()}}function He(s,n,e){return qs(s)?s:as(s)?new kd(s):Is(s)&&arguments.length>1?Od(s,n,e):U(s)}function Od(s,n,e){const l=s[n];return qs(l)?l:new Td(s,n,e)}function Zn(s,n,e,l){let a;try{a=l?s(...l):s()}catch(t){hl(t,n,e)}return a}function rn(s,n,e,l){if(as(s)){const t=Zn(s,n,e,l);return t&&rr(t)&&t.catch(o=>{hl(o,n,e)}),t}const a=[];for(let t=0;t<s.length;t++)a.push(rn(s[t],n,e,l));return a}function hl(s,n,e,l=!0){const a=n?n.vnode:null;if(n){let t=n.parent;const o=n.proxy,r=`https://vuejs.org/errors/#runtime-${e}`;for(;t;){const c=t.ec;if(c){for(let B=0;B<c.length;B++)if(c[B](s,o,r)===!1)return}t=t.parent}const i=n.appContext.config.errorHandler;if(i){Zn(i,null,10,[s,o,r]);return}}xd(s,e,a,l)}function xd(s,n,e,l=!0){console.error(s)}let cl=!1,ot=!1;const Ns=[];let _n=0;const Ie=[];let xn=null,pe=0;const Tr=Promise.resolve();let zt=null;function Mn(s){const n=zt||Tr;return s?n.then(this?s.bind(this):s):n}function Sd(s){let n=_n+1,e=Ns.length;for(;n<e;){const l=n+e>>>1,a=Ns[l],t=il(a);t<s||t===s&&a.pre?n=l+1:e=l}return n}function ma(s){(!Ns.length||!Ns.includes(s,cl&&s.allowRecurse?_n+1:_n))&&(s.id==null?Ns.push(s):Ns.splice(Sd(s.id),0,s),kr())}function kr(){!cl&&!ot&&(ot=!0,zt=Tr.then(Or))}function Pd(s){const n=Ns.indexOf(s);n>_n&&Ns.splice(n,1)}function Rd(s){ss(s)?Ie.push(...s):(!xn||!xn.includes(s,s.allowRecurse?pe+1:pe))&&Ie.push(s),kr()}function Qo(s,n,e=cl?_n+1:0){for(;e<Ns.length;e++){const l=Ns[e];if(l&&l.pre){if(s&&l.id!==s.uid)continue;Ns.splice(e,1),e--,l()}}}function aa(s){if(Ie.length){const n=[...new Set(Ie)];if(Ie.length=0,xn){xn.push(...n);return}for(xn=n,xn.sort((e,l)=>il(e)-il(l)),pe=0;pe<xn.length;pe++)xn[pe]();xn=null,pe=0}}const il=s=>s.id==null?1/0:s.id,Md=(s,n)=>{const e=il(s)-il(n);if(e===0){if(s.pre&&!n.pre)return-1;if(n.pre&&!s.pre)return 1}return e};function Or(s){ot=!1,cl=!0,Ns.sort(Md);try{for(_n=0;_n<Ns.length;_n++){const n=Ns[_n];n&&n.active!==!1&&Zn(n,null,14)}}finally{_n=0,Ns.length=0,aa(),cl=!1,zt=null,(Ns.length||Ie.length)&&Or()}}function Vd(s,n,...e){if(s.isUnmounted)return;const l=s.vnode.props||Cs;let a=e;const t=n.startsWith("update:"),o=t&&n.slice(7);if(o&&o in l){const B=`${o==="modelValue"?"model":o}Modifiers`,{number:u,trim:y}=l[B]||Cs;y&&(a=e.map(v=>rs(v)?v.trim():v)),u&&(a=e.map(KB))}let r,i=l[r=Ia(n)]||l[r=Ia(un(n))];!i&&t&&(i=l[r=Ia(Qe(n))]),i&&rn(i,s,6,a);const c=l[r+"Once"];if(c){if(!s.emitted)s.emitted={};else if(s.emitted[r])return;s.emitted[r]=!0,rn(c,s,6,a)}}function xr(s,n,e=!1){const l=n.emitsCache,a=l.get(s);if(a!==void 0)return a;const t=s.emits;let o={},r=!1;if(!as(s)){const i=c=>{const B=xr(c,n,!0);B&&(r=!0,Ss(o,B))};!e&&n.mixins.length&&n.mixins.forEach(i),s.extends&&i(s.extends),s.mixins&&s.mixins.forEach(i)}return!t&&!r?(Is(s)&&l.set(s,null),null):(ss(t)?t.forEach(i=>o[i]=null):Ss(o,t),Is(s)&&l.set(s,o),o)}function Aa(s,n){return!s||!fl(n)?!1:(n=n.slice(2).replace(/Once$/,""),ys(s,n[0].toLowerCase()+n.slice(1))||ys(s,Qe(n))||ys(s,n))}let pn=null,Sr=null;function ta(s){const n=pn;return pn=s,Sr=s&&s.type.__scopeId||null,n}function qd(s,n=pn,e){if(!n||s._n)return s;const l=(...a)=>{l._d&&sp(-1);const t=ta(n);let o;try{o=s(...a)}finally{ta(t),l._d&&sp(1)}return o};return l._n=!0,l._c=!0,l._d=!0,l}function ka(s){const{type:n,vnode:e,proxy:l,withProxy:a,props:t,propsOptions:[o],slots:r,attrs:i,emit:c,render:B,renderCache:u,data:y,setupState:v,ctx:f,inheritAttrs:b}=s;let _,F;const I=ta(s);try{if(e.shapeFlag&4){const w=a||l,M=w;_=mn(B.call(M,w,u,t,v,y,f)),F=i}else{const w=n;_=mn(w.length>1?w(t,{attrs:i,slots:r,emit:c}):w(t,null)),F=n.props?i:Nd(i)}}catch(w){al.length=0,hl(w,s,1),_=Ts(Bn)}let h=_;if(F&&b!==!1){const w=Object.keys(F),{shapeFlag:M}=h;w.length&&M&7&&(o&&w.some(kt)&&(F=$d(F,o)),h=Jn(h,F))}return e.dirs&&(h=Jn(h),h.dirs=h.dirs?h.dirs.concat(e.dirs):e.dirs),e.transition&&(h.transition=e.transition),_=h,ta(I),_}const Nd=s=>{let n;for(const e in s)(e==="class"||e==="style"||fl(e))&&((n||(n={}))[e]=s[e]);return n},$d=(s,n)=>{const e={};for(const l in s)(!kt(l)||!(l.slice(9)in n))&&(e[l]=s[l]);return e};function Qd(s,n,e){const{props:l,children:a,component:t}=s,{props:o,children:r,patchFlag:i}=n,c=t.emitsOptions;if(n.dirs||n.transition)return!0;if(e&&i>=0){if(i&1024)return!0;if(i&16)return l?Ho(l,o,c):!!o;if(i&8){const B=n.dynamicProps;for(let u=0;u<B.length;u++){const y=B[u];if(o[y]!==l[y]&&!Aa(c,y))return!0}}}else return(a||r)&&(!r||!r.$stable)?!0:l===o?!1:l?o?Ho(l,o,c):!0:!!o;return!1}function Ho(s,n,e){const l=Object.keys(n);if(l.length!==Object.keys(s).length)return!0;for(let a=0;a<l.length;a++){const t=l[a];if(n[t]!==s[t]&&!Aa(e,t))return!0}return!1}function Hd({vnode:s,parent:n},e){if(e)for(;n;){const l=n.subTree;if(l.suspense&&l.suspense.activeBranch===s&&(l.el=s.el),l===s)(s=n.vnode).el=e,n=n.parent;else break}}const Pr="components";function sn(s,n){return jd(Pr,s,!0,n)||s}const zd=Symbol.for("v-ndc");function jd(s,n,e=!0,l=!1){const a=pn||Ms;if(a){const t=a.type;if(s===Pr){const r=N2(t,!1);if(r&&(r===n||r===un(n)||r===El(un(n))))return t}const o=zo(a[s]||t[s],n)||zo(a.appContext[s],n);return!o&&l?t:o}}function zo(s,n){return s&&(s[n]||s[un(n)]||s[El(un(n))])}const Ud=s=>s.__isSuspense;function Rr(s,n){n&&n.pendingBranch?ss(s)?n.effects.push(...s):n.effects.push(s):Rd(s)}const Gd=Symbol.for("v-scx"),Wd=()=>vs(Gd);function Mr(s,n){return jt(s,null,n)}const $l={};function cs(s,n,e){return jt(s,n,e)}function jt(s,n,{immediate:e,deep:l,flush:a,once:t,onTrack:o,onTrigger:r}=Cs){if(n&&t){const C=n;n=(...W)=>{C(...W),M()}}const i=Ms,c=C=>l===!0?C:De(C,l===!1?1:void 0);let B,u=!1,y=!1;if(qs(s)?(B=()=>s.value,u=ea(s)):we(s)?(B=()=>c(s),u=!0):ss(s)?(y=!0,u=s.some(C=>we(C)||ea(C)),B=()=>s.map(C=>{if(qs(C))return C.value;if(we(C))return c(C);if(as(C))return Zn(C,i,2)})):as(s)?n?B=()=>Zn(s,i,2):B=()=>(v&&v(),rn(s,i,3,[f])):B=on,n&&l){const C=B;B=()=>De(C())}let v,f=C=>{v=h.onStop=()=>{Zn(C,i,4),v=h.onStop=void 0}},b;if(bl)if(f=on,n?e&&rn(n,i,3,[B(),y?[]:void 0,f]):B(),a==="sync"){const C=Wd();b=C.__watcherHandles||(C.__watcherHandles=[])}else return on;let _=y?new Array(s.length).fill($l):$l;const F=()=>{if(!(!h.active||!h.dirty))if(n){const C=h.run();(l||u||(y?C.some((W,N)=>Xn(W,_[N])):Xn(C,_)))&&(v&&v(),rn(n,i,3,[C,_===$l?void 0:y&&_[0]===$l?[]:_,f]),_=C)}else h.run()};F.allowRecurse=!!n;let I;a==="sync"?I=F:a==="post"?I=()=>js(F,i&&i.suspense):(F.pre=!0,i&&(F.id=i.uid),I=()=>ma(F));const h=new Rt(B,on,I),w=Br(),M=()=>{h.stop(),w&&Ot(w.effects,h)};return n?e?F():_=h.run():a==="post"?js(h.run.bind(h),i&&i.suspense):h.run(),b&&b.push(M),M}function Kd(s,n,e){const l=this.proxy,a=rs(s)?s.includes(".")?Vr(l,s):()=>l[s]:s.bind(l,l);let t;as(n)?t=n:(t=n.handler,e=n);const o=Ms;Re(this);const r=jt(a,t.bind(l),e);return o?Re(o):ue(),r}function Vr(s,n){const e=n.split(".");return()=>{let l=s;for(let a=0;a<e.length&&l;a++)l=l[e[a]];return l}}function De(s,n,e=0,l){if(!Is(s)||s.__v_skip)return s;if(n&&n>0){if(e>=n)return s;e++}if(l=l||new Set,l.has(s))return s;if(l.add(s),qs(s))De(s.value,n,e,l);else if(ss(s))for(let a=0;a<s.length;a++)De(s[a],n,e,l);else if(HB(s)||Je(s))s.forEach(a=>{De(a,n,e,l)});else if(UB(s))for(const a in s)De(s[a],n,e,l);return s}function Dn(s,n,e,l){const a=s.dirs,t=n&&n.dirs;for(let o=0;o<a.length;o++){const r=a[o];t&&(r.oldValue=t[o].value);let i=r.dir[l];i&&(ye(),rn(i,e,8,[s.el,r,s,n]),ve())}}const Un=Symbol("_leaveCb"),Ql=Symbol("_enterCb");function qr(){const s={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return As(()=>{s.isMounted=!0}),Gt(()=>{s.isUnmounting=!0}),s}const ln=[Function,Array],Nr={mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:ln,onEnter:ln,onAfterEnter:ln,onEnterCancelled:ln,onBeforeLeave:ln,onLeave:ln,onAfterLeave:ln,onLeaveCancelled:ln,onBeforeAppear:ln,onAppear:ln,onAfterAppear:ln,onAppearCancelled:ln},Yd={name:"BaseTransition",props:Nr,setup(s,{slots:n}){const e=je(),l=qr();let a;return()=>{const t=n.default&&Ut(n.default(),!0);if(!t||!t.length)return;let o=t[0];if(t.length>1){for(const b of t)if(b.type!==Bn){o=b;break}}const r=is(s),{mode:i}=r;if(l.isLeaving)return Oa(o);const c=jo(o);if(!c)return Oa(o);const B=Bl(c,r,l,e);dl(c,B);const u=e.subTree,y=u&&jo(u);let v=!1;const{getTransitionKey:f}=c.type;if(f){const b=f();a===void 0?a=b:b!==a&&(a=b,v=!0)}if(y&&y.type!==Bn&&(!re(c,y)||v)){const b=Bl(y,r,l,e);if(dl(y,b),i==="out-in")return l.isLeaving=!0,b.afterLeave=()=>{l.isLeaving=!1,e.update.active!==!1&&(e.effect.dirty=!0,e.update())},Oa(o);i==="in-out"&&c.type!==Bn&&(b.delayLeave=(_,F,I)=>{const h=$r(l,y);h[String(y.key)]=y,_[Un]=()=>{F(),_[Un]=void 0,delete B.delayedLeave},B.delayedLeave=I})}return o}}},Zd=Yd;function $r(s,n){const{leavingVNodes:e}=s;let l=e.get(n.type);return l||(l=Object.create(null),e.set(n.type,l)),l}function Bl(s,n,e,l){const{appear:a,mode:t,persisted:o=!1,onBeforeEnter:r,onEnter:i,onAfterEnter:c,onEnterCancelled:B,onBeforeLeave:u,onLeave:y,onAfterLeave:v,onLeaveCancelled:f,onBeforeAppear:b,onAppear:_,onAfterAppear:F,onAppearCancelled:I}=n,h=String(s.key),w=$r(e,s),M=(N,S)=>{N&&rn(N,l,9,S)},C=(N,S)=>{const $=S[1];M(N,S),ss(N)?N.every(Z=>Z.length<=1)&&$():N.length<=1&&$()},W={mode:t,persisted:o,beforeEnter(N){let S=r;if(!e.isMounted)if(a)S=b||r;else return;N[Un]&&N[Un](!0);const $=w[h];$&&re(s,$)&&$.el[Un]&&$.el[Un](),M(S,[N])},enter(N){let S=i,$=c,Z=B;if(!e.isMounted)if(a)S=_||i,$=F||c,Z=I||B;else return;let Q=!1;const ns=N[Ql]=Ls=>{Q||(Q=!0,Ls?M(Z,[N]):M($,[N]),W.delayedLeave&&W.delayedLeave(),N[Ql]=void 0)};S?C(S,[N,ns]):ns()},leave(N,S){const $=String(s.key);if(N[Ql]&&N[Ql](!0),e.isUnmounting)return S();M(u,[N]);let Z=!1;const Q=N[Un]=ns=>{Z||(Z=!0,S(),ns?M(f,[N]):M(v,[N]),N[Un]=void 0,w[$]===s&&delete w[$])};w[$]=s,y?C(y,[N,Q]):Q()},clone(N){return Bl(N,n,e,l)}};return W}function Oa(s){if(gl(s))return s=Jn(s),s.children=null,s}function jo(s){return gl(s)?s.children?s.children[0]:void 0:s}function dl(s,n){s.shapeFlag&6&&s.component?dl(s.component.subTree,n):s.shapeFlag&128?(s.ssContent.transition=n.clone(s.ssContent),s.ssFallback.transition=n.clone(s.ssFallback)):s.transition=n}function Ut(s,n=!1,e){let l=[],a=0;for(let t=0;t<s.length;t++){let o=s[t];const r=e==null?o.key:String(e)+String(o.key!=null?o.key:t);o.type===Xs?(o.patchFlag&128&&a++,l=l.concat(Ut(o.children,n,r))):(n||o.type!==Bn)&&l.push(r!=null?Jn(o,{key:r}):o)}if(a>1)for(let t=0;t<l.length;t++)l[t].patchFlag=-2;return l}/*! #__NO_SIDE_EFFECTS__ */function R(s,n){return as(s)?Ss({name:s.name},n,{setup:s}):s}const nl=s=>!!s.type.__asyncLoader;/*! #__NO_SIDE_EFFECTS__ */function m(s){as(s)&&(s={loader:s});const{loader:n,loadingComponent:e,errorComponent:l,delay:a=200,timeout:t,suspensible:o=!0,onError:r}=s;let i=null,c,B=0;const u=()=>(B++,i=null,y()),y=()=>{let v;return i||(v=i=n().catch(f=>{if(f=f instanceof Error?f:new Error(String(f)),r)return new Promise((b,_)=>{r(f,()=>b(u()),()=>_(f),B+1)});throw f}).then(f=>v!==i&&i?i:(f&&(f.__esModule||f[Symbol.toStringTag]==="Module")&&(f=f.default),c=f,f)))};return R({name:"AsyncComponentWrapper",__asyncLoader:y,get __asyncResolved(){return c},setup(){const v=Ms;if(c)return()=>xa(c,v);const f=I=>{i=null,hl(I,v,13,!l)};if(o&&v.suspense||bl)return y().then(I=>()=>xa(I,v)).catch(I=>(f(I),()=>l?Ts(l,{error:I}):null));const b=U(!1),_=U(),F=U(!!a);return a&&setTimeout(()=>{F.value=!1},a),t!=null&&setTimeout(()=>{if(!b.value&&!_.value){const I=new Error(`Async component timed out after ${t}ms.`);f(I),_.value=I}},t),y().then(()=>{b.value=!0,v.parent&&gl(v.parent.vnode)&&(v.parent.effect.dirty=!0,ma(v.parent.update))}).catch(I=>{f(I),_.value=I}),()=>{if(b.value&&c)return xa(c,v);if(_.value&&l)return Ts(l,{error:_.value});if(e&&!F.value)return Ts(e)}}})}function xa(s,n){const{ref:e,props:l,children:a,ce:t}=n.vnode,o=Ts(s,l,a);return o.ref=e,o.ce=t,delete n.vnode.ce,o}const gl=s=>s.type.__isKeepAlive;function Xd(s,n){Qr(s,"a",n)}function Jd(s,n){Qr(s,"da",n)}function Qr(s,n,e=Ms){const l=s.__wdc||(s.__wdc=()=>{let a=e;for(;a;){if(a.isDeactivated)return;a=a.parent}return s()});if(fa(n,l,e),e){let a=e.parent;for(;a&&a.parent;)gl(a.parent.vnode)&&s2(l,n,e,a),a=a.parent}}function s2(s,n,e,l){const a=fa(n,s,l,!0);ze(()=>{Ot(l[n],a)},e)}function fa(s,n,e=Ms,l=!1){if(e){const a=e[s]||(e[s]=[]),t=n.__weh||(n.__weh=(...o)=>{if(e.isUnmounted)return;ye(),Re(e);const r=rn(n,e,s,o);return ue(),ve(),r});return l?a.unshift(t):a.push(t),t}}const Vn=s=>(n,e=Ms)=>(!bl||s==="sp")&&fa(s,(...l)=>n(...l),e),n2=Vn("bm"),As=Vn("m"),e2=Vn("bu"),Hr=Vn("u"),Gt=Vn("bum"),ze=Vn("um"),l2=Vn("sp"),a2=Vn("rtg"),t2=Vn("rtc");function o2(s,n=Ms){fa("ec",s,n)}const pt=s=>s?ac(s)?Xt(s)||s.proxy:pt(s.parent):null,el=Ss(Object.create(null),{$:s=>s,$el:s=>s.vnode.el,$data:s=>s.data,$props:s=>s.props,$attrs:s=>s.attrs,$slots:s=>s.slots,$refs:s=>s.refs,$parent:s=>pt(s.parent),$root:s=>pt(s.root),$emit:s=>s.emit,$options:s=>Wt(s),$forceUpdate:s=>s.f||(s.f=()=>{s.effect.dirty=!0,ma(s.update)}),$nextTick:s=>s.n||(s.n=Mn.bind(s.proxy)),$watch:s=>Kd.bind(s)}),Sa=(s,n)=>s!==Cs&&!s.__isScriptSetup&&ys(s,n),p2={get({_:s},n){const{ctx:e,setupState:l,data:a,props:t,accessCache:o,type:r,appContext:i}=s;let c;if(n[0]!=="$"){const v=o[n];if(v!==void 0)switch(v){case 1:return l[n];case 2:return a[n];case 4:return e[n];case 3:return t[n]}else{if(Sa(l,n))return o[n]=1,l[n];if(a!==Cs&&ys(a,n))return o[n]=2,a[n];if((c=s.propsOptions[0])&&ys(c,n))return o[n]=3,t[n];if(e!==Cs&&ys(e,n))return o[n]=4,e[n];rt&&(o[n]=0)}}const B=el[n];let u,y;if(B)return n==="$attrs"&&Ws(s,"get",n),B(s);if((u=r.__cssModules)&&(u=u[n]))return u;if(e!==Cs&&ys(e,n))return o[n]=4,e[n];if(y=i.config.globalProperties,ys(y,n))return y[n]},set({_:s},n,e){const{data:l,setupState:a,ctx:t}=s;return Sa(a,n)?(a[n]=e,!0):l!==Cs&&ys(l,n)?(l[n]=e,!0):ys(s.props,n)||n[0]==="$"&&n.slice(1)in s?!1:(t[n]=e,!0)},has({_:{data:s,setupState:n,accessCache:e,ctx:l,appContext:a,propsOptions:t}},o){let r;return!!e[o]||s!==Cs&&ys(s,o)||Sa(n,o)||(r=t[0])&&ys(r,o)||ys(l,o)||ys(el,o)||ys(a.config.globalProperties,o)},defineProperty(s,n,e){return e.get!=null?s._.accessCache[n]=0:ys(e,"value")&&this.set(s,n,e.value,null),Reflect.defineProperty(s,n,e)}};function Uo(s){return ss(s)?s.reduce((n,e)=>(n[e]=null,n),{}):s}let rt=!0;function r2(s){const n=Wt(s),e=s.proxy,l=s.ctx;rt=!1,n.beforeCreate&&Go(n.beforeCreate,s,"bc");const{data:a,computed:t,methods:o,watch:r,provide:i,inject:c,created:B,beforeMount:u,mounted:y,beforeUpdate:v,updated:f,activated:b,deactivated:_,beforeDestroy:F,beforeUnmount:I,destroyed:h,unmounted:w,render:M,renderTracked:C,renderTriggered:W,errorCaptured:N,serverPrefetch:S,expose:$,inheritAttrs:Z,components:Q,directives:ns,filters:Ls}=n;if(c&&c2(c,l,null),o)for(const es in o){const K=o[es];as(K)&&(l[es]=K.bind(e))}if(a){const es=a.call(e,e);Is(es)&&(s.data=Fl(es))}if(rt=!0,t)for(const es in t){const K=t[es],Os=as(K)?K.bind(e,e):as(K.get)?K.get.bind(e,e):on,hn=!as(K)&&as(K.set)?K.set.bind(e):on,en=D({get:Os,set:hn});Object.defineProperty(l,es,{enumerable:!0,configurable:!0,get:()=>en.value,set:Ps=>en.value=Ps})}if(r)for(const es in r)zr(r[es],l,e,es);if(i){const es=as(i)?i.call(e):i;Reflect.ownKeys(es).forEach(K=>{cn(K,es[K])})}B&&Go(B,s,"c");function G(es,K){ss(K)?K.forEach(Os=>es(Os.bind(e))):K&&es(K.bind(e))}if(G(n2,u),G(As,y),G(e2,v),G(Hr,f),G(Xd,b),G(Jd,_),G(o2,N),G(t2,C),G(a2,W),G(Gt,I),G(ze,w),G(l2,S),ss($))if($.length){const es=s.exposed||(s.exposed={});$.forEach(K=>{Object.defineProperty(es,K,{get:()=>e[K],set:Os=>e[K]=Os})})}else s.exposed||(s.exposed={});M&&s.render===on&&(s.render=M),Z!=null&&(s.inheritAttrs=Z),Q&&(s.components=Q),ns&&(s.directives=ns)}function c2(s,n,e=on){ss(s)&&(s=ct(s));for(const l in s){const a=s[l];let t;Is(a)?"default"in a?t=vs(a.from||l,a.default,!0):t=vs(a.from||l):t=vs(a),qs(t)?Object.defineProperty(n,l,{enumerable:!0,configurable:!0,get:()=>t.value,set:o=>t.value=o}):n[l]=t}}function Go(s,n,e){rn(ss(s)?s.map(l=>l.bind(n.proxy)):s.bind(n.proxy),n,e)}function zr(s,n,e,l){const a=l.includes(".")?Vr(e,l):()=>e[l];if(rs(s)){const t=n[s];as(t)&&cs(a,t)}else if(as(s))cs(a,s.bind(e));else if(Is(s))if(ss(s))s.forEach(t=>zr(t,n,e,l));else{const t=as(s.handler)?s.handler.bind(e):n[s.handler];as(t)&&cs(a,t,s)}}function Wt(s){const n=s.type,{mixins:e,extends:l}=n,{mixins:a,optionsCache:t,config:{optionMergeStrategies:o}}=s.appContext,r=t.get(n);let i;return r?i=r:!a.length&&!e&&!l?i=n:(i={},a.length&&a.forEach(c=>oa(i,c,o,!0)),oa(i,n,o)),Is(n)&&t.set(n,i),i}function oa(s,n,e,l=!1){const{mixins:a,extends:t}=n;t&&oa(s,t,e,!0),a&&a.forEach(o=>oa(s,o,e,!0));for(const o in n)if(!(l&&o==="expose")){const r=i2[o]||e&&e[o];s[o]=r?r(s[o],n[o]):n[o]}return s}const i2={data:Wo,props:Ko,emits:Ko,methods:Xe,computed:Xe,beforeCreate:$s,created:$s,beforeMount:$s,mounted:$s,beforeUpdate:$s,updated:$s,beforeDestroy:$s,beforeUnmount:$s,destroyed:$s,unmounted:$s,activated:$s,deactivated:$s,errorCaptured:$s,serverPrefetch:$s,components:Xe,directives:Xe,watch:d2,provide:Wo,inject:B2};function Wo(s,n){return n?s?function(){return Ss(as(s)?s.call(this,this):s,as(n)?n.call(this,this):n)}:n:s}function B2(s,n){return Xe(ct(s),ct(n))}function ct(s){if(ss(s)){const n={};for(let e=0;e<s.length;e++)n[s[e]]=s[e];return n}return s}function $s(s,n){return s?[...new Set([].concat(s,n))]:n}function Xe(s,n){return s?Ss(Object.create(null),s,n):n}function Ko(s,n){return s?ss(s)&&ss(n)?[...new Set([...s,...n])]:Ss(Object.create(null),Uo(s),Uo(n??{})):n}function d2(s,n){if(!s)return n;if(!n)return s;const e=Ss(Object.create(null),s);for(const l in n)e[l]=$s(s[l],n[l]);return e}function jr(){return{app:null,config:{isNativeTag:$B,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let u2=0;function y2(s,n){return function(l,a=null){as(l)||(l=Ss({},l)),a!=null&&!Is(a)&&(a=null);const t=jr(),o=new WeakSet;let r=!1;const i=t.app={_uid:u2++,_component:l,_props:a,_container:null,_context:t,_instance:null,version:Q2,get config(){return t.config},set config(c){},use(c,...B){return o.has(c)||(c&&as(c.install)?(o.add(c),c.install(i,...B)):as(c)&&(o.add(c),c(i,...B))),i},mixin(c){return t.mixins.includes(c)||t.mixins.push(c),i},component(c,B){return B?(t.components[c]=B,i):t.components[c]},directive(c,B){return B?(t.directives[c]=B,i):t.directives[c]},mount(c,B,u){if(!r){const y=Ts(l,a);return y.appContext=t,u===!0?u="svg":u===!1&&(u=void 0),B&&n?n(y,c):s(y,c,u),r=!0,i._container=c,c.__vue_app__=i,Xt(y.component)||y.component.proxy}},unmount(){r&&(s(null,i._container),delete i._container.__vue_app__)},provide(c,B){return t.provides[c]=B,i},runWithContext(c){pa=i;try{return c()}finally{pa=null}}};return i}}let pa=null;function cn(s,n){if(Ms){let e=Ms.provides;const l=Ms.parent&&Ms.parent.provides;l===e&&(e=Ms.provides=Object.create(l)),e[s]=n}}function vs(s,n,e=!1){const l=Ms||pn;if(l||pa){const a=l?l.parent==null?l.vnode.appContext&&l.vnode.appContext.provides:l.parent.provides:pa._context.provides;if(a&&s in a)return a[s];if(arguments.length>1)return e&&as(n)?n.call(l&&l.proxy):n}}function v2(s,n,e,l=!1){const a={},t={};sa(t,Ea,1),s.propsDefaults=Object.create(null),Ur(s,n,a,t);for(const o in s.propsOptions[0])o in a||(a[o]=void 0);e?s.props=l?a:br(a):s.type.props?s.props=a:s.props=t,s.attrs=t}function m2(s,n,e,l){const{props:a,attrs:t,vnode:{patchFlag:o}}=s,r=is(a),[i]=s.propsOptions;let c=!1;if((l||o>0)&&!(o&16)){if(o&8){const B=s.vnode.dynamicProps;for(let u=0;u<B.length;u++){let y=B[u];if(Aa(s.emitsOptions,y))continue;const v=n[y];if(i)if(ys(t,y))v!==t[y]&&(t[y]=v,c=!0);else{const f=un(y);a[f]=it(i,r,f,v,s,!1)}else v!==t[y]&&(t[y]=v,c=!0)}}}else{Ur(s,n,a,t)&&(c=!0);let B;for(const u in r)(!n||!ys(n,u)&&((B=Qe(u))===u||!ys(n,B)))&&(i?e&&(e[u]!==void 0||e[B]!==void 0)&&(a[u]=it(i,r,u,void 0,s,!0)):delete a[u]);if(t!==r)for(const u in t)(!n||!ys(n,u))&&(delete t[u],c=!0)}c&&Sn(s,"set","$attrs")}function Ur(s,n,e,l){const[a,t]=s.propsOptions;let o=!1,r;if(n)for(let i in n){if(sl(i))continue;const c=n[i];let B;a&&ys(a,B=un(i))?!t||!t.includes(B)?e[B]=c:(r||(r={}))[B]=c:Aa(s.emitsOptions,i)||(!(i in l)||c!==l[i])&&(l[i]=c,o=!0)}if(t){const i=is(e),c=r||Cs;for(let B=0;B<t.length;B++){const u=t[B];e[u]=it(a,i,u,c[u],s,!ys(c,u))}}return o}function it(s,n,e,l,a,t){const o=s[e];if(o!=null){const r=ys(o,"default");if(r&&l===void 0){const i=o.default;if(o.type!==Function&&!o.skipFactory&&as(i)){const{propsDefaults:c}=a;e in c?l=c[e]:(Re(a),l=c[e]=i.call(null,n),ue())}else l=i}o[0]&&(t&&!r?l=!1:o[1]&&(l===""||l===Qe(e))&&(l=!0))}return l}function Gr(s,n,e=!1){const l=n.propsCache,a=l.get(s);if(a)return a;const t=s.props,o={},r=[];let i=!1;if(!as(s)){const B=u=>{i=!0;const[y,v]=Gr(u,n,!0);Ss(o,y),v&&r.push(...v)};!e&&n.mixins.length&&n.mixins.forEach(B),s.extends&&B(s.extends),s.mixins&&s.mixins.forEach(B)}if(!t&&!i)return Is(s)&&l.set(s,Le),Le;if(ss(t))for(let B=0;B<t.length;B++){const u=un(t[B]);Yo(u)&&(o[u]=Cs)}else if(t)for(const B in t){const u=un(B);if(Yo(u)){const y=t[B],v=o[u]=ss(y)||as(y)?{type:y}:Ss({},y);if(v){const f=Jo(Boolean,v.type),b=Jo(String,v.type);v[0]=f>-1,v[1]=b<0||f<b,(f>-1||ys(v,"default"))&&r.push(u)}}}const c=[o,r];return Is(s)&&l.set(s,c),c}function Yo(s){return s[0]!=="$"}function Zo(s){const n=s&&s.toString().match(/^\s*(function|class) (\w+)/);return n?n[2]:s===null?"null":""}function Xo(s,n){return Zo(s)===Zo(n)}function Jo(s,n){return ss(n)?n.findIndex(e=>Xo(e,s)):as(n)&&Xo(n,s)?0:-1}const Wr=s=>s[0]==="_"||s==="$stable",Kt=s=>ss(s)?s.map(mn):[mn(s)],A2=(s,n,e)=>{if(n._n)return n;const l=qd((...a)=>Kt(n(...a)),e);return l._c=!1,l},Kr=(s,n,e)=>{const l=s._ctx;for(const a in s){if(Wr(a))continue;const t=s[a];if(as(t))n[a]=A2(a,t,l);else if(t!=null){const o=Kt(t);n[a]=()=>o}}},Yr=(s,n)=>{const e=Kt(n);s.slots.default=()=>e},f2=(s,n)=>{if(s.vnode.shapeFlag&32){const e=n._;e?(s.slots=is(n),sa(n,"_",e)):Kr(n,s.slots={})}else s.slots={},n&&Yr(s,n);sa(s.slots,Ea,1)},E2=(s,n,e)=>{const{vnode:l,slots:a}=s;let t=!0,o=Cs;if(l.shapeFlag&32){const r=n._;r?e&&r===1?t=!1:(Ss(a,n),!e&&r===1&&delete a._):(t=!n.$stable,Kr(n,a)),o=n}else n&&(Yr(s,n),o={default:1});if(t)for(const r in a)!Wr(r)&&o[r]==null&&delete a[r]};function ra(s,n,e,l,a=!1){if(ss(s)){s.forEach((y,v)=>ra(y,n&&(ss(n)?n[v]:n),e,l,a));return}if(nl(l)&&!a)return;const t=l.shapeFlag&4?Xt(l.component)||l.component.proxy:l.el,o=a?null:t,{i:r,r:i}=s,c=n&&n.r,B=r.refs===Cs?r.refs={}:r.refs,u=r.setupState;if(c!=null&&c!==i&&(rs(c)?(B[c]=null,ys(u,c)&&(u[c]=null)):qs(c)&&(c.value=null)),as(i))Zn(i,r,12,[o,B]);else{const y=rs(i),v=qs(i);if(y||v){const f=()=>{if(s.f){const b=y?ys(u,i)?u[i]:B[i]:i.value;a?ss(b)&&Ot(b,t):ss(b)?b.includes(t)||b.push(t):y?(B[i]=[t],ys(u,i)&&(u[i]=B[i])):(i.value=[t],s.k&&(B[s.k]=i.value))}else y?(B[i]=o,ys(u,i)&&(u[i]=o)):v&&(i.value=o,s.k&&(B[s.k]=o))};o?(f.id=-1,js(f,e)):f()}}}let $n=!1;const F2=s=>s.namespaceURI.includes("svg")&&s.tagName!=="foreignObject",h2=s=>s.namespaceURI.includes("MathML"),Hl=s=>{if(F2(s))return"svg";if(h2(s))return"mathml"},zl=s=>s.nodeType===8;function g2(s){const{mt:n,p:e,o:{patchProp:l,createText:a,nextSibling:t,parentNode:o,remove:r,insert:i,createComment:c}}=s,B=(h,w)=>{if(!w.hasChildNodes()){e(null,h,w),aa(),w._vnode=h;return}$n=!1,u(w.firstChild,h,null,null,null),aa(),w._vnode=h,$n&&console.error("Hydration completed but contains mismatches.")},u=(h,w,M,C,W,N=!1)=>{const S=zl(h)&&h.data==="[",$=()=>b(h,w,M,C,W,S),{type:Z,ref:Q,shapeFlag:ns,patchFlag:Ls}=w;let Ds=h.nodeType;w.el=h,Ls===-2&&(N=!1,w.dynamicChildren=null);let G=null;switch(Z){case Pe:Ds!==3?w.children===""?(i(w.el=a(""),o(h),h),G=h):G=$():(h.data!==w.children&&($n=!0,h.data=w.children),G=t(h));break;case Bn:I(h)?(G=t(h),F(w.el=h.content.firstChild,h,M)):Ds!==8||S?G=$():G=t(h);break;case ll:if(S&&(h=t(h),Ds=h.nodeType),Ds===1||Ds===3){G=h;const es=!w.children.length;for(let K=0;K<w.staticCount;K++)es&&(w.children+=G.nodeType===1?G.outerHTML:G.data),K===w.staticCount-1&&(w.anchor=G),G=t(G);return S?t(G):G}else $();break;case Xs:S?G=f(h,w,M,C,W,N):G=$();break;default:if(ns&1)(Ds!==1||w.type.toLowerCase()!==h.tagName.toLowerCase())&&!I(h)?G=$():G=y(h,w,M,C,W,N);else if(ns&6){w.slotScopeIds=W;const es=o(h);if(S?G=_(h):zl(h)&&h.data==="teleport start"?G=_(h,h.data,"teleport end"):G=t(h),n(w,es,null,M,C,Hl(es),N),nl(w)){let K;S?(K=Ts(Xs),K.anchor=G?G.previousSibling:es.lastChild):K=h.nodeType===3?lc(""):Ts("div"),K.el=h,w.component.subTree=K}}else ns&64?Ds!==8?G=$():G=w.type.hydrate(h,w,M,C,W,N,s,v):ns&128&&(G=w.type.hydrate(h,w,M,C,Hl(o(h)),W,N,s,u))}return Q!=null&&ra(Q,null,C,w),G},y=(h,w,M,C,W,N)=>{N=N||!!w.dynamicChildren;const{type:S,props:$,patchFlag:Z,shapeFlag:Q,dirs:ns,transition:Ls}=w,Ds=S==="input"||S==="option";if(Ds||Z!==-1){ns&&Dn(w,null,M,"created");let G=!1;if(I(h)){G=Zr(C,Ls)&&M&&M.vnode.props&&M.vnode.props.appear;const K=h.content.firstChild;G&&Ls.beforeEnter(K),F(K,h,M),w.el=h=K}if(Q&16&&!($&&($.innerHTML||$.textContent))){let K=v(h.firstChild,w,h,M,C,W,N);for(;K;){$n=!0;const Os=K;K=K.nextSibling,r(Os)}}else Q&8&&h.textContent!==w.children&&($n=!0,h.textContent=w.children);if($)if(Ds||!N||Z&48)for(const K in $)(Ds&&(K.endsWith("value")||K==="indeterminate")||fl(K)&&!sl(K)||K[0]===".")&&l(h,K,null,$[K],void 0,void 0,M);else $.onClick&&l(h,"onClick",null,$.onClick,void 0,void 0,M);let es;(es=$&&$.onVnodeBeforeMount)&&an(es,M,w),ns&&Dn(w,null,M,"beforeMount"),((es=$&&$.onVnodeMounted)||ns||G)&&Rr(()=>{es&&an(es,M,w),G&&Ls.enter(h),ns&&Dn(w,null,M,"mounted")},C)}return h.nextSibling},v=(h,w,M,C,W,N,S)=>{S=S||!!w.dynamicChildren;const $=w.children,Z=$.length;for(let Q=0;Q<Z;Q++){const ns=S?$[Q]:$[Q]=mn($[Q]);if(h)h=u(h,ns,C,W,N,S);else{if(ns.type===Pe&&!ns.children)continue;$n=!0,e(null,ns,M,null,C,W,Hl(M),N)}}return h},f=(h,w,M,C,W,N)=>{const{slotScopeIds:S}=w;S&&(W=W?W.concat(S):S);const $=o(h),Z=v(t(h),w,$,M,C,W,N);return Z&&zl(Z)&&Z.data==="]"?t(w.anchor=Z):($n=!0,i(w.anchor=c("]"),$,Z),Z)},b=(h,w,M,C,W,N)=>{if($n=!0,w.el=null,N){const Z=_(h);for(;;){const Q=t(h);if(Q&&Q!==Z)r(Q);else break}}const S=t(h),$=o(h);return r(h),e(null,w,$,S,M,C,Hl($),W),S},_=(h,w="[",M="]")=>{let C=0;for(;h;)if(h=t(h),h&&zl(h)&&(h.data===w&&C++,h.data===M)){if(C===0)return t(h);C--}return h},F=(h,w,M)=>{const C=w.parentNode;C&&C.replaceChild(h,w);let W=M;for(;W;)W.vnode.el===w&&(W.vnode.el=W.subTree.el=h),W=W.parent},I=h=>h.nodeType===1&&h.tagName.toLowerCase()==="template";return[B,u]}const js=Rr;function b2(s){return D2(s,g2)}function D2(s,n){const e=cr();e.__VUE__=!0;const{insert:l,remove:a,patchProp:t,createElement:o,createText:r,createComment:i,setText:c,setElementText:B,parentNode:u,nextSibling:y,setScopeId:v=on,insertStaticContent:f}=s,b=(A,E,g,L=null,k=null,O=null,H=void 0,P=null,q=!!E.dynamicChildren)=>{if(A===E)return;A&&!re(A,E)&&(L=T(A),Ps(A,k,O,!0),A=null),E.patchFlag===-2&&(q=!1,E.dynamicChildren=null);const{type:x,ref:j,shapeFlag:J}=E;switch(x){case Pe:_(A,E,g,L);break;case Bn:F(A,E,g,L);break;case ll:A==null&&I(E,g,L,H);break;case Xs:Q(A,E,g,L,k,O,H,P,q);break;default:J&1?M(A,E,g,L,k,O,H,P,q):J&6?ns(A,E,g,L,k,O,H,P,q):(J&64||J&128)&&x.process(A,E,g,L,k,O,H,P,q,V)}j!=null&&k&&ra(j,A&&A.ref,O,E||A,!E)},_=(A,E,g,L)=>{if(A==null)l(E.el=r(E.children),g,L);else{const k=E.el=A.el;E.children!==A.children&&c(k,E.children)}},F=(A,E,g,L)=>{A==null?l(E.el=i(E.children||""),g,L):E.el=A.el},I=(A,E,g,L)=>{[A.el,A.anchor]=f(A.children,E,g,L,A.el,A.anchor)},h=({el:A,anchor:E},g,L)=>{let k;for(;A&&A!==E;)k=y(A),l(A,g,L),A=k;l(E,g,L)},w=({el:A,anchor:E})=>{let g;for(;A&&A!==E;)g=y(A),a(A),A=g;a(E)},M=(A,E,g,L,k,O,H,P,q)=>{E.type==="svg"?H="svg":E.type==="math"&&(H="mathml"),A==null?C(E,g,L,k,O,H,P,q):S(A,E,k,O,H,P,q)},C=(A,E,g,L,k,O,H,P)=>{let q,x;const{props:j,shapeFlag:J,transition:X,dirs:ls}=A;if(q=A.el=o(A.type,O,j&&j.is,j),J&8?B(q,A.children):J&16&&N(A.children,q,null,L,k,Pa(A,O),H,P),ls&&Dn(A,null,L,"created"),W(q,A,A.scopeId,H,L),j){for(const Es in j)Es!=="value"&&!sl(Es)&&t(q,Es,null,j[Es],O,A.children,L,k,xs);"value"in j&&t(q,"value",null,j.value,O),(x=j.onVnodeBeforeMount)&&an(x,L,A)}ls&&Dn(A,null,L,"beforeMount");const os=Zr(k,X);os&&X.beforeEnter(q),l(q,E,g),((x=j&&j.onVnodeMounted)||os||ls)&&js(()=>{x&&an(x,L,A),os&&X.enter(q),ls&&Dn(A,null,L,"mounted")},k)},W=(A,E,g,L,k)=>{if(g&&v(A,g),L)for(let O=0;O<L.length;O++)v(A,L[O]);if(k){let O=k.subTree;if(E===O){const H=k.vnode;W(A,H,H.scopeId,H.slotScopeIds,k.parent)}}},N=(A,E,g,L,k,O,H,P,q=0)=>{for(let x=q;x<A.length;x++){const j=A[x]=P?Gn(A[x]):mn(A[x]);b(null,j,E,g,L,k,O,H,P)}},S=(A,E,g,L,k,O,H)=>{const P=E.el=A.el;let{patchFlag:q,dynamicChildren:x,dirs:j}=E;q|=A.patchFlag&16;const J=A.props||Cs,X=E.props||Cs;let ls;if(g&&te(g,!1),(ls=X.onVnodeBeforeUpdate)&&an(ls,g,E,A),j&&Dn(E,A,g,"beforeUpdate"),g&&te(g,!0),x?$(A.dynamicChildren,x,P,g,L,Pa(E,k),O):H||K(A,E,P,null,g,L,Pa(E,k),O,!1),q>0){if(q&16)Z(P,E,J,X,g,L,k);else if(q&2&&J.class!==X.class&&t(P,"class",null,X.class,k),q&4&&t(P,"style",J.style,X.style,k),q&8){const os=E.dynamicProps;for(let Es=0;Es<os.length;Es++){const _s=os[Es],Rs=J[_s],yn=X[_s];(yn!==Rs||_s==="value")&&t(P,_s,Rs,yn,k,A.children,g,L,xs)}}q&1&&A.children!==E.children&&B(P,E.children)}else!H&&x==null&&Z(P,E,J,X,g,L,k);((ls=X.onVnodeUpdated)||j)&&js(()=>{ls&&an(ls,g,E,A),j&&Dn(E,A,g,"updated")},L)},$=(A,E,g,L,k,O,H)=>{for(let P=0;P<E.length;P++){const q=A[P],x=E[P],j=q.el&&(q.type===Xs||!re(q,x)||q.shapeFlag&70)?u(q.el):g;b(q,x,j,null,L,k,O,H,!0)}},Z=(A,E,g,L,k,O,H)=>{if(g!==L){if(g!==Cs)for(const P in g)!sl(P)&&!(P in L)&&t(A,P,g[P],null,H,E.children,k,O,xs);for(const P in L){if(sl(P))continue;const q=L[P],x=g[P];q!==x&&P!=="value"&&t(A,P,x,q,H,E.children,k,O,xs)}"value"in L&&t(A,"value",g.value,L.value,H)}},Q=(A,E,g,L,k,O,H,P,q)=>{const x=E.el=A?A.el:r(""),j=E.anchor=A?A.anchor:r("");let{patchFlag:J,dynamicChildren:X,slotScopeIds:ls}=E;ls&&(P=P?P.concat(ls):ls),A==null?(l(x,g,L),l(j,g,L),N(E.children,g,j,k,O,H,P,q)):J>0&&J&64&&X&&A.dynamicChildren?($(A.dynamicChildren,X,g,k,O,H,P),(E.key!=null||k&&E===k.subTree)&&Xr(A,E,!0)):K(A,E,g,j,k,O,H,P,q)},ns=(A,E,g,L,k,O,H,P,q)=>{E.slotScopeIds=P,A==null?E.shapeFlag&512?k.ctx.activate(E,g,L,H,q):Ls(E,g,L,k,O,H,q):Ds(A,E,q)},Ls=(A,E,g,L,k,O,H)=>{const P=A.component=P2(A,L,k);if(gl(A)&&(P.ctx.renderer=V),R2(P),P.asyncDep){if(k&&k.registerDep(P,G),!A.el){const q=P.subTree=Ts(Bn);F(null,q,E,g)}}else G(P,A,E,g,k,O,H)},Ds=(A,E,g)=>{const L=E.component=A.component;if(Qd(A,E,g))if(L.asyncDep&&!L.asyncResolved){es(L,E,g);return}else L.next=E,Pd(L.update),L.effect.dirty=!0,L.update();else E.el=A.el,L.vnode=E},G=(A,E,g,L,k,O,H)=>{const P=()=>{if(A.isMounted){let{next:j,bu:J,u:X,parent:ls,vnode:os}=A;{const Fe=Jr(A);if(Fe){j&&(j.el=os.el,es(A,j,H)),Fe.asyncDep.then(()=>{A.isUnmounted||P()});return}}let Es=j,_s;te(A,!1),j?(j.el=os.el,es(A,j,H)):j=os,J&&Ta(J),(_s=j.props&&j.props.onVnodeBeforeUpdate)&&an(_s,ls,j,os),te(A,!0);const Rs=ka(A),yn=A.subTree;A.subTree=Rs,b(yn,Rs,u(yn.el),T(yn),A,k,O),j.el=Rs.el,Es===null&&Hd(A,Rs.el),X&&js(X,k),(_s=j.props&&j.props.onVnodeUpdated)&&js(()=>an(_s,ls,j,os),k)}else{let j;const{el:J,props:X}=E,{bm:ls,m:os,parent:Es}=A,_s=nl(E);if(te(A,!1),ls&&Ta(ls),!_s&&(j=X&&X.onVnodeBeforeMount)&&an(j,Es,E),te(A,!0),J&&ds){const Rs=()=>{A.subTree=ka(A),ds(J,A.subTree,A,k,null)};_s?E.type.__asyncLoader().then(()=>!A.isUnmounted&&Rs()):Rs()}else{const Rs=A.subTree=ka(A);b(null,Rs,g,L,A,k,O),E.el=Rs.el}if(os&&js(os,k),!_s&&(j=X&&X.onVnodeMounted)){const Rs=E;js(()=>an(j,Es,Rs),k)}(E.shapeFlag&256||Es&&nl(Es.vnode)&&Es.vnode.shapeFlag&256)&&A.a&&js(A.a,k),A.isMounted=!0,E=g=L=null}},q=A.effect=new Rt(P,on,()=>ma(x),A.scope),x=A.update=()=>{q.dirty&&q.run()};x.id=A.uid,te(A,!0),x()},es=(A,E,g)=>{E.component=A;const L=A.vnode.props;A.vnode=E,A.next=null,m2(A,E.props,L,g),E2(A,E.children,g),ye(),Qo(A),ve()},K=(A,E,g,L,k,O,H,P,q=!1)=>{const x=A&&A.children,j=A?A.shapeFlag:0,J=E.children,{patchFlag:X,shapeFlag:ls}=E;if(X>0){if(X&128){hn(x,J,g,L,k,O,H,P,q);return}else if(X&256){Os(x,J,g,L,k,O,H,P,q);return}}ls&8?(j&16&&xs(x,k,O),J!==x&&B(g,J)):j&16?ls&16?hn(x,J,g,L,k,O,H,P,q):xs(x,k,O,!0):(j&8&&B(g,""),ls&16&&N(J,g,L,k,O,H,P,q))},Os=(A,E,g,L,k,O,H,P,q)=>{A=A||Le,E=E||Le;const x=A.length,j=E.length,J=Math.min(x,j);let X;for(X=0;X<J;X++){const ls=E[X]=q?Gn(E[X]):mn(E[X]);b(A[X],ls,g,null,k,O,H,P,q)}x>j?xs(A,k,O,!0,!1,J):N(E,g,L,k,O,H,P,q,J)},hn=(A,E,g,L,k,O,H,P,q)=>{let x=0;const j=E.length;let J=A.length-1,X=j-1;for(;x<=J&&x<=X;){const ls=A[x],os=E[x]=q?Gn(E[x]):mn(E[x]);if(re(ls,os))b(ls,os,g,null,k,O,H,P,q);else break;x++}for(;x<=J&&x<=X;){const ls=A[J],os=E[X]=q?Gn(E[X]):mn(E[X]);if(re(ls,os))b(ls,os,g,null,k,O,H,P,q);else break;J--,X--}if(x>J){if(x<=X){const ls=X+1,os=ls<j?E[ls].el:L;for(;x<=X;)b(null,E[x]=q?Gn(E[x]):mn(E[x]),g,os,k,O,H,P,q),x++}}else if(x>X)for(;x<=J;)Ps(A[x],k,O,!0),x++;else{const ls=x,os=x,Es=new Map;for(x=os;x<=X;x++){const Ys=E[x]=q?Gn(E[x]):mn(E[x]);Ys.key!=null&&Es.set(Ys.key,x)}let _s,Rs=0;const yn=X-os+1;let Fe=!1,ko=0;const We=new Array(yn);for(x=0;x<yn;x++)We[x]=0;for(x=ls;x<=J;x++){const Ys=A[x];if(Rs>=yn){Ps(Ys,k,O,!0);continue}let bn;if(Ys.key!=null)bn=Es.get(Ys.key);else for(_s=os;_s<=X;_s++)if(We[_s-os]===0&&re(Ys,E[_s])){bn=_s;break}bn===void 0?Ps(Ys,k,O,!0):(We[bn-os]=x+1,bn>=ko?ko=bn:Fe=!0,b(Ys,E[bn],g,null,k,O,H,P,q),Rs++)}const Oo=Fe?_2(We):Le;for(_s=Oo.length-1,x=yn-1;x>=0;x--){const Ys=os+x,bn=E[Ys],xo=Ys+1<j?E[Ys+1].el:L;We[x]===0?b(null,bn,g,xo,k,O,H,P,q):Fe&&(_s<0||x!==Oo[_s]?en(bn,g,xo,2):_s--)}}},en=(A,E,g,L,k=null)=>{const{el:O,type:H,transition:P,children:q,shapeFlag:x}=A;if(x&6){en(A.component.subTree,E,g,L);return}if(x&128){A.suspense.move(E,g,L);return}if(x&64){H.move(A,E,g,V);return}if(H===Xs){l(O,E,g);for(let J=0;J<q.length;J++)en(q[J],E,g,L);l(A.anchor,E,g);return}if(H===ll){h(A,E,g);return}if(L!==2&&x&1&&P)if(L===0)P.beforeEnter(O),l(O,E,g),js(()=>P.enter(O),k);else{const{leave:J,delayLeave:X,afterLeave:ls}=P,os=()=>l(O,E,g),Es=()=>{J(O,()=>{os(),ls&&ls()})};X?X(O,os,Es):Es()}else l(O,E,g)},Ps=(A,E,g,L=!1,k=!1)=>{const{type:O,props:H,ref:P,children:q,dynamicChildren:x,shapeFlag:j,patchFlag:J,dirs:X}=A;if(P!=null&&ra(P,null,g,A,!0),j&256){E.ctx.deactivate(A);return}const ls=j&1&&X,os=!nl(A);let Es;if(os&&(Es=H&&H.onVnodeBeforeUnmount)&&an(Es,E,A),j&6)gn(A.component,g,L);else{if(j&128){A.suspense.unmount(g,L);return}ls&&Dn(A,null,E,"beforeUnmount"),j&64?A.type.remove(A,E,g,k,V,L):x&&(O!==Xs||J>0&&J&64)?xs(x,E,g,!1,!0):(O===Xs&&J&384||!k&&j&16)&&xs(q,E,g),L&&Ks(A)}(os&&(Es=H&&H.onVnodeUnmounted)||ls)&&js(()=>{Es&&an(Es,E,A),ls&&Dn(A,null,E,"unmounted")},g)},Ks=A=>{const{type:E,el:g,anchor:L,transition:k}=A;if(E===Xs){wn(g,L);return}if(E===ll){w(A);return}const O=()=>{a(g),k&&!k.persisted&&k.afterLeave&&k.afterLeave()};if(A.shapeFlag&1&&k&&!k.persisted){const{leave:H,delayLeave:P}=k,q=()=>H(g,O);P?P(A.el,O,q):q()}else O()},wn=(A,E)=>{let g;for(;A!==E;)g=y(A),a(A),A=g;a(E)},gn=(A,E,g)=>{const{bum:L,scope:k,update:O,subTree:H,um:P}=A;L&&Ta(L),k.stop(),O&&(O.active=!1,Ps(H,A,E,g)),P&&js(P,E),js(()=>{A.isUnmounted=!0},E),E&&E.pendingBranch&&!E.isUnmounted&&A.asyncDep&&!A.asyncResolved&&A.suspenseId===E.pendingId&&(E.deps--,E.deps===0&&E.resolve())},xs=(A,E,g,L=!1,k=!1,O=0)=>{for(let H=O;H<A.length;H++)Ps(A[H],E,g,L,k)},T=A=>A.shapeFlag&6?T(A.component.subTree):A.shapeFlag&128?A.suspense.next():y(A.anchor||A.el),z=(A,E,g)=>{A==null?E._vnode&&Ps(E._vnode,null,null,!0):b(E._vnode||null,A,E,null,null,null,g),Qo(),aa(),E._vnode=A},V={p:b,um:Ps,m:en,r:Ks,mt:Ls,mc:N,pc:K,pbc:$,n:T,o:s};let Y,ds;return n&&([Y,ds]=n(V)),{render:z,hydrate:Y,createApp:y2(z,Y)}}function Pa({type:s,props:n},e){return e==="svg"&&s==="foreignObject"||e==="mathml"&&s==="annotation-xml"&&n&&n.encoding&&n.encoding.includes("html")?void 0:e}function te({effect:s,update:n},e){s.allowRecurse=n.allowRecurse=e}function Zr(s,n){return(!s||s&&!s.pendingBranch)&&n&&!n.persisted}function Xr(s,n,e=!1){const l=s.children,a=n.children;if(ss(l)&&ss(a))for(let t=0;t<l.length;t++){const o=l[t];let r=a[t];r.shapeFlag&1&&!r.dynamicChildren&&((r.patchFlag<=0||r.patchFlag===32)&&(r=a[t]=Gn(a[t]),r.el=o.el),e||Xr(o,r)),r.type===Pe&&(r.el=o.el)}}function _2(s){const n=s.slice(),e=[0];let l,a,t,o,r;const i=s.length;for(l=0;l<i;l++){const c=s[l];if(c!==0){if(a=e[e.length-1],s[a]<c){n[l]=a,e.push(l);continue}for(t=0,o=e.length-1;t<o;)r=t+o>>1,s[e[r]]<c?t=r+1:o=r;c<s[e[t]]&&(t>0&&(n[l]=e[t-1]),e[t]=l)}}for(t=e.length,o=e[t-1];t-- >0;)e[t]=o,o=n[o];return e}function Jr(s){const n=s.subTree.component;if(n)return n.asyncDep&&!n.asyncResolved?n:Jr(n)}const C2=s=>s.__isTeleport,Xs=Symbol.for("v-fgt"),Pe=Symbol.for("v-txt"),Bn=Symbol.for("v-cmt"),ll=Symbol.for("v-stc"),al=[];let An=null;function L2(s=!1){al.push(An=s?null:[])}function w2(){al.pop(),An=al[al.length-1]||null}let ul=1;function sp(s){ul+=s}function sc(s){return s.dynamicChildren=ul>0?An||Le:null,w2(),ul>0&&An&&An.push(s),s}function tm(s,n,e,l,a,t){return sc(ec(s,n,e,l,a,t,!0))}function I2(s,n,e,l,a){return sc(Ts(s,n,e,l,a,!0))}function Bt(s){return s?s.__v_isVNode===!0:!1}function re(s,n){return s.type===n.type&&s.key===n.key}const Ea="__vInternal",nc=({key:s})=>s??null,Jl=({ref:s,ref_key:n,ref_for:e})=>(typeof s=="number"&&(s=""+s),s!=null?rs(s)||qs(s)||as(s)?{i:pn,r:s,k:n,f:!!e}:s:null);function ec(s,n=null,e=null,l=0,a=null,t=s===Xs?0:1,o=!1,r=!1){const i={__v_isVNode:!0,__v_skip:!0,type:s,props:n,key:n&&nc(n),ref:n&&Jl(n),scopeId:Sr,slotScopeIds:null,children:e,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:t,patchFlag:l,dynamicProps:a,dynamicChildren:null,appContext:null,ctx:pn};return r?(Yt(i,e),t&128&&s.normalize(i)):e&&(i.shapeFlag|=rs(e)?8:16),ul>0&&!o&&An&&(i.patchFlag>0||t&6)&&i.patchFlag!==32&&An.push(i),i}const Ts=T2;function T2(s,n=null,e=null,l=0,a=null,t=!1){if((!s||s===zd)&&(s=Bn),Bt(s)){const r=Jn(s,n,!0);return e&&Yt(r,e),ul>0&&!t&&An&&(r.shapeFlag&6?An[An.indexOf(s)]=r:An.push(r)),r.patchFlag|=-2,r}if($2(s)&&(s=s.__vccOpts),n){n=k2(n);let{class:r,style:i}=n;r&&!rs(r)&&(n.class=Pt(r)),Is(i)&&(Dr(i)&&!ss(i)&&(i=Ss({},i)),n.style=St(i))}const o=rs(s)?1:Ud(s)?128:C2(s)?64:Is(s)?4:as(s)?2:0;return ec(s,n,e,l,a,o,t,!0)}function k2(s){return s?Dr(s)||Ea in s?Ss({},s):s:null}function Jn(s,n,e=!1){const{props:l,ref:a,patchFlag:t,children:o}=s,r=n?O2(l||{},n):l;return{__v_isVNode:!0,__v_skip:!0,type:s.type,props:r,key:r&&nc(r),ref:n&&n.ref?e&&a?ss(a)?a.concat(Jl(n)):[a,Jl(n)]:Jl(n):a,scopeId:s.scopeId,slotScopeIds:s.slotScopeIds,children:o,target:s.target,targetAnchor:s.targetAnchor,staticCount:s.staticCount,shapeFlag:s.shapeFlag,patchFlag:n&&s.type!==Xs?t===-1?16:t|16:t,dynamicProps:s.dynamicProps,dynamicChildren:s.dynamicChildren,appContext:s.appContext,dirs:s.dirs,transition:s.transition,component:s.component,suspense:s.suspense,ssContent:s.ssContent&&Jn(s.ssContent),ssFallback:s.ssFallback&&Jn(s.ssFallback),el:s.el,anchor:s.anchor,ctx:s.ctx,ce:s.ce}}function lc(s=" ",n=0){return Ts(Pe,null,s,n)}function om(s,n){const e=Ts(ll,null,s);return e.staticCount=n,e}function pm(s="",n=!1){return n?(L2(),I2(Bn,null,s)):Ts(Bn,null,s)}function mn(s){return s==null||typeof s=="boolean"?Ts(Bn):ss(s)?Ts(Xs,null,s.slice()):typeof s=="object"?Gn(s):Ts(Pe,null,String(s))}function Gn(s){return s.el===null&&s.patchFlag!==-1||s.memo?s:Jn(s)}function Yt(s,n){let e=0;const{shapeFlag:l}=s;if(n==null)n=null;else if(ss(n))e=16;else if(typeof n=="object")if(l&65){const a=n.default;a&&(a._c&&(a._d=!1),Yt(s,a()),a._c&&(a._d=!0));return}else{e=32;const a=n._;!a&&!(Ea in n)?n._ctx=pn:a===3&&pn&&(pn.slots._===1?n._=1:(n._=2,s.patchFlag|=1024))}else as(n)?(n={default:n,_ctx:pn},e=32):(n=String(n),l&64?(e=16,n=[lc(n)]):e=8);s.children=n,s.shapeFlag|=e}function O2(...s){const n={};for(let e=0;e<s.length;e++){const l=s[e];for(const a in l)if(a==="class")n.class!==l.class&&(n.class=Pt([n.class,l.class]));else if(a==="style")n.style=St([n.style,l.style]);else if(fl(a)){const t=n[a],o=l[a];o&&t!==o&&!(ss(t)&&t.includes(o))&&(n[a]=t?[].concat(t,o):o)}else a!==""&&(n[a]=l[a])}return n}function an(s,n,e,l=null){rn(s,n,7,[e,l])}const x2=jr();let S2=0;function P2(s,n,e){const l=s.type,a=(n?n.appContext:s.appContext)||x2,t={uid:S2++,vnode:s,type:l,parent:n,appContext:a,root:null,next:null,subTree:null,effect:null,update:null,scope:new ld(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:n?n.provides:Object.create(a.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Gr(l,a),emitsOptions:xr(l,a),emit:null,emitted:null,propsDefaults:Cs,inheritAttrs:l.inheritAttrs,ctx:Cs,data:Cs,props:Cs,attrs:Cs,slots:Cs,refs:Cs,setupState:Cs,setupContext:null,attrsProxy:null,slotsProxy:null,suspense:e,suspenseId:e?e.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return t.ctx={_:t},t.root=n?n.root:t,t.emit=Vd.bind(null,t),s.ce&&s.ce(t),t}let Ms=null;const je=()=>Ms||pn;let Zt,dt;{const s=cr(),n=(e,l)=>{let a;return(a=s[e])||(a=s[e]=[]),a.push(l),t=>{a.length>1?a.forEach(o=>o(t)):a[0](t)}};Zt=n("__VUE_INSTANCE_SETTERS__",e=>Ms=e),dt=n("__VUE_SSR_SETTERS__",e=>bl=e)}const Re=s=>{Zt(s),s.scope.on()},ue=()=>{Ms&&Ms.scope.off(),Zt(null)};function ac(s){return s.vnode.shapeFlag&4}let bl=!1;function R2(s,n=!1){n&&dt(n);const{props:e,children:l}=s.vnode,a=ac(s);v2(s,e,a,n),f2(s,l);const t=a?M2(s,n):void 0;return n&&dt(!1),t}function M2(s,n){const e=s.type;s.accessCache=Object.create(null),s.proxy=_r(new Proxy(s.ctx,p2));const{setup:l}=e;if(l){const a=s.setupContext=l.length>1?q2(s):null;Re(s),ye();const t=Zn(l,s,0,[s.props,a]);if(ve(),ue(),rr(t)){if(t.then(ue,ue),n)return t.then(o=>{np(s,o,n)}).catch(o=>{hl(o,s,0)});s.asyncDep=t}else np(s,t,n)}else tc(s,n)}function np(s,n,e){as(n)?s.type.__ssrInlineRender?s.ssrRender=n:s.render=n:Is(n)&&(s.setupState=wr(n)),tc(s,e)}let ep;function tc(s,n,e){const l=s.type;if(!s.render){if(!n&&ep&&!l.render){const a=l.template||Wt(s).template;if(a){const{isCustomElement:t,compilerOptions:o}=s.appContext.config,{delimiters:r,compilerOptions:i}=l,c=Ss(Ss({isCustomElement:t,delimiters:r},o),i);l.render=ep(a,c)}}s.render=l.render||on}{Re(s),ye();try{r2(s)}finally{ve(),ue()}}}function V2(s){return s.attrsProxy||(s.attrsProxy=new Proxy(s.attrs,{get(n,e){return Ws(s,"get","$attrs"),n[e]}}))}function q2(s){const n=e=>{s.exposed=e||{}};return{get attrs(){return V2(s)},slots:s.slots,emit:s.emit,expose:n}}function Xt(s){if(s.exposed)return s.exposeProxy||(s.exposeProxy=new Proxy(wr(_r(s.exposed)),{get(n,e){if(e in n)return n[e];if(e in el)return el[e](s)},has(n,e){return e in n||e in el}}))}function N2(s,n=!0){return as(s)?s.displayName||s.name:s.name||n&&s.__name}function $2(s){return as(s)&&"__vccOpts"in s}const D=(s,n)=>Cd(s,n,bl);function p(s,n,e){const l=arguments.length;return l===2?Is(n)&&!ss(n)?Bt(n)?Ts(s,null,[n]):Ts(s,n):Ts(s,null,n):(l>3?e=Array.prototype.slice.call(arguments,2):l===3&&Bt(e)&&(e=[e]),Ts(s,n,e))}const Q2="3.4.5",H2="http://www.w3.org/2000/svg",z2="http://www.w3.org/1998/Math/MathML",Wn=typeof document<"u"?document:null,lp=Wn&&Wn.createElement("template"),j2={insert:(s,n,e)=>{n.insertBefore(s,e||null)},remove:s=>{const n=s.parentNode;n&&n.removeChild(s)},createElement:(s,n,e,l)=>{const a=n==="svg"?Wn.createElementNS(H2,s):n==="mathml"?Wn.createElementNS(z2,s):Wn.createElement(s,e?{is:e}:void 0);return s==="select"&&l&&l.multiple!=null&&a.setAttribute("multiple",l.multiple),a},createText:s=>Wn.createTextNode(s),createComment:s=>Wn.createComment(s),setText:(s,n)=>{s.nodeValue=n},setElementText:(s,n)=>{s.textContent=n},parentNode:s=>s.parentNode,nextSibling:s=>s.nextSibling,querySelector:s=>Wn.querySelector(s),setScopeId(s,n){s.setAttribute(n,"")},insertStaticContent(s,n,e,l,a,t){const o=e?e.previousSibling:n.lastChild;if(a&&(a===t||a.nextSibling))for(;n.insertBefore(a.cloneNode(!0),e),!(a===t||!(a=a.nextSibling)););else{lp.innerHTML=l==="svg"?`<svg>${s}</svg>`:l==="mathml"?`<math>${s}</math>`:s;const r=lp.content;if(l==="svg"||l==="mathml"){const i=r.firstChild;for(;i.firstChild;)r.appendChild(i.firstChild);r.removeChild(i)}n.insertBefore(r,e)}return[o?o.nextSibling:n.firstChild,e?e.previousSibling:n.lastChild]}},Qn="transition",Ke="animation",Me=Symbol("_vtc"),se=(s,{slots:n})=>p(Zd,pc(s),n);se.displayName="Transition";const oc={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},U2=se.props=Ss({},Nr,oc),oe=(s,n=[])=>{ss(s)?s.forEach(e=>e(...n)):s&&s(...n)},ap=s=>s?ss(s)?s.some(n=>n.length>1):s.length>1:!1;function pc(s){const n={};for(const Q in s)Q in oc||(n[Q]=s[Q]);if(s.css===!1)return n;const{name:e="v",type:l,duration:a,enterFromClass:t=`${e}-enter-from`,enterActiveClass:o=`${e}-enter-active`,enterToClass:r=`${e}-enter-to`,appearFromClass:i=t,appearActiveClass:c=o,appearToClass:B=r,leaveFromClass:u=`${e}-leave-from`,leaveActiveClass:y=`${e}-leave-active`,leaveToClass:v=`${e}-leave-to`}=s,f=G2(a),b=f&&f[0],_=f&&f[1],{onBeforeEnter:F,onEnter:I,onEnterCancelled:h,onLeave:w,onLeaveCancelled:M,onBeforeAppear:C=F,onAppear:W=I,onAppearCancelled:N=h}=n,S=(Q,ns,Ls)=>{jn(Q,ns?B:r),jn(Q,ns?c:o),Ls&&Ls()},$=(Q,ns)=>{Q._isLeaving=!1,jn(Q,u),jn(Q,v),jn(Q,y),ns&&ns()},Z=Q=>(ns,Ls)=>{const Ds=Q?W:I,G=()=>S(ns,Q,Ls);oe(Ds,[ns,G]),tp(()=>{jn(ns,Q?i:t),Tn(ns,Q?B:r),ap(Ds)||op(ns,l,b,G)})};return Ss(n,{onBeforeEnter(Q){oe(F,[Q]),Tn(Q,t),Tn(Q,o)},onBeforeAppear(Q){oe(C,[Q]),Tn(Q,i),Tn(Q,c)},onEnter:Z(!1),onAppear:Z(!0),onLeave(Q,ns){Q._isLeaving=!0;const Ls=()=>$(Q,ns);Tn(Q,u),cc(),Tn(Q,y),tp(()=>{Q._isLeaving&&(jn(Q,u),Tn(Q,v),ap(w)||op(Q,l,_,Ls))}),oe(w,[Q,Ls])},onEnterCancelled(Q){S(Q,!1),oe(h,[Q])},onAppearCancelled(Q){S(Q,!0),oe(N,[Q])},onLeaveCancelled(Q){$(Q),oe(M,[Q])}})}function G2(s){if(s==null)return null;if(Is(s))return[Ra(s.enter),Ra(s.leave)];{const n=Ra(s);return[n,n]}}function Ra(s){return YB(s)}function Tn(s,n){n.split(/\s+/).forEach(e=>e&&s.classList.add(e)),(s[Me]||(s[Me]=new Set)).add(n)}function jn(s,n){n.split(/\s+/).forEach(l=>l&&s.classList.remove(l));const e=s[Me];e&&(e.delete(n),e.size||(s[Me]=void 0))}function tp(s){requestAnimationFrame(()=>{requestAnimationFrame(s)})}let W2=0;function op(s,n,e,l){const a=s._endId=++W2,t=()=>{a===s._endId&&l()};if(e)return setTimeout(t,e);const{type:o,timeout:r,propCount:i}=rc(s,n);if(!o)return l();const c=o+"end";let B=0;const u=()=>{s.removeEventListener(c,y),t()},y=v=>{v.target===s&&++B>=i&&u()};setTimeout(()=>{B<i&&u()},r+1),s.addEventListener(c,y)}function rc(s,n){const e=window.getComputedStyle(s),l=f=>(e[f]||"").split(", "),a=l(`${Qn}Delay`),t=l(`${Qn}Duration`),o=pp(a,t),r=l(`${Ke}Delay`),i=l(`${Ke}Duration`),c=pp(r,i);let B=null,u=0,y=0;n===Qn?o>0&&(B=Qn,u=o,y=t.length):n===Ke?c>0&&(B=Ke,u=c,y=i.length):(u=Math.max(o,c),B=u>0?o>c?Qn:Ke:null,y=B?B===Qn?t.length:i.length:0);const v=B===Qn&&/\b(transform|all)(,|$)/.test(l(`${Qn}Property`).toString());return{type:B,timeout:u,propCount:y,hasTransform:v}}function pp(s,n){for(;s.length<n.length;)s=s.concat(s);return Math.max(...n.map((e,l)=>rp(e)+rp(s[l])))}function rp(s){return s==="auto"?0:Number(s.slice(0,-1).replace(",","."))*1e3}function cc(){return document.body.offsetHeight}function K2(s,n,e){const l=s[Me];l&&(n=(n?[n,...l]:[...l]).join(" ")),n==null?s.removeAttribute("class"):e?s.setAttribute("class",n):s.className=n}const Y2=Symbol("_vod"),Z2=Symbol("");function X2(s,n,e){const l=s.style,a=rs(e);if(e&&!a){if(n&&!rs(n))for(const t in n)e[t]==null&&ut(l,t,"");for(const t in e)ut(l,t,e[t])}else{const t=l.display;if(a){if(n!==e){const o=l[Z2];o&&(e+=";"+o),l.cssText=e}}else n&&s.removeAttribute("style");Y2 in s&&(l.display=t)}}const cp=/\s*!important$/;function ut(s,n,e){if(ss(e))e.forEach(l=>ut(s,n,l));else if(e==null&&(e=""),n.startsWith("--"))s.setProperty(n,e);else{const l=J2(s,n);cp.test(e)?s.setProperty(Qe(l),e.replace(cp,""),"important"):s[l]=e}}const ip=["Webkit","Moz","ms"],Ma={};function J2(s,n){const e=Ma[n];if(e)return e;let l=un(n);if(l!=="filter"&&l in s)return Ma[n]=l;l=El(l);for(let a=0;a<ip.length;a++){const t=ip[a]+l;if(t in s)return Ma[n]=t}return n}const Bp="http://www.w3.org/1999/xlink";function su(s,n,e,l,a){if(l&&n.startsWith("xlink:"))e==null?s.removeAttributeNS(Bp,n.slice(6,n.length)):s.setAttributeNS(Bp,n,e);else{const t=ed(n);e==null||t&&!ir(e)?s.removeAttribute(n):s.setAttribute(n,t?"":e)}}function nu(s,n,e,l,a,t,o){if(n==="innerHTML"||n==="textContent"){l&&o(l,a,t),s[n]=e??"";return}const r=s.tagName;if(n==="value"&&r!=="PROGRESS"&&!r.includes("-")){s._value=e;const c=r==="OPTION"?s.getAttribute("value"):s.value,B=e??"";c!==B&&(s.value=B),e==null&&s.removeAttribute(n);return}let i=!1;if(e===""||e==null){const c=typeof s[n];c==="boolean"?e=ir(e):e==null&&c==="string"?(e="",i=!0):c==="number"&&(e=0,i=!0)}try{s[n]=e}catch{}i&&s.removeAttribute(n)}function eu(s,n,e,l){s.addEventListener(n,e,l)}function lu(s,n,e,l){s.removeEventListener(n,e,l)}const dp=Symbol("_vei");function au(s,n,e,l,a=null){const t=s[dp]||(s[dp]={}),o=t[n];if(l&&o)o.value=l;else{const[r,i]=tu(n);if(l){const c=t[n]=ru(l,a);eu(s,r,c,i)}else o&&(lu(s,r,o,i),t[n]=void 0)}}const up=/(?:Once|Passive|Capture)$/;function tu(s){let n;if(up.test(s)){n={};let l;for(;l=s.match(up);)s=s.slice(0,s.length-l[0].length),n[l[0].toLowerCase()]=!0}return[s[2]===":"?s.slice(3):Qe(s.slice(2)),n]}let Va=0;const ou=Promise.resolve(),pu=()=>Va||(ou.then(()=>Va=0),Va=Date.now());function ru(s,n){const e=l=>{if(!l._vts)l._vts=Date.now();else if(l._vts<=e.attached)return;rn(cu(l,e.value),n,5,[l])};return e.value=s,e.attached=pu(),e}function cu(s,n){if(ss(n)){const e=s.stopImmediatePropagation;return s.stopImmediatePropagation=()=>{e.call(s),s._stopped=!0},n.map(l=>a=>!a._stopped&&l&&l(a))}else return n}const yp=s=>s.charCodeAt(0)===111&&s.charCodeAt(1)===110&&s.charCodeAt(2)>96&&s.charCodeAt(2)<123,iu=(s,n,e,l,a,t,o,r,i)=>{const c=a==="svg";n==="class"?K2(s,l,c):n==="style"?X2(s,e,l):fl(n)?kt(n)||au(s,n,e,l,o):(n[0]==="."?(n=n.slice(1),!0):n[0]==="^"?(n=n.slice(1),!1):Bu(s,n,l,c))?nu(s,n,l,t,o,r,i):(n==="true-value"?s._trueValue=l:n==="false-value"&&(s._falseValue=l),su(s,n,l,c))};function Bu(s,n,e,l){if(l)return!!(n==="innerHTML"||n==="textContent"||n in s&&yp(n)&&as(e));if(n==="spellcheck"||n==="draggable"||n==="translate"||n==="form"||n==="list"&&s.tagName==="INPUT"||n==="type"&&s.tagName==="TEXTAREA")return!1;if(n==="width"||n==="height"){const a=s.tagName;if(a==="IMG"||a==="VIDEO"||a==="CANVAS"||a==="SOURCE")return!1}return yp(n)&&rs(e)?!1:n in s}const ic=new WeakMap,Bc=new WeakMap,ca=Symbol("_moveCb"),vp=Symbol("_enterCb"),dc={name:"TransitionGroup",props:Ss({},U2,{tag:String,moveClass:String}),setup(s,{slots:n}){const e=je(),l=qr();let a,t;return Hr(()=>{if(!a.length)return;const o=s.moveClass||`${s.name||"v"}-move`;if(!Au(a[0].el,e.vnode.el,o))return;a.forEach(yu),a.forEach(vu);const r=a.filter(mu);cc(),r.forEach(i=>{const c=i.el,B=c.style;Tn(c,o),B.transform=B.webkitTransform=B.transitionDuration="";const u=c[ca]=y=>{y&&y.target!==c||(!y||/transform$/.test(y.propertyName))&&(c.removeEventListener("transitionend",u),c[ca]=null,jn(c,o))};c.addEventListener("transitionend",u)})}),()=>{const o=is(s),r=pc(o);let i=o.tag||Xs;a=t,t=n.default?Ut(n.default()):[];for(let c=0;c<t.length;c++){const B=t[c];B.key!=null&&dl(B,Bl(B,r,l,e))}if(a)for(let c=0;c<a.length;c++){const B=a[c];dl(B,Bl(B,r,l,e)),ic.set(B,B.el.getBoundingClientRect())}return Ts(i,null,t)}}},du=s=>delete s.mode;dc.props;const uu=dc;function yu(s){const n=s.el;n[ca]&&n[ca](),n[vp]&&n[vp]()}function vu(s){Bc.set(s,s.el.getBoundingClientRect())}function mu(s){const n=ic.get(s),e=Bc.get(s),l=n.left-e.left,a=n.top-e.top;if(l||a){const t=s.el.style;return t.transform=t.webkitTransform=`translate(${l}px,${a}px)`,t.transitionDuration="0s",s}}function Au(s,n,e){const l=s.cloneNode(),a=s[Me];a&&a.forEach(r=>{r.split(/\s+/).forEach(i=>i&&l.classList.remove(i))}),e.split(/\s+/).forEach(r=>r&&l.classList.add(r)),l.style.display="none";const t=n.nodeType===1?n:n.parentNode;t.appendChild(l);const{hasTransform:o}=rc(l);return t.removeChild(l),o}const fu=Ss({patchProp:iu},j2);let qa,mp=!1;function Eu(){return qa=mp?qa:b2(fu),mp=!0,qa}const Fu=(...s)=>{const n=Eu().createApp(...s),{mount:e}=n;return n.mount=l=>{const a=gu(l);if(a)return e(a,!0,hu(a))},n};function hu(s){if(s instanceof SVGElement)return"svg";if(typeof MathMLElement=="function"&&s instanceof MathMLElement)return"mathml"}function gu(s){return rs(s)?document.querySelector(s):s}const bu="modulepreload",Du=function(s){return"/"+s},Ap={},d=function(n,e,l){let a=Promise.resolve();if(e&&e.length>0){const t=document.getElementsByTagName("link");a=Promise.all(e.map(o=>{if(o=Du(o),o in Ap)return;Ap[o]=!0;const r=o.endsWith(".css"),i=r?'[rel="stylesheet"]':"";if(!!l)for(let u=t.length-1;u>=0;u--){const y=t[u];if(y.href===o&&(!r||y.rel==="stylesheet"))return}else if(document.querySelector(`link[href="${o}"]${i}`))return;const B=document.createElement("link");if(B.rel=r?"stylesheet":bu,r||(B.as="script",B.crossOrigin=""),B.href=o,document.head.appendChild(B),r)return new Promise((u,y)=>{B.addEventListener("load",u),B.addEventListener("error",()=>y(new Error(`Unable to preload CSS for ${o}`)))})}))}return a.then(()=>n()).catch(t=>{const o=new Event("vite:preloadError",{cancelable:!0});if(o.payload=t,window.dispatchEvent(o),!o.defaultPrevented)throw t})},_u={"v-184f4da6":()=>d(()=>import("./intro.html-mdCJ7wui.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-8daa1a0e":()=>d(()=>import("./index.html-KWtvpG4S.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-3a1d2930":()=>d(()=>import("./tool.html-ZBX_McYn.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-144c90e3":()=>d(()=>import("./index.html--HxlZB4F.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-08062d61":()=>d(()=>import("./统计单词的个数.html-MmFE5UxX.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1a144c13":()=>d(()=>import("./统计字母、数组、空格的个数.html-zCbGAzIs.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1464ca76":()=>d(()=>import("./index.html-KrGjA_8N.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-f0383c18":()=>d(()=>import("./index.html-6zrJYJ6j.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-40bd95c1":()=>d(()=>import("./文件操作.html-IE57bth6.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-eb072ff4":()=>d(()=>import("./index.html-hjjoe0KZ.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4628d8d3":()=>d(()=>import("./autohotkey笔记.html-_GYyfuZx.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-25b47c13":()=>d(()=>import("./index.html-lUL7sYyc.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7945696f":()=>d(()=>import("./SourceInsight.html-KBn9_yMD.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5095ca42":()=>d(()=>import("./typora配置.html-NDdRFNfj.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-24f2d5ba":()=>d(()=>import("./index.html-QGB_jZcb.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-450e8862":()=>d(()=>import("./TCP和UDP的区别.html-tai94ixS.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-dc384366":()=>d(()=>import("./index.html-_b5B0PZo.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0072b68a":()=>d(()=>import("./344.反转字符串.html-yPX5Pzld.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4a6b903e":()=>d(()=>import("./905. 按奇偶排序数组.html-AH_7YIky.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-92d2378e":()=>d(()=>import("./LeetCode 209.长度最小的子数组.html-VSNT_z5x.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-3945022c":()=>d(()=>import("./LeetCode 27. 移除元素.html-g6Pd8cOv.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0edaacb7":()=>d(()=>import("./LeetCode 59.螺旋矩阵Ⅱ.html-eLILZ7Qq.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-8fe9fd22":()=>d(()=>import("./LeetCode 704.二分查找.html-_lzlkMXE.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-69d65be6":()=>d(()=>import("./LeetCode 977.有序数组的平方.html-PPDsxrKf.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-a277331a":()=>d(()=>import("./二分查找总结.html-K8jaYhBs.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-2e7fb111":()=>d(()=>import("./数组基础.html-KeHWwKoH.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-75ce370a":()=>d(()=>import("./查找N个数组的公共元素.html-C8z7_4bz.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1f0c41ec":()=>d(()=>import("./查找三个数组的公共元素.html-nTR6mygT.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-98398990":()=>d(()=>import("./查找两个数组的公共元素.html-uxAPq3JN.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-752e9b82":()=>d(()=>import("./查找出现次数超过一半的元素.html-maApeD5U.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-c01690d8":()=>d(()=>import("./查找最大和次大的元素.html-_pI7psJc.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-152dfd8d":()=>d(()=>import("./234.回文链表.html-XnBkZVZW.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-735dfe06":()=>d(()=>import("./LeetCode 203.移除链表元素.html-ntIHtQdo.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-d977ced4":()=>d(()=>import("./leetcode 21. 合并两个有序链表.html-Q83GMYm3.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-64506cc7":()=>d(()=>import("./leetcode141.环形链表(判断链表是否有环).html-2kCxxVcE.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-13ade0aa":()=>d(()=>import("./Leetcode142.环形链表II(查找环的入口地址).html-SMZhKrTf.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-641d44d2":()=>d(()=>import("./leetcode160.相交链表(判断链表是否相交).html-FBkaCtIs.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-8a944abe":()=>d(()=>import("./Leetcode19. 删除链表的倒数第N个结点.html-0uTnDUgK.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-703548b8":()=>d(()=>import("./leetcode206.反转链表.html-_YLAYIq_.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-711b4cec":()=>d(()=>import("./Leetcode23. 合并 K 个升序链表.html-FsT1PWxJ.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-fb458a48":()=>d(()=>import("./leetcode61.旋转链表.html-SntMqFx-.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-67248f78":()=>d(()=>import("./LeetCode707.html-2q4ZqFS0.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-db839be2":()=>d(()=>import("./leetcode86. 分隔链表（链表的分解）.html-K2K-SjuL.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-16787a3c":()=>d(()=>import("./Leetcode876.链表的中间结点.html-VHK55RDS.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-a323322a":()=>d(()=>import("./leetcode92.反转链表II.html-H01RE6kj.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4e6f8416":()=>d(()=>import("./查找链表中倒数第N个结点.html-D-6z6QH7.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-ebfa549c":()=>d(()=>import("./约瑟夫环问题.html-pUX7aySZ.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-08a1ce30":()=>d(()=>import("./链表基础.html-i9odf3Uy.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-155542a2":()=>d(()=>import("./1. 两数之和.html-4Re9RmdH.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-6e9dbc4c":()=>d(()=>import("./128. 最长连续序列.html-4MZmqJj8.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-cdbdf9f8":()=>d(()=>import("./15. 三数之和.html-KlhqYDdW.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-21edb74e":()=>d(()=>import("./167. 两数之和 II - 输入有序数组.html-tnefbmWa.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-525b6569":()=>d(()=>import("./202. 快乐数.html-56tUrTO7.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-30fc6476":()=>d(()=>import("./217.存在重复元素.html-37iXO5J6.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-30a803f7":()=>d(()=>import("./219.存在重复元素 II.html-1tR1_cNP.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-115ac7e7":()=>d(()=>import("./220. 存在重复元素 III.html-oI1JafGT.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-534e82f8":()=>d(()=>import("./242.有效的字母异位词.html-YhLytQfj.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-e58201ee":()=>d(()=>import("./349.两个数组的交集.html-dEjgwJBj.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-21b182ee":()=>d(()=>import("./383. 赎金信.html-q1tmDv5N.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-deb0c8ec":()=>d(()=>import("./594. 最长和谐子序列.html-BrDHORTf.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1a50115e":()=>d(()=>import("./冒泡排序.html-5KIcOG6L.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-53acd735":()=>d(()=>import("./基数排序.html-QPzuPeHt.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-00fc7494":()=>d(()=>import("./堆排序.html-NI5dtFhR.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-380a6c84":()=>d(()=>import("./希尔排序.html-PzvGZ2In.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4b65c060":()=>d(()=>import("./归并排序.html-8m_hsPXS.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0cc447aa":()=>d(()=>import("./插入排序.html-1Icz2GTK.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-64dd32fe":()=>d(()=>import("./桶排序.html-AxiSVY20.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-85d8c71c":()=>d(()=>import("./计数排序.html-F-wDVniz.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-64c90a94":()=>d(()=>import("./选择排序.html-1OX06OWC.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-155d00d3":()=>d(()=>import("./（简单）快速排序.html-0bttV6fx.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-74d93789":()=>d(()=>import("./上滤.html-zna2f1Eb.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-f1165cc2":()=>d(()=>import("./新建 Markdown.html-fHwzirx_.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-eeb8a63a":()=>d(()=>import("./两个栈实现队列.html-BlXRM2x-.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-c84ce682":()=>d(()=>import("./新建 Markdown.html-ntjaGQ_A.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-038e0b34":()=>d(()=>import("./反汇编小结.html-qOFDR6-x.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-403c82cd":()=>d(()=>import("./指令角度堆栈调用过程.html-j2vMD--2.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5aef7a82":()=>d(()=>import("./编译器角度理解c__代码的编译和链接.html-S8_9hY8c.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4d611284":()=>d(()=>import("./进程虚拟地址空间.html-ZLCAToEz.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-f103c4b8":()=>d(()=>import("./do-while(0).html--Y2IWmiF.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-332dfae6":()=>d(()=>import("./scanf.html-hDXbaF-T.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-062c257f":()=>d(()=>import("./关键字.html-K7eEgiRW.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-70779923":()=>d(()=>import("./前言.html-sIwWIylu.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-198bd17a":()=>d(()=>import("./变量.html-Lw_mlrEU.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-a688fcfc":()=>d(()=>import("./字符.html-plchyXVR.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-505a1229":()=>d(()=>import("./常量.html-8i8Egeof.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1c610f8b":()=>d(()=>import("./数据类型.html-yJCXhpiv.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-573fd3b5":()=>d(()=>import("./整型.html-X2sllIux.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-63c16f9b":()=>d(()=>import("./浮点数.html-WynEhVVW.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-a253b292":()=>d(()=>import("./补码.html-r8o0DoEV.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-35cd92ed":()=>d(()=>import("./进制转换.html-N5WebTC1.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5f9477f2":()=>d(()=>import("./this.html-xLU-gYc_.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-31530dfb":()=>d(()=>import("./拷贝构造函数.html-QxvTy-6r.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-3bc3bfaf":()=>d(()=>import("./拷贝构造和赋值重载的实践.html-m1ituSFH.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-3a9cf65c":()=>d(()=>import("./指向类型成员的指针.html-Yr-5gvEl.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-10e1c6eb":()=>d(()=>import("./构造函数和析构函数.html-jF00ZcUp.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-451c83e2":()=>d(()=>import("./特殊数据成员的初始化.html-VdiNVjTu.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-6577db5e":()=>d(()=>import("./特殊的成员函数.html-UJI6ECVb.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-e41f0618":()=>d(()=>import("./类和对象.html-2iiklq5X.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-3eca3d30":()=>d(()=>import("./组织对象.html-Ew10ZbPm.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1da04370":()=>d(()=>import("./赋值运算符函数.html-5jHJcMTx.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-66aab0b0":()=>d(()=>import("./bool.html-NUUNZdli.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1073124a":()=>d(()=>import("./c__初探.html-PnJ7QTmI.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-3cc85216":()=>d(()=>import("./const.html-YmFb6LOz.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-ba4c1c2a":()=>d(()=>import("./inline内联函数.html-auk9w7Lr.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-c97d844a":()=>d(()=>import("./new、delete.html-x03gfqpY.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-6ef0e0ae":()=>d(()=>import("./string.html-7RIysJAi.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-f8fc3194":()=>d(()=>import("./内存对齐.html-UGgX527b.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-14c9e918":()=>d(()=>import("./函数重载.html-ztt7lJkw.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1155c5a0":()=>d(()=>import("./命名空间.html-0ed21-MT.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-636256d6":()=>d(()=>import("./异常安全.html-ic0ddKyn.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-51ee3d17":()=>d(()=>import("./引用.html-ImOXEHpf.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-132402e1":()=>d(()=>import("./强制转换.html-c_0WUelB.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-01408bc4":()=>d(()=>import("./默认参数.html-c44GzVzL.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-dd2c326a":()=>d(()=>import("./netstat使用.html-rRKWZUfR.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5481f6b5":()=>d(()=>import("./tree常用命令.html-Pbo7WZ4O.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-70781306":()=>d(()=>import("./wget使用.html-y74jcx9w.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-fae24824":()=>d(()=>import("./打包和压缩.html-8cuvui2x.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-29390dd2":()=>d(()=>import("./软链接（符号链接）和硬链接.html-5Mst7AYK.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-45955c7c":()=>d(()=>import("./配置一台ubuntu.html-C7rsuaUo.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5d0a9dce":()=>d(()=>import("./vim的配置和使用.html-aOEkyOZz.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-91127220":()=>d(()=>import("./CMake的使用.html-JYmZiA0C.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4c6cb231":()=>d(()=>import("./gcc_g__常见的编译命令.html-C7lTzyOg.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5342bc7a":()=>d(()=>import("./gdb调试出错的程序.html-S-67lSz9.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-f6ba6062":()=>d(()=>import("./makefile使用方法.html-RJNv6MXq.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7c3e20c2":()=>d(()=>import("./字符串转不同进制数字.html-1VHAY6pD.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-18f8cde9":()=>d(()=>import("./c语言连接MySQL.html-fFgT6xNA.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-17cb7aa4":()=>d(()=>import("./mysql的安装.html-JNBsdY3b.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0dd7df9c":()=>d(()=>import("./关系型数据库表设计.html-ONNOeWwG.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-067342a0":()=>d(()=>import("./基本数据类型.html-et7S_phS.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-c8a2e14a":()=>d(()=>import("./完整性约束.html-8PX3jL2n.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-a87f8e4c":()=>d(()=>import("./常用函数.html-BX1nXPZm.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1df5d4d6":()=>d(()=>import("./用户管理与授权.html-AhGHPX8Z.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-2648a679":()=>d(()=>import("./知识拓展.html-AoAqbZGE.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-cc05253e":()=>d(()=>import("./范式设计.html-j6h4GuJu.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-84ceb2f4":()=>d(()=>import("./运算符.html-YYcQmOVt.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-47deb978":()=>d(()=>import("./CRUD.html-KpixsxOF.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-68cfc132":()=>d(()=>import("./DCL小结.html-0VIxY7j8.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1509bd1e":()=>d(()=>import("./DML小结.html-hsceM7gv.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5312ebd6":()=>d(()=>import("./mysql的库操作.html-riG1_kbj.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-cb572402":()=>d(()=>import("./select查询.html-8W6hF-YJ.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-a056d220":()=>d(()=>import("./多表select-连接查询.html-Ozkq0pex.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-eedfc64a":()=>d(()=>import("./概述.html-MSEWmhAy.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0c1daf9d":()=>d(()=>import("./表操作.html-zSXKNyNS.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-15be756c":()=>d(()=>import("./MySQL存储引擎.html-jkCQZnrb.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-32ca78ec":()=>d(()=>import("./InnoDB的主键和二级索引树.html-YgEHvAAJ.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-f2fadc9e":()=>d(()=>import("./InnoDB自适应哈希索引.html-iJpKLI1c.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-08c9d541":()=>d(()=>import("./MySQL优化之慢日志查询.html-0VZyC1Ya.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-976bf48a":()=>d(()=>import("./MySQL索引常见问题.html-B-cMTQwP.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-19f8f8e4":()=>d(()=>import("./哈希索引.html-acbHAqaG.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4b2179bb":()=>d(()=>import("./索引基础.html-PF8nlQ9Z.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4d1339f4":()=>d(()=>import("./索引的使用和分析.html-FA6Bby-x.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-b30276bc":()=>d(()=>import("./索引的底层实现原理.html-_y1YH4rR.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1776ebf2":()=>d(()=>import("./MySQL事务的隔离级别.html-gjz4ZPK1.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-51f2dcf6":()=>d(()=>import("./事务并发存在的问题(脏读、不可重复读和幻读).html-jkP8v8D2.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0359a68f":()=>d(()=>import("./事务的ACID特性.html-FPNgfD_3.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-558f976c":()=>d(()=>import("./事务的概念.html-0xnQrScJ.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-3ef06b8b":()=>d(()=>import("./MySQL MVCC多版本并发控制（脏读和不可重复读解决原理）.html-B2Ohanj8.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-a01dbb18":()=>d(()=>import("./MySQL 意向共享锁、意向排他锁.html-CC0g7cgc.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-329074fa":()=>d(()=>import("./MySQL回滚日志undo log.html-wlaKC74E.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1029a01f":()=>d(()=>import("./MySQL间隙锁（幻读解决原理）.html-6_fBwm0Y.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-664794b6":()=>d(()=>import("./排它锁和共享锁.html-kNhCFX2y.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1743001b":()=>d(()=>import("./死锁.html-Cf6L1kLV.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-25bb8896":()=>d(()=>import("./表级锁和行级锁.html-idLbvXtQ.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5dfb342e":()=>d(()=>import("./记录锁_间隙锁可以防止删除操作而导致的幻读吗.html-3t7ccDLm.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-416fc51c":()=>d(()=>import("./锁的优化建议.html-hhXfC1nC.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-167ae4a4":()=>d(()=>import("./sql优化.html-V6XJ17pA.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-fb0c9a20":()=>d(()=>import("./SQL和索引优化总结.html-iKnYAnI5.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-403714d4":()=>d(()=>import("./MySQL重做日志redo log.html-6-GlGUb4.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-f10dc5a4":()=>d(()=>import("./Server 层四个日志.html-7SZLeFJD.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-18b96408":()=>d(()=>import("./mysqldump数据备份.html-s5gtRShk.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-125a45f0":()=>d(()=>import("./SQL的完整处理流程.html-AtGuyvXV.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-73d634fe":()=>d(()=>import("./分库分表实践.html-TXoysQg9.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4dda2b40":()=>d(()=>import("./主从复制原理.html-cjUJ5q6x.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1015e72b":()=>d(()=>import("./读写分离原理.html-uhbNOWfB.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-afe3b5ec":()=>d(()=>import("./读写分离配置实践.html-AtnvouPc.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-ab0fa402":()=>d(()=>import("./配置主从复制实践.html-EYwttKaN.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-fb24ca0e":()=>d(()=>import("./加载配置项.html-sgqEYT2L.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-379adba2":()=>d(()=>import("./压力测试.html-7sZqRrqL.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-2247d511":()=>d(()=>import("./数据库编程部分实现.html-drsxwj_b.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-874c376e":()=>d(()=>import("./最大空闲时间回收连接扫描线程的实现.html-tO0VE0U5.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5e84d900":()=>d(()=>import("./概述.html-y31jQIwG.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-51fa1311":()=>d(()=>import("./消费者线程的实现.html-Qz2Amtds.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-47e7636c":()=>d(()=>import("./生产者线程的实现.html-oJGSWXJl.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-f00ce0e0":()=>d(()=>import("./连接池单例模式实践.html-FJkyH0Ad.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-6dabb7d0":()=>d(()=>import("./Json简介及使用.html-mJtEWlGT.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5dfb637b":()=>d(()=>import("./Protobuf简介及使用.html-0b5DJ-Oy.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-3706649a":()=>d(()=>import("./404.html-kmhf0wvC.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-430f9745":()=>d(()=>import("./index.html-SkeTP6w1.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5782c814":()=>d(()=>import("./index.html-Z3R6prDN.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7d94f39a":()=>d(()=>import("./index.html-eThobncv.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-25ac69a1":()=>d(()=>import("./index.html-umkYsHEU.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-a38f78a4":()=>d(()=>import("./index.html-XeQB87rX.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-161970cb":()=>d(()=>import("./index.html-knM0HdNG.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4086f3eb":()=>d(()=>import("./index.html-9FAcit_t.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-18808a57":()=>d(()=>import("./index.html-nvixBcz1.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-39d32ddd":()=>d(()=>import("./index.html-o2IWuH6V.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0d4e4374":()=>d(()=>import("./index.html-3QZHU29O.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-18205b42":()=>d(()=>import("./index.html-U_y_KhWk.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-718e2d40":()=>d(()=>import("./index.html-Yjn9jHWy.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1e2d2742":()=>d(()=>import("./index.html-uHk3UBFr.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-14d4901c":()=>d(()=>import("./index.html-fU29ZsX5.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-6efd5e40":()=>d(()=>import("./index.html-NxUzHvjf.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-3899b171":()=>d(()=>import("./index.html-Qq46i63L.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5157b212":()=>d(()=>import("./index.html-DJeQ1VHk.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-266f8726":()=>d(()=>import("./index.html-gLud1Ha0.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1f23f62c":()=>d(()=>import("./index.html-ogYBTT9m.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5764c670":()=>d(()=>import("./index.html-3xQxfU8H.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-ed8603cc":()=>d(()=>import("./index.html-9yiAo-hL.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-9eec0ba4":()=>d(()=>import("./index.html-HOxDlaay.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-13ac5d5f":()=>d(()=>import("./index.html-bjmUAFMN.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-44e73480":()=>d(()=>import("./index.html-xstsPMj9.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-42abb996":()=>d(()=>import("./index.html-fctyk1UJ.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7c538d12":()=>d(()=>import("./index.html-PSr4TjDa.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-8f661f1c":()=>d(()=>import("./index.html-i8YEyty1.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-706b751e":()=>d(()=>import("./index.html-wdeuyrAS.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5bc93818":()=>d(()=>import("./index.html-QF-Tp4gv.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-744d024e":()=>d(()=>import("./index.html-hARlgpoy.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-e52c881c":()=>d(()=>import("./index.html-LzV6DJ4Q.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-154dc4c4":()=>d(()=>import("./index.html-tHOaw54a.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-01560935":()=>d(()=>import("./index.html-iOMIJ8tZ.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-03d57386":()=>d(()=>import("./index.html-YkW3Wp41.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-a378ad66":()=>d(()=>import("./index.html-nleEjWld.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5c5af6a7":()=>d(()=>import("./index.html-b9Ttm9Jk.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7b167472":()=>d(()=>import("./index.html-RBF6Ysvi.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-57cf9ed7":()=>d(()=>import("./index.html-WJxs6zNC.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-f64eddd4":()=>d(()=>import("./index.html-nNyeZ9MP.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-9c48d85a":()=>d(()=>import("./index.html-q3k2CA4a.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0b674df5":()=>d(()=>import("./index.html-Ptfm9o1W.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5a1c7f10":()=>d(()=>import("./index.html-rWxPSnvf.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-93cb9d6e":()=>d(()=>import("./index.html-DUFGsXsd.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-9717cc36":()=>d(()=>import("./index.html-wTNWtURW.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-cf2ceaf0":()=>d(()=>import("./index.html-pG6eZ_Xr.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-a074e84e":()=>d(()=>import("./index.html-Js_N48DV.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-11d405d3":()=>d(()=>import("./index.html-5NSJKVmr.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0440a8b6":()=>d(()=>import("./index.html-QdTk012i.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0b4e059c":()=>d(()=>import("./index.html-oGQyKsOH.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4f1a28a4":()=>d(()=>import("./index.html-ISH3T-eH.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-576828c2":()=>d(()=>import("./index.html-k02_KV8x.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-4b30edaa":()=>d(()=>import("./index.html-Ct79qsKu.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-22b11fef":()=>d(()=>import("./index.html-lMAqTxua.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-63c72547":()=>d(()=>import("./index.html-Y1toIq4H.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-a0d22de6":()=>d(()=>import("./index.html-cV0Hgk_6.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-fe7b1fa2":()=>d(()=>import("./index.html-kCIOkANe.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7d0f4556":()=>d(()=>import("./index.html-Bvc9Zz91.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-56e816c6":()=>d(()=>import("./index.html-NpKAzhUd.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-10a04a2f":()=>d(()=>import("./index.html-XnSl-QWo.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5f8d23be":()=>d(()=>import("./index.html-mwBRZb9z.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-3a4a854e":()=>d(()=>import("./index.html-g3ccuiNi.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-93bed62a":()=>d(()=>import("./index.html-o0fse6PX.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-2be2ad6b":()=>d(()=>import("./index.html-yKf7Lbxx.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-c263983c":()=>d(()=>import("./index.html-gCl_7Wsm.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-5cb0e330":()=>d(()=>import("./index.html-Wzb3XLB0.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-2d6af57c":()=>d(()=>import("./index.html-xGR2hRFB.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-725e7306":()=>d(()=>import("./index.html-S-P7mvKX.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-6942f2d0":()=>d(()=>import("./index.html-wpOGr-K1.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-72049510":()=>d(()=>import("./index.html-8Ii79SK2.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-6b9ab792":()=>d(()=>import("./index.html-joMA6OFg.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-2ddd04a0":()=>d(()=>import("./index.html-mirYm1g_.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-039b9630":()=>d(()=>import("./index.html-oFKkfC7o.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-539ae27f":()=>d(()=>import("./index.html-dQDB6_jb.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0f7cde43":()=>d(()=>import("./index.html-4tUokqow.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-71173084":()=>d(()=>import("./index.html-cSMuqsTj.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7c8d7d81":()=>d(()=>import("./index.html-jMpzBDIN.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-69c73501":()=>d(()=>import("./index.html-LIvLFYBE.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-54d85698":()=>d(()=>import("./index.html-ftQ6II9m.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-26374ab8":()=>d(()=>import("./index.html-UZvVTzOS.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-7a59998d":()=>d(()=>import("./index.html-TwWYOBqW.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-0aedece4":()=>d(()=>import("./index.html-nQMpyjyh.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-3af20a74":()=>d(()=>import("./index.html-Mhs53q1k.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-497728a6":()=>d(()=>import("./index.html-MvgRWnUS.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-470617df":()=>d(()=>import("./index.html-dduVnAhO.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-1ab7dcc2":()=>d(()=>import("./index.html-VjcO4KZk.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-117d546a":()=>d(()=>import("./index.html--JGHeqMu.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-85dac2ea":()=>d(()=>import("./index.html-7_7OxOHU.js"),__vite__mapDeps([])).then(({data:s})=>s),"v-254becce":()=>d(()=>import("./index.html-hBfWUlPR.js"),__vite__mapDeps([])).then(({data:s})=>s)},Cu=JSON.parse('{"base":"/","lang":"zh-CN","title":"张威的编程学习笔记","description":"记录学习生活的点点滴滴","head":[],"locales":{}}');var Lu=([s,n,e])=>s==="meta"&&n.name?`${s}.${n.name}`:["title","base"].includes(s)?s:s==="template"&&n.id?`${s}.${n.id}`:JSON.stringify([s,n,e]),wu=s=>{const n=new Set,e=[];return s.forEach(l=>{const a=Lu(l);n.has(a)||(n.add(a),e.push(l))}),e},Iu=s=>s[0]==="/"?s:`/${s}`,uc=s=>s[s.length-1]==="/"||s.endsWith(".html")?s:`${s}/`,me=s=>/^(https?:)?\/\//.test(s),Tu=/.md((\?|#).*)?$/,yl=(s,n="/")=>!!(me(s)||s.startsWith("/")&&!s.startsWith(n)&&!Tu.test(s)),yc=s=>/^[a-z][a-z0-9+.-]*:/.test(s),Dl=s=>Object.prototype.toString.call(s)==="[object Object]",Jt=s=>s[s.length-1]==="/"?s.slice(0,-1):s,vc=s=>s[0]==="/"?s.slice(1):s,ku=(s,n)=>{const e=Object.keys(s).sort((l,a)=>{const t=a.split("/").length-l.split("/").length;return t!==0?t:a.length-l.length});for(const l of e)if(n.startsWith(l))return l;return"/"};const mc={"v-184f4da6":m(()=>d(()=>import("./intro.html-XWuoAznC.js"),__vite__mapDeps([0,1]))),"v-8daa1a0e":m(()=>d(()=>import("./index.html-PCVYnsrU.js"),__vite__mapDeps([2,1]))),"v-3a1d2930":m(()=>d(()=>import("./tool.html-pHhx2vSI.js"),__vite__mapDeps([3,1]))),"v-144c90e3":m(()=>d(()=>import("./index.html-4zm9pl8t.js"),__vite__mapDeps([4,1]))),"v-08062d61":m(()=>d(()=>import("./统计单词的个数.html-tgFSjKro.js"),__vite__mapDeps([5,1]))),"v-1a144c13":m(()=>d(()=>import("./统计字母、数组、空格的个数.html-XyPm164r.js"),__vite__mapDeps([6,1]))),"v-1464ca76":m(()=>d(()=>import("./index.html-cCz1Oqxm.js"),__vite__mapDeps([7,1]))),"v-f0383c18":m(()=>d(()=>import("./index.html--LK6Smsl.js"),__vite__mapDeps([8,1]))),"v-40bd95c1":m(()=>d(()=>import("./文件操作.html-LEvaWH5F.js"),__vite__mapDeps([9,1]))),"v-eb072ff4":m(()=>d(()=>import("./index.html-GjNhOi_a.js"),__vite__mapDeps([10,1]))),"v-4628d8d3":m(()=>d(()=>import("./autohotkey笔记.html-TSHFoPdQ.js"),__vite__mapDeps([11,1]))),"v-25b47c13":m(()=>d(()=>import("./index.html-RkQfByKa.js"),__vite__mapDeps([12,1]))),"v-7945696f":m(()=>d(()=>import("./SourceInsight.html-eLTtfQK5.js"),__vite__mapDeps([13,1]))),"v-5095ca42":m(()=>d(()=>import("./typora配置.html-dAPyyGgH.js"),__vite__mapDeps([14,1]))),"v-24f2d5ba":m(()=>d(()=>import("./index.html-b8FEFcT1.js"),__vite__mapDeps([15,1]))),"v-450e8862":m(()=>d(()=>import("./TCP和UDP的区别.html-VuS3UhKh.js"),__vite__mapDeps([16,1]))),"v-dc384366":m(()=>d(()=>import("./index.html-x9NKYhoZ.js"),__vite__mapDeps([17,1]))),"v-0072b68a":m(()=>d(()=>import("./344.反转字符串.html-8SL01hMI.js"),__vite__mapDeps([18,1]))),"v-4a6b903e":m(()=>d(()=>import("./905. 按奇偶排序数组.html-V_DI6Kb1.js"),__vite__mapDeps([19,1]))),"v-92d2378e":m(()=>d(()=>import("./LeetCode 209.长度最小的子数组.html-HC7nIN4y.js"),__vite__mapDeps([20,1]))),"v-3945022c":m(()=>d(()=>import("./LeetCode 27. 移除元素.html-BoY9rQIO.js"),__vite__mapDeps([21,1]))),"v-0edaacb7":m(()=>d(()=>import("./LeetCode 59.螺旋矩阵Ⅱ.html-oP_joNgn.js"),__vite__mapDeps([22,1]))),"v-8fe9fd22":m(()=>d(()=>import("./LeetCode 704.二分查找.html-4DEo41Rj.js"),__vite__mapDeps([23,1]))),"v-69d65be6":m(()=>d(()=>import("./LeetCode 977.有序数组的平方.html-x3cqiX_m.js"),__vite__mapDeps([24,1]))),"v-a277331a":m(()=>d(()=>import("./二分查找总结.html--IZR-cY7.js"),__vite__mapDeps([25,1]))),"v-2e7fb111":m(()=>d(()=>import("./数组基础.html-l5_4_w1L.js"),__vite__mapDeps([26,1]))),"v-75ce370a":m(()=>d(()=>import("./查找N个数组的公共元素.html-Uq60rzBD.js"),__vite__mapDeps([27,1]))),"v-1f0c41ec":m(()=>d(()=>import("./查找三个数组的公共元素.html-IYgL23r_.js"),__vite__mapDeps([28,1]))),"v-98398990":m(()=>d(()=>import("./查找两个数组的公共元素.html-9eN4PwZC.js"),__vite__mapDeps([29,1]))),"v-752e9b82":m(()=>d(()=>import("./查找出现次数超过一半的元素.html-y7VeZ4P7.js"),__vite__mapDeps([30,1]))),"v-c01690d8":m(()=>d(()=>import("./查找最大和次大的元素.html-tZ_7659G.js"),__vite__mapDeps([31,1]))),"v-152dfd8d":m(()=>d(()=>import("./234.回文链表.html-BJf91OVo.js"),__vite__mapDeps([32,1]))),"v-735dfe06":m(()=>d(()=>import("./LeetCode 203.移除链表元素.html-XpsqEEWe.js"),__vite__mapDeps([33,1]))),"v-d977ced4":m(()=>d(()=>import("./leetcode 21. 合并两个有序链表.html-AJn893j6.js"),__vite__mapDeps([34,1]))),"v-64506cc7":m(()=>d(()=>import("./leetcode141.环形链表(判断链表是否有环).html-vVPIPfjq.js"),__vite__mapDeps([35,1]))),"v-13ade0aa":m(()=>d(()=>import("./Leetcode142.环形链表II(查找环的入口地址).html--XOsPPdi.js"),__vite__mapDeps([36,1]))),"v-641d44d2":m(()=>d(()=>import("./leetcode160.相交链表(判断链表是否相交).html-nPzI8lol.js"),__vite__mapDeps([37,1]))),"v-8a944abe":m(()=>d(()=>import("./Leetcode19. 删除链表的倒数第N个结点.html-oC5L7wDp.js"),__vite__mapDeps([38,1]))),"v-703548b8":m(()=>d(()=>import("./leetcode206.反转链表.html-q23mNygH.js"),__vite__mapDeps([39,1]))),"v-711b4cec":m(()=>d(()=>import("./Leetcode23. 合并 K 个升序链表.html-TVw1Aik7.js"),__vite__mapDeps([40,1]))),"v-fb458a48":m(()=>d(()=>import("./leetcode61.旋转链表.html-TWHzL1-6.js"),__vite__mapDeps([41,1]))),"v-67248f78":m(()=>d(()=>import("./LeetCode707.html-pBn9YAx5.js"),__vite__mapDeps([42,1]))),"v-db839be2":m(()=>d(()=>import("./leetcode86. 分隔链表（链表的分解）.html-gDvPBo6r.js"),__vite__mapDeps([43,1]))),"v-16787a3c":m(()=>d(()=>import("./Leetcode876.链表的中间结点.html-JRo_uYqG.js"),__vite__mapDeps([44,1]))),"v-a323322a":m(()=>d(()=>import("./leetcode92.反转链表II.html-UDF24Nx7.js"),__vite__mapDeps([45,1]))),"v-4e6f8416":m(()=>d(()=>import("./查找链表中倒数第N个结点.html-XEJSfXGU.js"),__vite__mapDeps([46,1]))),"v-ebfa549c":m(()=>d(()=>import("./约瑟夫环问题.html-ncqCgrSY.js"),__vite__mapDeps([47,1]))),"v-08a1ce30":m(()=>d(()=>import("./链表基础.html-o57WrCap.js"),__vite__mapDeps([48,1]))),"v-155542a2":m(()=>d(()=>import("./1. 两数之和.html-2Z-BGfsU.js"),__vite__mapDeps([49,1]))),"v-6e9dbc4c":m(()=>d(()=>import("./128. 最长连续序列.html-2dxj6JKX.js"),__vite__mapDeps([50,1]))),"v-cdbdf9f8":m(()=>d(()=>import("./15. 三数之和.html-av0xr1Ml.js"),__vite__mapDeps([51,1]))),"v-21edb74e":m(()=>d(()=>import("./167. 两数之和 II - 输入有序数组.html-Fiw06kgD.js"),__vite__mapDeps([52,1]))),"v-525b6569":m(()=>d(()=>import("./202. 快乐数.html-lpf4Ncg-.js"),__vite__mapDeps([53,1]))),"v-30fc6476":m(()=>d(()=>import("./217.存在重复元素.html-yiSzATdn.js"),__vite__mapDeps([54,1]))),"v-30a803f7":m(()=>d(()=>import("./219.存在重复元素 II.html-ujD8bQRV.js"),__vite__mapDeps([55,1]))),"v-115ac7e7":m(()=>d(()=>import("./220. 存在重复元素 III.html-k2fS16xE.js"),__vite__mapDeps([56,1]))),"v-534e82f8":m(()=>d(()=>import("./242.有效的字母异位词.html-TmjFs2UP.js"),__vite__mapDeps([57,1]))),"v-e58201ee":m(()=>d(()=>import("./349.两个数组的交集.html-Pj7NKzBv.js"),__vite__mapDeps([58,1]))),"v-21b182ee":m(()=>d(()=>import("./383. 赎金信.html-z8zsEfH1.js"),__vite__mapDeps([59,1]))),"v-deb0c8ec":m(()=>d(()=>import("./594. 最长和谐子序列.html-YoPL1Uhu.js"),__vite__mapDeps([60,1]))),"v-1a50115e":m(()=>d(()=>import("./冒泡排序.html-N3rQlv4p.js"),__vite__mapDeps([61,1]))),"v-53acd735":m(()=>d(()=>import("./基数排序.html-cfHnyJHE.js"),__vite__mapDeps([62,1]))),"v-00fc7494":m(()=>d(()=>import("./堆排序.html-JzPkvA3i.js"),__vite__mapDeps([63,1]))),"v-380a6c84":m(()=>d(()=>import("./希尔排序.html-ly6LzBA3.js"),__vite__mapDeps([64,1]))),"v-4b65c060":m(()=>d(()=>import("./归并排序.html-UFxOYFiw.js"),__vite__mapDeps([65,1]))),"v-0cc447aa":m(()=>d(()=>import("./插入排序.html-MeOHVVTv.js"),__vite__mapDeps([66,1]))),"v-64dd32fe":m(()=>d(()=>import("./桶排序.html-z7DeC_-X.js"),__vite__mapDeps([67,1]))),"v-85d8c71c":m(()=>d(()=>import("./计数排序.html-AgrPujVr.js"),__vite__mapDeps([68,1]))),"v-64c90a94":m(()=>d(()=>import("./选择排序.html-J7E4ISxS.js"),__vite__mapDeps([69,1]))),"v-155d00d3":m(()=>d(()=>import("./（简单）快速排序.html-r4XuVTYP.js"),__vite__mapDeps([70,1]))),"v-74d93789":m(()=>d(()=>import("./上滤.html-XGgALZeL.js"),__vite__mapDeps([71,1]))),"v-f1165cc2":m(()=>d(()=>import("./新建 Markdown.html-VoAU1qoJ.js"),__vite__mapDeps([72,1]))),"v-eeb8a63a":m(()=>d(()=>import("./两个栈实现队列.html-Lb5LGkN7.js"),__vite__mapDeps([73,1]))),"v-c84ce682":m(()=>d(()=>import("./新建 Markdown.html-4RPQQmE_.js"),__vite__mapDeps([74,1]))),"v-038e0b34":m(()=>d(()=>import("./反汇编小结.html-oNYFZPkW.js"),__vite__mapDeps([75,1]))),"v-403c82cd":m(()=>d(()=>import("./指令角度堆栈调用过程.html-5lUWF93s.js"),__vite__mapDeps([76,1]))),"v-5aef7a82":m(()=>d(()=>import("./编译器角度理解c__代码的编译和链接.html-peYq_62b.js"),__vite__mapDeps([77,1]))),"v-4d611284":m(()=>d(()=>import("./进程虚拟地址空间.html-MNosWmHr.js"),__vite__mapDeps([78,1]))),"v-f103c4b8":m(()=>d(()=>import("./do-while(0).html-J1KeGlh9.js"),__vite__mapDeps([79,1]))),"v-332dfae6":m(()=>d(()=>import("./scanf.html-li2BI7AA.js"),__vite__mapDeps([80,1]))),"v-062c257f":m(()=>d(()=>import("./关键字.html-tRHS80Xw.js"),__vite__mapDeps([81,1]))),"v-70779923":m(()=>d(()=>import("./前言.html--3YeToWn.js"),__vite__mapDeps([82,1]))),"v-198bd17a":m(()=>d(()=>import("./变量.html-T8yPS0sA.js"),__vite__mapDeps([83,1]))),"v-a688fcfc":m(()=>d(()=>import("./字符.html-J-HLjyDy.js"),__vite__mapDeps([84,1]))),"v-505a1229":m(()=>d(()=>import("./常量.html-x_Fm7n1H.js"),__vite__mapDeps([85,1]))),"v-1c610f8b":m(()=>d(()=>import("./数据类型.html-5IcQ9ft4.js"),__vite__mapDeps([86,1]))),"v-573fd3b5":m(()=>d(()=>import("./整型.html-QMB0bF8N.js"),__vite__mapDeps([87,1]))),"v-63c16f9b":m(()=>d(()=>import("./浮点数.html-95t3v70X.js"),__vite__mapDeps([88,1]))),"v-a253b292":m(()=>d(()=>import("./补码.html-F0MOm07L.js"),__vite__mapDeps([89,1]))),"v-35cd92ed":m(()=>d(()=>import("./进制转换.html-Infypb5p.js"),__vite__mapDeps([90,1]))),"v-5f9477f2":m(()=>d(()=>import("./this.html-LcwmzApo.js"),__vite__mapDeps([91,1]))),"v-31530dfb":m(()=>d(()=>import("./拷贝构造函数.html-__WveO7E.js"),__vite__mapDeps([92,1]))),"v-3bc3bfaf":m(()=>d(()=>import("./拷贝构造和赋值重载的实践.html-WGKspCdy.js"),__vite__mapDeps([93,1]))),"v-3a9cf65c":m(()=>d(()=>import("./指向类型成员的指针.html-FUSWm0EF.js"),__vite__mapDeps([94,1]))),"v-10e1c6eb":m(()=>d(()=>import("./构造函数和析构函数.html-OjONH7Uy.js"),__vite__mapDeps([95,1]))),"v-451c83e2":m(()=>d(()=>import("./特殊数据成员的初始化.html-r3nglm9R.js"),__vite__mapDeps([96,1]))),"v-6577db5e":m(()=>d(()=>import("./特殊的成员函数.html-6iAm-_g_.js"),__vite__mapDeps([97,1]))),"v-e41f0618":m(()=>d(()=>import("./类和对象.html-mL8ophKn.js"),__vite__mapDeps([98,1]))),"v-3eca3d30":m(()=>d(()=>import("./组织对象.html-tyE9ZP8g.js"),__vite__mapDeps([99,1]))),"v-1da04370":m(()=>d(()=>import("./赋值运算符函数.html-9mQMeeur.js"),__vite__mapDeps([100,1]))),"v-66aab0b0":m(()=>d(()=>import("./bool.html-LGDfTDx4.js"),__vite__mapDeps([101,1]))),"v-1073124a":m(()=>d(()=>import("./c__初探.html-Gqy_oA3t.js"),__vite__mapDeps([102,1]))),"v-3cc85216":m(()=>d(()=>import("./const.html-IkFTRxiD.js"),__vite__mapDeps([103,1]))),"v-ba4c1c2a":m(()=>d(()=>import("./inline内联函数.html-c9z6M8WE.js"),__vite__mapDeps([104,1]))),"v-c97d844a":m(()=>d(()=>import("./new、delete.html-sPXtRqNy.js"),__vite__mapDeps([105,1]))),"v-6ef0e0ae":m(()=>d(()=>import("./string.html--3Giitdh.js"),__vite__mapDeps([106,1]))),"v-f8fc3194":m(()=>d(()=>import("./内存对齐.html-yDjiA1mc.js"),__vite__mapDeps([107,1]))),"v-14c9e918":m(()=>d(()=>import("./函数重载.html-5v_5dEJ2.js"),__vite__mapDeps([108,1]))),"v-1155c5a0":m(()=>d(()=>import("./命名空间.html-ICkpH4vx.js"),__vite__mapDeps([109,1]))),"v-636256d6":m(()=>d(()=>import("./异常安全.html-5wEs78q9.js"),__vite__mapDeps([110,1]))),"v-51ee3d17":m(()=>d(()=>import("./引用.html-bVZyM7Ta.js"),__vite__mapDeps([111,1]))),"v-132402e1":m(()=>d(()=>import("./强制转换.html-yizgv2jf.js"),__vite__mapDeps([112,1]))),"v-01408bc4":m(()=>d(()=>import("./默认参数.html-J976NTdO.js"),__vite__mapDeps([113,1]))),"v-dd2c326a":m(()=>d(()=>import("./netstat使用.html-FPXrpEAF.js"),__vite__mapDeps([114,1]))),"v-5481f6b5":m(()=>d(()=>import("./tree常用命令.html-w4J49QKb.js"),__vite__mapDeps([115,1]))),"v-70781306":m(()=>d(()=>import("./wget使用.html-ZGQRSFyt.js"),__vite__mapDeps([116,1]))),"v-fae24824":m(()=>d(()=>import("./打包和压缩.html-cY19K_wM.js"),__vite__mapDeps([117,1]))),"v-29390dd2":m(()=>d(()=>import("./软链接（符号链接）和硬链接.html-wIwW51PU.js"),__vite__mapDeps([118,1]))),"v-45955c7c":m(()=>d(()=>import("./配置一台ubuntu.html-vNT2UU_J.js"),__vite__mapDeps([119,1]))),"v-5d0a9dce":m(()=>d(()=>import("./vim的配置和使用.html-xCam-WWV.js"),__vite__mapDeps([120,1]))),"v-91127220":m(()=>d(()=>import("./CMake的使用.html-A9a9bOtM.js"),__vite__mapDeps([121,1]))),"v-4c6cb231":m(()=>d(()=>import("./gcc_g__常见的编译命令.html-EeAbHLWF.js"),__vite__mapDeps([122,1]))),"v-5342bc7a":m(()=>d(()=>import("./gdb调试出错的程序.html-sSYVkSWf.js"),__vite__mapDeps([123,1]))),"v-f6ba6062":m(()=>d(()=>import("./makefile使用方法.html-udf24ZSo.js"),__vite__mapDeps([124,1]))),"v-7c3e20c2":m(()=>d(()=>import("./字符串转不同进制数字.html--DrQ3-6s.js"),__vite__mapDeps([125,1]))),"v-18f8cde9":m(()=>d(()=>import("./c语言连接MySQL.html-yQbNEZ2j.js"),__vite__mapDeps([126,1]))),"v-17cb7aa4":m(()=>d(()=>import("./mysql的安装.html-oaueIit3.js"),__vite__mapDeps([127,1]))),"v-0dd7df9c":m(()=>d(()=>import("./关系型数据库表设计.html-4yNydrq2.js"),__vite__mapDeps([128,1]))),"v-067342a0":m(()=>d(()=>import("./基本数据类型.html-pvyLmUeo.js"),__vite__mapDeps([129,1]))),"v-c8a2e14a":m(()=>d(()=>import("./完整性约束.html-GdN8o1Lv.js"),__vite__mapDeps([130,1]))),"v-a87f8e4c":m(()=>d(()=>import("./常用函数.html-yrGtTv0K.js"),__vite__mapDeps([131,1]))),"v-1df5d4d6":m(()=>d(()=>import("./用户管理与授权.html-qe7FsFsr.js"),__vite__mapDeps([132,1]))),"v-2648a679":m(()=>d(()=>import("./知识拓展.html-VldMBh19.js"),__vite__mapDeps([133,1]))),"v-cc05253e":m(()=>d(()=>import("./范式设计.html-cC4lDtJe.js"),__vite__mapDeps([134,1]))),"v-84ceb2f4":m(()=>d(()=>import("./运算符.html-Z8WNGqq0.js"),__vite__mapDeps([135,1]))),"v-47deb978":m(()=>d(()=>import("./CRUD.html-KnzFAiiW.js"),__vite__mapDeps([136,1]))),"v-68cfc132":m(()=>d(()=>import("./DCL小结.html-ERMgPAqp.js"),__vite__mapDeps([137,1]))),"v-1509bd1e":m(()=>d(()=>import("./DML小结.html-PXZm0iSZ.js"),__vite__mapDeps([138,1]))),"v-5312ebd6":m(()=>d(()=>import("./mysql的库操作.html-yLRo8i1X.js"),__vite__mapDeps([139,1]))),"v-cb572402":m(()=>d(()=>import("./select查询.html-ziQQZzs7.js"),__vite__mapDeps([140,1]))),"v-a056d220":m(()=>d(()=>import("./多表select-连接查询.html-sYtBHXtA.js"),__vite__mapDeps([141,1]))),"v-eedfc64a":m(()=>d(()=>import("./概述.html-CobyiC_E.js"),__vite__mapDeps([142,1]))),"v-0c1daf9d":m(()=>d(()=>import("./表操作.html-Udf6iRii.js"),__vite__mapDeps([143,1]))),"v-15be756c":m(()=>d(()=>import("./MySQL存储引擎.html-8sltDvm9.js"),__vite__mapDeps([144,1]))),"v-32ca78ec":m(()=>d(()=>import("./InnoDB的主键和二级索引树.html-utdMagSo.js"),__vite__mapDeps([145,1]))),"v-f2fadc9e":m(()=>d(()=>import("./InnoDB自适应哈希索引.html-ZRUFaZkz.js"),__vite__mapDeps([146,1]))),"v-08c9d541":m(()=>d(()=>import("./MySQL优化之慢日志查询.html-ezruEdBU.js"),__vite__mapDeps([147,1]))),"v-976bf48a":m(()=>d(()=>import("./MySQL索引常见问题.html-jSluOGp6.js"),__vite__mapDeps([148,1]))),"v-19f8f8e4":m(()=>d(()=>import("./哈希索引.html-jZi0FG1n.js"),__vite__mapDeps([149,1]))),"v-4b2179bb":m(()=>d(()=>import("./索引基础.html-ZY7N_BSe.js"),__vite__mapDeps([150,1]))),"v-4d1339f4":m(()=>d(()=>import("./索引的使用和分析.html-P4K7-aBA.js"),__vite__mapDeps([151,1]))),"v-b30276bc":m(()=>d(()=>import("./索引的底层实现原理.html-QpNz3ahF.js"),__vite__mapDeps([152,1]))),"v-1776ebf2":m(()=>d(()=>import("./MySQL事务的隔离级别.html-x2i339AL.js"),__vite__mapDeps([153,1]))),"v-51f2dcf6":m(()=>d(()=>import("./事务并发存在的问题(脏读、不可重复读和幻读).html-nLOFP8uH.js"),__vite__mapDeps([154,1]))),"v-0359a68f":m(()=>d(()=>import("./事务的ACID特性.html-nYIOq4zZ.js"),__vite__mapDeps([155,1]))),"v-558f976c":m(()=>d(()=>import("./事务的概念.html-2-CAudq_.js"),__vite__mapDeps([156,1]))),"v-3ef06b8b":m(()=>d(()=>import("./MySQL MVCC多版本并发控制（脏读和不可重复读解决原理）.html-69_Z8fly.js"),__vite__mapDeps([157,1]))),"v-a01dbb18":m(()=>d(()=>import("./MySQL 意向共享锁、意向排他锁.html-3pmR_Xna.js"),__vite__mapDeps([158,1]))),"v-329074fa":m(()=>d(()=>import("./MySQL回滚日志undo log.html--BfEuwK_.js"),__vite__mapDeps([159,1]))),"v-1029a01f":m(()=>d(()=>import("./MySQL间隙锁（幻读解决原理）.html-EMOYd4yD.js"),__vite__mapDeps([160,1]))),"v-664794b6":m(()=>d(()=>import("./排它锁和共享锁.html-AVskcTm8.js"),__vite__mapDeps([161,1]))),"v-1743001b":m(()=>d(()=>import("./死锁.html-35Mvvhya.js"),__vite__mapDeps([162,1]))),"v-25bb8896":m(()=>d(()=>import("./表级锁和行级锁.html-QjS9uPPW.js"),__vite__mapDeps([163,1]))),"v-5dfb342e":m(()=>d(()=>import("./记录锁_间隙锁可以防止删除操作而导致的幻读吗.html-PS0x6E-s.js"),__vite__mapDeps([164,1]))),"v-416fc51c":m(()=>d(()=>import("./锁的优化建议.html-v9qy0gbe.js"),__vite__mapDeps([165,1]))),"v-167ae4a4":m(()=>d(()=>import("./sql优化.html-T3pNcZFL.js"),__vite__mapDeps([166,1]))),"v-fb0c9a20":m(()=>d(()=>import("./SQL和索引优化总结.html-MF4d4SqT.js"),__vite__mapDeps([167,1]))),"v-403714d4":m(()=>d(()=>import("./MySQL重做日志redo log.html-iPD_rAQs.js"),__vite__mapDeps([168,1]))),"v-f10dc5a4":m(()=>d(()=>import("./Server 层四个日志.html-9ozNCXuv.js"),__vite__mapDeps([169,1]))),"v-18b96408":m(()=>d(()=>import("./mysqldump数据备份.html-r1WOBHh4.js"),__vite__mapDeps([170,1]))),"v-125a45f0":m(()=>d(()=>import("./SQL的完整处理流程.html-M1FTpStb.js"),__vite__mapDeps([171,1]))),"v-73d634fe":m(()=>d(()=>import("./分库分表实践.html-f3iZWov4.js"),__vite__mapDeps([172,1]))),"v-4dda2b40":m(()=>d(()=>import("./主从复制原理.html-86_mY0fd.js"),__vite__mapDeps([173,1]))),"v-1015e72b":m(()=>d(()=>import("./读写分离原理.html-KKIcMZXA.js"),__vite__mapDeps([174,1]))),"v-afe3b5ec":m(()=>d(()=>import("./读写分离配置实践.html-X20MOux3.js"),__vite__mapDeps([175,1]))),"v-ab0fa402":m(()=>d(()=>import("./配置主从复制实践.html-ZuTHwGf2.js"),__vite__mapDeps([176,1]))),"v-fb24ca0e":m(()=>d(()=>import("./加载配置项.html-rwnlJFgp.js"),__vite__mapDeps([177,1]))),"v-379adba2":m(()=>d(()=>import("./压力测试.html-m2gl_YC1.js"),__vite__mapDeps([178,1]))),"v-2247d511":m(()=>d(()=>import("./数据库编程部分实现.html-t0jGhmhr.js"),__vite__mapDeps([179,1]))),"v-874c376e":m(()=>d(()=>import("./最大空闲时间回收连接扫描线程的实现.html-4fvJEvwA.js"),__vite__mapDeps([180,1]))),"v-5e84d900":m(()=>d(()=>import("./概述.html-lYbhhJuS.js"),__vite__mapDeps([181,1]))),"v-51fa1311":m(()=>d(()=>import("./消费者线程的实现.html-DZlLHRXa.js"),__vite__mapDeps([182,1]))),"v-47e7636c":m(()=>d(()=>import("./生产者线程的实现.html-__KWNpDy.js"),__vite__mapDeps([183,1]))),"v-f00ce0e0":m(()=>d(()=>import("./连接池单例模式实践.html-vEgURNOy.js"),__vite__mapDeps([184,1]))),"v-6dabb7d0":m(()=>d(()=>import("./Json简介及使用.html-yh3UgZFs.js"),__vite__mapDeps([185,1]))),"v-5dfb637b":m(()=>d(()=>import("./Protobuf简介及使用.html-AVwgzqDK.js"),__vite__mapDeps([186,1]))),"v-3706649a":m(()=>d(()=>import("./404.html-AznTn1Rb.js"),__vite__mapDeps([187,1]))),"v-430f9745":m(()=>d(()=>import("./index.html-SWiSNJ9I.js"),__vite__mapDeps([188,1]))),"v-5782c814":m(()=>d(()=>import("./index.html-qs-vreXd.js"),__vite__mapDeps([189,1]))),"v-7d94f39a":m(()=>d(()=>import("./index.html-dGdaO5-d.js"),__vite__mapDeps([190,1]))),"v-25ac69a1":m(()=>d(()=>import("./index.html-GTsF7Eir.js"),__vite__mapDeps([191,1]))),"v-a38f78a4":m(()=>d(()=>import("./index.html-Caj_PDJK.js"),__vite__mapDeps([192,1]))),"v-161970cb":m(()=>d(()=>import("./index.html-O5coBjz4.js"),__vite__mapDeps([193,1]))),"v-4086f3eb":m(()=>d(()=>import("./index.html-iI-ngrCo.js"),__vite__mapDeps([194,1]))),"v-18808a57":m(()=>d(()=>import("./index.html-OqkWQMPy.js"),__vite__mapDeps([195,1]))),"v-39d32ddd":m(()=>d(()=>import("./index.html-HwYUgY8q.js"),__vite__mapDeps([196,1]))),"v-0d4e4374":m(()=>d(()=>import("./index.html-5-gcU5Xk.js"),__vite__mapDeps([197,1]))),"v-18205b42":m(()=>d(()=>import("./index.html-_9LvaO6i.js"),__vite__mapDeps([198,1]))),"v-718e2d40":m(()=>d(()=>import("./index.html-os_7ObvY.js"),__vite__mapDeps([199,1]))),"v-1e2d2742":m(()=>d(()=>import("./index.html-OEx8bIle.js"),__vite__mapDeps([200,1]))),"v-14d4901c":m(()=>d(()=>import("./index.html-RnHRmpKo.js"),__vite__mapDeps([201,1]))),"v-6efd5e40":m(()=>d(()=>import("./index.html-S9B62hlN.js"),__vite__mapDeps([202,1]))),"v-3899b171":m(()=>d(()=>import("./index.html-OlDDXh_N.js"),__vite__mapDeps([203,1]))),"v-5157b212":m(()=>d(()=>import("./index.html-JS8eLwLB.js"),__vite__mapDeps([204,1]))),"v-266f8726":m(()=>d(()=>import("./index.html-Qb37Q4N8.js"),__vite__mapDeps([205,1]))),"v-1f23f62c":m(()=>d(()=>import("./index.html-u5gTRPK5.js"),__vite__mapDeps([206,1]))),"v-5764c670":m(()=>d(()=>import("./index.html-8LBWTE5L.js"),__vite__mapDeps([207,1]))),"v-ed8603cc":m(()=>d(()=>import("./index.html-tSkqkLdp.js"),__vite__mapDeps([208,1]))),"v-9eec0ba4":m(()=>d(()=>import("./index.html-fiutTwGr.js"),__vite__mapDeps([209,1]))),"v-13ac5d5f":m(()=>d(()=>import("./index.html-fJrRaL7_.js"),__vite__mapDeps([210,1]))),"v-44e73480":m(()=>d(()=>import("./index.html-se7VbwDn.js"),__vite__mapDeps([211,1]))),"v-42abb996":m(()=>d(()=>import("./index.html-Ts-G3aR3.js"),__vite__mapDeps([212,1]))),"v-7c538d12":m(()=>d(()=>import("./index.html-DLzCNnI6.js"),__vite__mapDeps([213,1]))),"v-8f661f1c":m(()=>d(()=>import("./index.html-7y-7qKfM.js"),__vite__mapDeps([214,1]))),"v-706b751e":m(()=>d(()=>import("./index.html-YjPyRpSF.js"),__vite__mapDeps([215,1]))),"v-5bc93818":m(()=>d(()=>import("./index.html-XFXT1uec.js"),__vite__mapDeps([216,1]))),"v-744d024e":m(()=>d(()=>import("./index.html-yoCKFhcO.js"),__vite__mapDeps([217,1]))),"v-e52c881c":m(()=>d(()=>import("./index.html-L_mhJOuT.js"),__vite__mapDeps([218,1]))),"v-154dc4c4":m(()=>d(()=>import("./index.html-FBvdlMdJ.js"),__vite__mapDeps([219,1]))),"v-01560935":m(()=>d(()=>import("./index.html-2cSGpmC-.js"),__vite__mapDeps([220,1]))),"v-03d57386":m(()=>d(()=>import("./index.html-POSXs7OC.js"),__vite__mapDeps([221,1]))),"v-a378ad66":m(()=>d(()=>import("./index.html-8zArXlKF.js"),__vite__mapDeps([222,1]))),"v-5c5af6a7":m(()=>d(()=>import("./index.html-0P4M1iHo.js"),__vite__mapDeps([223,1]))),"v-7b167472":m(()=>d(()=>import("./index.html-ypCFuI6-.js"),__vite__mapDeps([224,1]))),"v-57cf9ed7":m(()=>d(()=>import("./index.html-yhuuP0TA.js"),__vite__mapDeps([225,1]))),"v-f64eddd4":m(()=>d(()=>import("./index.html-VInjZWuz.js"),__vite__mapDeps([226,1]))),"v-9c48d85a":m(()=>d(()=>import("./index.html-W0UFKCbV.js"),__vite__mapDeps([227,1]))),"v-0b674df5":m(()=>d(()=>import("./index.html-bv_FEyTQ.js"),__vite__mapDeps([228,1]))),"v-5a1c7f10":m(()=>d(()=>import("./index.html-vTuHaY90.js"),__vite__mapDeps([229,1]))),"v-93cb9d6e":m(()=>d(()=>import("./index.html-2KCqLpXi.js"),__vite__mapDeps([230,1]))),"v-9717cc36":m(()=>d(()=>import("./index.html-pQODz3fR.js"),__vite__mapDeps([231,1]))),"v-cf2ceaf0":m(()=>d(()=>import("./index.html-MF0YsLjf.js"),__vite__mapDeps([232,1]))),"v-a074e84e":m(()=>d(()=>import("./index.html-hg-HUM8k.js"),__vite__mapDeps([233,1]))),"v-11d405d3":m(()=>d(()=>import("./index.html-Luk__8aU.js"),__vite__mapDeps([234,1]))),"v-0440a8b6":m(()=>d(()=>import("./index.html-VLJGNP8z.js"),__vite__mapDeps([235,1]))),"v-0b4e059c":m(()=>d(()=>import("./index.html-GEb9ALeK.js"),__vite__mapDeps([236,1]))),"v-4f1a28a4":m(()=>d(()=>import("./index.html-UMDXRTVN.js"),__vite__mapDeps([237,1]))),"v-576828c2":m(()=>d(()=>import("./index.html-xnj7nIdI.js"),__vite__mapDeps([238,1]))),"v-4b30edaa":m(()=>d(()=>import("./index.html-pvBbbSam.js"),__vite__mapDeps([239,1]))),"v-22b11fef":m(()=>d(()=>import("./index.html-imBHtT6X.js"),__vite__mapDeps([240,1]))),"v-63c72547":m(()=>d(()=>import("./index.html-IzfebBP2.js"),__vite__mapDeps([241,1]))),"v-a0d22de6":m(()=>d(()=>import("./index.html-k83WSuuj.js"),__vite__mapDeps([242,1]))),"v-fe7b1fa2":m(()=>d(()=>import("./index.html-yMorF4l3.js"),__vite__mapDeps([243,1]))),"v-7d0f4556":m(()=>d(()=>import("./index.html-7iAVGxs5.js"),__vite__mapDeps([244,1]))),"v-56e816c6":m(()=>d(()=>import("./index.html-bnFQL8XW.js"),__vite__mapDeps([245,1]))),"v-10a04a2f":m(()=>d(()=>import("./index.html-8HEXYFKo.js"),__vite__mapDeps([246,1]))),"v-5f8d23be":m(()=>d(()=>import("./index.html-AeHFVR04.js"),__vite__mapDeps([247,1]))),"v-3a4a854e":m(()=>d(()=>import("./index.html-5Rr5EBgs.js"),__vite__mapDeps([248,1]))),"v-93bed62a":m(()=>d(()=>import("./index.html-ekUM3Uc7.js"),__vite__mapDeps([249,1]))),"v-2be2ad6b":m(()=>d(()=>import("./index.html-mmDzmkk3.js"),__vite__mapDeps([250,1]))),"v-c263983c":m(()=>d(()=>import("./index.html-pFHpHfBa.js"),__vite__mapDeps([251,1]))),"v-5cb0e330":m(()=>d(()=>import("./index.html-wua6Ei1V.js"),__vite__mapDeps([252,1]))),"v-2d6af57c":m(()=>d(()=>import("./index.html-Kb7-SpXt.js"),__vite__mapDeps([253,1]))),"v-725e7306":m(()=>d(()=>import("./index.html-1aLGb89n.js"),__vite__mapDeps([254,1]))),"v-6942f2d0":m(()=>d(()=>import("./index.html-HIiLQh5q.js"),__vite__mapDeps([255,1]))),"v-72049510":m(()=>d(()=>import("./index.html-JrgtTfsL.js"),__vite__mapDeps([256,1]))),"v-6b9ab792":m(()=>d(()=>import("./index.html-Fo-Zy1qB.js"),__vite__mapDeps([257,1]))),"v-2ddd04a0":m(()=>d(()=>import("./index.html-dwS8f1mx.js"),__vite__mapDeps([258,1]))),"v-039b9630":m(()=>d(()=>import("./index.html-ULUJ9GEI.js"),__vite__mapDeps([259,1]))),"v-539ae27f":m(()=>d(()=>import("./index.html-uLpDcigF.js"),__vite__mapDeps([260,1]))),"v-0f7cde43":m(()=>d(()=>import("./index.html-9NWbR3nX.js"),__vite__mapDeps([261,1]))),"v-71173084":m(()=>d(()=>import("./index.html-aLCYMOfp.js"),__vite__mapDeps([262,1]))),"v-7c8d7d81":m(()=>d(()=>import("./index.html-wCF3r-2U.js"),__vite__mapDeps([263,1]))),"v-69c73501":m(()=>d(()=>import("./index.html-hoUWrN5n.js"),__vite__mapDeps([264,1]))),"v-54d85698":m(()=>d(()=>import("./index.html-IIacVnZt.js"),__vite__mapDeps([265,1]))),"v-26374ab8":m(()=>d(()=>import("./index.html-8e9Z2vnr.js"),__vite__mapDeps([266,1]))),"v-7a59998d":m(()=>d(()=>import("./index.html-O-YkFRSi.js"),__vite__mapDeps([267,1]))),"v-0aedece4":m(()=>d(()=>import("./index.html--_gMmo4Y.js"),__vite__mapDeps([268,1]))),"v-3af20a74":m(()=>d(()=>import("./index.html-3jpOBwtB.js"),__vite__mapDeps([269,1]))),"v-497728a6":m(()=>d(()=>import("./index.html-sibB5XuC.js"),__vite__mapDeps([270,1]))),"v-470617df":m(()=>d(()=>import("./index.html-ePgumXfP.js"),__vite__mapDeps([271,1]))),"v-1ab7dcc2":m(()=>d(()=>import("./index.html-uYXIeHwZ.js"),__vite__mapDeps([272,1]))),"v-117d546a":m(()=>d(()=>import("./index.html-zS8eVvkU.js"),__vite__mapDeps([273,1]))),"v-85dac2ea":m(()=>d(()=>import("./index.html-VT5hfcu7.js"),__vite__mapDeps([274,1]))),"v-254becce":m(()=>d(()=>import("./index.html-ujTNkgMR.js"),__vite__mapDeps([275,1])))};var Ou=Symbol(""),Ac=Symbol(""),xu=ee({key:"",path:"",title:"",lang:"",frontmatter:{},headers:[]}),Bs=()=>{const s=vs(Ac);if(!s)throw new Error("pageData() is called without provider.");return s},fc=Symbol(""),hs=()=>{const s=vs(fc);if(!s)throw new Error("usePageFrontmatter() is called without provider.");return s},Ec=Symbol(""),Su=()=>{const s=vs(Ec);if(!s)throw new Error("usePageHead() is called without provider.");return s},Pu=Symbol(""),Fc=Symbol(""),hc=()=>{const s=vs(Fc);if(!s)throw new Error("usePageLang() is called without provider.");return s},gc=Symbol(""),Ru=()=>{const s=vs(gc);if(!s)throw new Error("usePageLayout() is called without provider.");return s},Mu=U(_u),so=Symbol(""),Cn=()=>{const s=vs(so);if(!s)throw new Error("useRouteLocale() is called without provider.");return s},_e=U(Cu),bc=()=>_e,Dc=Symbol(""),Ue=()=>{const s=vs(Dc);if(!s)throw new Error("useSiteLocaleData() is called without provider.");return s},Vu=Symbol(""),qu="Layout",Nu="NotFound",kn=Fl({resolveLayouts:s=>s.reduce((n,e)=>({...n,...e.layouts}),{}),resolvePageData:async s=>{const n=Mu.value[s];return await(n==null?void 0:n())??xu},resolvePageFrontmatter:s=>s.frontmatter,resolvePageHead:(s,n,e)=>{const l=rs(n.description)?n.description:e.description,a=[...ss(n.head)?n.head:[],...e.head,["title",{},s],["meta",{name:"description",content:l}]];return wu(a)},resolvePageHeadTitle:(s,n)=>[s.title,n.title].filter(e=>!!e).join(" | "),resolvePageLang:(s,n)=>s.lang||n.lang||"en-US",resolvePageLayout:(s,n)=>{let e;if(s.path){const l=s.frontmatter.layout;rs(l)?e=l:e=qu}else e=Nu;return n[e]},resolveRouteLocale:(s,n)=>ku(s,n),resolveSiteLocaleData:(s,n)=>({...s,...s.locales[n]})}),Fa=R({name:"ClientOnly",setup(s,n){const e=U(!1);return As(()=>{e.value=!0}),()=>{var l,a;return e.value?(a=(l=n.slots).default)==null?void 0:a.call(l):null}}}),_c=R({name:"Content",props:{pageKey:{type:String,required:!1,default:""}},setup(s){const n=Bs(),e=D(()=>mc[s.pageKey||n.value.key]);return()=>e.value?p(e.value):p("div","404 Not Found")}}),Fn=(s={})=>s,bs=s=>me(s)?s:`/${vc(s)}`;const $u={};/*!
  * vue-router v4.2.5
  * (c) 2023 Eduardo San Martin Morote
  * @license MIT
  */const ge=typeof window<"u";function Qu(s){return s.__esModule||s[Symbol.toStringTag]==="Module"}const fs=Object.assign;function Na(s,n){const e={};for(const l in n){const a=n[l];e[l]=fn(a)?a.map(s):s(a)}return e}const tl=()=>{},fn=Array.isArray,Hu=/\/$/,zu=s=>s.replace(Hu,"");function $a(s,n,e="/"){let l,a={},t="",o="";const r=n.indexOf("#");let i=n.indexOf("?");return r<i&&r>=0&&(i=-1),i>-1&&(l=n.slice(0,i),t=n.slice(i+1,r>-1?r:n.length),a=s(t)),r>-1&&(l=l||n.slice(0,r),o=n.slice(r,n.length)),l=Wu(l??n,e),{fullPath:l+(t&&"?")+t+o,path:l,query:a,hash:o}}function ju(s,n){const e=n.query?s(n.query):"";return n.path+(e&&"?")+e+(n.hash||"")}function fp(s,n){return!n||!s.toLowerCase().startsWith(n.toLowerCase())?s:s.slice(n.length)||"/"}function Uu(s,n,e){const l=n.matched.length-1,a=e.matched.length-1;return l>-1&&l===a&&Ve(n.matched[l],e.matched[a])&&Cc(n.params,e.params)&&s(n.query)===s(e.query)&&n.hash===e.hash}function Ve(s,n){return(s.aliasOf||s)===(n.aliasOf||n)}function Cc(s,n){if(Object.keys(s).length!==Object.keys(n).length)return!1;for(const e in s)if(!Gu(s[e],n[e]))return!1;return!0}function Gu(s,n){return fn(s)?Ep(s,n):fn(n)?Ep(n,s):s===n}function Ep(s,n){return fn(n)?s.length===n.length&&s.every((e,l)=>e===n[l]):s.length===1&&s[0]===n}function Wu(s,n){if(s.startsWith("/"))return s;if(!s)return n;const e=n.split("/"),l=s.split("/"),a=l[l.length-1];(a===".."||a===".")&&l.push("");let t=e.length-1,o,r;for(o=0;o<l.length;o++)if(r=l[o],r!==".")if(r==="..")t>1&&t--;else break;return e.slice(0,t).join("/")+"/"+l.slice(o-(o===l.length?1:0)).join("/")}var vl;(function(s){s.pop="pop",s.push="push"})(vl||(vl={}));var ol;(function(s){s.back="back",s.forward="forward",s.unknown=""})(ol||(ol={}));function Ku(s){if(!s)if(ge){const n=document.querySelector("base");s=n&&n.getAttribute("href")||"/",s=s.replace(/^\w+:\/\/[^\/]+/,"")}else s="/";return s[0]!=="/"&&s[0]!=="#"&&(s="/"+s),zu(s)}const Yu=/^[^#]+#/;function Zu(s,n){return s.replace(Yu,"#")+n}function Xu(s,n){const e=document.documentElement.getBoundingClientRect(),l=s.getBoundingClientRect();return{behavior:n.behavior,left:l.left-e.left-(n.left||0),top:l.top-e.top-(n.top||0)}}const ha=()=>({left:window.pageXOffset,top:window.pageYOffset});function Ju(s){let n;if("el"in s){const e=s.el,l=typeof e=="string"&&e.startsWith("#"),a=typeof e=="string"?l?document.getElementById(e.slice(1)):document.querySelector(e):e;if(!a)return;n=Xu(a,s)}else n=s;"scrollBehavior"in document.documentElement.style?window.scrollTo(n):window.scrollTo(n.left!=null?n.left:window.pageXOffset,n.top!=null?n.top:window.pageYOffset)}function Fp(s,n){return(history.state?history.state.position-n:-1)+s}const yt=new Map;function sy(s,n){yt.set(s,n)}function ny(s){const n=yt.get(s);return yt.delete(s),n}let ey=()=>location.protocol+"//"+location.host;function Lc(s,n){const{pathname:e,search:l,hash:a}=n,t=s.indexOf("#");if(t>-1){let r=a.includes(s.slice(t))?s.slice(t).length:1,i=a.slice(r);return i[0]!=="/"&&(i="/"+i),fp(i,"")}return fp(e,s)+l+a}function ly(s,n,e,l){let a=[],t=[],o=null;const r=({state:y})=>{const v=Lc(s,location),f=e.value,b=n.value;let _=0;if(y){if(e.value=v,n.value=y,o&&o===f){o=null;return}_=b?y.position-b.position:0}else l(v);a.forEach(F=>{F(e.value,f,{delta:_,type:vl.pop,direction:_?_>0?ol.forward:ol.back:ol.unknown})})};function i(){o=e.value}function c(y){a.push(y);const v=()=>{const f=a.indexOf(y);f>-1&&a.splice(f,1)};return t.push(v),v}function B(){const{history:y}=window;y.state&&y.replaceState(fs({},y.state,{scroll:ha()}),"")}function u(){for(const y of t)y();t=[],window.removeEventListener("popstate",r),window.removeEventListener("beforeunload",B)}return window.addEventListener("popstate",r),window.addEventListener("beforeunload",B,{passive:!0}),{pauseListeners:i,listen:c,destroy:u}}function hp(s,n,e,l=!1,a=!1){return{back:s,current:n,forward:e,replaced:l,position:window.history.length,scroll:a?ha():null}}function ay(s){const{history:n,location:e}=window,l={value:Lc(s,e)},a={value:n.state};a.value||t(l.value,{back:null,current:l.value,forward:null,position:n.length-1,replaced:!0,scroll:null},!0);function t(i,c,B){const u=s.indexOf("#"),y=u>-1?(e.host&&document.querySelector("base")?s:s.slice(u))+i:ey()+s+i;try{n[B?"replaceState":"pushState"](c,"",y),a.value=c}catch(v){console.error(v),e[B?"replace":"assign"](y)}}function o(i,c){const B=fs({},n.state,hp(a.value.back,i,a.value.forward,!0),c,{position:a.value.position});t(i,B,!0),l.value=i}function r(i,c){const B=fs({},a.value,n.state,{forward:i,scroll:ha()});t(B.current,B,!0);const u=fs({},hp(l.value,i,null),{position:B.position+1},c);t(i,u,!1),l.value=i}return{location:l,state:a,push:r,replace:o}}function ty(s){s=Ku(s);const n=ay(s),e=ly(s,n.state,n.location,n.replace);function l(t,o=!0){o||e.pauseListeners(),history.go(t)}const a=fs({location:"",base:s,go:l,createHref:Zu.bind(null,s)},n,e);return Object.defineProperty(a,"location",{enumerable:!0,get:()=>n.location.value}),Object.defineProperty(a,"state",{enumerable:!0,get:()=>n.state.value}),a}function oy(s){return typeof s=="string"||s&&typeof s=="object"}function wc(s){return typeof s=="string"||typeof s=="symbol"}const On={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0},Ic=Symbol("");var gp;(function(s){s[s.aborted=4]="aborted",s[s.cancelled=8]="cancelled",s[s.duplicated=16]="duplicated"})(gp||(gp={}));function qe(s,n){return fs(new Error,{type:s,[Ic]:!0},n)}function In(s,n){return s instanceof Error&&Ic in s&&(n==null||!!(s.type&n))}const bp="[^/]+?",py={sensitive:!1,strict:!1,start:!0,end:!0},ry=/[.+*?^${}()[\]/\\]/g;function cy(s,n){const e=fs({},py,n),l=[];let a=e.start?"^":"";const t=[];for(const c of s){const B=c.length?[]:[90];e.strict&&!c.length&&(a+="/");for(let u=0;u<c.length;u++){const y=c[u];let v=40+(e.sensitive?.25:0);if(y.type===0)u||(a+="/"),a+=y.value.replace(ry,"\\$&"),v+=40;else if(y.type===1){const{value:f,repeatable:b,optional:_,regexp:F}=y;t.push({name:f,repeatable:b,optional:_});const I=F||bp;if(I!==bp){v+=10;try{new RegExp(`(${I})`)}catch(w){throw new Error(`Invalid custom RegExp for param "${f}" (${I}): `+w.message)}}let h=b?`((?:${I})(?:/(?:${I}))*)`:`(${I})`;u||(h=_&&c.length<2?`(?:/${h})`:"/"+h),_&&(h+="?"),a+=h,v+=20,_&&(v+=-8),b&&(v+=-20),I===".*"&&(v+=-50)}B.push(v)}l.push(B)}if(e.strict&&e.end){const c=l.length-1;l[c][l[c].length-1]+=.7000000000000001}e.strict||(a+="/?"),e.end?a+="$":e.strict&&(a+="(?:/|$)");const o=new RegExp(a,e.sensitive?"":"i");function r(c){const B=c.match(o),u={};if(!B)return null;for(let y=1;y<B.length;y++){const v=B[y]||"",f=t[y-1];u[f.name]=v&&f.repeatable?v.split("/"):v}return u}function i(c){let B="",u=!1;for(const y of s){(!u||!B.endsWith("/"))&&(B+="/"),u=!1;for(const v of y)if(v.type===0)B+=v.value;else if(v.type===1){const{value:f,repeatable:b,optional:_}=v,F=f in c?c[f]:"";if(fn(F)&&!b)throw new Error(`Provided param "${f}" is an array but it is not repeatable (* or + modifiers)`);const I=fn(F)?F.join("/"):F;if(!I)if(_)y.length<2&&(B.endsWith("/")?B=B.slice(0,-1):u=!0);else throw new Error(`Missing required param "${f}"`);B+=I}}return B||"/"}return{re:o,score:l,keys:t,parse:r,stringify:i}}function iy(s,n){let e=0;for(;e<s.length&&e<n.length;){const l=n[e]-s[e];if(l)return l;e++}return s.length<n.length?s.length===1&&s[0]===80?-1:1:s.length>n.length?n.length===1&&n[0]===80?1:-1:0}function By(s,n){let e=0;const l=s.score,a=n.score;for(;e<l.length&&e<a.length;){const t=iy(l[e],a[e]);if(t)return t;e++}if(Math.abs(a.length-l.length)===1){if(Dp(l))return 1;if(Dp(a))return-1}return a.length-l.length}function Dp(s){const n=s[s.length-1];return s.length>0&&n[n.length-1]<0}const dy={type:0,value:""},uy=/[a-zA-Z0-9_]/;function yy(s){if(!s)return[[]];if(s==="/")return[[dy]];if(!s.startsWith("/"))throw new Error(`Invalid path "${s}"`);function n(v){throw new Error(`ERR (${e})/"${c}": ${v}`)}let e=0,l=e;const a=[];let t;function o(){t&&a.push(t),t=[]}let r=0,i,c="",B="";function u(){c&&(e===0?t.push({type:0,value:c}):e===1||e===2||e===3?(t.length>1&&(i==="*"||i==="+")&&n(`A repeatable param (${c}) must be alone in its segment. eg: '/:ids+.`),t.push({type:1,value:c,regexp:B,repeatable:i==="*"||i==="+",optional:i==="*"||i==="?"})):n("Invalid state to consume buffer"),c="")}function y(){c+=i}for(;r<s.length;){if(i=s[r++],i==="\\"&&e!==2){l=e,e=4;continue}switch(e){case 0:i==="/"?(c&&u(),o()):i===":"?(u(),e=1):y();break;case 4:y(),e=l;break;case 1:i==="("?e=2:uy.test(i)?y():(u(),e=0,i!=="*"&&i!=="?"&&i!=="+"&&r--);break;case 2:i===")"?B[B.length-1]=="\\"?B=B.slice(0,-1)+i:e=3:B+=i;break;case 3:u(),e=0,i!=="*"&&i!=="?"&&i!=="+"&&r--,B="";break;default:n("Unknown state");break}}return e===2&&n(`Unfinished custom RegExp for param "${c}"`),u(),o(),a}function vy(s,n,e){const l=cy(yy(s.path),e),a=fs(l,{record:s,parent:n,children:[],alias:[]});return n&&!a.record.aliasOf==!n.record.aliasOf&&n.children.push(a),a}function my(s,n){const e=[],l=new Map;n=Lp({strict:!1,end:!0,sensitive:!1},n);function a(B){return l.get(B)}function t(B,u,y){const v=!y,f=Ay(B);f.aliasOf=y&&y.record;const b=Lp(n,B),_=[f];if("alias"in B){const h=typeof B.alias=="string"?[B.alias]:B.alias;for(const w of h)_.push(fs({},f,{components:y?y.record.components:f.components,path:w,aliasOf:y?y.record:f}))}let F,I;for(const h of _){const{path:w}=h;if(u&&w[0]!=="/"){const M=u.record.path,C=M[M.length-1]==="/"?"":"/";h.path=u.record.path+(w&&C+w)}if(F=vy(h,u,b),y?y.alias.push(F):(I=I||F,I!==F&&I.alias.push(F),v&&B.name&&!Cp(F)&&o(B.name)),f.children){const M=f.children;for(let C=0;C<M.length;C++)t(M[C],F,y&&y.children[C])}y=y||F,(F.record.components&&Object.keys(F.record.components).length||F.record.name||F.record.redirect)&&i(F)}return I?()=>{o(I)}:tl}function o(B){if(wc(B)){const u=l.get(B);u&&(l.delete(B),e.splice(e.indexOf(u),1),u.children.forEach(o),u.alias.forEach(o))}else{const u=e.indexOf(B);u>-1&&(e.splice(u,1),B.record.name&&l.delete(B.record.name),B.children.forEach(o),B.alias.forEach(o))}}function r(){return e}function i(B){let u=0;for(;u<e.length&&By(B,e[u])>=0&&(B.record.path!==e[u].record.path||!Tc(B,e[u]));)u++;e.splice(u,0,B),B.record.name&&!Cp(B)&&l.set(B.record.name,B)}function c(B,u){let y,v={},f,b;if("name"in B&&B.name){if(y=l.get(B.name),!y)throw qe(1,{location:B});b=y.record.name,v=fs(_p(u.params,y.keys.filter(I=>!I.optional).map(I=>I.name)),B.params&&_p(B.params,y.keys.map(I=>I.name))),f=y.stringify(v)}else if("path"in B)f=B.path,y=e.find(I=>I.re.test(f)),y&&(v=y.parse(f),b=y.record.name);else{if(y=u.name?l.get(u.name):e.find(I=>I.re.test(u.path)),!y)throw qe(1,{location:B,currentLocation:u});b=y.record.name,v=fs({},u.params,B.params),f=y.stringify(v)}const _=[];let F=y;for(;F;)_.unshift(F.record),F=F.parent;return{name:b,path:f,params:v,matched:_,meta:Ey(_)}}return s.forEach(B=>t(B)),{addRoute:t,resolve:c,removeRoute:o,getRoutes:r,getRecordMatcher:a}}function _p(s,n){const e={};for(const l of n)l in s&&(e[l]=s[l]);return e}function Ay(s){return{path:s.path,redirect:s.redirect,name:s.name,meta:s.meta||{},aliasOf:void 0,beforeEnter:s.beforeEnter,props:fy(s),children:s.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in s?s.components||null:s.component&&{default:s.component}}}function fy(s){const n={},e=s.props||!1;if("component"in s)n.default=e;else for(const l in s.components)n[l]=typeof e=="object"?e[l]:e;return n}function Cp(s){for(;s;){if(s.record.aliasOf)return!0;s=s.parent}return!1}function Ey(s){return s.reduce((n,e)=>fs(n,e.meta),{})}function Lp(s,n){const e={};for(const l in s)e[l]=l in n?n[l]:s[l];return e}function Tc(s,n){return n.children.some(e=>e===s||Tc(s,e))}const kc=/#/g,Fy=/&/g,hy=/\//g,gy=/=/g,by=/\?/g,Oc=/\+/g,Dy=/%5B/g,_y=/%5D/g,xc=/%5E/g,Cy=/%60/g,Sc=/%7B/g,Ly=/%7C/g,Pc=/%7D/g,wy=/%20/g;function no(s){return encodeURI(""+s).replace(Ly,"|").replace(Dy,"[").replace(_y,"]")}function Iy(s){return no(s).replace(Sc,"{").replace(Pc,"}").replace(xc,"^")}function vt(s){return no(s).replace(Oc,"%2B").replace(wy,"+").replace(kc,"%23").replace(Fy,"%26").replace(Cy,"`").replace(Sc,"{").replace(Pc,"}").replace(xc,"^")}function Ty(s){return vt(s).replace(gy,"%3D")}function ky(s){return no(s).replace(kc,"%23").replace(by,"%3F")}function Oy(s){return s==null?"":ky(s).replace(hy,"%2F")}function ia(s){try{return decodeURIComponent(""+s)}catch{}return""+s}function xy(s){const n={};if(s===""||s==="?")return n;const l=(s[0]==="?"?s.slice(1):s).split("&");for(let a=0;a<l.length;++a){const t=l[a].replace(Oc," "),o=t.indexOf("="),r=ia(o<0?t:t.slice(0,o)),i=o<0?null:ia(t.slice(o+1));if(r in n){let c=n[r];fn(c)||(c=n[r]=[c]),c.push(i)}else n[r]=i}return n}function wp(s){let n="";for(let e in s){const l=s[e];if(e=Ty(e),l==null){l!==void 0&&(n+=(n.length?"&":"")+e);continue}(fn(l)?l.map(t=>t&&vt(t)):[l&&vt(l)]).forEach(t=>{t!==void 0&&(n+=(n.length?"&":"")+e,t!=null&&(n+="="+t))})}return n}function Sy(s){const n={};for(const e in s){const l=s[e];l!==void 0&&(n[e]=fn(l)?l.map(a=>a==null?null:""+a):l==null?l:""+l)}return n}const Py=Symbol(""),Ip=Symbol(""),ga=Symbol(""),eo=Symbol(""),mt=Symbol("");function Ye(){let s=[];function n(l){return s.push(l),()=>{const a=s.indexOf(l);a>-1&&s.splice(a,1)}}function e(){s=[]}return{add:n,list:()=>s.slice(),reset:e}}function Kn(s,n,e,l,a){const t=l&&(l.enterCallbacks[a]=l.enterCallbacks[a]||[]);return()=>new Promise((o,r)=>{const i=u=>{u===!1?r(qe(4,{from:e,to:n})):u instanceof Error?r(u):oy(u)?r(qe(2,{from:n,to:u})):(t&&l.enterCallbacks[a]===t&&typeof u=="function"&&t.push(u),o())},c=s.call(l&&l.instances[a],n,e,i);let B=Promise.resolve(c);s.length<3&&(B=B.then(i)),B.catch(u=>r(u))})}function Qa(s,n,e,l){const a=[];for(const t of s)for(const o in t.components){let r=t.components[o];if(!(n!=="beforeRouteEnter"&&!t.instances[o]))if(Ry(r)){const c=(r.__vccOpts||r)[n];c&&a.push(Kn(c,e,l,t,o))}else{let i=r();a.push(()=>i.then(c=>{if(!c)return Promise.reject(new Error(`Couldn't resolve component "${o}" at "${t.path}"`));const B=Qu(c)?c.default:c;t.components[o]=B;const y=(B.__vccOpts||B)[n];return y&&Kn(y,e,l,t,o)()}))}}return a}function Ry(s){return typeof s=="object"||"displayName"in s||"props"in s||"__vccOpts"in s}function At(s){const n=vs(ga),e=vs(eo),l=D(()=>n.resolve(de(s.to))),a=D(()=>{const{matched:i}=l.value,{length:c}=i,B=i[c-1],u=e.matched;if(!B||!u.length)return-1;const y=u.findIndex(Ve.bind(null,B));if(y>-1)return y;const v=Tp(i[c-2]);return c>1&&Tp(B)===v&&u[u.length-1].path!==v?u.findIndex(Ve.bind(null,i[c-2])):y}),t=D(()=>a.value>-1&&Ny(e.params,l.value.params)),o=D(()=>a.value>-1&&a.value===e.matched.length-1&&Cc(e.params,l.value.params));function r(i={}){return qy(i)?n[de(s.replace)?"replace":"push"](de(s.to)).catch(tl):Promise.resolve()}return{route:l,href:D(()=>l.value.href),isActive:t,isExactActive:o,navigate:r}}const My=R({name:"RouterLink",compatConfig:{MODE:3},props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},useLink:At,setup(s,{slots:n}){const e=Fl(At(s)),{options:l}=vs(ga),a=D(()=>({[kp(s.activeClass,l.linkActiveClass,"router-link-active")]:e.isActive,[kp(s.exactActiveClass,l.linkExactActiveClass,"router-link-exact-active")]:e.isExactActive}));return()=>{const t=n.default&&n.default(e);return s.custom?t:p("a",{"aria-current":e.isExactActive?s.ariaCurrentValue:null,href:e.href,onClick:e.navigate,class:a.value},t)}}}),Vy=My;function qy(s){if(!(s.metaKey||s.altKey||s.ctrlKey||s.shiftKey)&&!s.defaultPrevented&&!(s.button!==void 0&&s.button!==0)){if(s.currentTarget&&s.currentTarget.getAttribute){const n=s.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(n))return}return s.preventDefault&&s.preventDefault(),!0}}function Ny(s,n){for(const e in n){const l=n[e],a=s[e];if(typeof l=="string"){if(l!==a)return!1}else if(!fn(a)||a.length!==l.length||l.some((t,o)=>t!==a[o]))return!1}return!0}function Tp(s){return s?s.aliasOf?s.aliasOf.path:s.path:""}const kp=(s,n,e)=>s??n??e,$y=R({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},compatConfig:{MODE:3},setup(s,{attrs:n,slots:e}){const l=vs(mt),a=D(()=>s.route||l.value),t=vs(Ip,0),o=D(()=>{let c=de(t);const{matched:B}=a.value;let u;for(;(u=B[c])&&!u.components;)c++;return c}),r=D(()=>a.value.matched[o.value]);cn(Ip,D(()=>o.value+1)),cn(Py,r),cn(mt,a);const i=U();return cs(()=>[i.value,r.value,s.name],([c,B,u],[y,v,f])=>{B&&(B.instances[u]=c,v&&v!==B&&c&&c===y&&(B.leaveGuards.size||(B.leaveGuards=v.leaveGuards),B.updateGuards.size||(B.updateGuards=v.updateGuards))),c&&B&&(!v||!Ve(B,v)||!y)&&(B.enterCallbacks[u]||[]).forEach(b=>b(c))},{flush:"post"}),()=>{const c=a.value,B=s.name,u=r.value,y=u&&u.components[B];if(!y)return Op(e.default,{Component:y,route:c});const v=u.props[B],f=v?v===!0?c.params:typeof v=="function"?v(c):v:null,_=p(y,fs({},f,n,{onVnodeUnmounted:F=>{F.component.isUnmounted&&(u.instances[B]=null)},ref:i}));return Op(e.default,{Component:_,route:c})||_}}});function Op(s,n){if(!s)return null;const e=s(n);return e.length===1?e[0]:e}const Rc=$y;function Qy(s){const n=my(s.routes,s),e=s.parseQuery||xy,l=s.stringifyQuery||wp,a=s.history,t=Ye(),o=Ye(),r=Ye(),i=Vs(On);let c=On;ge&&s.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const B=Na.bind(null,T=>""+T),u=Na.bind(null,Oy),y=Na.bind(null,ia);function v(T,z){let V,Y;return wc(T)?(V=n.getRecordMatcher(T),Y=z):Y=T,n.addRoute(Y,V)}function f(T){const z=n.getRecordMatcher(T);z&&n.removeRoute(z)}function b(){return n.getRoutes().map(T=>T.record)}function _(T){return!!n.getRecordMatcher(T)}function F(T,z){if(z=fs({},z||i.value),typeof T=="string"){const g=$a(e,T,z.path),L=n.resolve({path:g.path},z),k=a.createHref(g.fullPath);return fs(g,L,{params:y(L.params),hash:ia(g.hash),redirectedFrom:void 0,href:k})}let V;if("path"in T)V=fs({},T,{path:$a(e,T.path,z.path).path});else{const g=fs({},T.params);for(const L in g)g[L]==null&&delete g[L];V=fs({},T,{params:u(g)}),z.params=u(z.params)}const Y=n.resolve(V,z),ds=T.hash||"";Y.params=B(y(Y.params));const A=ju(l,fs({},T,{hash:Iy(ds),path:Y.path})),E=a.createHref(A);return fs({fullPath:A,hash:ds,query:l===wp?Sy(T.query):T.query||{}},Y,{redirectedFrom:void 0,href:E})}function I(T){return typeof T=="string"?$a(e,T,i.value.path):fs({},T)}function h(T,z){if(c!==T)return qe(8,{from:z,to:T})}function w(T){return W(T)}function M(T){return w(fs(I(T),{replace:!0}))}function C(T){const z=T.matched[T.matched.length-1];if(z&&z.redirect){const{redirect:V}=z;let Y=typeof V=="function"?V(T):V;return typeof Y=="string"&&(Y=Y.includes("?")||Y.includes("#")?Y=I(Y):{path:Y},Y.params={}),fs({query:T.query,hash:T.hash,params:"path"in Y?{}:T.params},Y)}}function W(T,z){const V=c=F(T),Y=i.value,ds=T.state,A=T.force,E=T.replace===!0,g=C(V);if(g)return W(fs(I(g),{state:typeof g=="object"?fs({},ds,g.state):ds,force:A,replace:E}),z||V);const L=V;L.redirectedFrom=z;let k;return!A&&Uu(l,Y,V)&&(k=qe(16,{to:L,from:Y}),en(Y,Y,!0,!1)),(k?Promise.resolve(k):$(L,Y)).catch(O=>In(O)?In(O,2)?O:hn(O):K(O,L,Y)).then(O=>{if(O){if(In(O,2))return W(fs({replace:E},I(O.to),{state:typeof O.to=="object"?fs({},ds,O.to.state):ds,force:A}),z||L)}else O=Q(L,Y,!0,E,ds);return Z(L,Y,O),O})}function N(T,z){const V=h(T,z);return V?Promise.reject(V):Promise.resolve()}function S(T){const z=wn.values().next().value;return z&&typeof z.runWithContext=="function"?z.runWithContext(T):T()}function $(T,z){let V;const[Y,ds,A]=Hy(T,z);V=Qa(Y.reverse(),"beforeRouteLeave",T,z);for(const g of Y)g.leaveGuards.forEach(L=>{V.push(Kn(L,T,z))});const E=N.bind(null,T,z);return V.push(E),xs(V).then(()=>{V=[];for(const g of t.list())V.push(Kn(g,T,z));return V.push(E),xs(V)}).then(()=>{V=Qa(ds,"beforeRouteUpdate",T,z);for(const g of ds)g.updateGuards.forEach(L=>{V.push(Kn(L,T,z))});return V.push(E),xs(V)}).then(()=>{V=[];for(const g of A)if(g.beforeEnter)if(fn(g.beforeEnter))for(const L of g.beforeEnter)V.push(Kn(L,T,z));else V.push(Kn(g.beforeEnter,T,z));return V.push(E),xs(V)}).then(()=>(T.matched.forEach(g=>g.enterCallbacks={}),V=Qa(A,"beforeRouteEnter",T,z),V.push(E),xs(V))).then(()=>{V=[];for(const g of o.list())V.push(Kn(g,T,z));return V.push(E),xs(V)}).catch(g=>In(g,8)?g:Promise.reject(g))}function Z(T,z,V){r.list().forEach(Y=>S(()=>Y(T,z,V)))}function Q(T,z,V,Y,ds){const A=h(T,z);if(A)return A;const E=z===On,g=ge?history.state:{};V&&(Y||E?a.replace(T.fullPath,fs({scroll:E&&g&&g.scroll},ds)):a.push(T.fullPath,ds)),i.value=T,en(T,z,V,E),hn()}let ns;function Ls(){ns||(ns=a.listen((T,z,V)=>{if(!gn.listening)return;const Y=F(T),ds=C(Y);if(ds){W(fs(ds,{replace:!0}),Y).catch(tl);return}c=Y;const A=i.value;ge&&sy(Fp(A.fullPath,V.delta),ha()),$(Y,A).catch(E=>In(E,12)?E:In(E,2)?(W(E.to,Y).then(g=>{In(g,20)&&!V.delta&&V.type===vl.pop&&a.go(-1,!1)}).catch(tl),Promise.reject()):(V.delta&&a.go(-V.delta,!1),K(E,Y,A))).then(E=>{E=E||Q(Y,A,!1),E&&(V.delta&&!In(E,8)?a.go(-V.delta,!1):V.type===vl.pop&&In(E,20)&&a.go(-1,!1)),Z(Y,A,E)}).catch(tl)}))}let Ds=Ye(),G=Ye(),es;function K(T,z,V){hn(T);const Y=G.list();return Y.length?Y.forEach(ds=>ds(T,z,V)):console.error(T),Promise.reject(T)}function Os(){return es&&i.value!==On?Promise.resolve():new Promise((T,z)=>{Ds.add([T,z])})}function hn(T){return es||(es=!T,Ls(),Ds.list().forEach(([z,V])=>T?V(T):z()),Ds.reset()),T}function en(T,z,V,Y){const{scrollBehavior:ds}=s;if(!ge||!ds)return Promise.resolve();const A=!V&&ny(Fp(T.fullPath,0))||(Y||!V)&&history.state&&history.state.scroll||null;return Mn().then(()=>ds(T,z,A)).then(E=>E&&Ju(E)).catch(E=>K(E,T,z))}const Ps=T=>a.go(T);let Ks;const wn=new Set,gn={currentRoute:i,listening:!0,addRoute:v,removeRoute:f,hasRoute:_,getRoutes:b,resolve:F,options:s,push:w,replace:M,go:Ps,back:()=>Ps(-1),forward:()=>Ps(1),beforeEach:t.add,beforeResolve:o.add,afterEach:r.add,onError:G.add,isReady:Os,install(T){const z=this;T.component("RouterLink",Vy),T.component("RouterView",Rc),T.config.globalProperties.$router=z,Object.defineProperty(T.config.globalProperties,"$route",{enumerable:!0,get:()=>de(i)}),ge&&!Ks&&i.value===On&&(Ks=!0,w(a.location).catch(ds=>{}));const V={};for(const ds in On)Object.defineProperty(V,ds,{get:()=>i.value[ds],enumerable:!0});T.provide(ga,z),T.provide(eo,br(V)),T.provide(mt,i);const Y=T.unmount;wn.add(T),T.unmount=function(){wn.delete(T),wn.size<1&&(c=On,ns&&ns(),ns=null,i.value=On,Ks=!1,es=!1),Y()}}};function xs(T){return T.reduce((z,V)=>z.then(()=>S(V)),Promise.resolve())}return gn}function Hy(s,n){const e=[],l=[],a=[],t=Math.max(n.matched.length,s.matched.length);for(let o=0;o<t;o++){const r=n.matched[o];r&&(s.matched.find(c=>Ve(c,r))?l.push(r):e.push(r));const i=s.matched[o];i&&(n.matched.find(c=>Ve(c,i))||a.push(i))}return[e,l,a]}function zs(){return vs(ga)}function Ln(){return vs(eo)}var Qs=Uint8Array,Ce=Uint16Array,zy=Int32Array,Mc=new Qs([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),Vc=new Qs([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),jy=new Qs([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),qc=function(s,n){for(var e=new Ce(31),l=0;l<31;++l)e[l]=n+=1<<s[l-1];for(var a=new zy(e[30]),l=1;l<30;++l)for(var t=e[l];t<e[l+1];++t)a[t]=t-e[l]<<5|l;return{b:e,r:a}},Nc=qc(Mc,2),$c=Nc.b,Uy=Nc.r;$c[28]=258,Uy[258]=28;var Gy=qc(Vc,0),Wy=Gy.b,ft=new Ce(32768);for(var gs=0;gs<32768;++gs){var Hn=(gs&43690)>>1|(gs&21845)<<1;Hn=(Hn&52428)>>2|(Hn&13107)<<2,Hn=(Hn&61680)>>4|(Hn&3855)<<4,ft[gs]=((Hn&65280)>>8|(Hn&255)<<8)>>1}var pl=function(s,n,e){for(var l=s.length,a=0,t=new Ce(n);a<l;++a)s[a]&&++t[s[a]-1];var o=new Ce(n);for(a=1;a<n;++a)o[a]=o[a-1]+t[a-1]<<1;var r;if(e){r=new Ce(1<<n);var i=15-n;for(a=0;a<l;++a)if(s[a])for(var c=a<<4|s[a],B=n-s[a],u=o[s[a]-1]++<<B,y=u|(1<<B)-1;u<=y;++u)r[ft[u]>>i]=c}else for(r=new Ce(l),a=0;a<l;++a)s[a]&&(r[a]=ft[o[s[a]-1]++]>>15-s[a]);return r},_l=new Qs(288);for(var gs=0;gs<144;++gs)_l[gs]=8;for(var gs=144;gs<256;++gs)_l[gs]=9;for(var gs=256;gs<280;++gs)_l[gs]=7;for(var gs=280;gs<288;++gs)_l[gs]=8;var Qc=new Qs(32);for(var gs=0;gs<32;++gs)Qc[gs]=5;var Ky=pl(_l,9,1),Yy=pl(Qc,5,1),Ha=function(s){for(var n=s[0],e=1;e<s.length;++e)s[e]>n&&(n=s[e]);return n},vn=function(s,n,e){var l=n/8|0;return(s[l]|s[l+1]<<8)>>(n&7)&e},za=function(s,n){var e=n/8|0;return(s[e]|s[e+1]<<8|s[e+2]<<16)>>(n&7)},Zy=function(s){return(s+7)/8|0},lo=function(s,n,e){return(n==null||n<0)&&(n=0),(e==null||e>s.length)&&(e=s.length),new Qs(s.subarray(n,e))},Xy=["unexpected EOF","invalid block type","invalid length/literal","invalid distance","stream finished","no stream handler",,"no callback","invalid UTF-8 data","extra field too long","date not in range 1980-2099","filename too long","stream finishing","invalid zip data"],tn=function(s,n,e){var l=new Error(n||Xy[s]);if(l.code=s,Error.captureStackTrace&&Error.captureStackTrace(l,tn),!e)throw l;return l},Jy=function(s,n,e,l){var a=s.length,t=l?l.length:0;if(!a||n.f&&!n.l)return e||new Qs(0);var o=!e,r=o||n.i!=2,i=n.i;o&&(e=new Qs(a*3));var c=function(ds){var A=e.length;if(ds>A){var E=new Qs(Math.max(A*2,ds));E.set(e),e=E}},B=n.f||0,u=n.p||0,y=n.b||0,v=n.l,f=n.d,b=n.m,_=n.n,F=a*8;do{if(!v){B=vn(s,u,1);var I=vn(s,u+1,3);if(u+=3,I)if(I==1)v=Ky,f=Yy,b=9,_=5;else if(I==2){var C=vn(s,u,31)+257,W=vn(s,u+10,15)+4,N=C+vn(s,u+5,31)+1;u+=14;for(var S=new Qs(N),$=new Qs(19),Z=0;Z<W;++Z)$[jy[Z]]=vn(s,u+Z*3,7);u+=W*3;for(var Q=Ha($),ns=(1<<Q)-1,Ls=pl($,Q,1),Z=0;Z<N;){var Ds=Ls[vn(s,u,ns)];u+=Ds&15;var h=Ds>>4;if(h<16)S[Z++]=h;else{var G=0,es=0;for(h==16?(es=3+vn(s,u,3),u+=2,G=S[Z-1]):h==17?(es=3+vn(s,u,7),u+=3):h==18&&(es=11+vn(s,u,127),u+=7);es--;)S[Z++]=G}}var K=S.subarray(0,C),Os=S.subarray(C);b=Ha(K),_=Ha(Os),v=pl(K,b,1),f=pl(Os,_,1)}else tn(1);else{var h=Zy(u)+4,w=s[h-4]|s[h-3]<<8,M=h+w;if(M>a){i&&tn(0);break}r&&c(y+w),e.set(s.subarray(h,M),y),n.b=y+=w,n.p=u=M*8,n.f=B;continue}if(u>F){i&&tn(0);break}}r&&c(y+131072);for(var hn=(1<<b)-1,en=(1<<_)-1,Ps=u;;Ps=u){var G=v[za(s,u)&hn],Ks=G>>4;if(u+=G&15,u>F){i&&tn(0);break}if(G||tn(2),Ks<256)e[y++]=Ks;else if(Ks==256){Ps=u,v=null;break}else{var wn=Ks-254;if(Ks>264){var Z=Ks-257,gn=Mc[Z];wn=vn(s,u,(1<<gn)-1)+$c[Z],u+=gn}var xs=f[za(s,u)&en],T=xs>>4;xs||tn(3),u+=xs&15;var Os=Wy[T];if(T>3){var gn=Vc[T];Os+=za(s,u)&(1<<gn)-1,u+=gn}if(u>F){i&&tn(0);break}r&&c(y+131072);var z=y+wn;if(y<Os){var V=t-Os,Y=Math.min(Os,z);for(V+y<0&&tn(3);y<Y;++y)e[y]=l[V+y]}for(;y<z;++y)e[y]=e[y-Os]}}n.l=v,n.p=Ps,n.b=y,n.f=B,v&&(B=1,n.m=b,n.d=f,n.n=_)}while(!B);return y!=e.length&&o?lo(e,0,y):e.subarray(0,y)},sv=new Qs(0),nv=function(s,n){return((s[0]&15)!=8||s[0]>>4>7||(s[0]<<8|s[1])%31)&&tn(6,"invalid zlib data"),(s[1]>>5&1)==+!n&&tn(6,"invalid zlib data: "+(s[1]&32?"need":"unexpected")+" dictionary"),(s[1]>>3&4)+2};function ev(s,n){return Jy(s.subarray(nv(s,n&&n.dictionary),-4),{i:2},n&&n.out,n&&n.dictionary)}var xp=typeof TextEncoder<"u"&&new TextEncoder,Et=typeof TextDecoder<"u"&&new TextDecoder,lv=0;try{Et.decode(sv,{stream:!0}),lv=1}catch{}var av=function(s){for(var n="",e=0;;){var l=s[e++],a=(l>127)+(l>223)+(l>239);if(e+a>s.length)return{s:n,r:lo(s,e-1)};a?a==3?(l=((l&15)<<18|(s[e++]&63)<<12|(s[e++]&63)<<6|s[e++]&63)-65536,n+=String.fromCharCode(55296|l>>10,56320|l&1023)):a&1?n+=String.fromCharCode((l&31)<<6|s[e++]&63):n+=String.fromCharCode((l&15)<<12|(s[e++]&63)<<6|s[e++]&63):n+=String.fromCharCode(l)}};function tv(s,n){if(n){for(var e=new Qs(s.length),l=0;l<s.length;++l)e[l]=s.charCodeAt(l);return e}if(xp)return xp.encode(s);for(var a=s.length,t=new Qs(s.length+(s.length>>1)),o=0,r=function(B){t[o++]=B},l=0;l<a;++l){if(o+5>t.length){var i=new Qs(o+8+(a-l<<1));i.set(t),t=i}var c=s.charCodeAt(l);c<128||n?r(c):c<2048?(r(192|c>>6),r(128|c&63)):c>55295&&c<57344?(c=65536+(c&1047552)|s.charCodeAt(++l)&1023,r(240|c>>18),r(128|c>>12&63),r(128|c>>6&63),r(128|c&63)):(r(224|c>>12),r(128|c>>6&63),r(128|c&63))}return lo(t,0,o)}function ov(s,n){if(n){for(var e="",l=0;l<s.length;l+=16384)e+=String.fromCharCode.apply(null,s.subarray(l,l+16384));return e}else{if(Et)return Et.decode(s);var a=av(s),t=a.s,e=a.r;return e.length&&tn(8),t}}const ts=({name:s="",color:n="currentColor"},{slots:e})=>{var l;return p("svg",{xmlns:"http://www.w3.org/2000/svg",class:["icon",`${s}-icon`],viewBox:"0 0 1024 1024",fill:n,"aria-label":`${s} icon`},(l=e.default)==null?void 0:l.call(e))};ts.displayName="IconBase";const Hc=({size:s=48,stroke:n=4,wrapper:e=!0,height:l=2*s})=>{const a=p("svg",{xmlns:"http://www.w3.org/2000/svg",width:s,height:s,preserveAspectRatio:"xMidYMid",viewBox:"25 25 50 50"},[p("animateTransform",{attributeName:"transform",type:"rotate",dur:"2s",keyTimes:"0;1",repeatCount:"indefinite",values:"0;360"}),p("circle",{cx:"50",cy:"50",r:"20",fill:"none",stroke:"currentColor","stroke-width":n,"stroke-linecap":"round"},[p("animate",{attributeName:"stroke-dasharray",dur:"1.5s",keyTimes:"0;0.5;1",repeatCount:"indefinite",values:"1,200;90,200;1,200"}),p("animate",{attributeName:"stroke-dashoffset",dur:"1.5s",keyTimes:"0;0.5;1",repeatCount:"indefinite",values:"0;-35px;-125px"})])]);return e?p("div",{class:"loading-icon-wrapper",style:`display:flex;align-items:center;justify-content:center;height:${l}px`},a):a};Hc.displayName="LoadingIcon";const zc=(s,{slots:n})=>{var e;return(e=n.default)==null?void 0:e.call(n)},pv=s=>[/\((ipad);[-\w),; ]+apple/i,/applecoremedia\/[\w.]+ \((ipad)/i,/\b(ipad)\d\d?,\d\d?[;\]].+ios/i].some(n=>n.test(s)),rv=s=>[/ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,/cfnetwork\/.+darwin/i].some(n=>n.test(s)),cv=s=>[/(mac os x) ?([\w. ]*)/i,/(macintosh|mac_powerpc\b)(?!.+haiku)/i].some(n=>n.test(s)),ao=(s="")=>{if(s){if(typeof s=="number")return new Date(s);const n=Date.parse(s.toString());if(!Number.isNaN(n))return new Date(n)}return null},ba=(s,n)=>{let e=1;for(let l=0;l<s.length;l++)e+=s.charCodeAt(l),e+=e<<10,e^=e>>6;return e+=e<<3,e^=e>>11,e%n},jc=Array.isArray,iv=s=>typeof s=="function",Bv=s=>typeof s=="string";var to=s=>/^(https?:)?\/\//.test(s),dv=/.md((\?|#).*)?$/,uv=(s,n="/")=>!!(to(s)||s.startsWith("/")&&!s.startsWith(n)&&!dv.test(s)),Uc=s=>Object.prototype.toString.call(s)==="[object Object]";function yv(){const s=U(!1);return je()&&As(()=>{s.value=!0}),s}function vv(s){return yv(),D(()=>!!s())}const ja=s=>typeof s=="number",Rn=s=>typeof s=="string",ne=(s,n)=>Rn(s)&&s.startsWith(n),jl=(s,n)=>Rn(s)&&s.endsWith(n),Ge=Object.entries,mv=Object.fromEntries,nn=Object.keys,Av=s=>(s.endsWith(".md")&&(s=`${s.slice(0,-3)}.html`),!s.endsWith("/")&&!s.endsWith(".html")&&(s=`${s}.html`),s=s.replace(/(^|\/)(?:README|index).html$/i,"$1"),s),Gc=s=>{const[n,e=""]=s.split("#");return n?`${Av(n)}${e?`#${e}`:""}`:s},Sp=s=>Uc(s)&&Rn(s.name),ml=(s,n=!1)=>s?jc(s)?s.map(e=>Rn(e)?{name:e}:Sp(e)?e:null).filter(e=>e!==null):Rn(s)?[{name:s}]:Sp(s)?[s]:(console.error(`Expect "author" to be \`AuthorInfo[] | AuthorInfo | string[] | string ${n?"":"| false"} | undefined\`, but got`,s),[]):[],Wc=(s,n)=>{if(s){if(jc(s)&&s.every(Rn))return s;if(Rn(s))return[s];console.error(`Expect ${n||"value"} to be \`string[] | string | undefined\`, but got`,s)}return[]},Kc=s=>Wc(s,"category"),Yc=s=>Wc(s,"tag"),Cl=s=>ne(s,"/");let fv=class{constructor(){this.messageElements={};const n="message-container",e=document.getElementById(n);e?this.containerElement=e:(this.containerElement=document.createElement("div"),this.containerElement.id=n,document.body.appendChild(this.containerElement))}pop(n,e=2e3){const l=document.createElement("div"),a=Date.now();return l.className="message move-in",l.innerHTML=n,this.containerElement.appendChild(l),this.messageElements[a]=l,e>0&&setTimeout(()=>{this.close(a)},e),a}close(n){if(n){const e=this.messageElements[n];e.classList.remove("move-in"),e.classList.add("move-out"),e.addEventListener("animationend",()=>{e.remove(),delete this.messageElements[n]})}else nn(this.messageElements).forEach(e=>this.close(Number(e)))}destroy(){document.body.removeChild(this.containerElement)}};const Zc=/#.*$/u,Ev=s=>{const n=Zc.exec(s);return n?n[0]:""},Pp=s=>decodeURI(s).replace(Zc,"").replace(/(index)?\.html$/i,"").replace(/(README|index)?\.md$/i,""),Xc=(s,n)=>{if(n===void 0)return!1;const e=Pp(s.path),l=Pp(n),a=Ev(n);return a?a===s.hash&&(!l||e===l):e===l},Rp=s=>{const n=atob(s);return ov(ev(tv(n,!0)))},Fv=s=>to(s)?s:`https://github.com/${s}`,Jc=s=>!to(s)||/github\.com/.test(s)?"GitHub":/bitbucket\.org/.test(s)?"Bitbucket":/gitlab\.com/.test(s)?"GitLab":/gitee\.com/.test(s)?"Gitee":null,Ne=(s,...n)=>{const e=s.resolve(...n),l=e.matched[e.matched.length-1];if(!(l!=null&&l.redirect))return e;const{redirect:a}=l,t=iv(a)?a(e):a,o=Bv(t)?{path:t}:t;return Ne(s,{hash:e.hash,query:e.query,params:e.params,...o})},hv=s=>{var n;if(!(s.metaKey||s.altKey||s.ctrlKey||s.shiftKey)&&!s.defaultPrevented&&!(s.button!==void 0&&s.button!==0)&&!(s.currentTarget&&((n=s.currentTarget.getAttribute("target"))!=null&&n.match(/\b_blank\b/i))))return s.preventDefault(),!0},ks=({to:s="",class:n="",...e},{slots:l})=>{var r;const a=zs(),t=Gc(s),o=(i={})=>hv(i)?a.push(s).catch():Promise.resolve();return p("a",{...e,class:["vp-link",n],href:ne(t,"/")?bs(t):t,onClick:o},(r=l.default)==null?void 0:r.call(l))};ks.displayName="VPLink";const si=()=>p(ts,{name:"github"},()=>p("path",{d:"M511.957 21.333C241.024 21.333 21.333 240.981 21.333 512c0 216.832 140.544 400.725 335.574 465.664 24.49 4.395 32.256-10.07 32.256-23.083 0-11.69.256-44.245 0-85.205-136.448 29.61-164.736-64.64-164.736-64.64-22.315-56.704-54.4-71.765-54.4-71.765-44.587-30.464 3.285-29.824 3.285-29.824 49.195 3.413 75.179 50.517 75.179 50.517 43.776 75.008 114.816 53.333 142.762 40.79 4.523-31.66 17.152-53.377 31.19-65.537-108.971-12.458-223.488-54.485-223.488-242.602 0-53.547 19.114-97.323 50.517-131.67-5.035-12.33-21.93-62.293 4.779-129.834 0 0 41.258-13.184 134.912 50.346a469.803 469.803 0 0 1 122.88-16.554c41.642.213 83.626 5.632 122.88 16.554 93.653-63.488 134.784-50.346 134.784-50.346 26.752 67.541 9.898 117.504 4.864 129.834 31.402 34.347 50.474 78.123 50.474 131.67 0 188.586-114.73 230.016-224.042 242.09 17.578 15.232 33.578 44.672 33.578 90.454v135.85c0 13.142 7.936 27.606 32.854 22.87C862.25 912.597 1002.667 728.747 1002.667 512c0-271.019-219.648-490.667-490.71-490.667z"}));si.displayName="GitHubIcon";const ni=()=>p(ts,{name:"gitlab"},()=>p("path",{d:"M229.333 78.688C223.52 62 199.895 62 193.895 78.688L87.958 406.438h247.5c-.188 0-106.125-327.75-106.125-327.75zM33.77 571.438c-4.875 15 .563 31.687 13.313 41.25l464.812 345L87.77 406.438zm301.5-165 176.813 551.25 176.812-551.25zm655.125 165-54-165-424.312 551.25 464.812-345c12.938-9.563 18.188-26.25 13.5-41.25zM830.27 78.688c-5.812-16.688-29.437-16.688-35.437 0l-106.125 327.75h247.5z"}));ni.displayName="GitLabIcon";const ei=()=>p(ts,{name:"gitee"},()=>p("path",{d:"M512 992C246.92 992 32 777.08 32 512S246.92 32 512 32s480 214.92 480 480-214.92 480-480 480zm242.97-533.34H482.39a23.7 23.7 0 0 0-23.7 23.7l-.03 59.28c0 13.08 10.59 23.7 23.7 23.7h165.96a23.7 23.7 0 0 1 23.7 23.7v11.85a71.1 71.1 0 0 1-71.1 71.1H375.71a23.7 23.7 0 0 1-23.7-23.7V423.11a71.1 71.1 0 0 1 71.1-71.1h331.8a23.7 23.7 0 0 0 23.7-23.7l.06-59.25a23.73 23.73 0 0 0-23.7-23.73H423.11a177.78 177.78 0 0 0-177.78 177.75v331.83c0 13.08 10.62 23.7 23.7 23.7h349.62a159.99 159.99 0 0 0 159.99-159.99V482.33a23.7 23.7 0 0 0-23.7-23.7z"}));ei.displayName="GiteeIcon";const li=()=>p(ts,{name:"bitbucket"},()=>p("path",{d:"M575.256 490.862c6.29 47.981-52.005 85.723-92.563 61.147-45.714-20.004-45.714-92.562-1.133-113.152 38.29-23.442 93.696 7.424 93.696 52.005zm63.451-11.996c-10.276-81.152-102.29-134.839-177.152-101.156-47.433 21.138-79.433 71.424-77.129 124.562 2.853 69.705 69.157 126.866 138.862 120.576S647.3 548.571 638.708 478.83zm136.558-309.723c-25.161-33.134-67.986-38.839-105.728-45.13-106.862-17.151-216.576-17.7-323.438 1.134-35.438 5.706-75.447 11.996-97.719 43.996 36.572 34.304 88.576 39.424 135.424 45.129 84.553 10.862 171.447 11.447 256 .585 47.433-5.705 99.987-10.276 135.424-45.714zm32.585 591.433c-16.018 55.99-6.839 131.438-66.304 163.986-102.29 56.576-226.304 62.867-338.87 42.862-59.43-10.862-129.135-29.696-161.72-85.723-14.3-54.858-23.442-110.848-32.585-166.84l3.438-9.142 10.276-5.157c170.277 112.567 408.576 112.567 579.438 0 26.844 8.01 6.84 40.558 6.29 60.014zm103.424-549.157c-19.42 125.148-41.728 249.71-63.415 374.272-6.29 36.572-41.728 57.162-71.424 72.558-106.862 53.724-231.424 62.866-348.562 50.286-79.433-8.558-160.585-29.696-225.134-79.433-30.28-23.443-30.28-63.415-35.986-97.134-20.005-117.138-42.862-234.277-57.161-352.585 6.839-51.42 64.585-73.728 107.447-89.71 57.16-21.138 118.272-30.866 178.87-36.571 129.134-12.58 261.157-8.01 386.304 28.562 44.581 13.13 92.563 31.415 122.844 69.705 13.714 17.7 9.143 40.01 6.29 60.014z"}));li.displayName="BitbucketIcon";const ai=()=>p(ts,{name:"source"},()=>p("path",{d:"M601.92 475.2c0 76.428-8.91 83.754-28.512 99.594-14.652 11.88-43.956 14.058-78.012 16.434-18.81 1.386-40.392 2.97-62.172 6.534-18.612 2.97-36.432 9.306-53.064 17.424V299.772c37.818-21.978 63.36-62.766 63.36-109.692 0-69.894-56.826-126.72-126.72-126.72S190.08 120.186 190.08 190.08c0 46.926 25.542 87.714 63.36 109.692v414.216c-37.818 21.978-63.36 62.766-63.36 109.692 0 69.894 56.826 126.72 126.72 126.72s126.72-56.826 126.72-126.72c0-31.086-11.286-59.598-29.7-81.576 13.266-9.504 27.522-17.226 39.996-19.206 16.038-2.574 32.868-3.762 50.688-5.148 48.312-3.366 103.158-7.326 148.896-44.55 61.182-49.698 74.25-103.158 75.24-187.902V475.2h-126.72zM316.8 126.72c34.848 0 63.36 28.512 63.36 63.36s-28.512 63.36-63.36 63.36-63.36-28.512-63.36-63.36 28.512-63.36 63.36-63.36zm0 760.32c-34.848 0-63.36-28.512-63.36-63.36s28.512-63.36 63.36-63.36 63.36 28.512 63.36 63.36-28.512 63.36-63.36 63.36zM823.68 158.4h-95.04V63.36h-126.72v95.04h-95.04v126.72h95.04v95.04h126.72v-95.04h95.04z"}));ai.displayName="SourceIcon";const dn=(s,n)=>{var l;const e=(l=(n==null?void 0:n._instance)||je())==null?void 0:l.appContext.components;return e?s in e||un(s)in e||El(un(s))in e:!1},gv=()=>vv(()=>typeof window<"u"&&window.navigator&&"userAgent"in window.navigator),ti=()=>{const s=gv();return D(()=>s.value&&/\b(?:Android|iPhone)/i.test(navigator.userAgent))},le=s=>{const n=Cn();return D(()=>s[n.value])};function Mp(s,n){var e;const l=Vs();return Mr(()=>{l.value=s()},{...n,flush:(e=n==null?void 0:n.flush)!=null?e:"sync"}),ee(l)}function oo(s,n){let e,l,a;const t=U(!0),o=()=>{t.value=!0,a()};cs(s,o,{flush:"sync"});const r=typeof n=="function"?n:n.get,i=typeof n=="function"?void 0:n.set,c=Ir((B,u)=>(l=B,a=u,{get(){return t.value&&(e=r(),t.value=!1),l(),e},set(y){i==null||i(y)}}));return Object.isExtensible(c)&&(c.trigger=o),c}function Ae(s){return Br()?(td(s),!0):!1}function Us(s){return typeof s=="function"?s():de(s)}const Ll=typeof window<"u"&&typeof document<"u";typeof WorkerGlobalScope<"u"&&globalThis instanceof WorkerGlobalScope;const bv=Object.prototype.toString,Dv=s=>bv.call(s)==="[object Object]",Pn=()=>{},Ft=_v();function _v(){var s,n;return Ll&&((s=window==null?void 0:window.navigator)==null?void 0:s.userAgent)&&(/iP(ad|hone|od)/.test(window.navigator.userAgent)||((n=window==null?void 0:window.navigator)==null?void 0:n.maxTouchPoints)>2&&/iPad|Macintosh/.test(window==null?void 0:window.navigator.userAgent))}function po(s,n){function e(...l){return new Promise((a,t)=>{Promise.resolve(s(()=>n.apply(this,l),{fn:n,thisArg:this,args:l})).then(a).catch(t)})}return e}const oi=s=>s();function Cv(s,n={}){let e,l,a=Pn;const t=r=>{clearTimeout(r),a(),a=Pn};return r=>{const i=Us(s),c=Us(n.maxWait);return e&&t(e),i<=0||c!==void 0&&c<=0?(l&&(t(l),l=null),Promise.resolve(r())):new Promise((B,u)=>{a=n.rejectOnCancel?u:B,c&&!l&&(l=setTimeout(()=>{e&&t(e),l=null,B(r())},c)),e=setTimeout(()=>{l&&t(l),l=null,B(r())},i)})}}function Lv(s,n=!0,e=!0,l=!1){let a=0,t,o=!0,r=Pn,i;const c=()=>{t&&(clearTimeout(t),t=void 0,r(),r=Pn)};return u=>{const y=Us(s),v=Date.now()-a,f=()=>i=u();return c(),y<=0?(a=Date.now(),f()):(v>y&&(e||!o)?(a=Date.now(),f()):n&&(i=new Promise((b,_)=>{r=l?_:b,t=setTimeout(()=>{a=Date.now(),o=!0,b(f()),c()},Math.max(0,y-v))})),!e&&!t&&(t=setTimeout(()=>o=!0,y)),o=!1,i)}}function wv(s=oi){const n=U(!0);function e(){n.value=!1}function l(){n.value=!0}const a=(...t)=>{n.value&&s(...t)};return{isActive:ee(n),pause:e,resume:l,eventFilter:a}}function Iv(s){let n;function e(){return n||(n=s()),n}return e.reset=async()=>{const l=n;n=void 0,l&&await l},e}function Tv(s){return s||je()}function kv(...s){if(s.length!==1)return He(...s);const n=s[0];return typeof n=="function"?ee(Ir(()=>({get:n,set:Pn}))):U(n)}function Ov(s,n=200,e={}){return po(Cv(n,e),s)}function xv(s,n=200,e=!1,l=!0,a=!1){return po(Lv(n,e,l,a),s)}function Sv(s,n,e={}){const{eventFilter:l=oi,...a}=e;return cs(s,po(l,n),a)}function Pv(s,n,e={}){const{eventFilter:l,...a}=e,{eventFilter:t,pause:o,resume:r,isActive:i}=wv(l);return{stop:Sv(s,n,{...a,eventFilter:t}),pause:o,resume:r,isActive:i}}function Da(s,n=!0,e){Tv()?As(s,e):n?s():Mn(s)}function Rv(s,n,e={}){const{immediate:l=!0}=e,a=U(!1);let t=null;function o(){t&&(clearTimeout(t),t=null)}function r(){a.value=!1,o()}function i(...c){o(),a.value=!0,t=setTimeout(()=>{a.value=!1,t=null,s(...c)},Us(n))}return l&&(a.value=!0,Ll&&i()),Ae(r),{isPending:ee(a),start:i,stop:r}}function Ba(s=!1,n={}){const{truthyValue:e=!0,falsyValue:l=!1}=n,a=qs(s),t=U(s);function o(r){if(arguments.length)return t.value=r,t.value;{const i=Us(e);return t.value=t.value===i?Us(l):i,t.value}}return a?o:[t,o]}function Js(s){var n;const e=Us(s);return(n=e==null?void 0:e.$el)!=null?n:e}const En=Ll?window:void 0,pi=Ll?window.document:void 0,ri=Ll?window.navigator:void 0;function ws(...s){let n,e,l,a;if(typeof s[0]=="string"||Array.isArray(s[0])?([e,l,a]=s,n=En):[n,e,l,a]=s,!n)return Pn;Array.isArray(e)||(e=[e]),Array.isArray(l)||(l=[l]);const t=[],o=()=>{t.forEach(B=>B()),t.length=0},r=(B,u,y,v)=>(B.addEventListener(u,y,v),()=>B.removeEventListener(u,y,v)),i=cs(()=>[Js(n),Us(a)],([B,u])=>{if(o(),!B)return;const y=Dv(u)?{...u}:u;t.push(...e.flatMap(v=>l.map(f=>r(B,v,f,y))))},{immediate:!0,flush:"post"}),c=()=>{i(),o()};return Ae(c),c}let Vp=!1;function Mv(s,n,e={}){const{window:l=En,ignore:a=[],capture:t=!0,detectIframe:o=!1}=e;if(!l)return Pn;Ft&&!Vp&&(Vp=!0,Array.from(l.document.body.children).forEach(y=>y.addEventListener("click",Pn)),l.document.documentElement.addEventListener("click",Pn));let r=!0;const i=y=>a.some(v=>{if(typeof v=="string")return Array.from(l.document.querySelectorAll(v)).some(f=>f===y.target||y.composedPath().includes(f));{const f=Js(v);return f&&(y.target===f||y.composedPath().includes(f))}}),B=[ws(l,"click",y=>{const v=Js(s);if(!(!v||v===y.target||y.composedPath().includes(v))){if(y.detail===0&&(r=!i(y)),!r){r=!0;return}n(y)}},{passive:!0,capture:t}),ws(l,"pointerdown",y=>{const v=Js(s);r=!i(y)&&!!(v&&!y.composedPath().includes(v))},{passive:!0}),o&&ws(l,"blur",y=>{setTimeout(()=>{var v;const f=Js(s);((v=l.document.activeElement)==null?void 0:v.tagName)==="IFRAME"&&!(f!=null&&f.contains(l.document.activeElement))&&n(y)},0)})].filter(Boolean);return()=>B.forEach(y=>y())}function Vv(){const s=U(!1);return je()&&As(()=>{s.value=!0}),s}function wl(s){const n=Vv();return D(()=>(n.value,!!s()))}function ci(s,n={}){const{window:e=En}=n,l=wl(()=>e&&"matchMedia"in e&&typeof e.matchMedia=="function");let a;const t=U(!1),o=c=>{t.value=c.matches},r=()=>{a&&("removeEventListener"in a?a.removeEventListener("change",o):a.removeListener(o))},i=Mr(()=>{l.value&&(r(),a=e.matchMedia(Us(s)),"addEventListener"in a?a.addEventListener("change",o):a.addListener(o),t.value=a.matches)});return Ae(()=>{i(),r(),a=void 0}),t}function qp(s,n={}){const{controls:e=!1,navigator:l=ri}=n,a=wl(()=>l&&"permissions"in l);let t;const o=typeof s=="string"?{name:s}:s,r=U(),i=()=>{t&&(r.value=t.state)},c=Iv(async()=>{if(a.value){if(!t)try{t=await l.permissions.query(o),ws(t,"change",i),i()}catch{r.value="prompt"}return t}});return c(),e?{state:r,isSupported:a,query:c}:r}function qv(s={}){const{navigator:n=ri,read:e=!1,source:l,copiedDuring:a=1500,legacy:t=!1}=s,o=wl(()=>n&&"clipboard"in n),r=qp("clipboard-read"),i=qp("clipboard-write"),c=D(()=>o.value||t),B=U(""),u=U(!1),y=Rv(()=>u.value=!1,a);function v(){o.value&&r.value!=="denied"?n.clipboard.readText().then(F=>{B.value=F}):B.value=_()}c.value&&e&&ws(["copy","cut"],v);async function f(F=Us(l)){c.value&&F!=null&&(o.value&&i.value!=="denied"?await n.clipboard.writeText(F):b(F),B.value=F,u.value=!0,y.start())}function b(F){const I=document.createElement("textarea");I.value=F??"",I.style.position="absolute",I.style.opacity="0",document.body.appendChild(I),I.select(),document.execCommand("copy"),I.remove()}function _(){var F,I,h;return(h=(I=(F=document==null?void 0:document.getSelection)==null?void 0:F.call(document))==null?void 0:I.toString())!=null?h:""}return{isSupported:c,text:B,copied:u,copy:f}}const Ul=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},Gl="__vueuse_ssr_handlers__",Nv=$v();function $v(){return Gl in Ul||(Ul[Gl]=Ul[Gl]||{}),Ul[Gl]}function Qv(s,n){return Nv[s]||n}function Hv(s){return s==null?"any":s instanceof Set?"set":s instanceof Map?"map":s instanceof Date?"date":typeof s=="boolean"?"boolean":typeof s=="string"?"string":typeof s=="object"?"object":Number.isNaN(s)?"any":"number"}const zv={boolean:{read:s=>s==="true",write:s=>String(s)},object:{read:s=>JSON.parse(s),write:s=>JSON.stringify(s)},number:{read:s=>Number.parseFloat(s),write:s=>String(s)},any:{read:s=>s,write:s=>String(s)},string:{read:s=>s,write:s=>String(s)},map:{read:s=>new Map(JSON.parse(s)),write:s=>JSON.stringify(Array.from(s.entries()))},set:{read:s=>new Set(JSON.parse(s)),write:s=>JSON.stringify(Array.from(s))},date:{read:s=>new Date(s),write:s=>s.toISOString()}},Np="vueuse-storage";function fe(s,n,e,l={}){var a;const{flush:t="pre",deep:o=!0,listenToStorageChanges:r=!0,writeDefaults:i=!0,mergeDefaults:c=!1,shallow:B,window:u=En,eventFilter:y,onError:v=S=>{console.error(S)},initOnMounted:f}=l,b=(B?Vs:U)(typeof n=="function"?n():n);if(!e)try{e=Qv("getDefaultStorage",()=>{var S;return(S=En)==null?void 0:S.localStorage})()}catch(S){v(S)}if(!e)return b;const _=Us(n),F=Hv(_),I=(a=l.serializer)!=null?a:zv[F],{pause:h,resume:w}=Pv(b,()=>M(b.value),{flush:t,deep:o,eventFilter:y});return u&&r&&Da(()=>{ws(u,"storage",N),ws(u,Np,W),f&&N()}),f||N(),b;function M(S){try{if(S==null)e.removeItem(s);else{const $=I.write(S),Z=e.getItem(s);Z!==$&&(e.setItem(s,$),u&&u.dispatchEvent(new CustomEvent(Np,{detail:{key:s,oldValue:Z,newValue:$,storageArea:e}})))}}catch($){v($)}}function C(S){const $=S?S.newValue:e.getItem(s);if($==null)return i&&_!=null&&e.setItem(s,I.write(_)),_;if(!S&&c){const Z=I.read($);return typeof c=="function"?c(Z,_):F==="object"&&!Array.isArray(Z)?{..._,...Z}:Z}else return typeof $!="string"?$:I.read($)}function W(S){N(S.detail)}function N(S){if(!(S&&S.storageArea!==e)){if(S&&S.key==null){b.value=_;return}if(!(S&&S.key!==s)){h();try{(S==null?void 0:S.newValue)!==I.write(b.value)&&(b.value=C(S))}catch($){v($)}finally{S?Mn(w):w()}}}}}function jv(s){return ci("(prefers-color-scheme: dark)",s)}function Uv(s,n,e={}){const{window:l=En,...a}=e;let t;const o=wl(()=>l&&"ResizeObserver"in l),r=()=>{t&&(t.disconnect(),t=void 0)},i=D(()=>Array.isArray(s)?s.map(u=>Js(u)):[Js(s)]),c=cs(i,u=>{if(r(),o.value&&l){t=new ResizeObserver(n);for(const y of u)y&&t.observe(y,a)}},{immediate:!0,flush:"post",deep:!0}),B=()=>{r(),c()};return Ae(B),{isSupported:o,stop:B}}function Gv(s,n={width:0,height:0},e={}){const{window:l=En,box:a="content-box"}=e,t=D(()=>{var u,y;return(y=(u=Js(s))==null?void 0:u.namespaceURI)==null?void 0:y.includes("svg")}),o=U(n.width),r=U(n.height),{stop:i}=Uv(s,([u])=>{const y=a==="border-box"?u.borderBoxSize:a==="content-box"?u.contentBoxSize:u.devicePixelContentBoxSize;if(l&&t.value){const v=Js(s);if(v){const f=l.getComputedStyle(v);o.value=Number.parseFloat(f.width),r.value=Number.parseFloat(f.height)}}else if(y){const v=Array.isArray(y)?y:[y];o.value=v.reduce((f,{inlineSize:b})=>f+b,0),r.value=v.reduce((f,{blockSize:b})=>f+b,0)}else o.value=u.contentRect.width,r.value=u.contentRect.height},e);Da(()=>{const u=Js(s);u&&(o.value="offsetWidth"in u?u.offsetWidth:n.width,r.value="offsetHeight"in u?u.offsetHeight:n.height)});const c=cs(()=>Js(s),u=>{o.value=u?n.width:0,r.value=u?n.height:0});function B(){i(),c()}return{width:o,height:r,stop:B}}const $p=["fullscreenchange","webkitfullscreenchange","webkitendfullscreen","mozfullscreenchange","MSFullscreenChange"];function ro(s,n={}){const{document:e=pi,autoExit:l=!1}=n,a=D(()=>{var F;return(F=Js(s))!=null?F:e==null?void 0:e.querySelector("html")}),t=U(!1),o=D(()=>["requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","webkitEnterFullScreen","webkitRequestFullScreen","mozRequestFullScreen","msRequestFullscreen"].find(F=>e&&F in e||a.value&&F in a.value)),r=D(()=>["exitFullscreen","webkitExitFullscreen","webkitExitFullScreen","webkitCancelFullScreen","mozCancelFullScreen","msExitFullscreen"].find(F=>e&&F in e||a.value&&F in a.value)),i=D(()=>["fullScreen","webkitIsFullScreen","webkitDisplayingFullscreen","mozFullScreen","msFullscreenElement"].find(F=>e&&F in e||a.value&&F in a.value)),c=["fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement"].find(F=>e&&F in e),B=wl(()=>a.value&&e&&o.value!==void 0&&r.value!==void 0&&i.value!==void 0),u=()=>c?(e==null?void 0:e[c])===a.value:!1,y=()=>{if(i.value){if(e&&e[i.value]!=null)return e[i.value];{const F=a.value;if((F==null?void 0:F[i.value])!=null)return!!F[i.value]}}return!1};async function v(){if(!(!B.value||!t.value)){if(r.value)if((e==null?void 0:e[r.value])!=null)await e[r.value]();else{const F=a.value;(F==null?void 0:F[r.value])!=null&&await F[r.value]()}t.value=!1}}async function f(){if(!B.value||t.value)return;y()&&await v();const F=a.value;o.value&&(F==null?void 0:F[o.value])!=null&&(await F[o.value](),t.value=!0)}async function b(){await(t.value?v():f())}const _=()=>{const F=y();(!F||F&&u())&&(t.value=F)};return ws(e,$p,_,!1),ws(()=>Js(a),$p,_,!1),l&&Ae(v),{isSupported:B,isFullscreen:t,enter:f,exit:v,toggle:b}}function Ua(s){return typeof Window<"u"&&s instanceof Window?s.document.documentElement:typeof Document<"u"&&s instanceof Document?s.documentElement:s}function cm(s,n,e={}){const{window:l=En}=e;return fe(s,n,l==null?void 0:l.localStorage,e)}function ii(s){const n=window.getComputedStyle(s);if(n.overflowX==="scroll"||n.overflowY==="scroll"||n.overflowX==="auto"&&s.clientWidth<s.scrollWidth||n.overflowY==="auto"&&s.clientHeight<s.scrollHeight)return!0;{const e=s.parentNode;return!e||e.tagName==="BODY"?!1:ii(e)}}function Wv(s){const n=s||window.event,e=n.target;return ii(e)?!1:n.touches.length>1?!0:(n.preventDefault&&n.preventDefault(),!1)}const Wl=new WeakMap;function co(s,n=!1){const e=U(n);let l=null,a;cs(kv(s),r=>{const i=Ua(Us(r));if(i){const c=i;Wl.get(c)||Wl.set(c,a),e.value&&(c.style.overflow="hidden")}},{immediate:!0});const t=()=>{const r=Ua(Us(s));!r||e.value||(Ft&&(l=ws(r,"touchmove",i=>{Wv(i)},{passive:!1})),r.style.overflow="hidden",e.value=!0)},o=()=>{var r;const i=Ua(Us(s));!i||!e.value||(Ft&&(l==null||l()),i.style.overflow=(r=Wl.get(i))!=null?r:"",Wl.delete(i),e.value=!1)};return Ae(o),D({get(){return e.value},set(r){r?t():o()}})}function Bi(s,n,e={}){const{window:l=En}=e;return fe(s,n,l==null?void 0:l.sessionStorage,e)}let Kv=0;function Yv(s,n={}){const e=U(!1),{document:l=pi,immediate:a=!0,manual:t=!1,id:o=`vueuse_styletag_${++Kv}`}=n,r=U(s);let i=()=>{};const c=()=>{if(!l)return;const u=l.getElementById(o)||l.createElement("style");u.isConnected||(u.id=o,n.media&&(u.media=n.media),l.head.appendChild(u)),!e.value&&(i=cs(r,y=>{u.textContent=y},{immediate:!0}),e.value=!0)},B=()=>{!l||!e.value||(i(),l.head.removeChild(l.getElementById(o)),e.value=!1)};return a&&!t&&Da(c),t||Ae(B),{id:o,css:r,unload:B,load:c,isLoaded:ee(e)}}function Zv(s={}){const{window:n=En,behavior:e="auto"}=s;if(!n)return{x:U(0),y:U(0)};const l=U(n.scrollX),a=U(n.scrollY),t=D({get(){return l.value},set(r){scrollTo({left:r,behavior:e})}}),o=D({get(){return a.value},set(r){scrollTo({top:r,behavior:e})}});return ws(n,"scroll",()=>{l.value=n.scrollX,a.value=n.scrollY},{capture:!1,passive:!0}),{x:t,y:o}}function Xv(s={}){const{window:n=En,initialWidth:e=Number.POSITIVE_INFINITY,initialHeight:l=Number.POSITIVE_INFINITY,listenOrientation:a=!0,includeScrollbar:t=!0}=s,o=U(e),r=U(l),i=()=>{n&&(t?(o.value=n.innerWidth,r.value=n.innerHeight):(o.value=n.document.documentElement.clientWidth,r.value=n.document.documentElement.clientHeight))};if(i(),Da(i),ws("resize",i,{passive:!0}),a){const c=ci("(orientation: portrait)");cs(c,()=>i())}return{width:o,height:r}}var Jv=R({name:"FontIcon",props:{icon:{type:String,default:""},color:{type:String,default:""},size:{type:[String,Number],default:""}},setup(s){const n=D(()=>{const l=["font-icon icon"],a=`iconfont icon-${s.icon}`;return l.push(a),l}),e=D(()=>{const l={};return s.color&&(l.color=s.color),s.size&&(l["font-size"]=Number.isNaN(Number(s.size))?s.size:`${s.size}px`),nn(l).length?l:null});return()=>s.icon?p("span",{key:s.icon,class:n.value,style:e.value}):null}});const di=({type:s="info",text:n="",vertical:e,color:l},{slots:a})=>{var t;return p("span",{class:["vp-badge",s,{diy:l}],style:{verticalAlign:e??!1,backgroundColor:l??!1}},((t=a.default)==null?void 0:t.call(a))||n)};di.displayName="Badge";const ui=({title:s,desc:n="",logo:e,background:l,color:a,link:t})=>{const o=[e?p("img",{class:"vp-card-logo",src:bs(e),loading:"lazy","no-view":""}):null,p("div",{class:"vp-card-content"},[p("div",{class:"vp-card-title",innerHTML:s}),p("hr"),p("div",{class:"vp-card-desc",innerHTML:n})])],r={};return l&&(r.background=l),a&&(r.color=a),t?yl(t)?p("a",{class:"vp-card",href:t,target:"_blank",style:r},o):p(ks,{to:t,class:"vp-card",style:r},()=>o):p("div",{class:"vp-card",style:r},o)};ui.displayName="VPCard";const yi=()=>p(ts,{name:"back-to-top"},()=>[p("path",{d:"M512 843.2c-36.2 0-66.4-13.6-85.8-21.8-10.8-4.6-22.6 3.6-21.8 15.2l7 102c.4 6.2 7.6 9.4 12.6 5.6l29-22c3.6-2.8 9-1.8 11.4 2l41 64.2c3 4.8 10.2 4.8 13.2 0l41-64.2c2.4-3.8 7.8-4.8 11.4-2l29 22c5 3.8 12.2.6 12.6-5.6l7-102c.8-11.6-11-20-21.8-15.2-19.6 8.2-49.6 21.8-85.8 21.8z"}),p("path",{d:"m795.4 586.2-96-98.2C699.4 172 513 32 513 32S324.8 172 324.8 488l-96 98.2c-3.6 3.6-5.2 9-4.4 14.2L261.2 824c1.8 11.4 14.2 17 23.6 10.8L419 744s41.4 40 94.2 40c52.8 0 92.2-40 92.2-40l134.2 90.8c9.2 6.2 21.6.6 23.6-10.8l37-223.8c.4-5.2-1.2-10.4-4.8-14zM513 384c-34 0-61.4-28.6-61.4-64s27.6-64 61.4-64c34 0 61.4 28.6 61.4 64S547 384 513 384z"})]);yi.displayName="BackToTopIcon";var s1={"/":{backToTop:"返回顶部"}},n1=R({name:"BackToTop",props:{threshold:{type:Number,default:100},noProgress:Boolean},setup(s){const n=hs(),e=le(s1),l=Vs(),{height:a}=Gv(l),{height:t}=Xv(),{y:o}=Zv(),r=D(()=>n.value.backToTop!==!1&&o.value>s.threshold),i=D(()=>o.value/(a.value-t.value)*100);return As(()=>{l.value=document.body}),()=>p(se,{name:"fade"},()=>r.value?p("button",{type:"button",class:"vp-back-to-top-button","aria-label":e.value.backToTop,"data-balloon-pos":"left",onClick:()=>{window.scrollTo({top:0,behavior:"smooth"})}},[s.noProgress?null:p("span",{class:"vp-scroll-progress",role:"progressbar","aria-labelledby":"loadinglabel","aria-valuenow":i.value},p("svg",p("circle",{cx:"50%",cy:"50%",style:{"stroke-dasharray":`calc(${Math.PI*i.value}% - ${4*Math.PI}px) calc(${Math.PI*100}% - ${4*Math.PI}px)`}}))),p(yi)]):null)}});const e1=Fn({enhance:({app:s})=>{dn("FontIcon")||s.component("FontIcon",Jv),dn("Badge")||s.component("Badge",di),dn("VPCard")||s.component("VPCard",ui)},setup:()=>{Yv(`  @import url("https://at.alicdn.com/t/c/font_2410206_5vb9zlyghj.css");
  `)},rootComponents:[()=>p(n1,{})]});function l1(s,n,e){var l,a,t;n===void 0&&(n=50),e===void 0&&(e={});var o=(l=e.isImmediate)!=null&&l,r=(a=e.callback)!=null&&a,i=e.maxWait,c=Date.now(),B=[];function u(){if(i!==void 0){var v=Date.now()-c;if(v+n>=i)return i-v}return n}var y=function(){var v=[].slice.call(arguments),f=this;return new Promise(function(b,_){var F=o&&t===void 0;if(t!==void 0&&clearTimeout(t),t=setTimeout(function(){if(t=void 0,c=Date.now(),!o){var h=s.apply(f,v);r&&r(h),B.forEach(function(w){return(0,w.resolve)(h)}),B=[]}},u()),F){var I=s.apply(f,v);return r&&r(I),b(I)}B.push({resolve:b,reject:_})})};return y.cancel=function(v){t!==void 0&&clearTimeout(t),B.forEach(function(f){return(0,f.reject)(v)}),B=[]},y}const a1=({headerLinkSelector:s,headerAnchorSelector:n,delay:e,offset:l=5})=>{const a=zs(),o=l1(()=>{var b,_;const r=Math.max(window.scrollY,document.documentElement.scrollTop,document.body.scrollTop);if(Math.abs(r-0)<l){Qp(a,"");return}const c=window.innerHeight+r,B=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),u=Math.abs(B-c)<l,y=Array.from(document.querySelectorAll(s)),f=Array.from(document.querySelectorAll(n)).filter(F=>y.some(I=>I.hash===F.hash));for(let F=0;F<f.length;F++){const I=f[F],h=f[F+1],w=r>=(((b=I.parentElement)==null?void 0:b.offsetTop)??0)-l,M=!h||r<(((_=h.parentElement)==null?void 0:_.offsetTop)??0)-l;if(!(w&&M))continue;const W=decodeURIComponent(a.currentRoute.value.hash),N=decodeURIComponent(I.hash);if(W===N)return;if(u){for(let S=F+1;S<f.length;S++)if(W===decodeURIComponent(f[S].hash))return}Qp(a,N);return}},e);As(()=>{window.addEventListener("scroll",o)}),Gt(()=>{window.removeEventListener("scroll",o)})},Qp=async(s,n)=>{const{scrollBehavior:e}=s.options;s.options.scrollBehavior=void 0,await s.replace({query:s.currentRoute.value.query,hash:n}).finally(()=>s.options.scrollBehavior=e)},t1=".vp-sidebar-link, .toc-link",o1=".header-anchor",p1=200,r1=5,c1=Fn({setup(){a1({headerLinkSelector:t1,headerAnchorSelector:o1,delay:p1,offset:r1})}});let vi=s=>rs(s.title)?{title:s.title}:null;const mi=Symbol(""),i1=s=>{vi=s},B1=()=>vs(mi),d1=s=>{s.provide(mi,vi)};var u1={"/":{title:"目录",empty:"暂无目录"}},y1=R({name:"AutoCatalog",props:{base:{type:String,default:""},level:{type:Number,default:3},index:Boolean,hideHeading:Boolean},setup(s){const n=B1(),e=le(u1),l=Bs(),a=zs(),t=bc(),o=U(a.getRoutes().map(({meta:c,path:B})=>{const u=n(c);if(!u)return null;const y=B.split("/").length;return{level:jl(B,"/")?y-2:y-1,base:B.replace(/\/[^/]+\/?$/,"/"),path:B,...u}}).filter(c=>Uc(c)&&rs(c.title))),r=()=>{const c=s.base?Iu(uc(s.base)):l.value.path.replace(/\/[^/]+$/,"/"),B=c.split("/").length-2,u=[];return o.value.filter(({level:y,path:v})=>{if(!ne(v,c)||v===c)return!1;if(c==="/"){const f=nn(t.value.locales).filter(b=>b!=="/");if(v==="/404.html"||f.some(b=>ne(v,b)))return!1}return y-B<=s.level&&(jl(v,".html")&&!jl(v,"/index.html")||jl(v,"/"))}).sort(({title:y,level:v,order:f},{title:b,level:_,order:F})=>v-_||(ja(f)?ja(F)?f>0?F>0?f-F:-1:F<0?f-F:1:f:ja(F)?F:y.localeCompare(b))).forEach(y=>{var b;const{base:v,level:f}=y;switch(f-B){case 1:u.push(y);break;case 2:{const _=u.find(F=>F.path===v);_&&(_.children??(_.children=[])).push(y);break}default:{const _=u.find(F=>F.path===v.replace(/\/[^/]+\/$/,"/"));if(_){const F=(b=_.children)==null?void 0:b.find(I=>I.path===v);F&&(F.children??(F.children=[])).push(y)}}}}),u},i=D(()=>r());return()=>{const c=i.value.some(B=>B.children);return p("div",{class:["vp-catalog-wrapper",{index:s.index}]},[s.hideHeading?null:p("h2",{class:"vp-catalog-main-title"},e.value.title),i.value.length?p(s.index?"ol":"ul",{class:["vp-catalogs",{deep:c}]},i.value.map(({children:B=[],title:u,path:y,content:v})=>{const f=p(ks,{class:"vp-catalog-title",to:y},()=>v?p(v):u);return p("li",{class:"vp-catalog"},c?[p("h3",{id:u,class:["vp-catalog-child-title",{"has-children":B.length}]},[p("a",{href:`#${u}`,class:"header-anchor","aria-hidden":!0},"#"),f]),B.length?p(s.index?"ol":"ul",{class:"vp-child-catalogs"},B.map(({children:b=[],content:_,path:F,title:I})=>p("li",{class:"vp-child-catalog"},[p("div",{class:["vp-catalog-sub-title",{"has-children":b.length}]},[p("a",{href:`#${I}`,class:"header-anchor"},"#"),p(ks,{class:"vp-catalog-title",to:F},()=>_?p(_):I)]),b.length?p(s.index?"ol":"div",{class:s.index?"vp-sub-catalogs":"vp-sub-catalogs-wrapper"},b.map(({content:h,path:w,title:M})=>s.index?p("li",{class:"vp-sub-catalog"},p(ks,{to:w},()=>h?p(h):M)):p(ks,{class:"vp-sub-catalog-link",to:w},()=>h?p(h):M))):null]))):null]:p("div",{class:"vp-catalog-child-title"},f))})):p("p",{class:"vp-empty-catalog"},e.value.empty)])}}}),v1=Fn({enhance:({app:s})=>{d1(s),dn("AutoCatalog",s)||s.component("AutoCatalog",y1)}});const m1=p("svg",{class:"external-link-icon",xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"},[p("path",{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}),p("polygon",{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"})]),Ai=R({name:"ExternalLinkIcon",props:{locales:{type:Object,required:!1,default:()=>({})}},setup(s){const n=Cn(),e=D(()=>s.locales[n.value]??{openInNewWindow:"open in new window"});return()=>p("span",[m1,p("span",{class:"external-link-icon-sr-only"},e.value.openInNewWindow)])}});var A1={};const f1=A1,E1=Fn({enhance({app:s}){s.component("ExternalLinkIcon",p(Ai,{locales:f1}))}});/**
 * NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT
 */const us={settings:{minimum:.08,easing:"ease",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,barSelector:'[role="bar"]',parent:"body",template:'<div class="bar" role="bar"></div>'},status:null,set:s=>{const n=us.isStarted();s=Ga(s,us.settings.minimum,1),us.status=s===1?null:s;const e=us.render(!n),l=e.querySelector(us.settings.barSelector),a=us.settings.speed,t=us.settings.easing;return e.offsetWidth,F1(o=>{Kl(l,{transform:"translate3d("+Hp(s)+"%,0,0)",transition:"all "+a+"ms "+t}),s===1?(Kl(e,{transition:"none",opacity:"1"}),e.offsetWidth,setTimeout(function(){Kl(e,{transition:"all "+a+"ms linear",opacity:"0"}),setTimeout(function(){us.remove(),o()},a)},a)):setTimeout(()=>o(),a)}),us},isStarted:()=>typeof us.status=="number",start:()=>{us.status||us.set(0);const s=()=>{setTimeout(()=>{us.status&&(us.trickle(),s())},us.settings.trickleSpeed)};return us.settings.trickle&&s(),us},done:s=>!s&&!us.status?us:us.inc(.3+.5*Math.random()).set(1),inc:s=>{let n=us.status;return n?(typeof s!="number"&&(s=(1-n)*Ga(Math.random()*n,.1,.95)),n=Ga(n+s,0,.994),us.set(n)):us.start()},trickle:()=>us.inc(Math.random()*us.settings.trickleRate),render:s=>{if(us.isRendered())return document.getElementById("nprogress");zp(document.documentElement,"nprogress-busy");const n=document.createElement("div");n.id="nprogress",n.innerHTML=us.settings.template;const e=n.querySelector(us.settings.barSelector),l=s?"-100":Hp(us.status||0),a=document.querySelector(us.settings.parent);return Kl(e,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),a!==document.body&&zp(a,"nprogress-custom-parent"),a==null||a.appendChild(n),n},remove:()=>{jp(document.documentElement,"nprogress-busy"),jp(document.querySelector(us.settings.parent),"nprogress-custom-parent");const s=document.getElementById("nprogress");s&&h1(s)},isRendered:()=>!!document.getElementById("nprogress")},Ga=(s,n,e)=>s<n?n:s>e?e:s,Hp=s=>(-1+s)*100,F1=function(){const s=[];function n(){const e=s.shift();e&&e(n)}return function(e){s.push(e),s.length===1&&n()}}(),Kl=function(){const s=["Webkit","O","Moz","ms"],n={};function e(o){return o.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,function(r,i){return i.toUpperCase()})}function l(o){const r=document.body.style;if(o in r)return o;let i=s.length;const c=o.charAt(0).toUpperCase()+o.slice(1);let B;for(;i--;)if(B=s[i]+c,B in r)return B;return o}function a(o){return o=e(o),n[o]??(n[o]=l(o))}function t(o,r,i){r=a(r),o.style[r]=i}return function(o,r){for(const i in r){const c=r[i];c!==void 0&&Object.prototype.hasOwnProperty.call(r,i)&&t(o,i,c)}}}(),fi=(s,n)=>(typeof s=="string"?s:io(s)).indexOf(" "+n+" ")>=0,zp=(s,n)=>{const e=io(s),l=e+n;fi(e,n)||(s.className=l.substring(1))},jp=(s,n)=>{const e=io(s);if(!fi(s,n))return;const l=e.replace(" "+n+" "," ");s.className=l.substring(1,l.length-1)},io=s=>(" "+(s.className||"")+" ").replace(/\s+/gi," "),h1=s=>{s&&s.parentNode&&s.parentNode.removeChild(s)},g1=()=>{As(()=>{const s=zs(),n=new Set;n.add(s.currentRoute.value.path),s.beforeEach(e=>{n.has(e.path)||us.start()}),s.afterEach(e=>{n.add(e.path),us.done()})})},b1=Fn({setup(){g1()}}),D1=JSON.parse('{"encrypt":{"config":{"/demo/encrypt.html":["$2a$10$SAFMkgEm5L3wE.xZsW1UZOgqonw.9eoFhSCOPkPBntO92WLhiLVii"]}},"author":{"name":"张威","url":"https://iszhwei.gitee.io"},"logo":"logo.svg","repo":"https://githubfast.com/iszhwei","docsDir":"src","footer":"","displayFooter":true,"blog":{"description":"Zhang Wei","intro":"/intro.html","medias":{"Email":"mailto:iszhwei@163.com","Gitee":"https://gitee.com/iszhwei","GitHub":"https://githubfast.com/iszhwei"}},"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","lastUpdated":"上次编辑于","contributors":"贡献者","editLink":"在 GitHub 上编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"encryptLocales":{"iconLabel":"文章已加密","placeholder":"输入密码","remember":"记住密码","errorHint":"请输入正确的密码"},"routeLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家","openInNewWindow":"Open in new window"},"navbar":[{"text":"c/c++","icon":"c","link":"/ccpp/"},{"text":"操作系统","icon":"linux","link":"/linux/"},{"text":"网络编程","icon":"network","link":"/network/"},{"text":"MySQL","icon":"mysql","link":"/mysql/"},{"text":"Redis","icon":"mysql","link":"/redis/"},{"text":"算法与数据结构","icon":"any","link":"/algo/"},{"text":"随笔","icon":"write","link":"/others/"},{"text":"工具分享","icon":"config","link":"tool"}],"sidebar":{"/linux/":"structure","/algo/":"structure","/redis/":"structure","/network/":"structure","/others/":"structure","/ccpp/":"structure","/mysql/":"structure"}}}}'),_1=U(D1),Ei=()=>_1,Fi=Symbol(""),C1=()=>{const s=vs(Fi);if(!s)throw new Error("useThemeLocaleData() is called without provider.");return s},L1=(s,n)=>{const{locales:e,...l}=s;return{...l,...e==null?void 0:e[n]}},w1=Fn({enhance({app:s}){const n=Ei(),e=s._context.provides[so],l=D(()=>L1(n.value,e.value));s.provide(Fi,l),Object.defineProperties(s.config.globalProperties,{$theme:{get(){return n.value}},$themeLocale:{get(){return l.value}}})}});var I1={"/":{copy:"复制代码",copied:"已复制",hint:"复制成功"}},T1=['.theme-hope-content div[class*="language-"] pre'];const k1=800,O1=2e3,x1=I1,S1=T1,Up=!1,Wa=new Map,P1=()=>{const{copy:s}=qv({legacy:!0}),n=le(x1),e=Bs(),l=ti(),a=r=>{if(!r.hasAttribute("copy-code-registered")){const i=document.createElement("button");i.type="button",i.classList.add("copy-code-button"),i.innerHTML='<div class="copy-icon" />',i.setAttribute("aria-label",n.value.copy),i.setAttribute("data-copied",n.value.copied),r.parentElement&&r.parentElement.insertBefore(i,r),r.setAttribute("copy-code-registered","")}},t=()=>Mn().then(()=>new Promise(r=>{setTimeout(()=>{S1.forEach(i=>{document.querySelectorAll(i).forEach(a)}),r()},k1)})),o=(r,i,c)=>{let{innerText:B=""}=i;/language-(shellscript|shell|bash|sh|zsh)/.test(r.classList.toString())&&(B=B.replace(/^ *(\$|>) /gm,"")),s(B).then(()=>{c.classList.add("copied"),clearTimeout(Wa.get(c));const u=setTimeout(()=>{c.classList.remove("copied"),c.blur(),Wa.delete(c)},O1);Wa.set(c,u)})};As(()=>{(!l.value||Up)&&t(),ws("click",r=>{const i=r.target;if(i.matches('div[class*="language-"] > button.copy')){const c=i.parentElement,B=i.nextElementSibling;B&&o(c,B,i)}else if(i.matches('div[class*="language-"] div.copy-icon')){const c=i.parentElement,B=c.parentElement,u=c.nextElementSibling;u&&o(B,u,c)}}),cs(()=>e.value.path,()=>{(!l.value||Up)&&t()})})};var R1=Fn({setup:()=>{P1()}});const Yl=fe("VUEPRESS_CODE_TAB_STORE",{});var M1=R({name:"CodeTabs",props:{active:{type:Number,default:0},data:{type:Array,required:!0},id:{type:String,required:!0},tabId:{type:String,default:""}},slots:Object,setup(s,{slots:n}){const e=U(s.active),l=Vs([]),a=()=>{s.tabId&&(Yl.value[s.tabId]=s.data[e.value].id)},t=(c=e.value)=>{e.value=c<l.value.length-1?c+1:0,l.value[e.value].focus()},o=(c=e.value)=>{e.value=c>0?c-1:l.value.length-1,l.value[e.value].focus()},r=(c,B)=>{c.key===" "||c.key==="Enter"?(c.preventDefault(),e.value=B):c.key==="ArrowRight"?(c.preventDefault(),t()):c.key==="ArrowLeft"&&(c.preventDefault(),o()),s.tabId&&(Yl.value[s.tabId]=s.data[e.value].id)},i=()=>{if(s.tabId){const c=s.data.findIndex(({id:B})=>Yl.value[s.tabId]===B);if(c!==-1)return c}return s.active};return As(()=>{e.value=i(),cs(()=>Yl.value[s.tabId],(c,B)=>{if(s.tabId&&c!==B){const u=s.data.findIndex(({id:y})=>y===c);u!==-1&&(e.value=u)}})}),()=>s.data.length?p("div",{class:"vp-code-tabs"},[p("div",{class:"vp-code-tabs-nav",role:"tablist"},s.data.map(({id:c},B)=>{const u=B===e.value;return p("button",{type:"button",ref:y=>{y&&(l.value[B]=y)},class:["vp-code-tab-nav",{active:u}],role:"tab","aria-controls":`codetab-${s.id}-${B}`,"aria-selected":u,onClick:()=>{e.value=B,a()},onKeydown:y=>r(y,B)},n[`title${B}`]({value:c,isActive:u}))})),s.data.map(({id:c},B)=>{const u=B===e.value;return p("div",{class:["vp-code-tab",{active:u}],id:`codetab-${s.id}-${B}`,role:"tabpanel","aria-expanded":u},[p("div",{class:"vp-code-tab-title"},n[`title${B}`]({value:c,isActive:u})),n[`tab${B}`]({value:c,isActive:u})])})]):null}});const hi=({active:s=!1},{slots:n})=>{var e;return p("div",{class:["code-group-item",{active:s}],"aria-selected":s},(e=n.default)==null?void 0:e.call(n))};hi.displayName="CodeGroupItem";const V1=R({name:"CodeGroup",slots:Object,setup(s,{slots:n}){const e=U(-1),l=Vs([]),a=(r=e.value)=>{e.value=r<l.value.length-1?r+1:0,l.value[e.value].focus()},t=(r=e.value)=>{e.value=r>0?r-1:l.value.length-1,l.value[e.value].focus()},o=(r,i)=>{r.key===" "||r.key==="Enter"?(r.preventDefault(),e.value=i):r.key==="ArrowRight"?(r.preventDefault(),a(i)):r.key==="ArrowLeft"&&(r.preventDefault(),t(i))};return()=>{var i;const r=(((i=n.default)==null?void 0:i.call(n))||[]).filter(c=>c.type.name==="CodeGroupItem").map(c=>(c.props===null&&(c.props={}),c));return r.length===0?null:(e.value<0||e.value>r.length-1?(e.value=r.findIndex(c=>"active"in c.props),e.value===-1&&(e.value=0)):r.forEach((c,B)=>{c.props.active=B===e.value}),p("div",{class:"code-group"},[p("div",{class:"code-group-nav"},r.map((c,B)=>{const u=B===e.value;return p("button",{type:"button",ref:y=>{y&&(l.value[B]=y)},class:["code-group-nav-tab",{active:u}],"aria-pressed":u,"aria-expanded":u,onClick:()=>{e.value=B},onKeydown:y=>o(y,B)},c.props.title)})),r]))}}}),q1='<svg class="codepen-icon" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg"><path d="M123.429 668L468 897.714V692.571L277.143 565.143zM88 585.714L198.286 512 88 438.286v147.428zm468 312L900.571 668 746.857 565.143 556 692.57v205.143zM512 616l155.429-104L512 408 356.571 512zM277.143 458.857L468 331.43V126.286L123.429 356zM825.714 512L936 585.714V438.286zm-78.857-53.143L900.571 356 556 126.286v205.143zM1024 356v312q0 23.429-19.429 36.571l-468 312Q524.571 1024 512 1024t-24.571-7.429l-468-312Q0 691.43 0 668V356q0-23.429 19.429-36.571l468-312Q499.429 0 512 0t24.571 7.429l468 312Q1024 332.57 1024 356z"/></svg>',N1='<svg class="jsfiddle-icon" viewBox="0 0 1170 1024" xmlns="http://www.w3.org/2000/svg"><path d="M1028.571 441.143q63.429 26.286 102.572 83.143t39.143 126.571q0 93.714-67.429 160.286T940 877.714q-2.286 0-6.571-.285t-6-.286H232q-97.143-5.714-164.571-71.714T0 645.143q0-62.857 31.429-116t84-84q-6.858-22.286-6.858-46.857 0-65.715 46.858-112T269.143 240q54.286 0 98.286 33.143 42.857-88 127.142-141.714t186.572-53.715q94.857 0 174.857 46t126.571 124.857 46.572 172q0 3.429-.286 10.286t-.286 10.286zm-761.142 152q0 69.714 48 110.286T434.286 744q78.285 0 137.143-56.571-9.143-11.429-27.143-32.286t-24.857-28.857q-38.286 37.143-82.286 37.143-31.429 0-53.429-19.143t-22-50q0-30.286 22-49.715T436 525.143q25.143 0 48.286 12T526 568.57t37.143 42.858 39.428 46.857 44 42.857T702 732.57t69.429 12q69.142 0 116.857-40.857T936 594.857q0-69.143-48-109.714T769.714 444.57Q688 444.571 632 500l53.143 61.714q37.714-36.571 81.143-36.571 29.714 0 52.571 18.857t22.857 48q0 32.571-21.143 52.286T766.857 664q-24.571 0-47.143-12t-41.143-31.429-37.428-42.857-39.714-46.857T557.143 488 502 456.571t-67.714-12q-69.715 0-118.286 40.286t-48.571 108.286z"/></svg>';var $1={useBabel:!1,jsLib:[],cssLib:[],codepenLayout:"left",codepenEditors:"101",babel:"https://unpkg.com/@babel/standalone/babel.min.js",vue:"https://unpkg.com/vue/dist/vue.global.prod.js",react:"https://unpkg.com/react/umd/react.production.min.js",reactDOM:"https://unpkg.com/react-dom/umd/react-dom.production.min.js"};const Ka=$1,Gp={html:{types:["html","slim","haml","md","markdown","vue"],map:{html:"none",vue:"none",md:"markdown"}},js:{types:["js","javascript","coffee","coffeescript","ts","typescript","ls","livescript"],map:{js:"none",javascript:"none",coffee:"coffeescript",ls:"livescript",ts:"typescript"}},css:{types:["css","less","sass","scss","stylus","styl"],map:{css:"none",styl:"stylus"}}},Q1=(s,n,e)=>{const l=document.createElement(s);return Dl(n)&&nn(n).forEach(a=>{if(a.indexOf("data"))l[a]=n[a];else{const t=a.replace("data","");l.dataset[t]=n[a]}}),e&&e.forEach(a=>{l.appendChild(a)}),l},Bo=s=>({...Ka,...s,jsLib:Array.from(new Set([...Ka.jsLib||[],...s.jsLib||[]])),cssLib:Array.from(new Set([...Ka.cssLib||[],...s.cssLib||[]]))}),Te=(s,n)=>{if(s[n]!==void 0)return s[n];const e=new Promise(l=>{var t;const a=document.createElement("script");a.src=n,(t=document.querySelector("body"))==null||t.appendChild(a),a.onload=()=>{l()}});return s[n]=e,e},H1=(s,n)=>{if(n.css&&Array.from(s.childNodes).every(e=>e.nodeName!=="STYLE")){const e=Q1("style",{innerHTML:n.css});s.appendChild(e)}},z1=(s,n,e)=>{const l=e.getScript();if(l&&Array.from(n.childNodes).every(a=>a.nodeName!=="SCRIPT")){const a=document.createElement("script");a.appendChild(document.createTextNode(`{const document=window.document.querySelector('#${s} .vp-code-demo-display').shadowRoot;
${l}}`)),n.appendChild(a)}},j1=s=>{const n=nn(s),e={html:[],js:[],css:[],isLegal:!1};return["html","js","css"].forEach(l=>{const a=n.filter(t=>Gp[l].types.includes(t));if(a.length){const t=a[0];e[l]=[s[t].replace(/^\n|\n$/g,""),Gp[l].map[t]||t]}}),e.isLegal=(!e.html.length||e.html[1]==="none")&&(!e.js.length||e.js[1]==="none")&&(!e.css.length||e.css[1]==="none"),e},gi=s=>s.replace(/<br \/>/g,"<br>").replace(/<((\S+)[^<]*?)\s+\/>/g,"<$1></$2>"),bi=s=>`<div id="app">
${gi(s)}
</div>`,U1=s=>`${s.replace("export default ","const $reactApp = ").replace(/App\.__style__(\s*)=(\s*)`([\s\S]*)?`/,"")};
ReactDOM.createRoot(document.getElementById("app")).render(React.createElement($reactApp))`,G1=s=>s.replace(/export\s+default\s*\{(\n*[\s\S]*)\n*\}\s*;?$/u,"Vue.createApp({$1}).mount('#app')").replace(/export\s+default\s*define(Async)?Component\s*\(\s*\{(\n*[\s\S]*)\n*\}\s*\)\s*;?$/u,"Vue.createApp({$1}).mount('#app')").trim(),Di=s=>`(function(exports){var module={};module.exports=exports;${s};return module.exports.__esModule?module.exports.default:module.exports;})({})`,W1=(s,n)=>{const e=Bo(n),l=s.js[0]||"";return{...e,html:gi(s.html[0]||""),js:l,css:s.css[0]||"",isLegal:s.isLegal,getScript:()=>{var a;return e.useBabel?((a=window.Babel.transform(l,{presets:["es2015"]}))==null?void 0:a.code)||"":l}}},K1=/<template>([\s\S]+)<\/template>/u,Y1=/<script(\s*lang=(['"])(.*?)\2)?>([\s\S]+)<\/script>/u,Z1=/<style(\s*lang=(['"])(.*?)\2)?\s*(?:scoped)?>([\s\S]+)<\/style>/u,X1=(s,n)=>{const e=Bo(n),l=s.html[0]||"",a=K1.exec(l),t=Y1.exec(l),o=Z1.exec(l),r=a?a[1].replace(/^\n|\n$/g,""):"",[i="",c=""]=t?[t[4].replace(/^\n|\n$/g,""),t[3]]:[],[B="",u=""]=o?[o[4].replace(/^\n|\n$/g,""),o[3]]:[],y=c===""&&(u===""||u==="css");return{...e,html:bi(r),js:G1(i),css:B,isLegal:y,jsLib:[e.vue,...e.jsLib],getScript:()=>{var f,b;const v=n.useBabel?((b=(f=window.Babel)==null?void 0:f.transform(i,{presets:["es2015"]}))==null?void 0:b.code)||"":i.replace(/export\s+default/u,"return");return`const app=window.document.createElement('div');document.firstElementChild.appendChild(app);const appOptions=${Di(v)};appOptions.template=\`${r.replace("`",'\\`"')}\`;window.Vue.createApp(appOptions).mount(app);`}}},J1=(s,n)=>{const e=Bo(n);return{...e,html:bi(""),js:U1(s.js[0]||""),css:s.css[0]||(s.js[0]?s.js[0].replace(/App\.__style__(?:\s*)=(?:\s*)`([\s\S]*)?`/,"$1").trim():""),isLegal:s.isLegal,jsLib:[e.react,e.reactDOM,...e.jsLib],jsx:!0,getScript:()=>{var a,t;const l=((t=(a=window.Babel)==null?void 0:a.transform(s.js[0]||"",{presets:["es2015","react"]}))==null?void 0:t.code)||"";return`window.ReactDOM.createRoot(document.firstElementChild).render(window.React.createElement(${Di(l)}))`}}},ke={},s8=s=>Promise.all([Te(ke,s.babel),Te(ke,s.react),Te(ke,s.reactDOM)]),n8=s=>{const n=[Te(ke,s.vue)];return s.useBabel&&n.push(Te(ke,s.babel)),Promise.all(n)},e8=s=>s.useBabel?Te(ke,s.babel):Promise.resolve();var l8=R({name:"CodeDemo",props:{id:{type:String,required:!0},type:{type:String,default:"normal"},title:{type:String,default:""},config:{type:String,default:""},code:{type:String,required:!0}},slots:Object,setup(s,{slots:n}){const[e,l]=Ba(!1),a=Vs(),t=Vs(),o=U("0"),r=U(!1),i=D(()=>JSON.parse(s.config?Rp(s.config):"{}")),c=D(()=>{const f=JSON.parse(Rp(s.code));return j1(f)}),B=D(()=>s.type==="react"?J1(c.value,i.value):s.type==="vue"?X1(c.value,i.value):W1(c.value,i.value)),u=D(()=>B.value.isLegal),y=(f=!1)=>{const b=a.value.attachShadow({mode:"open"}),_=document.createElement("div");_.classList.add("code-demo-app"),b.appendChild(_),u.value?(f&&(_.innerHTML=B.value.html),H1(b,B.value),z1(s.id,b,B.value),o.value="0"):o.value="auto",r.value=!0},v=()=>{switch(s.type){case"react":return s8(B.value).then(()=>y());case"vue":return n8(B.value).then(()=>y());default:return e8(B.value).then(()=>y(!0))}};return ws("beforeprint",()=>{l(!0)}),As(()=>{setTimeout(()=>{v()},800)}),()=>{var f;return p("div",{class:"vp-code-demo",id:s.id},[p("div",{class:"vp-code-demo-header"},[B.value.isLegal?p("button",{type:"button",title:"toggle","aria-hidden":!0,class:["vp-code-demo-toggle-button",e.value?"down":"end"],onClick:()=>{o.value=e.value?"0":`${t.value.clientHeight+13.8}px`,l()}}):null,s.title?p("span",{class:"vp-code-demo-title"},decodeURIComponent(s.title)):null,B.value.isLegal&&B.value.jsfiddle!==!1?p("form",{class:"code-demo-jsfiddle",target:"_blank",action:"https://jsfiddle.net/api/post/library/pure/",method:"post"},[p("input",{type:"hidden",name:"html",value:B.value.html}),p("input",{type:"hidden",name:"js",value:B.value.js}),p("input",{type:"hidden",name:"css",value:B.value.css}),p("input",{type:"hidden",name:"wrap",value:"1"}),p("input",{type:"hidden",name:"panel_js",value:"3"}),p("input",{type:"hidden",name:"resources",value:[...B.value.cssLib,...B.value.jsLib].join(",")}),p("button",{type:"submit",class:"jsfiddle-button",innerHTML:N1,"aria-label":"JSFiddle","data-balloon-pos":"up"})]):null,!B.value.isLegal||B.value.codepen!==!1?p("form",{class:"code-demo-codepen",target:"_blank",action:"https://codepen.io/pen/define",method:"post"},[p("input",{type:"hidden",name:"data",value:JSON.stringify({html:B.value.html,js:B.value.js,css:B.value.css,js_external:B.value.jsLib.join(";"),css_external:B.value.cssLib.join(";"),layout:B.value.codepenLayout,html_pre_processor:c.value?c.value.html[1]:"none",js_pre_processor:c.value?c.value.js[1]:B.value.jsx?"babel":"none",css_pre_processor:c.value?c.value.css[1]:"none",editors:B.value.codepenEditors})}),p("button",{type:"submit",innerHTML:q1,class:"codepen-button","aria-label":"Codepen","data-balloon-pos":"up"})]):null]),r.value?null:p(Hc,{class:"vp-code-demo-loading"}),p("div",{ref:a,class:"vp-code-demo-display",style:{display:u.value&&r.value?"block":"none"}}),p("div",{class:"vp-code-demo-code-wrapper",style:{height:o.value}},p("div",{ref:t,class:"vp-code-demo-codes"},(f=n.default)==null?void 0:f.call(n)))])}}}),a8=R({name:"MdDemo",props:{id:{type:String,required:!0},title:{type:String,default:""}},slots:Object,setup(s,{slots:n}){const[e,l]=Ba(!1),a=Vs(),t=U("0");return ws("beforeprint",()=>{l(!0)}),()=>{var o,r;return p("div",{class:"vp-md-demo",id:s.id},[p("div",{class:"vp-md-demo-header"},[p("button",{type:"button",title:"toggle","aria-hidden":!0,class:["vp-md-demo-toggle-button",e.value?"down":"end"],onClick:()=>{t.value=e.value?"0":`${a.value.clientHeight+13.8}px`,l()}}),s.title?decodeURIComponent(s.title):null]),p("div",{class:"vp-md-demo-display"},(o=n.default)==null?void 0:o.call(n)),p("div",{class:"vp-md-demo-code-wrapper",style:{height:t.value}},p("div",{ref:a,class:"vp-md-demo-codes"},(r=n.code)==null?void 0:r.call(n)))])}}});const t8=()=>{ws("beforeprint",()=>{document.querySelectorAll("details").forEach(s=>{s.open=!0})})},Ya=fe("VUEPRESS_TAB_STORE",{});var o8=R({name:"Tabs",props:{active:{type:Number,default:0},data:{type:Array,required:!0},id:{type:String,required:!0},tabId:{type:String,default:""}},slots:Object,setup(s,{slots:n}){const e=U(s.active),l=Vs([]),a=()=>{s.tabId&&(Ya.value[s.tabId]=s.data[e.value].id)},t=(c=e.value)=>{e.value=c<l.value.length-1?c+1:0,l.value[e.value].focus()},o=(c=e.value)=>{e.value=c>0?c-1:l.value.length-1,l.value[e.value].focus()},r=(c,B)=>{c.key===" "||c.key==="Enter"?(c.preventDefault(),e.value=B):c.key==="ArrowRight"?(c.preventDefault(),t()):c.key==="ArrowLeft"&&(c.preventDefault(),o()),a()},i=()=>{if(s.tabId){const c=s.data.findIndex(({id:B})=>Ya.value[s.tabId]===B);if(c!==-1)return c}return s.active};return As(()=>{e.value=i(),cs(()=>Ya.value[s.tabId],(c,B)=>{if(s.tabId&&c!==B){const u=s.data.findIndex(({id:y})=>y===c);u!==-1&&(e.value=u)}})}),()=>s.data.length?p("div",{class:"vp-tabs"},[p("div",{class:"vp-tabs-nav",role:"tablist"},s.data.map(({id:c},B)=>{const u=B===e.value;return p("button",{type:"button",ref:y=>{y&&(l.value[B]=y)},class:["vp-tab-nav",{active:u}],role:"tab","aria-controls":`tab-${s.id}-${B}`,"aria-selected":u,onClick:()=>{e.value=B,a()},onKeydown:y=>r(y,B)},n[`title${B}`]({value:c,isActive:u}))})),s.data.map(({id:c},B)=>{const u=B===e.value;return p("div",{class:["vp-tab",{active:u}],id:`tab-${s.id}-${B}`,role:"tabpanel","aria-expanded":u},[p("div",{class:"vp-tab-title"},n[`title${B}`]({value:c,isActive:u})),n[`tab${B}`]({value:c,isActive:u})])})]):null}});const p8=Fn({enhance:({app:s})=>{s.component("CodeTabs",M1),dn("CodeGroup",s)||s.component("CodeGroup",V1),dn("CodeGroupItem",s)||s.component("CodeGroupItem",hi),s.component("CodeDemo",l8),s.component("MdDemo",a8),s.component("Tabs",o8)},setup:()=>{t8()}});let r8={};const _i=Symbol(""),c8=()=>vs(_i),i8=s=>{s.provide(_i,r8)};var B8={"/":{closeTitle:"关闭",downloadTitle:"下载图片",fullscreenTitle:"切换全屏",zoomTitle:"缩放",arrowPrevTitle:"上一个 (左箭头)",arrowNextTitle:"下一个 (右箭头)"}};const d8=".theme-hope-content :not(a) > img:not([no-view])",u8=B8,y8=800,v8='<div class="photo-swipe-loading"><svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" preserveAspectRatio="xMidYMid" viewBox="25 25 50 50"><animateTransform attributeName="transform" type="rotate" dur="2s" keyTimes="0;1" repeatCount="indefinite" values="0;360"></animateTransform><circle cx="50" cy="50" r="20" fill="none" stroke="currentColor" stroke-width="4" stroke-linecap="round"><animate attributeName="stroke-dasharray" dur="1.5s" keyTimes="0;0.5;1" repeatCount="indefinite" values="1,200;90,200;1,200"></animate><animate attributeName="stroke-dashoffset" dur="1.5s" keyTimes="0;0.5;1" repeatCount="indefinite" values="0;-35px;-125px"></animate></circle></svg></div>',m8=s=>rs(s)?Array.from(document.querySelectorAll(s)):s.map(n=>Array.from(document.querySelectorAll(n))).flat(),Ci=s=>new Promise((n,e)=>{s.complete?n({type:"image",element:s,src:s.src,width:s.naturalWidth,height:s.naturalHeight,alt:s.alt,msrc:s.src}):(s.onload=()=>n(Ci(s)),s.onerror=l=>e(l))}),A8=()=>{const s=le(u8),n=hs(),e=Bs(),{isSupported:l,toggle:a}=ro(),t=c8();let o;const r=D(()=>n.value.photoSwipe===!1?!1:n.value.photoSwipe||d8),i=B=>{B.on("uiRegister",()=>{l&&B.ui.registerElement({name:"fullscreen",order:7,isButton:!0,html:'<svg class="pswp__icn" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg"><path d="M249.5 270.833H437v-75H212a37.5 37.5 0 0 0-37.5 37.5v225h75v-187.5zm-37.5 600h225v-75H249.5v-187.5h-75v225a37.5 37.5 0 0 0 37.5 37.5zm637.5-37.5v-225h-75v187.5H587v75h225a37.5 37.5 0 0 0 37.5-37.5zM587 270.833h187.5v187.5h75v-225a37.5 37.5 0 0 0-37.5-37.5H587v75z"/></svg>',onClick:()=>{a()}}),B.ui.registerElement({name:"download",order:8,isButton:!0,tagName:"a",html:{isCustomSVG:!0,inner:'<path d="M20.5 14.3 17.1 18V10h-2.2v7.9l-3.4-3.6L10 16l6 6.1 6-6.1-1.5-1.6ZM23 23H9v2h14" id="pswp__icn-download"/>',outlineID:"pswp__icn-download"},onInit:(u,y)=>{u.setAttribute("download",""),u.setAttribute("target","_blank"),u.setAttribute("rel","noopener"),y.on("change",()=>{u.setAttribute("href",y.currSlide.data.src)})}}),B.ui.registerElement({name:"bulletsIndicator",className:"photo-swipe-bullets-indicator",appendTo:"wrapper",onInit:(u,y)=>{const v=[];let f=-1;for(let b=0;b<y.getNumItems();b++){const _=document.createElement("div");_.className="photo-swipe-bullet",_.onclick=F=>{y.goTo(v.indexOf(F.target))},v.push(_),u.appendChild(_)}y.on("change",()=>{f>=0&&v[f].classList.remove("active"),v[y.currIndex].classList.add("active"),f=y.currIndex})}})})},c=async()=>{if(r.value)return Promise.all([d(()=>import("./photoswipe.esm-08_zHRDQ.js"),__vite__mapDeps([])),Mn().then(()=>new Promise(B=>setTimeout(B,y8)).then(()=>m8(r.value)))]).then(([{default:B},u])=>{const y=u.map(v=>({html:v8,element:v,msrc:v.src}));u.forEach((v,f)=>{const b=()=>{o=new B({preloaderDelay:0,showHideAnimationType:"zoom",...s.value,...t,dataSource:y,index:f,closeOnVerticalDrag:!0,wheelToZoom:!1}),i(o),o.addFilter("thumbEl",()=>v),o.addFilter("placeholderSrc",()=>v.src),o.init()};v.style.cursor="zoom-in",v.addEventListener("click",()=>{b()}),v.addEventListener("keypress",({key:_})=>{_==="Enter"&&b()})}),u.forEach((v,f)=>{Ci(v).then(b=>{y.splice(f,1,b),o==null||o.refreshSlideContent(f)})})})};As(()=>{ws("wheel",()=>{o==null||o.close()}),cs(()=>e.value.path,c,{immediate:!0})})};var f8=Fn({enhance:({app:s})=>{i8(s)},setup:()=>{A8()}}),Wp={"/":{word:"约 $word 字",less1Minute:"小于 1 分钟",time:"大约 $time 分钟"}};const Li=()=>{const s=Bs();return D(()=>s.value.readingTime??null)},ht=typeof Wp>"u"?null:Wp,wi=(s,n)=>{const{minutes:e,words:l}=s,{less1Minute:a,word:t,time:o}=n;return{time:e<1?a:o.replace("$time",Math.round(e).toString()),words:t.replace("$word",l.toString())}},Kp={words:"",time:""},Ii=()=>ht?le(ht):D(()=>null),E8=()=>{if(typeof ht>"u")return D(()=>Kp);const s=Li(),n=Ii();return D(()=>s.value&&n.value?wi(s.value,n.value):Kp)},qn=()=>Ei(),ps=()=>C1(),Ee=()=>D(()=>!!qn().value.pure);var Za=R({name:"EmptyComponent",setup:()=>()=>null});const F8="719px",h8="1440px",g8="false",uo={mobileBreakPoint:F8,pcBreakPoint:h8,enableThemeColor:g8},yo={"/linux/":["文件操作",{text:"01 工具和基本命令",prefix:"01 工具和基本命令/",collapsible:!0,children:["配置一台ubuntu","软链接（符号链接）和硬链接","打包和压缩","netstat使用","tree常用命令","wget使用"]},{text:"02 Vim",prefix:"02 vim/",collapsible:!0,children:["vim的配置和使用"]},{text:"03 编译工具",prefix:"03 编译工具/",collapsible:!0,children:["/linux/03%20%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/gcc_g__%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BC%96%E8%AF%91%E5%91%BD%E4%BB%A4.html","gdb调试出错的程序","makefile使用方法","CMake的使用"]},{text:"04 文件操作",prefix:"04 文件操作/",collapsible:!0,children:["字符串转不同进制数字"]}],"/algo/":["统计单词的个数","统计字母、数组、空格的个数",{text:"01 数组",prefix:"01 数组/",collapsible:!0,children:["数组基础","LeetCode 704.二分查找","二分查找总结","LeetCode 27. 移除元素","LeetCode 977.有序数组的平方","LeetCode 209.长度最小的子数组","LeetCode 59.螺旋矩阵Ⅱ","905. 按奇偶排序数组","344.反转字符串","查找两个数组的公共元素","查找三个数组的公共元素","查找最大和次大的元素","查找N个数组的公共元素","查找出现次数超过一半的元素"]},{text:"02 链表",prefix:"02 链表/",collapsible:!0,children:["链表基础","LeetCode 203.移除链表元素","LeetCode707","leetcode 21. 合并两个有序链表","leetcode86. 分隔链表（链表的分解）","Leetcode23. 合并 K 个升序链表","查找链表中倒数第N个结点","Leetcode19. 删除链表的倒数第N个结点","Leetcode876.链表的中间结点","leetcode141.环形链表(判断链表是否有环)","Leetcode142.环形链表II(查找环的入口地址)","leetcode160.相交链表(判断链表是否相交)","leetcode206.反转链表","leetcode92.反转链表II","234.回文链表","leetcode61.旋转链表","约瑟夫环问题"]},{text:"03 哈希算法",prefix:"03 哈希算法/",collapsible:!0,children:["242.有效的字母异位词","349.两个数组的交集","217.存在重复元素","219.存在重复元素 II","220. 存在重复元素 III","594. 最长和谐子序列","128. 最长连续序列","383. 赎金信","202. 快乐数","1. 两数之和","167. 两数之和 II - 输入有序数组","15. 三数之和"]},{text:"04 排序算法",prefix:"04 排序算法/",collapsible:!0,children:["冒泡排序","选择排序","插入排序","桶排序","（简单）快速排序","希尔排序","归并排序","堆排序","基数排序","计数排序"]},{text:"堆",prefix:"堆/",collapsible:!0,children:["上滤"]},{text:"队",prefix:"队/",collapsible:!0,children:["两个栈实现队列","新建 Markdown"]},{text:"栈",prefix:"栈/",collapsible:!0,children:["新建 Markdown"]}],"/redis/":[],"/network/":["TCP和UDP的区别",{text:"序列化",prefix:"序列化/",collapsible:!0,children:["Json简介及使用","Protobuf简介及使用"]}],"/others/":["autohotkey笔记","SourceInsight","typora配置"],"/ccpp/":[{text:"00 基础必备",prefix:"00 基础必备/",collapsible:!0,children:["进程虚拟地址空间","指令角度堆栈调用过程","/ccpp/00%20%E5%9F%BA%E7%A1%80%E5%BF%85%E5%A4%87/%E7%BC%96%E8%AF%91%E5%99%A8%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3c__%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BC%96%E8%AF%91%E5%92%8C%E9%93%BE%E6%8E%A5.html","反汇编小结"]},{text:"01 C语言基础",prefix:"01 c语言基础/",collapsible:!0,children:["前言","数据类型","关键字","常量","进制转换","变量","整型","补码","scanf","浮点数","字符","do-while(0)"]},{text:"02 C++基础",prefix:"02 c__基础/",collapsible:!0,children:["/ccpp/02%20c__%E5%9F%BA%E7%A1%80/c__%E5%88%9D%E6%8E%A2.html","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.html","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%AE%89%E5%85%A8.html","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/const.html","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/new%E3%80%81delete.html","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E5%BC%95%E7%94%A8.html","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2.html","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD.html","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0.html","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/bool.html","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/inline%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0.html","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/string.html","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90.html"]},{text:"03 类和对象",prefix:"03 类和对象/",collapsible:!0,children:["类和对象","构造函数和析构函数","拷贝构造函数","指向类型成员的指针","this","赋值运算符函数","拷贝构造和赋值重载的实践","特殊数据成员的初始化","特殊的成员函数","组织对象"]}],"/mysql/":[{text:"01 My S Q L基础",prefix:"01 MySQL基础/",collapsible:!0,children:["mysql的安装","知识拓展","基本数据类型","运算符","完整性约束","关系型数据库表设计","范式设计","常用函数","c语言连接MySQL","用户管理与授权"]},{text:"02 My S Q L核心 S Q L",prefix:"02 MySQL核心SQL/",collapsible:!0,children:["概述","mysql的库操作","表操作","CRUD","select查询","DML小结","多表select-连接查询","DCL小结"]},{text:"03 My S Q L存储引擎",prefix:"03 MySQL存储引擎/",collapsible:!0,children:["MySQL存储引擎"]},{text:"04 M Y S Q L索引",prefix:"04 MYSQL索引/",collapsible:!0,children:["索引基础","索引的使用和分析","索引的底层实现原理","InnoDB的主键和二级索引树","哈希索引","InnoDB自适应哈希索引","MySQL索引常见问题","MySQL优化之慢日志查询"]},{text:"05 My S Q L事务",prefix:"05 MySQL事务/",collapsible:!0,children:["事务的概念","事务的ACID特性","事务并发存在的问题(脏读、不可重复读和幻读)","MySQL事务的隔离级别"]},{text:"06 My S Q L的锁机制",prefix:"06 MySQL的锁机制/",collapsible:!0,children:["表级锁和行级锁","排它锁和共享锁","死锁","锁的优化建议","MySQL间隙锁（幻读解决原理）","MySQL回滚日志undo log","MySQL MVCC多版本并发控制（脏读和不可重复读解决原理）","MySQL 意向共享锁、意向排他锁","/mysql/06%20MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/%E8%AE%B0%E5%BD%95%E9%94%81_%E9%97%B4%E9%9A%99%E9%94%81%E5%8F%AF%E4%BB%A5%E9%98%B2%E6%AD%A2%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C%E8%80%8C%E5%AF%BC%E8%87%B4%E7%9A%84%E5%B9%BB%E8%AF%BB%E5%90%97.html"]},{text:"07 My S Q L优化",prefix:"07 MySQL优化/",collapsible:!0,children:["sql优化","SQL和索引优化总结"]},{text:"08 My S Q L日志",prefix:"08 MySQL日志/",collapsible:!0,children:["MySQL重做日志redo log","Server 层四个日志"]},{text:"09 数据备份",prefix:"09 数据备份/",collapsible:!0,children:["mysqldump数据备份"]},{text:"10 My S Q L集群",prefix:"10 MySQL集群/",collapsible:!0,children:["主从复制原理","配置主从复制实践","读写分离配置实践","读写分离原理"]},{text:"11 拓展",prefix:"11 拓展/",collapsible:!0,children:["SQL的完整处理流程","分库分表实践"]},{text:"12 连接池",prefix:"12 连接池/",collapsible:!0,children:["概述","数据库编程部分实现","连接池单例模式实践","最大空闲时间回收连接扫描线程的实现","加载配置项","生产者线程的实现","消费者线程的实现","压力测试"]}]},Ti=s=>{const{icon:n="",color:e,size:l}=s,a={};return e&&(a.color=e),l&&(a.height=Number.isNaN(Number(l))?l:`${l}px`),me(n)?p("img",{class:"icon",src:n,"no-view":"",style:a}):Cl(n)?p("img",{class:"icon",src:bs(n),"aria-hidden":"","no-view":"",style:a}):p(sn("FontIcon"),s)};Ti.displayName="HopeIcon";var Hs=Ti;const Il=()=>{const s=zs(),n=Ln();return e=>{if(e)if(Cl(e))n.path!==e&&s.push(e);else if(yc(e))window&&window.open(e);else{const l=n.path.slice(0,n.path.lastIndexOf("/"));s.push(`${l}/${encodeURI(e)}`)}}},ki=()=>{const s=ps(),n=hs();return D(()=>{const{author:e}=n.value;return e?ml(e):e===!1?[]:ml(s.value.author,!1)})},b8=()=>{const s=hs();return D(()=>Kc(s.value.category).map(n=>{var e,l;return{name:n,path:((l=(e=vs(Symbol.for("categoryMap")))==null?void 0:e.value.map[n])==null?void 0:l.path)||""}}))},D8=()=>{const s=hs();return D(()=>Yc(s.value.tag).map(n=>{var e,l;return{name:n,path:((l=(e=vs(Symbol.for("tagMap")))==null?void 0:e.value.map[n])==null?void 0:l.path)||""}}))},_8=()=>{const s=hs(),n=Bs();return D(()=>{const e=ao(s.value.date);if(e)return e;const{createdTime:l}=n.value.git||{};return l?new Date(l):null})},C8=()=>{const s=ps(),n=Bs(),e=hs(),l=ki(),a=b8(),t=D8(),o=_8(),r=Li(),i=E8(),c=D(()=>({author:l.value,category:a.value,date:o.value,localizedDate:n.value.localizedDate,tag:t.value,isOriginal:e.value.isOriginal||!1,readingTime:r.value,readingTimeLocale:i.value,pageview:"pageview"in e.value?e.value.pageview:!0})),B=D(()=>"pageInfo"in e.value?e.value.pageInfo:"pageInfo"in s.value?s.value.pageInfo:null);return{info:c,items:B}},{mobileBreakPoint:L8,pcBreakPoint:w8}=uo,Yp=s=>s.endsWith("px")?Number(s.slice(0,-2)):null,Tl=()=>{const s=U(!1),n=U(!1),e=()=>{s.value=window.innerWidth<=(Yp(L8)??719),n.value=window.innerWidth>=(Yp(w8)??1440)};return As(()=>{e(),ws("resize",e,!1),ws("orientationchange",e,!1)}),{isMobile:s,isPC:n}},Oi=Symbol(""),kl=()=>{const s=vs(Oi);if(!s)throw new Error("useDarkmode() is called without provider.");return s},I8=s=>{const n=qn(),e=jv(),l=fe("vuepress-theme-hope-scheme","auto"),a=D(()=>n.value.darkmode||"switch"),t=D(()=>{const r=a.value;return r==="disable"?!1:r==="enable"?!0:r==="auto"?e.value:r==="toggle"?l.value==="dark":l.value==="dark"||l.value==="auto"&&e.value}),o=D(()=>{const r=a.value;return r==="switch"||r==="toggle"});s.provide(Oi,{canToggle:o,config:a,isDarkmode:t,status:l}),Object.defineProperties(s.config.globalProperties,{$isDarkmode:{get:()=>t.value}})},T8=()=>{const{isDarkmode:s}=kl(),n=(e=s.value)=>document.documentElement.setAttribute("data-theme",e?"dark":"light");As(()=>{cs(s,n,{immediate:!0})})};var Gs=R({name:"AutoLink",inheritAttrs:!1,props:{config:{type:Object,required:!0},exact:Boolean,noExternalLinkIcon:Boolean},emits:["focusout"],slots:Object,setup(s,{attrs:n,emit:e,slots:l}){const a=Ln(),t=bc(),o=He(s,"config"),r=D(()=>me(o.value.link)),i=D(()=>!r.value&&yc(o.value.link)),c=D(()=>o.value.target||(r.value?"_blank":void 0)),B=D(()=>c.value==="_blank"),u=D(()=>!r.value&&!i.value&&!B.value),y=D(()=>o.value.rel||(B.value?"noopener noreferrer":void 0)),v=D(()=>o.value.ariaLabel||o.value.text),f=D(()=>{if(s.exact)return!1;const _=nn(t.value.locales);return _.length?_.every(F=>F!==o.value.link):o.value.link!=="/"}),b=D(()=>u.value?o.value.activeMatch?new RegExp(o.value.activeMatch).test(a.path):f.value?ne(a.path,o.value.link):a.path===o.value.link:!1);return()=>{const{before:_,after:F,default:I}=l,{text:h,icon:w,link:M}=o.value;return u.value?p(ks,{to:M,"aria-label":v.value,...n,class:["nav-link",{active:b.value},n.class],onFocusout:()=>e("focusout")},()=>I?I():[_?_():p(Hs,{icon:w}),h,F==null?void 0:F()]):p("a",{href:M,rel:y.value,target:c.value,"aria-label":v.value,...n,class:["nav-link",n.class],onFocusout:()=>e("focusout")},I?I():[_?_():p(Hs,{icon:w}),h,s.noExternalLinkIcon?null:p(Ai),F==null?void 0:F()])}}});const $e=(s,n,e=!1)=>"activeMatch"in n?new RegExp(n.activeMatch).test(s.path):Xc(s,n.link)?!0:n.children&&!e?n.children.some(l=>$e(s,l)):!1,xi=(s,n)=>n.type==="group"?n.children.some(e=>e.type==="group"?xi(s,e):e.type==="page"&&$e(s,e,!0))||"prefix"in n&&Xc(s,n.prefix):!1,Si=(s,n)=>rs(s.link)?p(Gs,{...n,config:s}):p("p",n,[p(Hs,{icon:s.icon}),s.text]),Pi=s=>{const n=Ln();return s?p("ul",{class:"vp-sidebar-sub-headers"},s.map(e=>p("li",{class:"vp-sidebar-sub-header"},[Si(e,{class:["vp-sidebar-link","vp-heading",{active:$e(n,e,!0)}]}),Pi(e.children)]))):null};var Fs=(s=>(s.type="y",s.title="t",s.shortTitle="s",s.icon="i",s.author="a",s.date="d",s.localizedDate="l",s.category="c",s.tag="g",s.isEncrypted="n",s.isOriginal="o",s.readingTime="r",s.excerpt="e",s.sticky="u",s.cover="v",s.index="I",s.order="O",s))(Fs||{}),Ri=(s=>(s.article="a",s.home="h",s.slide="s",s.page="p",s))(Ri||{});const ce=(s="",n="")=>Cl(n)?n:`${uc(s)}${n}`,Oe=(s,n,e=!1)=>{let l=Ne(s,Gc(encodeURI(n)));l.name==="404"&&(l=Ne(s,n));const{fullPath:a,meta:t,name:o}=l;return{text:!e&&t[Fs.shortTitle]?t[Fs.shortTitle]:t[Fs.title]||n,link:o==="404"?n:a,...t[Fs.icon]?{icon:t[Fs.icon]}:{}}},k8=(s,n)=>{const e=Bs();return{type:"heading",text:s.title,link:`${e.value.path}#${s.slug}`,children:vo(s.children,n)}},vo=(s,n)=>n>0?s.map(e=>k8(e,n-1)):[],Mi=s=>{const n=Bs();return vo(n.value.headers,s)},gt=(s,n,e="")=>{const l=zs(),a=Bs(),t=(o,r=e)=>{var c;const i=rs(o)?Oe(l,ce(r,o)):o.link?{...o,...yl(o.link)?{}:{link:Oe(l,ce(r,o.link)).link}}:o;if("children"in i){const B=ce(r,i.prefix),u=i.children==="structure"?yo[B]:i.children;return{type:"group",...i,prefix:B,children:u.map(y=>t(y,B))}}return{type:"page",...i,children:i.link===a.value.path?vo(((c=a.value.headers[0])==null?void 0:c.level)===1?a.value.headers[0].children:a.value.headers,n):[]}};return s.map(o=>t(o))},O8=(s,n)=>{const e=Bs(),l=nn(s).sort((a,t)=>t.length-a.length);for(const a of l)if(ne(decodeURI(e.value.path),a)){const t=s[a];return t?gt(t==="structure"?yo[a]:t==="heading"?Mi(n):t,n,a):[]}return console.warn(`${e.value.path} is missing sidebar config.`),[]},x8=(s,n)=>{const e=Cn();return s===!1?[]:s==="heading"?Mi(n):s==="structure"?gt(yo[e.value],n,e.value):ss(s)?gt(s,n):Dl(s)?O8(s,n):[]},Vi=Symbol(""),S8=()=>{const s=hs(),n=ps(),e=Bs(),l=D(()=>s.value.home?!1:s.value.sidebar??n.value.sidebar??"structure"),a=D(()=>s.value.headerDepth??n.value.headerDepth??2),t=oo(()=>[l.value,a.value,e.value.path,null],()=>x8(l.value,a.value));cn(Vi,t)},mo=()=>{const s=vs(Vi);if(!s)throw new Error("useSidebarItems() is called without provider.");return s};var P8=R({name:"PageFooter",setup(){const s=qn(),n=ps(),e=hs(),l=ki(),a=D(()=>{const{copyright:c,footer:B}=e.value;return B!==!1&&!!(c||B||n.value.displayFooter)}),t=D(()=>{const{footer:c}=e.value;return c===!1?!1:rs(c)?c:n.value.footer||""}),o=D(()=>l.value.map(({name:c})=>c).join(", ")),r=c=>`Copyright © ${new Date().getFullYear()} ${o.value} ${c?`${c} Licensed`:""}`,i=D(()=>{const{copyright:c,license:B=""}=e.value,{license:u}=s.value,{copyright:y}=n.value;return c??(B?r(B):rs(y)?y:o.value||u?r(u):!1)});return()=>a.value?p("footer",{class:"vp-footer-wrapper"},[t.value?p("div",{class:"vp-footer",innerHTML:t.value}):null,i.value?p("div",{class:"vp-copyright",innerHTML:i.value}):null]):null}}),R8=R({name:"NavbarDropdownLink",props:{config:{type:Object,required:!0}},slots:Object,setup(s,{slots:n}){const e=Bs(),l=He(s,"config"),a=D(()=>l.value.ariaLabel||l.value.text),t=U(!1);cs(()=>e.value.path,()=>{t.value=!1});const o=r=>{r.detail===0&&(t.value=!t.value)};return()=>{var r;return p("div",{class:["dropdown-wrapper",{open:t.value}]},[p("button",{type:"button",class:"dropdown-title","aria-label":a.value,onClick:o},[((r=n.title)==null?void 0:r.call(n))||p("span",{class:"title"},[p(Hs,{icon:l.value.icon}),s.config.text]),p("span",{class:"arrow"}),p("ul",{class:"nav-dropdown"},l.value.children.map((i,c)=>{const B=c===l.value.children.length-1;return p("li",{class:"dropdown-item"},"children"in i?[p("h4",{class:"dropdown-subtitle"},i.link?p(Gs,{config:i,onFocusout:()=>{i.children.length===0&&B&&(t.value=!1)}}):p("span",i.text)),p("ul",{class:"dropdown-subitem-wrapper"},i.children.map((u,y)=>p("li",{class:"dropdown-subitem"},p(Gs,{config:u,onFocusout:()=>{y===i.children.length-1&&B&&(t.value=!1)}}))))]:p(Gs,{config:i,onFocusout:()=>{B&&(t.value=!1)}}))}))])])}}});const qi=(s,n,e="")=>rs(n)?Oe(s,ce(e,n)):"children"in n?{...n,...n.link&&!yl(n.link)?Oe(s,ce(e,n.link)):{},children:n.children.map(l=>qi(s,l,ce(e,n.prefix)))}:{...n,link:yl(n.link)?n.link:Oe(s,ce(e,n.link)).link},Ni=()=>{const s=ps(),n=zs(),e=()=>(s.value.navbar||[]).map(l=>qi(n,l));return oo(()=>s.value.navbar,()=>e())},M8=()=>{const s=ps(),n=D(()=>s.value.repo||null),e=D(()=>n.value?Fv(n.value):null),l=D(()=>n.value?Jc(n.value):null),a=D(()=>e.value?s.value.repoLabel??(l.value===null?"Source":l.value):null);return D(()=>!e.value||!a.value||s.value.repoDisplay===!1?null:{type:l.value||"Source",label:a.value,link:e.value})};var V8=R({name:"NavScreenDropdown",props:{config:{type:Object,required:!0}},setup(s){const n=Bs(),e=He(s,"config"),l=D(()=>e.value.ariaLabel||e.value.text),a=U(!1);cs(()=>n.value.path,()=>{a.value=!1});const t=(o,r)=>r[r.length-1]===o;return()=>[p("button",{type:"button",class:["nav-screen-dropdown-title",{active:a.value}],"aria-label":l.value,onClick:()=>{a.value=!a.value}},[p("span",{class:"title"},[p(Hs,{icon:e.value.icon}),s.config.text]),p("span",{class:["arrow",a.value?"down":"end"]})]),p("ul",{class:["nav-screen-dropdown",{hide:!a.value}]},e.value.children.map(o=>p("li",{class:"dropdown-item"},"children"in o?[p("h4",{class:"dropdown-subtitle"},o.link?p(Gs,{config:o,onFocusout:()=>{t(o,e.value.children)&&o.children.length===0&&(a.value=!1)}}):p("span",o.text)),p("ul",{class:"dropdown-subitem-wrapper"},o.children.map(r=>p("li",{class:"dropdown-subitem"},p(Gs,{config:r,onFocusout:()=>{t(r,o.children)&&t(o,e.value.children)&&(a.value=!1)}}))))]:p(Gs,{config:o,onFocusout:()=>{t(o,e.value.children)&&(a.value=!1)}}))))]}}),q8=R({name:"NavScreenLinks",setup(){const s=Ni();return()=>s.value.length?p("nav",{class:"nav-screen-links"},s.value.map(n=>p("div",{class:"navbar-links-item"},"children"in n?p(V8,{config:n}):p(Gs,{config:n})))):null}});const $i=()=>p(ts,{name:"dark"},()=>p("path",{d:"M524.8 938.667h-4.267a439.893 439.893 0 0 1-313.173-134.4 446.293 446.293 0 0 1-11.093-597.334A432.213 432.213 0 0 1 366.933 90.027a42.667 42.667 0 0 1 45.227 9.386 42.667 42.667 0 0 1 10.24 42.667 358.4 358.4 0 0 0 82.773 375.893 361.387 361.387 0 0 0 376.747 82.774 42.667 42.667 0 0 1 54.187 55.04 433.493 433.493 0 0 1-99.84 154.88 438.613 438.613 0 0 1-311.467 128z"}));$i.displayName="DarkIcon";const Qi=()=>p(ts,{name:"light"},()=>p("path",{d:"M952 552h-80a40 40 0 0 1 0-80h80a40 40 0 0 1 0 80zM801.88 280.08a41 41 0 0 1-57.96-57.96l57.96-58a41.04 41.04 0 0 1 58 58l-58 57.96zM512 752a240 240 0 1 1 0-480 240 240 0 0 1 0 480zm0-560a40 40 0 0 1-40-40V72a40 40 0 0 1 80 0v80a40 40 0 0 1-40 40zm-289.88 88.08-58-57.96a41.04 41.04 0 0 1 58-58l57.96 58a41 41 0 0 1-57.96 57.96zM192 512a40 40 0 0 1-40 40H72a40 40 0 0 1 0-80h80a40 40 0 0 1 40 40zm30.12 231.92a41 41 0 0 1 57.96 57.96l-57.96 58a41.04 41.04 0 0 1-58-58l58-57.96zM512 832a40 40 0 0 1 40 40v80a40 40 0 0 1-80 0v-80a40 40 0 0 1 40-40zm289.88-88.08 58 57.96a41.04 41.04 0 0 1-58 58l-57.96-58a41 41 0 0 1 57.96-57.96z"}));Qi.displayName="LightIcon";const Hi=()=>p(ts,{name:"auto"},()=>p("path",{d:"M512 992C246.92 992 32 777.08 32 512S246.92 32 512 32s480 214.92 480 480-214.92 480-480 480zm0-840c-198.78 0-360 161.22-360 360 0 198.84 161.22 360 360 360s360-161.16 360-360c0-198.78-161.22-360-360-360zm0 660V212c165.72 0 300 134.34 300 300 0 165.72-134.28 300-300 300z"}));Hi.displayName="AutoIcon";const zi=()=>p(ts,{name:"enter-fullscreen"},()=>p("path",{d:"M762.773 90.24h-497.28c-96.106 0-174.4 78.293-174.4 174.4v497.28c0 96.107 78.294 174.4 174.4 174.4h497.28c96.107 0 175.04-78.293 174.4-174.4V264.64c0-96.213-78.186-174.4-174.4-174.4zm-387.2 761.173H215.04c-21.867 0-40.427-17.92-41.067-41.066V649.92c0-22.507 17.92-40.427 40.427-40.427 11.307 0 21.227 4.694 28.48 11.947 7.253 7.253 11.947 17.92 11.947 28.48v62.293l145.28-145.28c15.893-15.893 41.813-15.893 57.706 0 15.894 15.894 15.894 41.814 0 57.707l-145.28 145.28h62.294c22.506 0 40.426 17.92 40.426 40.427s-17.173 41.066-39.68 41.066zM650.24 165.76h160.427c21.866 0 40.426 17.92 41.066 41.067v160.426c0 22.507-17.92 40.427-40.426 40.427-11.307 0-21.227-4.693-28.48-11.947-7.254-7.253-11.947-17.92-11.947-28.48v-62.186L625.6 450.347c-15.893 15.893-41.813 15.893-57.707 0-15.893-15.894-15.893-41.814 0-57.707l145.28-145.28H650.88c-22.507 0-40.427-17.92-40.427-40.427s17.174-41.173 39.787-41.173z"}));zi.displayName="EnterFullScreenIcon";const ji=()=>p(ts,{name:"cancel-fullscreen"},()=>p("path",{d:"M778.468 78.62H247.922c-102.514 0-186.027 83.513-186.027 186.027V795.08c0 102.514 83.513 186.027 186.027 186.027h530.432c102.514 0 186.71-83.513 186.026-186.027V264.647C964.494 162.02 880.981 78.62 778.468 78.62zM250.88 574.35h171.122c23.324 0 43.122 19.115 43.804 43.805v171.121c0 24.008-19.114 43.122-43.122 43.122-12.06 0-22.641-5.006-30.378-12.743s-12.743-19.115-12.743-30.379V722.83L224.597 877.91c-16.953 16.952-44.6 16.952-61.553 0-16.953-16.954-16.953-44.602 0-61.554L318.009 661.39h-66.446c-24.007 0-43.122-19.114-43.122-43.122 0-24.12 18.432-43.918 42.439-43.918zm521.899-98.873H601.657c-23.325 0-43.122-19.114-43.805-43.804V260.55c0-24.007 19.115-43.122 43.122-43.122 12.06 0 22.642 5.007 30.379 12.743s12.743 19.115 12.743 30.38v66.445l154.965-154.965c16.953-16.953 44.601-16.953 61.554 0 16.953 16.953 16.953 44.6 0 61.554L705.536 388.55h66.446c24.007 0 43.122 19.115 43.122 43.122.114 24.007-18.318 43.804-42.325 43.804z"}));ji.displayName="CancelFullScreenIcon";const Ui=()=>p(ts,{name:"outlook"},()=>[p("path",{d:"M224 800c0 9.6 3.2 44.8 6.4 54.4 6.4 48-48 76.8-48 76.8s80 41.6 147.2 0 134.4-134.4 38.4-195.2c-22.4-12.8-41.6-19.2-57.6-19.2C259.2 716.8 227.2 761.6 224 800zM560 675.2l-32 51.2c-51.2 51.2-83.2 32-83.2 32 25.6 67.2 0 112-12.8 128 25.6 6.4 51.2 9.6 80 9.6 54.4 0 102.4-9.6 150.4-32l0 0c3.2 0 3.2-3.2 3.2-3.2 22.4-16 12.8-35.2 6.4-44.8-9.6-12.8-12.8-25.6-12.8-41.6 0-54.4 60.8-99.2 137.6-99.2 6.4 0 12.8 0 22.4 0 12.8 0 38.4 9.6 48-25.6 0-3.2 0-3.2 3.2-6.4 0-3.2 3.2-6.4 3.2-6.4 6.4-16 6.4-16 6.4-19.2 9.6-35.2 16-73.6 16-115.2 0-105.6-41.6-198.4-108.8-268.8C704 396.8 560 675.2 560 675.2zM224 419.2c0-28.8 22.4-51.2 51.2-51.2 28.8 0 51.2 22.4 51.2 51.2 0 28.8-22.4 51.2-51.2 51.2C246.4 470.4 224 448 224 419.2zM320 284.8c0-22.4 19.2-41.6 41.6-41.6 22.4 0 41.6 19.2 41.6 41.6 0 22.4-19.2 41.6-41.6 41.6C339.2 326.4 320 307.2 320 284.8zM457.6 208c0-12.8 12.8-25.6 25.6-25.6 12.8 0 25.6 12.8 25.6 25.6 0 12.8-12.8 25.6-25.6 25.6C470.4 233.6 457.6 220.8 457.6 208zM128 505.6C128 592 153.6 672 201.6 736c28.8-60.8 112-60.8 124.8-60.8-16-51.2 16-99.2 16-99.2l316.8-422.4c-48-19.2-99.2-32-150.4-32C297.6 118.4 128 291.2 128 505.6zM764.8 86.4c-22.4 19.2-390.4 518.4-390.4 518.4-22.4 28.8-12.8 76.8 22.4 99.2l9.6 6.4c35.2 22.4 80 12.8 99.2-25.6 0 0 6.4-12.8 9.6-19.2 54.4-105.6 275.2-524.8 288-553.6 6.4-19.2-3.2-32-19.2-32C777.6 76.8 771.2 80 764.8 86.4z"})]);Ui.displayName="OutlookIcon";var Gi=R({name:"AppearanceSwitch",setup(){const{config:s,isDarkmode:n,status:e}=kl(),l=Ee(),a=()=>{s.value==="switch"?e.value={light:"dark",dark:"auto",auto:"light"}[e.value]:e.value=e.value==="light"?"dark":"light"},t=async o=>{if(!(document.startViewTransition&&!window.matchMedia("(prefers-reduced-motion: reduce)").matches&&!l.value)||!o){a();return}const r=o.clientX,i=o.clientY,c=Math.hypot(Math.max(r,innerWidth-r),Math.max(i,innerHeight-i)),B=n.value;await document.startViewTransition(async()=>{a(),await Mn()}).ready,n.value!==B&&document.documentElement.animate({clipPath:n.value?[`circle(${c}px at ${r}px ${i}px)`,`circle(0px at ${r}px ${i}px)`]:[`circle(0px at ${r}px ${i}px)`,`circle(${c}px at ${r}px ${i}px)`]},{duration:400,pseudoElement:n.value?"::view-transition-old(root)":"::view-transition-new(root)"})};return()=>p("button",{type:"button",id:"appearance-switch",onClick:t},[p(Hi,{style:{display:e.value==="auto"?"block":"none"}}),p($i,{style:{display:e.value==="dark"?"block":"none"}}),p(Qi,{style:{display:e.value==="light"?"block":"none"}})])}}),N8=R({name:"AppearanceMode",setup(){const s=ps(),{canToggle:n}=kl(),e=D(()=>s.value.outlookLocales.darkmode);return()=>n.value?p("div",{class:"appearance-wrapper"},[p("label",{class:"appearance-title",for:"appearance-switch"},e.value),p(Gi)]):null}});const Xa="VUEPRESS_THEME_COLOR";var $8=R({name:"ThemeColorPicker",props:{themeColor:{type:Object,required:!0}},setup(s){const n=(e="")=>{const l=document.documentElement.classList,a=nn(s.themeColor);if(!e){localStorage.removeItem(Xa),l.remove(...a);return}l.remove(...a.filter(t=>t!==e)),l.add(e),localStorage.setItem(Xa,e)};return As(()=>{const e=localStorage.getItem(Xa);e&&n(e)}),()=>p("ul",{id:"theme-color-picker"},[p("li",p("span",{class:"theme-color",onClick:()=>n()})),Ge(s.themeColor).map(([e,l])=>p("li",p("span",{style:{background:l},onClick:()=>n(e)})))])}});const xe=uo.enableThemeColor==="true",Q8=xe?mv(Ge(uo).filter(([s])=>s.startsWith("theme-"))):{};var H8=R({name:"ThemeColor",setup(){const s=ps(),n=D(()=>s.value.outlookLocales.themeColor);return()=>xe?p("div",{class:"theme-color-wrapper"},[p("label",{class:"theme-color-title",for:"theme-color-picker"},n.value),p($8,{themeColor:Q8})]):null}}),Wi=R({name:"ToggleFullScreenButton",setup(){const s=ps(),{isSupported:n,isFullscreen:e,toggle:l}=ro(),a=D(()=>s.value.outlookLocales.fullscreen);return()=>n?p("div",{class:"full-screen-wrapper"},[p("label",{class:"full-screen-title",for:"full-screen-switch"},a.value),p("button",{type:"button",id:"full-screen-switch",class:"full-screen",ariaPressed:e.value,onClick:()=>l()},e.value?p(ji):p(zi))]):null}}),Ki=R({name:"OutlookSettings",setup(){const s=qn(),n=Ee(),e=D(()=>!n.value&&s.value.fullscreen);return()=>p(Fa,()=>[xe?p(H8):null,p(N8),e.value?p(Wi):null])}}),z8=R({name:"NavScreen",props:{show:Boolean},emits:["close"],slots:Object,setup(s,{emit:n,slots:e}){const l=Bs(),{isMobile:a}=Tl(),t=Vs(),o=co(t);return As(()=>{t.value=document.body,cs(a,r=>{!r&&s.show&&(o.value=!1,n("close"))}),cs(()=>l.value.path,()=>{o.value=!1,n("close")})}),ze(()=>{o.value=!1}),()=>p(se,{name:"fade",onEnter:()=>{o.value=!0},onAfterLeave:()=>{o.value=!1}},()=>{var r,i;return s.show?p("div",{id:"nav-screen"},p("div",{class:"vp-nav-screen-container"},[(r=e.before)==null?void 0:r.call(e),p(q8),p("div",{class:"vp-outlook-wrapper"},p(Ki)),(i=e.after)==null?void 0:i.call(e)])):null})}}),j8=R({name:"NavbarBrand",setup(){const s=Cn(),n=Ue(),e=ps(),l=D(()=>e.value.home||s.value),a=D(()=>n.value.title),t=D(()=>e.value.navTitle??a.value),o=D(()=>e.value.logo?bs(e.value.logo):null),r=D(()=>e.value.logoDark?bs(e.value.logoDark):null);return()=>p(ks,{to:l.value,class:"vp-brand"},()=>[o.value?p("img",{class:["vp-nav-logo",{light:!!r.value}],src:o.value,alt:""}):null,r.value?p("img",{class:["vp-nav-logo dark"],src:r.value,alt:""}):null,t.value?p("span",{class:["vp-site-name",{"hide-in-pad":o.value&&e.value.hideSiteNameOnMobile!==!1}]},t.value):null])}}),U8=R({name:"NavbarLinks",setup(){const s=Ni();return()=>s.value.length?p("nav",{class:"vp-nav-links"},s.value.map(n=>p("div",{class:"nav-item hide-in-mobile"},"children"in n?p(R8,{config:n}):p(Gs,{config:n})))):null}}),G8=R({name:"RepoLink",components:{BitbucketIcon:li,GiteeIcon:ei,GitHubIcon:si,GitLabIcon:ni,SourceIcon:ai},setup(){const s=M8();return()=>s.value?p("div",{class:"nav-item vp-repo"},p("a",{class:"vp-repo-link",href:s.value.link,target:"_blank",rel:"noopener noreferrer","aria-label":s.value.label},p(sn(`${s.value.type}Icon`),{style:{width:"1.25rem",height:"1.25rem",verticalAlign:"middle"}}))):null}});const Yi=({active:s=!1},{emit:n})=>p("button",{type:"button",class:["vp-toggle-navbar-button",{"is-active":s}],"aria-label":"Toggle Navbar","aria-expanded":s,"aria-controls":"nav-screen",onClick:()=>n("toggle")},p("span",[p("span",{class:"vp-top"}),p("span",{class:"vp-middle"}),p("span",{class:"vp-bottom"})]));Yi.displayName="ToggleNavbarButton";var W8=Yi;const bt=(s,{emit:n})=>p("button",{type:"button",class:"vp-toggle-sidebar-button",title:"Toggle Sidebar",onClick:()=>n("toggle")},p("span",{class:"icon"}));bt.displayName="ToggleSidebarButton",bt.emits=["toggle"];var K8=bt,Y8=R({name:"OutlookButton",setup(){const{isSupported:s}=ro(),n=qn(),e=Ee(),l=Bs(),{canToggle:a}=kl(),t=U(!1),o=D(()=>!e.value&&n.value.fullscreen&&s);return cs(()=>l.value.path,()=>{t.value=!1}),()=>a.value||o.value||xe?p("div",{class:"nav-item hide-in-mobile"},a.value&&!o.value&&!xe?p(Gi):o.value&&!a.value&&!xe?p(Wi):p("button",{type:"button",class:["outlook-button",{open:t.value}],tabindex:"-1","aria-hidden":!0},[p(Ui),p("div",{class:"outlook-dropdown"},p(Ki))])):null}}),Z8=R({name:"NavBar",emits:["toggleSidebar"],slots:Object,setup(s,{emit:n,slots:e}){const l=ps(),{isMobile:a}=Tl(),t=U(!1),o=D(()=>{const{navbarAutoHide:B="mobile"}=l.value;return B!=="none"&&(B==="always"||a.value)}),r=D(()=>l.value.navbarLayout||{start:["Brand"],center:["Links"],end:["Language","Repo","Outlook","Search"]}),i={Brand:j8,Language:Za,Links:U8,Repo:G8,Outlook:Y8,Search:dn("Docsearch")?sn("Docsearch"):dn("SearchBox")?sn("SearchBox"):Za},c=B=>i[B]??(dn(B)?sn(B):Za);return()=>{var B,u,y,v,f,b;return[p("header",{id:"navbar",class:["vp-navbar",{"auto-hide":o.value,"hide-icon":l.value.navbarIcon===!1}]},[p("div",{class:"vp-navbar-start"},[p(K8,{onToggle:()=>{t.value&&(t.value=!1),n("toggleSidebar")}}),(B=e.startBefore)==null?void 0:B.call(e),(r.value.start||[]).map(_=>p(c(_))),(u=e.startAfter)==null?void 0:u.call(e)]),p("div",{class:"vp-navbar-center"},[(y=e.centerBefore)==null?void 0:y.call(e),(r.value.center||[]).map(_=>p(c(_))),(v=e.centerAfter)==null?void 0:v.call(e)]),p("div",{class:"vp-navbar-end"},[(f=e.endBefore)==null?void 0:f.call(e),(r.value.end||[]).map(_=>p(c(_))),(b=e.endAfter)==null?void 0:b.call(e),p(W8,{active:t.value,onToggle:()=>{t.value=!t.value}})])]),p(z8,{show:t.value,onClose:()=>{t.value=!1}},{before:()=>{var _;return(_=e.screenTop)==null?void 0:_.call(e)},after:()=>{var _;return(_=e.screenBottom)==null?void 0:_.call(e)}})]}}}),X8=R({name:"SidebarChild",props:{config:{type:Object,required:!0}},setup(s){const n=Ln();return()=>[Si(s.config,{class:["vp-sidebar-link",`vp-sidebar-${s.config.type}`,{active:$e(n,s.config,!0)}],exact:!0}),Pi(s.config.children)]}}),J8=R({name:"SidebarGroup",props:{config:{type:Object,required:!0},open:{type:Boolean,required:!0}},emits:["toggle"],setup(s,{emit:n}){const e=Ln(),l=D(()=>$e(e,s.config)),a=D(()=>$e(e,s.config,!0));return()=>{const{collapsible:t,children:o=[],icon:r,prefix:i,link:c,text:B}=s.config;return p("section",{class:"vp-sidebar-group"},[p(t?"button":"p",{class:["vp-sidebar-heading",{clickable:t||c,exact:a.value,active:l.value}],...t?{type:"button",onClick:()=>n("toggle"),onKeydown:u=>{u.key==="Enter"&&n("toggle")}}:{}},[p(Hs,{icon:r}),c?p(Gs,{class:"vp-sidebar-title",config:{text:B,link:c},noExternalLinkIcon:!0}):p("span",{class:"vp-sidebar-title"},B),t?p("span",{class:["vp-arrow",s.open?"down":"end"]}):null]),s.open||!t?p(Zi,{key:i,config:o}):null])}}}),Zi=R({name:"SidebarLinks",props:{config:{type:Array,required:!0}},setup(s){const n=Ln(),e=U(-1),l=a=>{e.value=a===e.value?-1:a};return cs(()=>n.path,()=>{const a=s.config.findIndex(t=>xi(n,t));e.value=a},{immediate:!0,flush:"post"}),()=>p("ul",{class:"vp-sidebar-links"},s.config.map((a,t)=>p("li",a.type==="group"?p(J8,{config:a,open:t===e.value,onToggle:()=>l(t)}):p(X8,{config:a}))))}}),s6=R({name:"SideBar",slots:Object,setup(s,{slots:n}){const e=Ln(),l=ps(),a=mo(),t=Vs();return As(()=>{cs(()=>e.hash,o=>{const r=document.querySelector(`.vp-sidebar a.vp-sidebar-link[href="${e.path}${o}"]`);if(!r)return;const{top:i,height:c}=t.value.getBoundingClientRect(),{top:B,height:u}=r.getBoundingClientRect();B<i?r.scrollIntoView(!0):B+u>i+c&&r.scrollIntoView(!1)},{immediate:!0})}),()=>{var o,r,i;return p("aside",{ref:t,id:"sidebar",class:["vp-sidebar",{"hide-icon":l.value.sidebarIcon===!1}]},[(o=n.top)==null?void 0:o.call(n),((r=n.default)==null?void 0:r.call(n))||p(Zi,{config:a.value}),(i=n.bottom)==null?void 0:i.call(n)])}}}),Ao=R({name:"CommonWrapper",props:{containerClass:{type:String,default:""},noNavbar:Boolean,noSidebar:Boolean,noToc:Boolean},slots:Object,setup(s,{slots:n}){const e=zs(),l=Bs(),a=hs(),t=ps(),{isMobile:o,isPC:r}=Tl(),[i,c]=Ba(!1),[B,u]=Ba(!1),y=mo(),v=U(!1),f=D(()=>s.noNavbar||a.value.navbar===!1||t.value.navbar===!1?!1:!!(l.value.title||t.value.logo||t.value.repo||t.value.navbar)),b=D(()=>s.noSidebar?!1:a.value.sidebar!==!1&&y.value.length!==0&&!a.value.home),_=D(()=>s.noToc||a.value.home?!1:a.value.toc||t.value.toc!==!1&&a.value.toc!==!1),F={x:0,y:0},I=C=>{F.x=C.changedTouches[0].clientX,F.y=C.changedTouches[0].clientY},h=C=>{const W=C.changedTouches[0].clientX-F.x,N=C.changedTouches[0].clientY-F.y;Math.abs(W)>Math.abs(N)*1.5&&Math.abs(W)>40&&(W>0&&F.x<=80?c(!0):c(!1))},w=()=>window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0;let M=0;return ws("scroll",xv(()=>{const C=w();C<=58||C<M?v.value=!1:M+200<C&&!i.value&&(v.value=!0),M=C},300,!0)),cs(o,C=>{C||c(!1)}),As(()=>{const C=co(document.body);cs(i,N=>{C.value=N});const W=e.afterEach(()=>{c(!1)});ze(()=>{C.value=!1,W()})}),()=>p(dn("GlobalEncrypt")?sn("GlobalEncrypt"):zc,()=>p("div",{class:["theme-container",{"no-navbar":!f.value,"no-sidebar":!b.value&&!(n.sidebar||n.sidebarTop||n.sidebarBottom),"has-toc":_.value,"hide-navbar":v.value,"sidebar-collapsed":!o.value&&!r.value&&B.value,"sidebar-open":o.value&&i.value},s.containerClass,a.value.containerClass||""],onTouchStart:I,onTouchEnd:h},[f.value?p(Z8,{onToggleSidebar:()=>c()},{startBefore:()=>{var C;return(C=n.navbarStartBefore)==null?void 0:C.call(n)},startAfter:()=>{var C;return(C=n.navbarStartAfter)==null?void 0:C.call(n)},centerBefore:()=>{var C;return(C=n.navbarCenterBefore)==null?void 0:C.call(n)},centerAfter:()=>{var C;return(C=n.navbarCenterAfter)==null?void 0:C.call(n)},endBefore:()=>{var C;return(C=n.navbarEndBefore)==null?void 0:C.call(n)},endAfter:()=>{var C;return(C=n.navbarEndAfter)==null?void 0:C.call(n)},screenTop:()=>{var C;return(C=n.navScreenTop)==null?void 0:C.call(n)},screenBottom:()=>{var C;return(C=n.navScreenBottom)==null?void 0:C.call(n)}}):null,p(se,{name:"fade"},()=>i.value?p("div",{class:"vp-sidebar-mask",onClick:()=>c(!1)}):null),p(se,{name:"fade"},()=>o.value?null:p("div",{class:"toggle-sidebar-wrapper",onClick:()=>u()},p("span",{class:["arrow",B.value?"end":"start"]}))),p(s6,{},{...n.sidebar?{default:()=>n.sidebar()}:{},top:()=>{var C;return(C=n.sidebarTop)==null?void 0:C.call(n)},bottom:()=>{var C;return(C=n.sidebarBottom)==null?void 0:C.call(n)}}),n.default(),p(P8)]))}}),ms=R({name:"DropTransition",props:{type:{type:String,default:"single"},delay:{type:Number,default:0},duration:{type:Number,default:.25},appear:Boolean},slots:Object,setup(s,{slots:n}){const e=a=>{a.style.transition=`transform ${s.duration}s ease-in-out ${s.delay}s, opacity ${s.duration}s ease-in-out ${s.delay}s`,a.style.transform="translateY(-20px)",a.style.opacity="0"},l=a=>{a.style.transform="translateY(0)",a.style.opacity="1"};return()=>p(s.type==="single"?se:uu,{name:"drop",appear:s.appear,onAppear:e,onAfterAppear:l,onEnter:e,onAfterEnter:l,onBeforeLeave:e},()=>n.default())}});const Dt=({custom:s})=>p(_c,{class:["theme-hope-content",{custom:s}]});Dt.displayName="MarkdownContent",Dt.props={custom:Boolean};var fo=Dt;const Xi=()=>p(ts,{name:"author"},()=>p("path",{d:"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z"}));Xi.displayName="AuthorIcon";const Ji=()=>p(ts,{name:"calendar"},()=>p("path",{d:"M716.4 110.137c0-18.753-14.72-33.473-33.472-33.473-18.753 0-33.473 14.72-33.473 33.473v33.473h66.993v-33.473zm-334.87 0c0-18.753-14.72-33.473-33.473-33.473s-33.52 14.72-33.52 33.473v33.473h66.993v-33.473zm468.81 33.52H716.4v100.465c0 18.753-14.72 33.473-33.472 33.473a33.145 33.145 0 01-33.473-33.473V143.657H381.53v100.465c0 18.753-14.72 33.473-33.473 33.473a33.145 33.145 0 01-33.473-33.473V143.657H180.6A134.314 134.314 0 0046.66 277.595v535.756A134.314 134.314 0 00180.6 947.289h669.74a134.36 134.36 0 00133.94-133.938V277.595a134.314 134.314 0 00-133.94-133.938zm33.473 267.877H147.126a33.145 33.145 0 01-33.473-33.473c0-18.752 14.72-33.473 33.473-33.473h736.687c18.752 0 33.472 14.72 33.472 33.473a33.145 33.145 0 01-33.472 33.473z"}));Ji.displayName="CalendarIcon";const sB=()=>p(ts,{name:"category"},()=>p("path",{d:"M148.41 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H148.41c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.311-40.31zM147.556 553.478H429.73c22.263 0 40.311 18.048 40.311 40.31v282.176c0 22.263-18.048 40.312-40.31 40.312H147.555c-22.263 0-40.311-18.049-40.311-40.312V593.79c0-22.263 18.048-40.311 40.31-40.311zM593.927 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H593.927c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.31-40.31zM730.22 920.502H623.926c-40.925 0-74.22-33.388-74.22-74.425V623.992c0-41.038 33.387-74.424 74.425-74.424h222.085c41.038 0 74.424 33.226 74.424 74.067v114.233c0 10.244-8.304 18.548-18.547 18.548s-18.548-8.304-18.548-18.548V623.635c0-20.388-16.746-36.974-37.33-36.974H624.13c-20.585 0-37.331 16.747-37.331 37.33v222.086c0 20.585 16.654 37.331 37.126 37.331H730.22c10.243 0 18.547 8.304 18.547 18.547 0 10.244-8.304 18.547-18.547 18.547z"}));sB.displayName="CategoryIcon";const nB=()=>p(ts,{name:"print"},()=>p("path",{d:"M819.2 364.8h-44.8V128c0-17.067-14.933-32-32-32H281.6c-17.067 0-32 14.933-32 32v236.8h-44.8C145.067 364.8 96 413.867 96 473.6v192c0 59.733 49.067 108.8 108.8 108.8h44.8V896c0 17.067 14.933 32 32 32h460.8c17.067 0 32-14.933 32-32V774.4h44.8c59.733 0 108.8-49.067 108.8-108.8v-192c0-59.733-49.067-108.8-108.8-108.8zM313.6 160h396.8v204.8H313.6V160zm396.8 704H313.6V620.8h396.8V864zM864 665.6c0 25.6-19.2 44.8-44.8 44.8h-44.8V588.8c0-17.067-14.933-32-32-32H281.6c-17.067 0-32 14.933-32 32v121.6h-44.8c-25.6 0-44.8-19.2-44.8-44.8v-192c0-25.6 19.2-44.8 44.8-44.8h614.4c25.6 0 44.8 19.2 44.8 44.8v192z"}));nB.displayName="PrintIcon";const eB=()=>p(ts,{name:"tag"},()=>p("path",{d:"M939.902 458.563L910.17 144.567c-1.507-16.272-14.465-29.13-30.737-30.737L565.438 84.098h-.402c-3.215 0-5.726 1.005-7.634 2.913l-470.39 470.39a10.004 10.004 0 000 14.164l365.423 365.424c1.909 1.908 4.42 2.913 7.132 2.913s5.223-1.005 7.132-2.913l470.39-470.39c2.01-2.11 3.014-5.023 2.813-8.036zm-240.067-72.121c-35.458 0-64.286-28.828-64.286-64.286s28.828-64.285 64.286-64.285 64.286 28.828 64.286 64.285-28.829 64.286-64.286 64.286z"}));eB.displayName="TagIcon";const lB=()=>p(ts,{name:"timer"},()=>p("path",{d:"M799.387 122.15c4.402-2.978 7.38-7.897 7.38-13.463v-1.165c0-8.933-7.38-16.312-16.312-16.312H256.33c-8.933 0-16.311 7.38-16.311 16.312v1.165c0 5.825 2.977 10.874 7.637 13.592 4.143 194.44 97.22 354.963 220.201 392.763-122.204 37.542-214.893 196.511-220.2 389.397-4.661 5.049-7.638 11.651-7.638 19.03v5.825h566.49v-5.825c0-7.379-2.849-13.981-7.509-18.9-5.049-193.016-97.867-351.985-220.2-389.527 123.24-37.67 216.446-198.453 220.588-392.892zM531.16 450.445v352.632c117.674 1.553 211.787 40.778 211.787 88.676H304.097c0-48.286 95.149-87.382 213.728-88.676V450.445c-93.077-3.107-167.901-81.297-167.901-177.093 0-8.803 6.99-15.793 15.793-15.793 8.803 0 15.794 6.99 15.794 15.793 0 80.261 63.69 145.635 142.01 145.635s142.011-65.374 142.011-145.635c0-8.803 6.99-15.793 15.794-15.793s15.793 6.99 15.793 15.793c0 95.019-73.789 172.82-165.96 177.093z"}));lB.displayName="TimerIcon";const aB=()=>p(ts,{name:"word"},()=>[p("path",{d:"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z"}),p("path",{d:"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z"})]);aB.displayName="WordIcon";const ae=()=>{const s=ps();return D(()=>s.value.metaLocales)};var n6=R({name:"AuthorInfo",inheritAttrs:!1,props:{author:{type:Array,required:!0},pure:Boolean},setup(s){const n=ae();return()=>s.author.length?p("span",{class:"page-author-info","aria-label":`${n.value.author}${s.pure?"":"🖊"}`,...s.pure?{}:{"data-balloon-pos":"down"}},[p(Xi),p("span",s.author.map(e=>e.url?p("a",{class:"page-author-item",href:e.url,target:"_blank",rel:"noopener noreferrer"},e.name):p("span",{class:"page-author-item"},e.name))),p("span",{property:"author",content:s.author.map(e=>e.name).join(", ")})]):null}}),e6=R({name:"CategoryInfo",inheritAttrs:!1,props:{category:{type:Array,required:!0},pure:Boolean},setup(s){const n=zs(),e=Bs(),l=ae(),a=(t,o="")=>{o&&e.value.path!==o&&(t.preventDefault(),n.push(o))};return()=>s.category.length?p("span",{class:"page-category-info","aria-label":`${l.value.category}${s.pure?"":"🌈"}`,...s.pure?{}:{"data-balloon-pos":"down"}},[p(sB),s.category.map(({name:t,path:o})=>p("span",{class:["page-category-item",{[`category${ba(t,9)}`]:!s.pure,clickable:o}],role:o?"navigation":"",onClick:r=>a(r,o)},t)),p("meta",{property:"articleSection",content:s.category.map(({name:t})=>t).join(",")})]):null}}),l6=R({name:"DateInfo",inheritAttrs:!1,props:{date:{type:Object,default:null},localizedDate:{type:String,default:""},pure:Boolean},setup(s){const n=hc(),e=ae();return()=>s.date?p("span",{class:"page-date-info","aria-label":`${e.value.date}${s.pure?"":"📅"}`,...s.pure?{}:{"data-balloon-pos":"down"}},[p(Ji),p("span",p(Fa,()=>s.localizedDate||s.date.toLocaleDateString(n.value))),p("meta",{property:"datePublished",content:s.date.toISOString()||""})]):null}}),a6=R({name:"OriginalInfo",inheritAttrs:!1,props:{isOriginal:Boolean},setup(s){const n=ae();return()=>s.isOriginal?p("span",{class:"page-original-info"},n.value.origin):null}}),t6=R({name:"ReadingTimeInfo",inheritAttrs:!1,props:{readingTime:{type:Object,default:()=>null},readingTimeLocale:{type:Object,default:()=>null},pure:Boolean},setup(s){const n=ae(),e=D(()=>{if(!s.readingTime)return null;const{minutes:l}=s.readingTime;return l<1?"PT1M":`PT${Math.round(l)}M`});return()=>{var l,a;return(l=s.readingTimeLocale)!=null&&l.time?p("span",{class:"page-reading-time-info","aria-label":`${n.value.readingTime}${s.pure?"":"⌛"}`,...s.pure?{}:{"data-balloon-pos":"down"}},[p(lB),p("span",(a=s.readingTimeLocale)==null?void 0:a.time),p("meta",{property:"timeRequired",content:e.value})]):null}}}),o6=R({name:"TagInfo",inheritAttrs:!1,props:{tag:{type:Array,default:()=>[]},pure:Boolean},setup(s){const n=zs(),e=Bs(),l=ae(),a=(t,o="")=>{o&&e.value.path!==o&&(t.preventDefault(),n.push(o))};return()=>s.tag.length?p("span",{class:"page-tag-info","aria-label":`${l.value.tag}${s.pure?"":"🏷"}`,...s.pure?{}:{"data-balloon-pos":"down"}},[p(eB),s.tag.map(({name:t,path:o})=>p("span",{class:["page-tag-item",{[`tag${ba(t,9)}`]:!s.pure,clickable:o}],role:o?"navigation":"",onClick:r=>a(r,o)},t)),p("meta",{property:"keywords",content:s.tag.map(({name:t})=>t).join(",")})]):null}}),p6=R({name:"ReadTimeInfo",inheritAttrs:!1,props:{readingTime:{type:Object,default:()=>null},readingTimeLocale:{type:Object,default:()=>null},pure:Boolean},setup(s){const n=ae();return()=>{var e,l,a;return(e=s.readingTimeLocale)!=null&&e.words?p("span",{class:"page-word-info","aria-label":`${n.value.words}${s.pure?"":"🔠"}`,...s.pure?{}:{"data-balloon-pos":"down"}},[p(aB),p("span",(l=s.readingTimeLocale)==null?void 0:l.words),p("meta",{property:"wordCount",content:(a=s.readingTime)==null?void 0:a.words})]):null}}}),tB=R({name:"PageInfo",components:{AuthorInfo:n6,CategoryInfo:e6,DateInfo:l6,OriginalInfo:a6,PageViewInfo:()=>null,ReadingTimeInfo:t6,TagInfo:o6,WordInfo:p6},props:{items:{type:[Array,Boolean],default:()=>["Author","Original","Date","PageView","ReadingTime","Category","Tag"]},info:{type:Object,required:!0}},setup(s){const n=Ee();return()=>s.items?p("div",{class:"page-info"},s.items.map(e=>p(sn(`${e}Info`),{...s.info,pure:n.value}))):null}}),r6=R({name:"PrintButton",setup(){const s=qn(),n=ps();return()=>s.value.print===!1?null:p("button",{type:"button",class:"print-button",title:n.value.metaLocales.print,onClick:()=>{window.print()}},p(nB))}});const c6=({title:s,level:n,slug:e})=>p(ks,{to:`#${e}`,class:["toc-link",`level${n}`]},()=>s),_t=(s,n)=>{const e=Ln();return s.length&&n>0?p("ul",{class:"toc-list"},s.map(l=>{const a=_t(l.children,n-1);return[p("li",{class:["toc-item",{active:e.hash===`#${l.slug}`}]},c6(l)),a?p("li",a):null]})):null};var oB=R({name:"TOC",props:{items:{type:Array,default:()=>[]},headerDepth:{type:Number,default:2}},slots:Object,setup(s,{slots:n}){const e=Ln(),l=Bs(),a=ae(),t=Vs(),o=U("-1.7rem"),r=c=>{var B;(B=t.value)==null||B.scrollTo({top:c,behavior:"smooth"})},i=()=>{if(t.value){const c=document.querySelector(".toc-item.active");c?o.value=`${c.getBoundingClientRect().top-t.value.getBoundingClientRect().top+t.value.scrollTop}px`:o.value="-1.7rem"}else o.value="-1.7rem"};return As(()=>{cs(()=>e.hash,c=>{if(t.value){const B=document.querySelector(`#toc a.toc-link[href$="${c}"]`);if(!B)return;const{top:u,height:y}=t.value.getBoundingClientRect(),{top:v,height:f}=B.getBoundingClientRect();v<u?r(t.value.scrollTop+v-u):v+f>u+y&&r(t.value.scrollTop+v+f-u-y)}}),cs(()=>e.fullPath,i,{flush:"post",immediate:!0})}),()=>{var B,u;const c=s.items.length?_t(s.items,s.headerDepth):l.value.headers?_t(l.value.headers,s.headerDepth):null;return c?p("div",{class:"toc-place-holder"},[p("aside",{id:"toc"},[(B=n.before)==null?void 0:B.call(n),p("div",{class:"toc-header"},[a.value.toc,p(r6)]),p("div",{class:"toc-wrapper",ref:t},[c,p("div",{class:"toc-marker",style:{top:o.value}})]),(u=n.after)==null?void 0:u.call(n)])]):null}}}),Eo=R({name:"SkipLink",props:{content:{type:String,default:"main-content"}},setup(s){const n=Bs(),e=ps(),l=Vs(),a=({target:t})=>{const o=document.querySelector(t.hash);if(o){const r=()=>{o.removeAttribute("tabindex"),o.removeEventListener("blur",r)};o.setAttribute("tabindex","-1"),o.addEventListener("blur",r),o.focus(),window.scrollTo(0,0)}};return As(()=>{cs(()=>n.value.path,()=>l.value.focus())}),()=>[p("span",{ref:l,tabindex:"-1"}),p("a",{href:`#${s.content}`,class:"vp-skip-link sr-only",onClick:a},e.value.routeLocales.skipToContent)]}});let Ja=null,Ze=null;const i6={wait:()=>Ja,pending:()=>{Ja=new Promise(s=>Ze=s)},resolve:()=>{Ze==null||Ze(),Ja=null,Ze=null}},pB=()=>i6;var rB=R({name:"FadeSlideY",slots:Object,setup(s,{slots:n}){const{resolve:e,pending:l}=pB();return()=>p(se,{name:"fade-slide-y",mode:"out-in",onBeforeEnter:e,onBeforeLeave:l},()=>{var a;return(a=n.default)==null?void 0:a.call(n)})}});const B6=(s,n)=>{const e=s.replace(n,"/").split("/"),l=[];let a=Jt(n);return e.forEach((t,o)=>{o!==e.length-1?(a+=`${t}/`,l.push({link:a,name:t||"Home"})):t!==""&&(a+=t,l.push({link:a,name:t}))}),l},cB=(s,{slots:n})=>{var u,y;const{bgImage:e,bgImageDark:l,bgImageStyle:a,color:t,description:o,image:r,imageDark:i,header:c,features:B=[]}=s;return p("div",{class:"vp-feature-wrapper"},[e?p("div",{class:["vp-feature-bg",{light:l}],style:[{"background-image":`url(${e})`},a]}):null,l?p("div",{class:"vp-feature-bg dark",style:[{"background-image":`url(${l})`},a]}):null,p("div",{class:"vp-feature",style:t?{color:t}:{}},[((u=n.image)==null?void 0:u.call(n,s))||[r?p("img",{class:["vp-feature-image",{light:i}],src:bs(r),alt:""}):null,i?p("img",{class:"vp-feature-image dark",src:bs(i),alt:""}):null],((y=n.info)==null?void 0:y.call(n,s))||[c?p("h2",{class:"vp-feature-header"},c):null,o?p("p",{class:"vp-feature-description",innerHTML:o}):null],B.length?p("div",{class:"vp-features"},B.map(({icon:v,title:f,details:b,link:_})=>{const F=[p("h3",{class:"vp-feature-title"},[p(Hs,{icon:v}),p("span",{innerHTML:f})]),p("p",{class:"vp-feature-details",innerHTML:b})];return _?yl(_)?p("a",{class:"vp-feature-item link",href:_,"aria-label":f,target:"_blank"},F):p(ks,{class:"vp-feature-item link",to:_,"aria-label":f},()=>F):p("div",{class:"vp-feature-item"},F)})):null])])};cB.displayName="FeaturePanel";var Zp=cB;const iB=s=>{const{icon:n="",color:e,size:l}=s,a={};return e&&(a.color=e),l&&(a.height=Number.isNaN(Number(l))?l:`${l}px`),me(n)?p("img",{class:"icon",src:n,"no-view":"",style:a}):Cl(n)?p("img",{class:"icon",src:bs(n),"aria-hidden":"","no-view":"",style:a}):p(sn("FontIcon"),s)};iB.displayName="HopeIcon";var d6=iB,u6=R({name:"HeroInfo",slots:Object,setup(s,{slots:n}){const e=hs(),l=Ue(),a=D(()=>e.value.heroFullScreen??!1),t=D(()=>{const{heroText:c,tagline:B}=e.value;return{text:c??l.value.title??"Hello",tagline:B??l.value.description??"",isFullScreen:a.value}}),o=D(()=>{const{heroText:c,heroImage:B,heroImageDark:u,heroAlt:y,heroImageStyle:v}=e.value;return{image:B?bs(B):null,imageDark:u?bs(u):null,heroStyle:v,alt:y||c||"",isFullScreen:a.value}}),r=D(()=>{const{bgImage:c,bgImageDark:B,bgImageStyle:u}=e.value;return{image:Rn(c)?bs(c):null,imageDark:Rn(B)?bs(B):null,bgStyle:u,isFullScreen:a.value}}),i=D(()=>e.value.actions??[]);return()=>{var c,B,u;return p("header",{class:["vp-hero-info-wrapper",{fullscreen:a.value}]},[((c=n.heroBg)==null?void 0:c.call(n,r.value))||[r.value.image?p("div",{class:["vp-hero-mask",{light:r.value.imageDark}],style:[{"background-image":`url(${r.value.image})`},r.value.bgStyle]}):null,r.value.imageDark?p("div",{class:"vp-hero-mask dark",style:[{"background-image":`url(${r.value.imageDark})`},r.value.bgStyle]}):null],p("div",{class:"vp-hero-info"},[((B=n.heroImage)==null?void 0:B.call(n,o.value))||p(ms,{appear:!0,type:"group"},()=>[o.value.image?p("img",{key:"light",class:["vp-hero-image",{light:o.value.imageDark}],style:o.value.heroStyle,src:o.value.image,alt:o.value.alt}):null,o.value.imageDark?p("img",{key:"dark",class:"vp-hero-image dark",style:o.value.heroStyle,src:o.value.imageDark,alt:o.value.alt}):null]),((u=n.heroInfo)==null?void 0:u.call(n,t.value))??p("div",{class:"vp-hero-infos"},[t.value.text?p(ms,{appear:!0,delay:.04},()=>p("h1",{id:"main-title"},t.value.text)):null,t.value.tagline?p(ms,{appear:!0,delay:.08},()=>p("p",{id:"main-description",innerHTML:t.value.tagline})):null,i.value.length?p(ms,{appear:!0,delay:.12},()=>p("p",{class:"vp-hero-actions"},i.value.map(y=>p(Gs,{class:["vp-hero-action",y.type||"default"],config:y,noExternalLinkIcon:!0},y.icon?{before:()=>p(d6,{icon:y.icon})}:{})))):null])])])}}});const BB=(s,{slots:n})=>{var y,v,f;const{bgImage:e,bgImageDark:l,bgImageStyle:a,color:t,description:o,image:r,imageDark:i,header:c,highlights:B=[],type:u="un-order"}=s;return p("div",{class:"vp-highlight-wrapper",style:t?{color:t}:{}},[e?p("div",{class:["vp-highlight-bg",{light:l}],style:[{"background-image":`url(${e})`},a]}):null,l?p("div",{class:"vp-highlight-bg dark",style:[{"background-image":`url(${l})`},a]}):null,p("div",{class:"vp-highlight"},[((y=n.image)==null?void 0:y.call(n,s))||[r?p("img",{class:["vp-highlight-image",{light:i}],src:bs(r),alt:""}):null,i?p("img",{class:"vp-highlight-image dark",src:bs(i),alt:""}):null],((v=n.info)==null?void 0:v.call(n,s))||[p("div",{class:"vp-highlight-info-wrapper"},p("div",{class:"vp-highlight-info"},[c?p("h2",{class:"vp-highlight-header",innerHTML:c}):null,o?p("p",{class:"vp-highlight-description",innerHTML:o}):null,((f=n.highlights)==null?void 0:f.call(n,B))||p(u==="order"?"ol":u==="no-order"?"dl":"ul",{class:"vp-highlights"},B.map(({icon:b,title:_,details:F,link:I})=>{const h=[p(u==="no-order"?"dt":"h3",{class:"vp-highlight-title"},[b?p(Hs,{class:"vp-highlight-icon",icon:b}):null,p("span",{innerHTML:_})]),F?p(u==="no-order"?"dd":"p",{class:"vp-highlight-details",innerHTML:F}):null];return p(u==="no-order"?"div":"li",{class:["vp-highlight-item-wrapper",{link:I}]},I?uv(I)?p("a",{class:"vp-highlight-item link",href:I,"aria-label":_,target:"_blank"},h):p(ks,{class:"vp-highlight-item link",to:I,"aria-label":_},()=>h):p("div",{class:"vp-highlight-item"},h))}))]))]])])};BB.displayName="HighlightPanel";var y6=BB,v6=R({name:"HomePage",slots:Object,setup(s,{slots:n}){const e=Ee(),l=hs(),a=D(()=>{const{features:o}=l.value;return ss(o)?o:null}),t=D(()=>{const{highlights:o}=l.value;return ss(o)?o:null});return()=>{var o,r,i,c;return p("main",{id:"main-content",class:["vp-project-home ",{pure:e.value}],"aria-labelledby":l.value.heroText===null?"":"main-title"},[(o=n.top)==null?void 0:o.call(n),p(u6),((r=t.value)==null?void 0:r.map(B=>"features"in B?p(Zp,B):p(y6,B)))||(a.value?p(ms,{appear:!0,delay:.24},()=>p(Zp,{features:a.value})):null),(i=n.center)==null?void 0:i.call(n),p(ms,{appear:!0,delay:.32},()=>p(fo)),(c=n.bottom)==null?void 0:c.call(n)])}}}),m6=R({name:"BreadCrumb",setup(){const s=zs(),n=Bs(),e=Cn(),l=hs(),a=ps(),t=Vs([]),o=D(()=>(l.value.breadcrumb||l.value.breadcrumb!==!1&&a.value.breadcrumb!==!1)&&t.value.length>1),r=D(()=>l.value.breadcrumbIcon||l.value.breadcrumbIcon!==!1&&a.value.breadcrumbIcon!==!1),i=()=>{const c=s.getRoutes(),B=B6(n.value.path,e.value).map(({link:u,name:y})=>{const v=c.find(f=>f.path===u);if(v){const{meta:f,path:b}=Ne(s,v.path);return{title:f[Fs.shortTitle]||f[Fs.title]||y,icon:f[Fs.icon],path:b}}return null}).filter(u=>u!==null);B.length>1&&(t.value=B)};return As(()=>{cs(()=>n.value.path,i,{immediate:!0})}),()=>p("nav",{class:["vp-breadcrumb",{disable:!o.value}]},o.value?p("ol",{vocab:"https://schema.org/",typeof:"BreadcrumbList"},t.value.map((c,B)=>p("li",{class:{"is-active":t.value.length-1===B},property:"itemListElement",typeof:"ListItem"},[p(ks,{to:c.path,property:"item",typeof:"WebPage"},()=>[r.value?p(Hs,{icon:c.icon}):null,p("span",{property:"name"},c.title||"Unknown")]),p("meta",{property:"position",content:B+1})]))):[])}});const Xp=s=>{const n=zs();return s===!1?!1:rs(s)?Oe(n,s,!0):Dl(s)?s:null},Ct=(s,n,e)=>{const l=s.findIndex(a=>a.link===n);if(l!==-1){const a=s[l+e];return a!=null&&a.link?a:null}for(const a of s)if(a.children){const t=Ct(a.children,n,e);if(t)return t}return null};var A6=R({name:"PageNav",setup(){const s=ps(),n=hs(),e=mo(),l=Bs(),a=Il(),t=D(()=>{const r=Xp(n.value.prev);return r===!1?null:r||(s.value.prevLink===!1?null:Ct(e.value,l.value.path,-1))}),o=D(()=>{const r=Xp(n.value.next);return r===!1?null:r||(s.value.nextLink===!1?null:Ct(e.value,l.value.path,1))});return ws("keydown",r=>{r.altKey&&(r.key==="ArrowRight"?o.value&&(a(o.value.link),r.preventDefault()):r.key==="ArrowLeft"&&t.value&&(a(t.value.link),r.preventDefault()))}),()=>t.value||o.value?p("nav",{class:"vp-page-nav"},[t.value?p(Gs,{class:"prev",config:t.value},()=>{var r,i;return[p("div",{class:"hint"},[p("span",{class:"arrow start"}),s.value.metaLocales.prev]),p("div",{class:"link"},[p(Hs,{icon:(r=t.value)==null?void 0:r.icon}),(i=t.value)==null?void 0:i.text])]}):null,o.value?p(Gs,{class:"next",config:o.value},()=>{var r,i;return[p("div",{class:"hint"},[s.value.metaLocales.next,p("span",{class:"arrow end"})]),p("div",{class:"link"},[(r=o.value)==null?void 0:r.text,p(Hs,{icon:(i=o.value)==null?void 0:i.icon})])]}):null]):null}});const f6={GitHub:":repo/edit/:branch/:path",GitLab:":repo/-/edit/:branch/:path",Gitee:":repo/edit/:branch/:path",Bitbucket:":repo/src/:branch/:path?mode=edit&spa=0&at=:branch&fileviewer=file-view-default"},E6=({docsRepo:s,docsBranch:n,docsDir:e,filePathRelative:l,editLinkPattern:a})=>{if(!l)return null;const t=Jc(s);let o;return a?o=a:t!==null&&(o=f6[t]),o?o.replace(/:repo/,me(s)?s:`https://github.com/${s}`).replace(/:branch/,n).replace(/:path/,vc(`${Jt(e)}/${l}`)):null},F6=()=>{const s=ps(),n=Bs(),e=hs();return D(()=>{const{repo:l,docsRepo:a=l,docsBranch:t="main",docsDir:o="",editLink:r,editLinkPattern:i=""}=s.value;if(!(e.value.editLink??r??!0)||!a)return null;const c=E6({docsRepo:a,docsBranch:t,docsDir:o,editLinkPattern:i,filePathRelative:n.value.filePathRelative});return c?{text:s.value.metaLocales.editLink,link:c}:null})},h6=()=>{const s=Ue(),n=ps(),e=Bs(),l=hs();return D(()=>{var a,t;return!(l.value.lastUpdated??n.value.lastUpdated??!0)||!((a=e.value.git)!=null&&a.updatedTime)?null:new Date((t=e.value.git)==null?void 0:t.updatedTime).toLocaleString(s.value.lang)})},g6=()=>{const s=ps(),n=Bs(),e=hs();return D(()=>{var l;return e.value.contributors??s.value.contributors??!0?((l=n.value.git)==null?void 0:l.contributors)??null:null})};var b6=R({name:"PageTitle",setup(){const s=Bs(),n=hs(),e=ps(),{info:l,items:a}=C8();return()=>p("div",{class:"vp-page-title"},[p("h1",[e.value.titleIcon===!1?null:p(Hs,{icon:n.value.icon}),s.value.title]),p(tB,{info:l.value,...a.value===null?{}:{items:a.value}}),p("hr")])}});const dB=()=>p(ts,{name:"edit"},()=>[p("path",{d:"M430.818 653.65a60.46 60.46 0 0 1-50.96-93.281l71.69-114.012 7.773-10.365L816.038 80.138A60.46 60.46 0 0 1 859.225 62a60.46 60.46 0 0 1 43.186 18.138l43.186 43.186a60.46 60.46 0 0 1 0 86.373L588.879 565.55l-8.637 8.637-117.466 68.234a60.46 60.46 0 0 1-31.958 11.229z"}),p("path",{d:"M728.802 962H252.891A190.883 190.883 0 0 1 62.008 771.98V296.934a190.883 190.883 0 0 1 190.883-192.61h267.754a60.46 60.46 0 0 1 0 120.92H252.891a69.962 69.962 0 0 0-69.098 69.099V771.98a69.962 69.962 0 0 0 69.098 69.098h475.911A69.962 69.962 0 0 0 797.9 771.98V503.363a60.46 60.46 0 1 1 120.922 0V771.98A190.883 190.883 0 0 1 728.802 962z"})]);dB.displayName="EditIcon";var D6=R({name:"PageMeta",setup(){const s=ps(),n=F6(),e=h6(),l=g6();return()=>{const{metaLocales:a}=s.value;return p("footer",{class:"page-meta"},[n.value?p("div",{class:"meta-item edit-link"},p(Gs,{class:"label",config:n.value},{before:()=>p(dB)})):null,p("div",{class:"meta-item git-info"},[e.value?p("div",{class:"update-time"},[p("span",{class:"label"},`${a.lastUpdated}: `),p(Fa,()=>p("span",{class:"info"},e.value))]):null,l.value&&l.value.length?p("div",{class:"contributors"},[p("span",{class:"label"},`${a.contributors}: `),l.value.map(({email:t,name:o},r)=>[p("span",{class:"contributor",title:`email: ${t}`},o),r!==l.value.length-1?",":""])]):null])])}}}),_6=R({name:"NormalPage",slots:Object,setup(s,{slots:n}){const e=hs(),{isDarkmode:l}=kl(),a=ps(),t=D(()=>e.value.toc||e.value.toc!==!1&&a.value.toc!==!1);return()=>p("main",{id:"main-content",class:"vp-page"},p(dn("LocalEncrypt")?sn("LocalEncrypt"):zc,()=>{var o,r,i,c;return[(o=n.top)==null?void 0:o.call(n),e.value.cover?p("div",{class:"page-cover"},p("img",{src:bs(e.value.cover),alt:"","no-view":""})):null,p(m6),p(b6),t.value?p(oB,{headerDepth:e.value.headerDepth??a.value.headerDepth??2},{before:()=>{var B;return(B=n.tocBefore)==null?void 0:B.call(n)},after:()=>{var B;return(B=n.tocAfter)==null?void 0:B.call(n)}}):null,(r=n.contentBefore)==null?void 0:r.call(n),p(fo),(i=n.contentAfter)==null?void 0:i.call(n),p(D6),p(A6),dn("CommentService")?p(sn("CommentService"),{darkmode:l.value}):null,(c=n.bottom)==null?void 0:c.call(n)]}))}}),C6=R({name:"Layout",slots:Object,setup(s,{slots:n}){const e=qn(),l=ps(),a=Bs(),t=hs(),{isMobile:o}=Tl(),r=D(()=>{var i,c;return((i=l.value.blog)==null?void 0:i.sidebarDisplay)||((c=e.value.blog)==null?void 0:c.sidebarDisplay)||"mobile"});return()=>[p(Eo),p(Ao,{},{default:()=>{var i;return((i=n.default)==null?void 0:i.call(n))||(t.value.home?p(v6):p(rB,()=>p(_6,{key:a.value.path},{top:()=>{var c;return(c=n.top)==null?void 0:c.call(n)},bottom:()=>{var c;return(c=n.bottom)==null?void 0:c.call(n)},contentBefore:()=>{var c;return(c=n.contentBefore)==null?void 0:c.call(n)},contentAfter:()=>{var c;return(c=n.contentAfter)==null?void 0:c.call(n)},tocBefore:()=>{var c;return(c=n.tocBefore)==null?void 0:c.call(n)},tocAfter:()=>{var c;return(c=n.tocAfter)==null?void 0:c.call(n)}})))},...r.value!=="none"?{navScreenBottom:()=>p(sn("BloggerInfo"))}:{},...!o.value&&r.value==="always"?{sidebar:()=>p(sn("BloggerInfo"))}:{}})]}}),L6=R({name:"NotFoundHint",setup(){const s=ps(),n=()=>{const e=s.value.routeLocales.notFoundMsg;return e[Math.floor(Math.random()*e.length)]};return()=>p("div",{class:"not-found-hint"},[p("p",{class:"error-code"},"404"),p("h1",{class:"error-title"},s.value.routeLocales.notFoundTitle),p("p",{class:"error-hint"},n())])}}),w6=R({name:"NotFound",slots:Object,setup(s,{slots:n}){const e=Cn(),l=ps(),{navigate:a}=At({to:l.value.home??e.value});return()=>[p(Eo),p(Ao,{noSidebar:!0},()=>{var t;return p("main",{id:"main-content",class:"vp-page not-found"},((t=n.default)==null?void 0:t.call(n))||[p(L6),p("div",{class:"actions"},[p("button",{type:"button",class:"action-button",onClick:()=>{window.history.go(-1)}},l.value.routeLocales.back),p("button",{type:"button",class:"action-button",onClick:()=>a()},l.value.routeLocales.home)])])})]}});const I6={Email:'<svg xmlns="http://www.w3.org/2000/svg" class="icon email-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1384FF"/><path fill="#fff" d="M270.077 286.233H751.99c32.933 0 59.86 24.855 60.274 55.51l-301.023 157L210.217 341.88c.207-30.723 26.927-55.717 59.86-55.717zm-59.929 115.714-.276 277.756c0 30.931 27.134 56.2 60.205 56.2H751.99c33.14 0 60.274-25.269 60.274-56.2V401.81L518.283 551.492a15.88 15.88 0 0 1-14.43 0L210.148 401.947z"/></svg>',Gitee:'<svg xmlns="http://www.w3.org/2000/svg" class="icon gitee-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#C71D23"/><path fill="#fff" d="M772.953 454.723H480.17v.006a25.46 25.46 0 0 0-25.46 25.453l-.025 63.649a25.46 25.46 0 0 0 25.46 25.466l178.242-.007a25.46 25.46 0 0 1 25.459 25.46v12.73c0 42.18-34.198 76.378-76.378 76.378H365.583a25.46 25.46 0 0 1-25.46-25.46V416.533h-.006c0-42.18 34.192-76.378 76.378-76.378h356.388v-.013a25.46 25.46 0 0 0 25.46-25.446l.057-63.65h.013a25.46 25.46 0 0 0-25.46-25.471l-356.432.012c-105.453 0-190.946 85.493-190.946 190.946v356.433a25.46 25.46 0 0 0 25.46 25.46H626.56c94.913 0 171.852-76.94 171.852-171.852V480.182a25.46 25.46 0 0 0-25.46-25.46z"/></svg>',GitHub:'<svg xmlns="http://www.w3.org/2000/svg" class="icon github-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#171515"/><path fill="#fff" d="M509.423 146.442c-200.317 0-362.756 162.42-362.756 362.8 0 160.266 103.936 296.24 248.109 344.217 18.139 3.327 24.76-7.872 24.76-17.486 0-8.613-.313-31.427-.49-61.702-100.912 21.923-122.205-48.63-122.205-48.63-16.495-41.91-40.28-53.067-40.28-53.067-32.937-22.51 2.492-22.053 2.492-22.053 36.407 2.566 55.568 37.386 55.568 37.386 32.362 55.438 84.907 39.43 105.58 30.143 3.296-23.444 12.667-39.43 23.032-48.498-80.557-9.156-165.246-40.28-165.246-179.297 0-39.604 14.135-71.988 37.342-97.348-3.731-9.178-16.18-46.063 3.556-96.009 0 0 30.46-9.754 99.76 37.19 28.937-8.048 59.97-12.071 90.823-12.211 30.807.14 61.843 4.165 90.822 12.21 69.26-46.944 99.663-37.189 99.663-37.189 19.792 49.946 7.34 86.831 3.61 96.01 23.25 25.359 37.29 57.742 37.29 97.347 0 139.366-84.82 170.033-165.637 179.013 13.026 11.2 24.628 33.342 24.628 67.182 0 48.498-.445 87.627-.445 99.521 0 9.702 6.535 20.988 24.945 17.444 144.03-48.067 247.881-183.95 247.881-344.175 0-200.378-162.442-362.798-362.802-362.798z"/></svg>'},T6={category:{"/":{path:"/category/",map:{使用指南:{path:"/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",keys:["v-08062d61","v-1a144c13","v-40bd95c1","v-450e8862","v-64dd32fe","v-74d93789","v-f1165cc2","v-c84ce682","v-dd2c326a","v-7c3e20c2"]},数据结构与算法:{path:"/category/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/",keys:["v-0072b68a","v-4a6b903e","v-92d2378e","v-3945022c","v-0edaacb7","v-8fe9fd22","v-69d65be6","v-a277331a","v-2e7fb111","v-75ce370a","v-1f0c41ec","v-98398990","v-752e9b82","v-c01690d8","v-152dfd8d","v-735dfe06","v-d977ced4","v-64506cc7","v-13ade0aa","v-641d44d2","v-8a944abe","v-703548b8","v-711b4cec","v-fb458a48","v-67248f78","v-db839be2","v-16787a3c","v-a323322a","v-4e6f8416","v-ebfa549c","v-08a1ce30","v-155542a2","v-6e9dbc4c","v-cdbdf9f8","v-21edb74e","v-525b6569","v-30fc6476","v-30a803f7","v-115ac7e7","v-534e82f8","v-e58201ee","v-21b182ee","v-deb0c8ec","v-1a50115e","v-53acd735","v-00fc7494","v-380a6c84","v-4b65c060","v-0cc447aa","v-85d8c71c","v-64c90a94","v-155d00d3","v-eeb8a63a"]},"c/c++":{path:"/category/cc__/",keys:["v-038e0b34","v-403c82cd","v-5aef7a82","v-4d611284","v-f103c4b8","v-332dfae6","v-062c257f","v-70779923","v-198bd17a","v-a688fcfc","v-505a1229","v-1c610f8b","v-573fd3b5","v-63c16f9b","v-a253b292","v-35cd92ed","v-5f9477f2","v-31530dfb","v-3bc3bfaf","v-3a9cf65c","v-10e1c6eb","v-451c83e2","v-6577db5e","v-e41f0618","v-3eca3d30","v-1da04370","v-66aab0b0","v-1073124a","v-3cc85216","v-ba4c1c2a","v-c97d844a","v-6ef0e0ae","v-f8fc3194","v-14c9e918","v-1155c5a0","v-636256d6","v-51ee3d17","v-132402e1","v-01408bc4"]},linux:{path:"/category/linux/",keys:["v-5481f6b5","v-70781306","v-fae24824","v-29390dd2","v-5d0a9dce","v-91127220","v-4c6cb231","v-5342bc7a","v-f6ba6062"]},ubuntu:{path:"/category/ubuntu/",keys:["v-45955c7c"]},mysql:{path:"/category/mysql/",keys:["v-18f8cde9","v-17cb7aa4","v-0dd7df9c","v-067342a0","v-c8a2e14a","v-a87f8e4c","v-1df5d4d6","v-2648a679","v-cc05253e","v-84ceb2f4","v-47deb978","v-68cfc132","v-1509bd1e","v-5312ebd6","v-cb572402","v-a056d220","v-eedfc64a","v-0c1daf9d","v-15be756c","v-32ca78ec","v-f2fadc9e","v-08c9d541","v-976bf48a","v-19f8f8e4","v-4b2179bb","v-4d1339f4","v-b30276bc","v-1776ebf2","v-51f2dcf6","v-0359a68f","v-558f976c","v-3ef06b8b","v-a01dbb18","v-329074fa","v-1029a01f","v-664794b6","v-1743001b","v-25bb8896","v-5dfb342e","v-416fc51c","v-167ae4a4","v-fb0c9a20","v-403714d4","v-f10dc5a4","v-18b96408","v-125a45f0","v-73d634fe","v-4dda2b40","v-1015e72b","v-afe3b5ec","v-ab0fa402","v-fb24ca0e","v-379adba2","v-2247d511","v-874c376e","v-5e84d900","v-51fa1311","v-47e7636c","v-f00ce0e0"]},network:{path:"/category/network/",keys:["v-6dabb7d0","v-5dfb637b"]}}}},tag:{"/":{path:"/tag/",map:{页面配置:{path:"/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/",keys:["v-08062d61","v-1a144c13","v-40bd95c1","v-450e8862","v-64dd32fe","v-74d93789","v-f1165cc2","v-c84ce682","v-7c3e20c2"]},使用指南:{path:"/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",keys:["v-08062d61","v-1a144c13","v-40bd95c1","v-450e8862","v-64dd32fe","v-74d93789","v-f1165cc2","v-c84ce682","v-7c3e20c2"]},数组:{path:"/tag/%E6%95%B0%E7%BB%84/",keys:["v-0072b68a","v-4a6b903e","v-92d2378e","v-3945022c","v-0edaacb7","v-8fe9fd22","v-69d65be6","v-a277331a","v-2e7fb111","v-75ce370a","v-1f0c41ec","v-98398990","v-752e9b82","v-c01690d8","v-152dfd8d","v-534e82f8","v-e58201ee"]},双指针:{path:"/tag/%E5%8F%8C%E6%8C%87%E9%92%88/",keys:["v-0072b68a","v-4a6b903e","v-92d2378e","v-3945022c","v-69d65be6","v-98398990","v-152dfd8d","v-d977ced4","v-64506cc7","v-13ade0aa","v-641d44d2","v-8a944abe","v-711b4cec","v-fb458a48","v-db839be2","v-16787a3c","v-a323322a","v-4e6f8416","v-155542a2","v-cdbdf9f8","v-21edb74e","v-525b6569","v-deb0c8ec"]},字符串:{path:"/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2/",keys:["v-0072b68a","v-534e82f8"]},滑动窗口:{path:"/tag/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/",keys:["v-92d2378e","v-115ac7e7"]},二分查找:{path:"/tag/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/",keys:["v-8fe9fd22","v-a277331a","v-21edb74e","v-115ac7e7"]},基础知识:{path:"/tag/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",keys:["v-2e7fb111","v-08a1ce30"]},哈希:{path:"/tag/%E5%93%88%E5%B8%8C/",keys:["v-98398990","v-155542a2","v-6e9dbc4c","v-cdbdf9f8","v-21edb74e","v-525b6569","v-534e82f8","v-e58201ee","v-21b182ee","v-deb0c8ec"]},链表:{path:"/tag/%E9%93%BE%E8%A1%A8/",keys:["v-152dfd8d","v-735dfe06","v-d977ced4","v-64506cc7","v-13ade0aa","v-641d44d2","v-8a944abe","v-703548b8","v-711b4cec","v-fb458a48","v-67248f78","v-db839be2","v-16787a3c","v-a323322a","v-4e6f8416","v-ebfa549c","v-08a1ce30"]},虚拟头结点:{path:"/tag/%E8%99%9A%E6%8B%9F%E5%A4%B4%E7%BB%93%E7%82%B9/",keys:["v-735dfe06","v-d977ced4"]},分治思想:{path:"/tag/%E5%88%86%E6%B2%BB%E6%80%9D%E6%83%B3/",keys:["v-711b4cec"]},优先队列:{path:"/tag/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/",keys:["v-711b4cec"]},循环链表:{path:"/tag/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/",keys:["v-ebfa549c"]},哈希表:{path:"/tag/%E5%93%88%E5%B8%8C%E8%A1%A8/",keys:["v-30fc6476","v-30a803f7","v-115ac7e7"]},排序算法:{path:"/tag/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",keys:["v-1a50115e","v-53acd735","v-00fc7494","v-380a6c84","v-4b65c060","v-0cc447aa","v-85d8c71c","v-64c90a94","v-155d00d3"]},队列:{path:"/tag/%E9%98%9F%E5%88%97/",keys:["v-eeb8a63a"]},反汇编:{path:"/tag/%E5%8F%8D%E6%B1%87%E7%BC%96/",keys:["v-038e0b34"]},操作系统:{path:"/tag/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/",keys:["v-403c82cd","v-5aef7a82","v-4d611284"]},堆栈:{path:"/tag/%E5%A0%86%E6%A0%88/",keys:["v-403c82cd"]},编译链接:{path:"/tag/%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5/",keys:["v-5aef7a82"]},虚拟内存:{path:"/tag/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/",keys:["v-4d611284"]},"do-while(0)":{path:"/tag/do-while(0)/",keys:["v-f103c4b8"]},c基础:{path:"/tag/c%E5%9F%BA%E7%A1%80/",keys:["v-332dfae6","v-062c257f","v-70779923","v-198bd17a","v-a688fcfc","v-505a1229","v-1c610f8b","v-573fd3b5","v-63c16f9b","v-a253b292","v-35cd92ed"]},类和对象:{path:"/tag/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/",keys:["v-5f9477f2","v-31530dfb","v-3bc3bfaf","v-3a9cf65c","v-10e1c6eb","v-451c83e2","v-6577db5e","v-e41f0618","v-3eca3d30","v-1da04370"]},"c++基础":{path:"/tag/c__%E5%9F%BA%E7%A1%80/",keys:["v-66aab0b0","v-1073124a","v-3cc85216","v-ba4c1c2a","v-c97d844a","v-6ef0e0ae","v-f8fc3194","v-14c9e918","v-1155c5a0","v-636256d6","v-51ee3d17","v-132402e1","v-01408bc4"]},内存对齐:{path:"/tag/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/",keys:["v-f8fc3194"]},linux工具和基本命令:{path:"/tag/linux%E5%B7%A5%E5%85%B7%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/",keys:["v-dd2c326a","v-5481f6b5","v-70781306","v-fae24824","v-29390dd2"]},配置:{path:"/tag/%E9%85%8D%E7%BD%AE/",keys:["v-45955c7c"]},vim配置:{path:"/tag/vim%E9%85%8D%E7%BD%AE/",keys:["v-5d0a9dce"]},编译工具:{path:"/tag/%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/",keys:["v-91127220","v-4c6cb231","v-5342bc7a","v-f6ba6062"]},"c/c++连接数据库":{path:"/tag/cc__%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/",keys:["v-18f8cde9"]},安装方法:{path:"/tag/%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/",keys:["v-17cb7aa4"]},mysql基础:{path:"/tag/mysql%E5%9F%BA%E7%A1%80/",keys:["v-0dd7df9c","v-067342a0","v-c8a2e14a","v-a87f8e4c","v-1df5d4d6","v-2648a679","v-cc05253e","v-84ceb2f4"]},mysql核心SQL:{path:"/tag/mysql%E6%A0%B8%E5%BF%83sql/",keys:["v-47deb978","v-68cfc132","v-1509bd1e","v-5312ebd6","v-cb572402","v-a056d220","v-eedfc64a","v-0c1daf9d"]},mysql存储引擎:{path:"/tag/mysql%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/",keys:["v-15be756c"]},mysql索引:{path:"/tag/mysql%E7%B4%A2%E5%BC%95/",keys:["v-32ca78ec","v-f2fadc9e","v-976bf48a","v-19f8f8e4","v-4b2179bb","v-4d1339f4","v-b30276bc"]},mysql日志:{path:"/tag/mysql%E6%97%A5%E5%BF%97/",keys:["v-08c9d541","v-3ef06b8b","v-329074fa","v-403714d4","v-f10dc5a4"]},事务:{path:"/tag/%E4%BA%8B%E5%8A%A1/",keys:["v-1776ebf2","v-51f2dcf6","v-0359a68f","v-558f976c"]},"mysql MVCC":{path:"/tag/mysql-mvcc/",keys:["v-3ef06b8b","v-329074fa"]},mysql锁机制:{path:"/tag/mysql%E9%94%81%E6%9C%BA%E5%88%B6/",keys:["v-a01dbb18","v-1029a01f","v-664794b6","v-1743001b","v-25bb8896","v-5dfb342e","v-416fc51c"]},mysql优化:{path:"/tag/mysql%E4%BC%98%E5%8C%96/",keys:["v-167ae4a4","v-fb0c9a20"]},数据备份:{path:"/tag/%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/",keys:["v-f10dc5a4","v-18b96408"]},mysql拓展:{path:"/tag/mysql%E6%8B%93%E5%B1%95/",keys:["v-125a45f0","v-73d634fe"]},mysql集群:{path:"/tag/mysql%E9%9B%86%E7%BE%A4/",keys:["v-4dda2b40","v-1015e72b","v-afe3b5ec","v-ab0fa402"]},mysql连接池:{path:"/tag/mysql%E8%BF%9E%E6%8E%A5%E6%B1%A0/",keys:["v-fb24ca0e","v-379adba2","v-2247d511","v-874c376e","v-5e84d900","v-51fa1311","v-47e7636c","v-f00ce0e0"]},数据序列化:{path:"/tag/%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97%E5%8C%96/",keys:["v-6dabb7d0"]},Protobuf简介及使用:{path:"/tag/protobuf%E7%AE%80%E4%BB%8B%E5%8F%8A%E4%BD%BF%E7%94%A8/",keys:["v-5dfb637b"]}}}}},k6={article:{"/":{path:"/article/",keys:["v-184f4da6","v-3a1d2930","v-144c90e3","v-08062d61","v-1a144c13","v-1464ca76","v-f0383c18","v-40bd95c1","v-eb072ff4","v-4628d8d3","v-25b47c13","v-7945696f","v-5095ca42","v-24f2d5ba","v-450e8862","v-dc384366","v-0072b68a","v-4a6b903e","v-92d2378e","v-3945022c","v-0edaacb7","v-8fe9fd22","v-69d65be6","v-a277331a","v-2e7fb111","v-75ce370a","v-1f0c41ec","v-98398990","v-752e9b82","v-c01690d8","v-152dfd8d","v-735dfe06","v-d977ced4","v-64506cc7","v-13ade0aa","v-641d44d2","v-8a944abe","v-703548b8","v-711b4cec","v-fb458a48","v-67248f78","v-db839be2","v-16787a3c","v-a323322a","v-4e6f8416","v-ebfa549c","v-08a1ce30","v-155542a2","v-6e9dbc4c","v-cdbdf9f8","v-21edb74e","v-525b6569","v-30fc6476","v-30a803f7","v-115ac7e7","v-534e82f8","v-e58201ee","v-21b182ee","v-deb0c8ec","v-1a50115e","v-53acd735","v-00fc7494","v-380a6c84","v-4b65c060","v-0cc447aa","v-64dd32fe","v-85d8c71c","v-64c90a94","v-155d00d3","v-74d93789","v-f1165cc2","v-eeb8a63a","v-c84ce682","v-038e0b34","v-403c82cd","v-5aef7a82","v-4d611284","v-f103c4b8","v-332dfae6","v-062c257f","v-70779923","v-198bd17a","v-a688fcfc","v-505a1229","v-1c610f8b","v-573fd3b5","v-63c16f9b","v-a253b292","v-35cd92ed","v-5f9477f2","v-31530dfb","v-3bc3bfaf","v-3a9cf65c","v-10e1c6eb","v-451c83e2","v-6577db5e","v-e41f0618","v-3eca3d30","v-1da04370","v-66aab0b0","v-1073124a","v-3cc85216","v-ba4c1c2a","v-c97d844a","v-6ef0e0ae","v-f8fc3194","v-14c9e918","v-1155c5a0","v-636256d6","v-51ee3d17","v-132402e1","v-01408bc4","v-dd2c326a","v-5481f6b5","v-70781306","v-fae24824","v-29390dd2","v-45955c7c","v-5d0a9dce","v-91127220","v-4c6cb231","v-5342bc7a","v-f6ba6062","v-7c3e20c2","v-18f8cde9","v-17cb7aa4","v-0dd7df9c","v-067342a0","v-c8a2e14a","v-a87f8e4c","v-1df5d4d6","v-2648a679","v-cc05253e","v-84ceb2f4","v-47deb978","v-68cfc132","v-1509bd1e","v-5312ebd6","v-cb572402","v-a056d220","v-eedfc64a","v-0c1daf9d","v-15be756c","v-32ca78ec","v-f2fadc9e","v-08c9d541","v-976bf48a","v-19f8f8e4","v-4b2179bb","v-4d1339f4","v-b30276bc","v-1776ebf2","v-51f2dcf6","v-0359a68f","v-558f976c","v-3ef06b8b","v-a01dbb18","v-329074fa","v-1029a01f","v-664794b6","v-1743001b","v-25bb8896","v-5dfb342e","v-416fc51c","v-167ae4a4","v-fb0c9a20","v-403714d4","v-f10dc5a4","v-18b96408","v-125a45f0","v-73d634fe","v-4dda2b40","v-1015e72b","v-afe3b5ec","v-ab0fa402","v-fb24ca0e","v-379adba2","v-2247d511","v-874c376e","v-5e84d900","v-51fa1311","v-47e7636c","v-f00ce0e0","v-6dabb7d0","v-5dfb637b"]}},star:{"/":{path:"/star/",keys:[]}},timeline:{"/":{path:"/timeline/",keys:[]}}},Jp=U(T6),uB=(s="")=>{const n=Bs(),e=zs(),l=Cn();return D(()=>{var i;const a=s||((i=hs().value.blog)==null?void 0:i.key)||"";if(!a)return console.warn("useBlogCategory: key not found"),{path:"/",map:{}};const t=e.getRoutes();if(!Jp.value[a])throw new Error(`useBlogCategory: key ${a} is invalid`);const o=Jp.value[a][l.value],r={path:o.path,map:{}};for(const c in o.map){const B=o.map[c];r.map[c]={path:B.path,items:[]};for(const u of B.keys){const y=t.find(({name:v})=>v===u);if(y){const v=Ne(e,y.path);r.map[c].items.push({path:v.path,info:v.meta})}}n.value.path===B.path&&(r.currentItems=r.map[c].items)}return r})},sr=U(k6),_a=(s="")=>{const n=zs(),e=Cn();return D(()=>{var r;const l=s||((r=hs().value.blog)==null?void 0:r.key)||"";if(!l)return console.warn("useBlogType: key not found"),{path:"/",items:[]};if(!sr.value[l])throw new Error(`useBlogType: key ${s} is invalid`);const a=n.getRoutes(),t=sr.value[l][e.value],o={path:t.path,items:[]};for(const i of t.keys){const c=a.find(({name:B})=>B===i);if(c){const B=Ne(n,c.path);o.items.push({path:B.path,info:B.meta})}}return o})};var O6=[];const yB=Symbol.for("categoryMap"),Ol=()=>{const s=vs(yB);if(!s)throw new Error("useCategoryMap() is called without provider.");return s},x6=()=>{const s=uB("category");cn(yB,s)},xl=()=>{const s=qn(),n=ps();return D(()=>({...s.value.blog,...n.value.blog}))},vB=Symbol.for("tagMap"),Sl=()=>{const s=vs(vB);if(!s)throw new Error("useTagMap() is called without provider.");return s},S6=()=>{const s=uB("tag");cn(vB,s)},P6=s=>{const n=ps();return D(()=>{const{[Fs.author]:e}=s.value;return e?ml(e):e===!1?[]:ml(n.value.author,!1)})},R6=s=>{const n=Ol();return D(()=>Kc(s.value[Fs.category]).map(e=>({name:e,path:n.value.map[e].path})))},M6=s=>{const n=Sl();return D(()=>Yc(s.value[Fs.tag]).map(e=>({name:e,path:n.value.map[e].path})))},V6=s=>D(()=>{const{[Fs.date]:n}=s.value;return ao(n)}),q6=s=>{const n=He(s,"info"),e=xl(),l=P6(n),a=R6(n),t=M6(n),o=V6(n),r=Ii(),i=D(()=>({author:l.value,category:a.value,date:o.value,localizedDate:n.value[Fs.localizedDate]||"",tag:t.value,isOriginal:n.value[Fs.isOriginal]||!1,readingTime:n.value[Fs.readingTime]||null,readingTimeLocale:n.value[Fs.readingTime]&&r.value?wi(n.value[Fs.readingTime],r.value):null,pageview:s.path})),c=D(()=>e.value.articleInfo);return{info:i,items:c}},mB=Symbol(""),Pl=()=>{const s=vs(mB);if(!s)throw new Error("useArticles() is called without provider.");return s},N6=()=>{const s=_a("article");cn(mB,s)},AB=Symbol(""),Fo=()=>{const s=vs(AB);if(!s)throw new Error("useStars() is called without provider.");return s},$6=()=>{const s=_a("star");cn(AB,s)},fB=Symbol(""),ho=()=>{const s=vs(fB);if(!s)throw new Error("useTimelines() is called without provider.");return s},Q6=()=>{const s=_a("timeline"),n=D(()=>{const e=[];return s.value.items.forEach(({info:l,path:a})=>{const t=ao(l[Fs.date]),o=t==null?void 0:t.getFullYear(),r=t?t.getMonth()+1:null,i=t==null?void 0:t.getDate();o&&r&&i&&((!e[0]||e[0].year!==o)&&e.unshift({year:o,items:[]}),e[0].items.push({date:`${r}/${i}`,info:l,path:a}))}),{...s.value,config:e.reverse()}});cn(fB,n)},H6=()=>{N6(),x6(),$6(),S6(),Q6()};var z6=R({name:"SocialMedia",setup(){const s=xl(),n=Ee(),e=D(()=>{const l=s.value.medias;return l?Ge(l).map(([a,t])=>({name:a,icon:I6[a],url:t})):[]});return()=>e.value.length?p("div",{class:"vp-social-medias"},e.value.map(({name:l,icon:a,url:t})=>p("a",{class:"vp-social-media",href:t,rel:"noopener noreferrer",target:"_blank","aria-label":l,...n.value?{}:{"data-balloon-pos":"up"},innerHTML:a}))):null}}),go=R({name:"BloggerInfo",setup(){const s=xl(),n=Ue(),e=ps(),l=Pl(),a=Ol(),t=Sl(),o=ho(),r=Il(),i=D(()=>{var y;return s.value.name||((y=ml(e.value.author)[0])==null?void 0:y.name)||n.value.title}),c=D(()=>s.value.avatar||e.value.logo),B=D(()=>e.value.blogLocales),u=D(()=>s.value.intro);return()=>{const{article:y,category:v,tag:f,timeline:b}=B.value,_=[[l.value.path,l.value.items.length,y],[a.value.path,nn(a.value.map).length,v],[t.value.path,nn(t.value.map).length,f],[o.value.path,o.value.items.length,b]];return p("div",{class:"vp-blogger-info",vocab:"https://schema.org/",typeof:"Person"},[p("div",{class:"vp-blogger",...u.value?{style:{cursor:"pointer"},"aria-label":B.value.intro,"data-balloon-pos":"down",role:"link",onClick:()=>r(u.value)}:{}},[c.value?p("img",{class:["vp-blogger-avatar",{round:s.value.roundAvatar}],src:bs(c.value),property:"image",alt:"Blogger Avatar",loading:"lazy"}):null,i.value?p("div",{class:"vp-blogger-name",property:"name"},i.value):null,s.value.description?p("div",{class:"vp-blogger-description",innerHTML:s.value.description}):null,u.value?p("meta",{property:"url",content:bs(u.value)}):null]),p("div",{class:"vp-blog-counts"},_.map(([F,I,h])=>p(ks,{class:"vp-blog-count",to:F},()=>[p("div",{class:"count"},I),p("div",h)]))),p(z6)])}}});const bo=()=>p(ts,{name:"category"},()=>p("path",{d:"M148.41 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H148.41c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.311-40.31zM147.556 553.478H429.73c22.263 0 40.311 18.048 40.311 40.31v282.176c0 22.263-18.048 40.312-40.31 40.312H147.555c-22.263 0-40.311-18.049-40.311-40.312V593.79c0-22.263 18.048-40.311 40.31-40.311zM593.927 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H593.927c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.31-40.31zM730.22 920.502H623.926c-40.925 0-74.22-33.388-74.22-74.425V623.992c0-41.038 33.387-74.424 74.425-74.424h222.085c41.038 0 74.424 33.226 74.424 74.067v114.233c0 10.244-8.304 18.548-18.547 18.548s-18.548-8.304-18.548-18.548V623.635c0-20.388-16.746-36.974-37.33-36.974H624.13c-20.585 0-37.331 16.747-37.331 37.33v222.086c0 20.585 16.654 37.331 37.126 37.331H730.22c10.243 0 18.547 8.304 18.547 18.547 0 10.244-8.304 18.547-18.547 18.547z"}));bo.displayName="CategoryIcon";const Do=()=>p(ts,{name:"tag"},()=>p("path",{d:"M939.902 458.563L910.17 144.567c-1.507-16.272-14.465-29.13-30.737-30.737L565.438 84.098h-.402c-3.215 0-5.726 1.005-7.634 2.913l-470.39 470.39a10.004 10.004 0 000 14.164l365.423 365.424c1.909 1.908 4.42 2.913 7.132 2.913s5.223-1.005 7.132-2.913l470.39-470.39c2.01-2.11 3.014-5.023 2.813-8.036zm-240.067-72.121c-35.458 0-64.286-28.828-64.286-64.286s28.828-64.285 64.286-64.285 64.286 28.828 64.286 64.285-28.829 64.286-64.286 64.286z"}));Do.displayName="TagIcon";const _o=()=>p(ts,{name:"timeline"},()=>p("path",{d:"M511.997 70.568c-243.797 0-441.429 197.633-441.429 441.435 0 243.797 197.632 441.429 441.43 441.429S953.431 755.8 953.431 512.002c0-243.796-197.637-441.434-441.435-441.434zm150.158 609.093-15.605 15.61c-8.621 8.615-22.596 8.615-31.215 0L472.197 552.126c-4.95-4.944-4.34-14.888-4.34-24.677V247.14c0-12.19 9.882-22.07 22.07-22.07h22.07c12.19 0 22.07 9.882 22.07 22.07v273.218l128.088 128.088c8.62 8.62 8.62 22.595 0 31.215zm0 0"}));_o.displayName="TimelineIcon";const EB=()=>p(ts,{name:"slides"},()=>p("path",{d:"M896 170.667v426.666a85.333 85.333 0 0 1-85.333 85.334h-256v61.184l192.597 115.584-43.861 73.13-148.736-89.173v95.275h-85.334v-95.318l-148.736 89.216-43.861-73.13 192.597-115.627v-61.141h-256A85.333 85.333 0 0 1 128 597.333V170.667H85.333V85.333h853.334v85.334H896zm-682.667 0v426.666h597.334V170.667H213.333zM426.667 512h-85.334V341.333h85.334V512zm128 0h-85.334V256h85.334v256zm128 0h-85.334V384h85.334v128z"}));EB.displayName="SlideIcon";const FB=()=>p(ts,{name:"sticky"},()=>[p("path",{d:"m381.3 733.8l-161.9 118c-5.9 4.5-13.2 6.6-20.1 6.6-8.7 0-17.7-3.4-24.3-10-12.2-12.2-13.9-31.3-3.5-45.2l144.5-195.5-113.6-112.9c-11.1-11.1-13.2-28.4-5.5-42 5.5-8.7 52.1-76.4 155.5-51 1.8 0.3 3.5 0.3 5.6 0.7 4.2 0.3 9 0.7 14.2 1.7 21.9 3.5 60.8-13.9 94.5-42.7 32.3-27.5 53.1-59.4 53.1-81.6 0-5.2 0-10.8-0.3-16-0.7-20.8-2.1-52.8 21.5-76.4 28.1-28.1 72.9-30.6 103.9-5.2 0.6 0.3 1 1 1.7 1.7 16.7 16.3 187.5 187.2 189.3 188.9 14.5 14.6 22.9 34.4 22.9 55.3 0 20.8-8 40.2-22.9 54.8-23.7 23.6-56 22.6-77.1 21.6-4.9 0-10.5-0.4-15.7-0.4-20.8 0-45.8 14.6-70.5 41.3-34.3 37.5-55.5 85.8-53.8 107.7 0.7 6.9 2.1 19.1 2.4 20.8 25 101.4-42.7 147.6-50.7 152.8-13.9 8.4-31.6 6.3-42.7-4.8l-112.1-112.2z"})]);FB.displayName="StickyIcon";const Ca=()=>p(ts,{name:"article"},()=>p("path",{d:"M853.333 938.667H170.667A42.667 42.667 0 0 1 128 896V128a42.667 42.667 0 0 1 42.667-42.667h682.666A42.667 42.667 0 0 1 896 128v768a42.667 42.667 0 0 1-42.667 42.667zm-42.666-85.334V170.667H213.333v682.666h597.334zM298.667 256h170.666v170.667H298.667V256zm0 256h426.666v85.333H298.667V512zm0 170.667h426.666V768H298.667v-85.333zm256-384h170.666V384H554.667v-85.333z"}));Ca.displayName="ArticleIcon";const hB=()=>p(ts,{name:"book"},()=>p("path",{d:"M256 853.333h426.667A85.333 85.333 0 0 0 768 768V256a85.333 85.333 0 0 0-85.333-85.333H469.333a42.667 42.667 0 0 1 0-85.334h213.334A170.667 170.667 0 0 1 853.333 256v512a170.667 170.667 0 0 1-170.666 170.667H213.333A42.667 42.667 0 0 1 170.667 896V128a42.667 42.667 0 0 1 42.666-42.667h128A42.667 42.667 0 0 1 384 128v304.256l61.653-41.088a42.667 42.667 0 0 1 47.36 0l61.654 41.045V256A42.667 42.667 0 0 1 640 256v256a42.667 42.667 0 0 1-66.347 35.499l-104.32-69.547-104.32 69.547A42.667 42.667 0 0 1 298.667 512V170.667H256v682.666z"}));hB.displayName="BookIcon";const gB=()=>p(ts,{name:"link"},()=>p("path",{d:"M460.8 584.533c17.067 17.067 17.067 42.667 0 59.734-17.067 17.066-42.667 17.066-59.733 0-85.334-85.334-85.334-217.6 0-302.934L554.667 192C640 110.933 776.533 110.933 857.6 196.267c81.067 81.066 81.067 213.333 0 294.4l-68.267 64c0-34.134-4.266-68.267-17.066-102.4l21.333-21.334c51.2-46.933 55.467-128 4.267-179.2s-128-55.466-179.2-4.266c-4.267 0-4.267 4.266-4.267 4.266L465.067 401.067c-51.2 51.2-51.2 132.266-4.267 183.466m123.733-183.466C601.6 384 627.2 384 644.267 401.067c85.333 85.333 85.333 217.6 0 302.933l-153.6 149.333C405.333 934.4 268.8 934.4 187.733 849.067c-81.066-81.067-81.066-213.334 0-294.4l68.267-64c0 34.133 4.267 72.533 17.067 102.4L251.733 614.4C204.8 665.6 204.8 746.667 256 793.6c51.2 46.933 123.733 46.933 174.933 0l149.334-149.333c51.2-51.2 51.2-128 0-179.2-12.8-17.067-17.067-46.934 4.266-64z"}));gB.displayName="LinkIcon";const bB=()=>p(ts,{name:"project"},()=>p("path",{d:"M987.456 425.152H864V295.296a36.48 36.48 0 0 0-36.544-36.544h-360l-134.08-128.256A9.344 9.344 0 0 0 327.04 128H36.48A36.48 36.48 0 0 0 0 164.544v676.608a36.48 36.48 0 0 0 36.544 36.544h797.76a36.672 36.672 0 0 0 33.92-22.848L1021.44 475.52a36.48 36.48 0 0 0-33.92-50.304zM82.304 210.304h215.424l136.64 130.752h347.328v84.096H198.848A36.672 36.672 0 0 0 164.928 448L82.304 652.8V210.304zM808.32 795.456H108.544l118.08-292.608h699.904L808.32 795.52z"}));bB.displayName="ProjectIcon";const DB=()=>p(ts,{name:"friend"},()=>p("path",{d:"M860.16 213.333A268.373 268.373 0 0 0 512 186.027a267.52 267.52 0 0 0-348.16 404.48L428.8 855.893a118.613 118.613 0 0 0 166.4 0l264.96-265.386a267.52 267.52 0 0 0 0-377.174zM800 531.627l-264.96 264.96a32.427 32.427 0 0 1-46.08 0L224 530.347a183.04 183.04 0 0 1 0-256 182.187 182.187 0 0 1 256 0 42.667 42.667 0 0 0 60.587 0 182.187 182.187 0 0 1 256 0 183.04 183.04 0 0 1 3.413 256z"}));DB.displayName="FriendIcon";const Lt=()=>p(ts,{name:"slide-down"},()=>p("path",{d:"M108.775 312.23c13.553 0 27.106 3.734 39.153 11.806l375.205 250.338 363.641-252.808c32.587-21.624 76.499-12.83 98.123 19.757 21.685 32.467 12.95 76.56-19.576 98.184l-402.854 278.89c-23.733 15.901-54.694 15.962-78.547.12L69.501 442.097c-32.647-21.685-41.441-65.777-19.817-98.304 13.734-20.54 36.201-31.563 59.09-31.563Z"}));Lt.displayName="SlideDownIcon";const _B=()=>p("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",class:"empty-icon",viewBox:"0 0 1024 1024",innerHTML:'<defs><linearGradient id="f" x1="512.342" y1="2266.13" x2="512.342" y2="666.063" gradientUnits="userSpaceOnUse"><stop offset=".919" stop-color="#e6e6e6" stop-opacity="0"/><stop offset="1" stop-color="#e6e6e6"/></linearGradient><linearGradient id="g" x1="528.912" y1="774" x2="388.088" y2="612" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#e6e6e6" stop-opacity="0"/></linearGradient><linearGradient id="h" x1="213.219" y1="721.704" x2="251.313" y2="683.61" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#d7d7d7"/><stop offset=".485" stop-color="#fafafa"/><stop offset="1" stop-color="#fafafa"/></linearGradient><linearGradient id="i" x1="724.813" y1="821.718" x2="768.656" y2="777.876" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#fafafa"/></linearGradient><linearGradient id="a" x1="513.493" y1="714.594" x2="471.007" y2="544.188" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#999"/><stop offset="1" stop-color="#ccc"/></linearGradient><linearGradient id="b" x1="440.156" y1="564.031" x2="508.594" y2="495.594" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#f0f0f0"/></linearGradient><linearGradient id="l" x1="660.988" y1="754.156" x2="608.637" y2="544.188" xlink:href="#a"/><linearGradient id="m" x1="479.188" y1="774.219" x2="649.782" y2="603.625" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#b3b3b3"/><stop offset="1" stop-color="#e6e6e6"/></linearGradient><linearGradient id="n" x1="447.121" y1="774.219" x2="394.661" y2="563.813" xlink:href="#a"/><linearGradient id="o" x1="494" y1="597" x2="628" y2="463" xlink:href="#b"/><linearGradient id="d" x1="610.485" y1="604.938" x2="697.298" y2="518.125" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#fff"/></linearGradient><linearGradient id="p" x1="457.438" y1="619.25" x2="353.469" y2="619.25" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#e6e6e6" stop-opacity="0"/><stop offset="1" stop-color="#e6e6e6"/></linearGradient><linearGradient id="q" x1="542.734" y1="674.25" x2="615.672" y2="601.313" xlink:href="#b"/><linearGradient id="c" x1="627.933" y1="358.938" x2="685.192" y2="422.531" gradientUnits="userSpaceOnUse"><stop offset=".4" stop-color="#e6e6e6" stop-opacity=".4"/><stop offset=".443" stop-color="#fff"/><stop offset=".6" stop-color="#ccc"/></linearGradient><linearGradient id="r" x1="618.547" y1="422.531" x2="681.547" y2="359.531" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#e6e6e6"/><stop offset=".761" stop-color="#fff"/><stop offset="1" stop-color="#f0f0f0"/></linearGradient><linearGradient id="s" x1="625" y1="441.5" x2="697" y2="369.5" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset=".761" stop-color="#fff"/><stop offset="1" stop-color="#f0f0f0"/></linearGradient><linearGradient id="t" x1="627.681" y1="361.438" x2="692.257" y2="433.156" xlink:href="#c"/><linearGradient id="u" x1="561.414" y1="735.438" x2="573.149" y2="688.375" xlink:href="#d"/><linearGradient id="v" x1="405" y1="485.875" x2="440" y2="450.875" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#fff" stop-opacity=".702"/></linearGradient><linearGradient id="w" x1="404.61" y1="486.906" x2="441.86" y2="449.656" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset=".495" stop-color="#ccc" stop-opacity=".702"/><stop offset=".498" stop-color="#ccc"/><stop offset="1" stop-color="#fff" stop-opacity=".302"/></linearGradient><radialGradient id="e" cx="329.297" cy="647.578" r="8.172" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#fafafa"/><stop offset="1.2" stop-color="#e6e6e6"/></radialGradient><radialGradient id="j" cx="802.297" cy="673.578" r="8.172" xlink:href="#e"/><radialGradient id="k" cx="774.844" cy="642.75" r="5.531" xlink:href="#e"/></defs><path d="M512.33 666.07c441.828 0 800 358.18 800 800.03s-358.172 800.02-800 800.02-800-358.18-800-800.02 358.17-800.03 800-800.03z" style="fill:url(#f);fill-rule:evenodd"/><path d="m272 694 242-82 131 119-188 43z" style="fill:url(#g);fill-rule:evenodd"/><path fill="#b3b3b3" fill-rule="evenodd" d="M232.391 723.534a2.4 2.4 0 0 1 2.4 2.4v17.725a2.4 2.4 0 0 1-4.8 0v-17.725a2.4 2.4 0 0 1 2.4-2.4z"/><path d="M232.255 676.559c10.33 0 17.067 15.408 18.7 28.493 1.619 12.942-2.372 23.694-18.7 23.694-16.878 0-20.213-10.733-18.7-23.694 1.633-14.061 8.37-28.493 18.7-28.493z" style="fill:url(#h);fill-rule:evenodd"/><path fill="#b3b3b3" fill-rule="evenodd" d="M745.853 826h.938a2.4 2.4 0 0 1 2.4 2.4v22.238a2.4 2.4 0 0 1-2.4 2.4h-.938a2.4 2.4 0 0 1-2.4-2.4V828.4a2.4 2.4 0 0 1 2.4-2.4z"/><path d="M746.727 830.3c-19.438 0-23.278-9.326-21.541-20.59a34.467 34.467 0 0 1 3.289-10.369 16.628 16.628 0 0 1 0-9.112c2.889-12.327 12.059-20.911 18.356-20.911 6.56 0 15.468 9.1 18.356 20.911a14.589 14.589 0 0 1-.335 9.217 34.36 34.36 0 0 1 3.419 10.264c1.861 11.243-2.735 20.59-21.544 20.59z" style="fill:url(#i);fill-rule:evenodd"/><path fill="#ccc" fill-rule="evenodd" d="M328.841 654.562a6.571 6.571 0 0 0-5.2-5.027q-4.107-.952-.034-2.045a6.571 6.571 0 0 0 5.027-5.2q.952-4.109 2.045-.035a6.569 6.569 0 0 0 5.2 5.027q4.109.954.035 2.045a6.569 6.569 0 0 0-5.027 5.2q-.955 4.108-2.046.035z"/><path d="M328.383 653.73a6.567 6.567 0 0 0-5.2-5.027q-4.109-.954-.035-2.045a6.568 6.568 0 0 0 5.027-5.2q.954-4.107 2.046-.034a6.568 6.568 0 0 0 5.2 5.027q4.107.952.035 2.045a6.568 6.568 0 0 0-5.027 5.2q-.954 4.104-2.046.034z" style="fill:url(#e);fill-rule:evenodd"/><path fill="#ccc" fill-rule="evenodd" d="M801.841 680.562a6.571 6.571 0 0 0-5.2-5.027q-4.107-.952-.034-2.045a6.571 6.571 0 0 0 5.027-5.2q.952-4.109 2.045-.035a6.569 6.569 0 0 0 5.2 5.027q4.108.954.035 2.045a6.569 6.569 0 0 0-5.027 5.2q-.955 4.108-2.046.035z"/><path d="M801.383 679.73a6.567 6.567 0 0 0-5.2-5.027q-4.108-.954-.035-2.045a6.568 6.568 0 0 0 5.027-5.2q.954-4.107 2.046-.034a6.568 6.568 0 0 0 5.2 5.027q4.107.952.035 2.045a6.568 6.568 0 0 0-5.027 5.2q-.954 4.104-2.046.034z" style="fill:url(#j);fill-rule:evenodd"/><path d="M774.21 646.9a4.446 4.446 0 0 0-3.517-3.4q-2.778-.643-.023-1.383a4.443 4.443 0 0 0 3.4-3.517q.645-2.778 1.383-.023a4.443 4.443 0 0 0 3.517 3.4q2.778.645.023 1.383a4.446 4.446 0 0 0-3.4 3.517q-.645 2.78-1.383.023z" style="fill:url(#k);fill-rule:evenodd"/><path d="m385.6 714.6.158-150.658L598.9 544.174l-.158 150.658z" style="fill:url(#a);fill-rule:evenodd"/><path d="m385.474 564.031 214.763-19.383-36.171-49.067-215.559 17.634z" style="fill:url(#b);fill-rule:evenodd"/><path d="m598.744 694.832.156-150.658 71.975 59.319-.158 150.658z" style="fill:url(#l);fill-rule:evenodd"/><path d="m457.064 774.209.158-150.658 214.691-19.914-.158 150.663z" style="fill:url(#m);fill-rule:evenodd"/><path d="m384.566 714.459.158-150.659 72.5 59.75-.158 150.658z" style="fill:url(#n);fill-rule:evenodd"/><path d="M494 640s75.357-58.4 42-83-38.887 1.663-37 14 53.847 12.465 54-26c.2-49.979 75-125 75-125" style="fill:none;stroke-width:3px;stroke-dasharray:12 6;stroke:url(#o);fill-rule:evenodd"/><path d="m670.275 604.939-72.041-59.9 38.476-26.909 72.86 58.159z" style="fill:url(#d);fill-rule:evenodd"/><path d="m425.5 674.383-72.042-59.9 31.109-50.347 72.86 58.16z" style="fill:url(#p);fill-rule:evenodd"/><path d="m487.918 674.235 214.482-22.57-31.1-50.346-215.309 20.833z" style="fill:url(#q);fill-rule:evenodd"/><path style="fill:#fff;fill-rule:evenodd" d="m697.363 358.927-69.58 62.511-12.035 1.082z"/><path d="m697.363 358.927-69.58 62.511-12.035 1.082z" style="fill:url(#c);fill-rule:evenodd"/><path d="M615.748 422.52 604 413l92.089-53.46" style="fill:url(#r);fill-rule:evenodd"/><path d="m625 432 12 18 60-89" style="fill:url(#s);fill-rule:evenodd"/><path d="m626.98 421.335-2.471 11.828 70.918-71.735" style="fill:#fff;fill-rule:evenodd"/><path d="m626.98 421.335-2.471 11.828 70.918-71.735" style="fill:url(#t);fill-rule:evenodd"/><path d="m494.814 735.44 21.293-2.1v-6.613l-13.4 1.319v-6.965l10.977-1.08v-6.613l-10.977 1.08v-6.084l12.917-1.27v-6.525l-20.808 2.047v32.8zM521 732.863l7.054-.694v-11.241a106.361 106.361 0 0 0-1.014-11.274l.176-.017 2.645 7.586 4.453 11.553 4.32-.425 4.408-12.424 2.733-8.116.177-.018a111.811 111.811 0 0 0-1.014 11.474v11.241l7.185-.707V697l-8.552.841-5.025 14.646c-.618 1.956-1.147 4.08-1.808 6.173l-.22.022c-.617-1.968-1.146-3.987-1.808-5.818l-5.2-13.639-8.508.837v32.8zm37.213-3.661 7.891-.776v-10.889l3.835-.377c6.922-.681 12.961-4.714 12.961-12.517 0-8.111-5.951-10.082-13.181-9.371l-11.504 1.128v32.8zm7.891-17.881v-9.478l3.218-.316c3.792-.373 5.908.565 5.908 3.871 0 3.218-1.852 5.208-5.687 5.585zM594 725.682l7.891-.777v-26.274l8.905-.876v-6.524l-25.657 2.524v6.524l8.861-.871v26.274zm27.991-2.754 7.847-.772v-11.594l9.919-22.18-8.244.811-2.733 7.542c-.925 2.56-1.807 4.939-2.733 7.587l-.176.018c-.926-2.466-1.764-4.676-2.645-7.058l-2.734-7-8.375.824 9.874 20.233v11.594z" style="fill:url(#u);fill-rule:evenodd"/><path fill="#ccc" fill-rule="evenodd" d="M408.938 457.309a17.5 17.5 0 0 0 21.374 26.725 17.5 17.5 0 1 1-16.306-30.955 17.442 17.442 0 0 0-5.068 4.23z"/><circle cx="422.5" cy="468.375" r="17.5" style="fill:url(#v)"/><path fill="#ccc" fill-rule="evenodd" d="M391.76 451.5c-2.358 4.419 9.827 15.52 27.215 24.8 15.131 8.071 29.212 12.1 34.166 10.093-4.191 2.772-18.943-1.24-34.86-9.73-17.388-9.275-29.573-20.376-27.215-24.8a2.96 2.96 0 0 1 1.585-1.3 2.606 2.606 0 0 0-.891.937z"/><path d="M418.975 476.29c-17.388-9.275-29.573-20.376-27.215-24.8s18.363-.484 35.751 8.791 29.572 20.376 27.215 24.8-18.364.483-35.751-8.791zm31.634 5.732c1.824-3.42-8.789-12.642-23.7-20.6s-28.486-11.633-30.31-8.213 8.789 12.642 23.7 20.6 28.486 11.633 30.31 8.213zm-36.645-29.008-2.775 1.452.032 1.751 28.637 14.183.266-4.559z" style="fill:url(#w);fill-rule:evenodd"/><g class="people"><path style="fill:#f8cfad;fill-rule:evenodd" d="m612.131 676.5 1.362 3.532 3.255-2.324-1.361-3.532zM629.131 665.5l1.362 3.532 3.255-2.324-1.361-3.532z"/><path style="fill:#141a33;fill-rule:evenodd" d="m617.764 678.184-3.162-.078a11.028 11.028 0 0 0-1.034 3.454c-.258 2.006-1.177 5-.449 5.367 1.5 2.659 4.118-.215 4.118-.215s2.187-2.848 1.925-5.265c-.106-.973-1.181-1.869-1.398-3.263zM633.781 665.855l3.019.945a11.008 11.008 0 0 1-.137 3.6c-.4 1.981-.179 4.166-.986 4.277-2.283 2.03-3.827-1.533-3.827-1.533s-1.473-2.456-.444-4.659c.412-.88 1.718-1.385 2.375-2.63z"/><path style="fill:#f0c5a8;fill-rule:evenodd" d="M599.935 592.534s10.293 9.761 11.95 7.564 3.536-3.463-6.758-13.65z"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M611.3 596.361c1.674-1.105 11.5 7.048 14.5 11.774s-12.705-4.36-14.632-6.776-1.54-3.893.132-4.998z"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M621.815 607.988s1.809 2.549 2.433 1.756 2.475-1.064 2.449-1.138.1-.819 1.288-2.331-3.8-3.632-5.81-.494a2.556 2.556 0 0 0-.36 2.207z"/><path fill="#232c57" fill-rule="evenodd" d="M598 617s14.968-5.618 17 7a150.235 150.235 0 0 1 2 22s12.666 11.836 16 19c0 0-4.753-1.629-4 2 0 0-18.132-14.647-19-19s-9.148-18.716-12-31z"/><path d="M589 622s14.968-5.618 17 7a150.235 150.235 0 0 1 2 22s4.666 17.836 8 25c0 0-4.753-1.629-4 2 0 0-10.132-20.647-11-25s-9.148-18.716-12-31z" style="fill:#292966;fill-rule:evenodd"/><path style="fill:#f0c5a8;fill-rule:evenodd" d="M585.626 597.7s-10.292 9.761-11.95 7.563-3.536-3.463 6.758-13.65z"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M574.259 601.529c-1.675-1.105-11.5 7.049-14.5 11.774s12.7-4.36 14.631-6.775 1.543-3.894-.131-4.999z"/><path style="fill:#f0c5a8;fill-rule:evenodd" d="M591.715 577.752s-.606 1.681 1.48 3.716-3.615 5.307-4.645 2.85-.48-2.716-.48-2.716z"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M583.527 574.123c-.839 1.043.491 3.873 1.453 5.449s2.749 2.833 3.364 2.428 4.088-2.657 4-4-.228-3.4-.228-3.4 2.562-1.641 2.154-2.916-2.916-.154-2.916-.154a15.853 15.853 0 0 0-.227-2.224c-.189-.929-6.887-1.445-7.827 2.6s.558 1.805.227 2.217z"/><path fill="#232c57" fill-rule="evenodd" d="M584.227 567.758c2.1-.885 7.2-3.684 10.125.318s.842 4.385.989 5.294-1.894 5.69-1.341 6.63-3.865.8-4.657-1.179-2.844-.539-2.227-1.224-1.3-4.456-2.916-2.154a9.252 9.252 0 0 0 .309-1.38c-.115.192.259-3.257-.673-1.32s-2.1 1.037-3.069.762-1.8-1.118-1.071-1.689c.023-.016 2.436-3.172 4.531-4.058z"/><path d="M589 585c-2.584-.47-10.055.362-13 13 0 0 1.9 3.349 5 4s6 21 6 21 24.016 11.06 27-3c-.07-13.826-8-21-8-21s5.829-3.2 5-6-8.016-10.153-11-10-6 0-6 0-2.416 2.47-5 2z" style="fill:#f6bb07;fill-rule:evenodd"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M563.284 612.581s-.986 2.965-1.814 2.389-2.678-.3-2.675-.374-.333-.755-1.912-1.854 2.577-4.583 5.414-2.167a2.551 2.551 0 0 1 .987 2.006z"/></g>'});_B.displayName="EmptyIcon";const CB=()=>p(ts,{name:"lock"},()=>p("path",{d:"M787.168 952.268H236.832c-30.395 0-55.033-24.638-55.033-55.033V429.45c0-30.395 24.638-55.034 55.033-55.034h82.55V264.35c0-106.38 86.238-192.618 192.618-192.618S704.618 157.97 704.618 264.35v110.066h82.55c30.395 0 55.033 24.639 55.033 55.034v467.785c0 30.395-24.639 55.033-55.033 55.033zM484.483 672.046v115.122h55.034V672.046c31.99-11.373 55.033-41.605 55.033-77.496 0-45.592-36.958-82.55-82.55-82.55s-82.55 36.958-82.55 82.55c0 35.89 23.042 66.123 55.033 77.496zM622.067 264.35c0-60.788-49.28-110.067-110.067-110.067s-110.067 49.28-110.067 110.067v110.066h220.135V264.35z"}));CB.displayName="LockIcon";var j6=R({name:"ArticleItem",props:{info:{type:Object,required:!0},path:{type:String,required:!0}},slots:Object,setup(s,{slots:n}){const e=He(s,"info"),{info:l,items:a}=q6(s);return()=>{var y,v,f;const{[Fs.title]:t,[Fs.type]:o,[Fs.isEncrypted]:r=!1,[Fs.cover]:i,[Fs.excerpt]:c,[Fs.sticky]:B}=e.value,u=l.value;return p("div",{class:"vp-article-wrapper"},p("article",{class:"vp-article-item",vocab:"https://schema.org/",typeof:"Article"},[((y=n.cover)==null?void 0:y.call(n,{cover:i}))||(i?[p("img",{class:"vp-article-cover",src:bs(i),loading:"lazy"}),p("meta",{property:"image",content:bs(i)})]:[]),B?p(FB):null,p(ks,{to:s.path},()=>{var b;return((b=n.title)==null?void 0:b.call(n,{title:t,isEncrypted:r,type:o}))||p("header",{class:"vp-article-title"},[r?p(CB):null,o===Ri.slide?p(EB):null,p("span",{property:"headline"},t)])}),((v=n.excerpt)==null?void 0:v.call(n,{excerpt:c}))||(c?p("div",{class:"vp-article-excerpt",innerHTML:c}):null),p("hr",{class:"vp-article-hr"}),((f=n.info)==null?void 0:f.call(n,{info:u}))||p(tB,{info:u,...a.value?{items:a.value}:{}})]))}}}),U6=R({name:"Pagination",props:{total:{type:Number,default:10},perPage:{type:Number,default:10},current:{type:Number,default:1}},emits:["updateCurrentPage"],setup(s,{emit:n}){let e;const l=ps(),a=U(""),t=D(()=>l.value.paginationLocales),o=D(()=>Math.ceil(s.total/s.perPage)),r=D(()=>!!o.value&&o.value!==1),i=D(()=>o.value<7?!1:s.current>4),c=D(()=>o.value<7?!1:s.current<o.value-3),B=D(()=>{const{current:v}=s;let f=1,b=o.value;const _=[];o.value>=7&&(v<=4&&v<o.value-3?(f=1,b=5):v>4&&v>=o.value-3?(b=o.value,f=o.value-4):o.value>7&&(f=v-2,b=v+2));for(let F=f;F<=b;F++)_.push(F);return _}),u=v=>n("updateCurrentPage",v),y=v=>{const f=parseInt(v);f<=o.value&&f>0?u(f):e.pop(`<svg viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg" width="16" height="16"><path d="M64 512a448 448 0 1 0 896 0 448 448 0 1 0-896 0Z" fill="#FA5151"/><path d="m557.3 512 113.1-113.1c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L512 466.7 398.9 353.6c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L466.7 512 353.6 625.1c-12.5 12.5-12.5 32.8 0 45.3 6.2 6.2 14.4 9.4 22.6 9.4s16.4-3.1 22.6-9.4L512 557.3l113.1 113.1c6.2 6.2 14.4 9.4 22.6 9.4s16.4-3.1 22.6-9.4c12.5-12.5 12.5-32.8 0-45.3L557.3 512z" fill="#FFF"/></svg>${t.value.errorText.replace(/\$page/g,o.value.toString())}`)};return As(()=>{e=new fv}),()=>p("div",{class:"vp-pagination"},r.value?p("nav",{class:"vp-pagination-list"},[p("div",{class:"vp-pagination-number "},[s.current>1?p("div",{class:"prev",role:"navigation",unselectable:"on",onClick:()=>u(s.current-1)},t.value.prev):null,i.value?[p("div",{role:"navigation",onClick:()=>u(1)},1),p("div",{class:"ellipsis"},"...")]:null,B.value.map(v=>p("div",{key:v,class:{active:s.current===v},role:"navigation",onClick:()=>u(v)},v)),c.value?[p("div",{class:"ellipsis"},"..."),p("div",{role:"navigation",onClick:()=>u(o.value)},o.value)]:null,s.current<o.value?p("div",{class:"next",role:"navigation",unselectable:"on",onClick:()=>u(s.current+1)},t.value.next):null]),p("div",{class:"vp-pagination-nav"},[p("label",{for:"navigation-text"},`${t.value.navigate}: `),p("input",{id:"navigation-text",value:a.value,onInput:({target:v})=>{a.value=v.value},onKeydown:v=>{v.key==="Enter"&&(v.preventDefault(),y(a.value))}}),p("button",{class:"vp-pagination-button",role:"navigation",title:t.value.action,onClick:()=>y(a.value)},t.value.action)])]):[])}}),Co=R({name:"ArticleList",props:{items:{type:Array,default:()=>[]}},setup(s){const n=Ln(),e=zs(),l=xl(),a=U(1),t=D(()=>l.value.articlePerPage||10),o=D(()=>s.items.slice((a.value-1)*t.value,a.value*t.value)),r=async i=>{a.value=i;const c={...n.query};!(c.page===i.toString()||i===1&&!c.page)&&(i===1?delete c.page:c.page=i.toString(),await e.push({path:n.path,query:c}))};return As(()=>{const{page:i}=n.query;console.log("mounted"),r(i?Number(i):1),cs(a,()=>{const c=document.querySelector("#article-list").getBoundingClientRect().top+window.scrollY;setTimeout(()=>{window.scrollTo(0,c)},100)})}),()=>p("div",{id:"article-list",class:"vp-article-list",role:"feed"},o.value.length?[...o.value.map(({info:i,path:c},B)=>p(ms,{appear:!0,delay:B*.04},()=>p(j6,{key:c,info:i,path:c}))),p(U6,{current:a.value,perPage:t.value,total:s.items.length,onUpdateCurrentPage:r})]:p(_B))}}),LB=R({name:"CategoryList",setup(){const s=Bs(),n=Ol();return()=>p("ul",{class:"vp-category-list"},Ge(n.value.map).sort(([,e],[,l])=>l.items.length-e.items.length).map(([e,{path:l,items:a}])=>p("li",{class:["vp-category",`vp-category${ba(e,9)}`,{active:l===s.value.path}]},p(ks,{to:l},()=>[e,p("span",{class:"count"},a.length)]))))}}),wB=R({name:"TagList",setup(){const s=hs(),n=Sl(),e=l=>{var a;return l===((a=s.value.blog)==null?void 0:a.name)};return()=>p("ul",{class:"tag-list-wrapper"},Ge(n.value.map).sort(([,l],[,a])=>a.items.length-l.items.length).map(([l,{path:a,items:t}])=>p("li",{class:["tag",`tag${ba(l,9)}`,{active:e(l)}]},p(ks,{to:a},()=>[l,p("span",{class:"tag-num"},t.length)]))))}}),G6=R({name:"TimelineList",setup(){const s=ps(),n=ho(),e=Il(),l=D(()=>s.value.blogLocales.timeline);return()=>p("div",{class:"timeline-list-wrapper"},[p("div",{class:"timeline-list-title",onClick:()=>e(n.value.path)},[p(_o),p("span",{class:"num"},n.value.items.length),l.value]),p("hr"),p("div",{class:"timeline-content"},p("ul",{class:"timeline-list"},n.value.config.map(({year:a,items:t},o)=>p(ms,{appear:!0,delay:.08*(o+1)},()=>p("li",[p("h3",{class:"timeline-year"},a),p("ul",{class:"timeline-year-wrapper"},t.map(({date:r,info:i,path:c})=>p("li",{class:"timeline-item"},[p("span",{class:"timeline-date"},r),p(ks,{class:"timeline-title",to:c},()=>i[Fs.title])])))])))))])}});const W6={article:Ca,category:bo,tag:Do,timeline:_o};var IB=R({name:"InfoList",setup(){const s=ps(),n=Pl(),e=Ol(),l=D(()=>nn(e.value.map).length),a=Fo(),t=Sl(),o=D(()=>nn(t.value.map).length),r=Il(),i=U("article"),c=D(()=>s.value.blogLocales);return()=>p("div",{class:"vp-blog-infos"},[p("div",{class:"vp-blog-type-switcher"},Ge(W6).map(([B,u])=>p("button",{type:"button",class:"vp-blog-type-button",onClick:()=>{i.value=B}},p("div",{class:["icon-wrapper",{active:i.value===B}],"aria-label":c.value[B],"data-balloon-pos":"up"},p(u))))),p(ms,()=>i.value==="article"?p("div",{class:"vp-star-article-wrapper"},[p("div",{class:"title",onClick:()=>r(n.value.path)},[p(Ca),p("span",{class:"num"},n.value.items.length),c.value.article]),p("hr"),a.value.items.length?p("ul",{class:"vp-star-articles"},a.value.items.map(({info:B,path:u},y)=>p(ms,{appear:!0,delay:.08*(y+1)},()=>p("li",{class:"vp-star-article"},p(ks,{to:u},()=>B[Fs.title]))))):p("div",{class:"vp-star-article-empty"},c.value.empty.replace("$text",c.value.star))]):i.value==="category"?p("div",{class:"vp-category-wrapper"},[l.value?[p("div",{class:"title",onClick:()=>r(e.value.path)},[p(bo),p("span",{class:"num"},l.value),c.value.category]),p("hr"),p(ms,{delay:.04},()=>p(LB))]:p("div",{class:"vp-category-empty"},c.value.empty.replace("$text",c.value.category))]):i.value==="tag"?p("div",{class:"vp-tag-wrapper"},[o.value?[p("div",{class:"title",onClick:()=>r(t.value.path)},[p(Do),p("span",{class:"num"},o.value),c.value.tag]),p("hr"),p(ms,{delay:.04},()=>p(wB))]:p("div",{class:"vp-tag-empty"},c.value.empty.replace("$text",c.value.tag))]):p(ms,()=>p(G6)))])}}),La=R({name:"BlogWrapper",slots:Object,setup(s,{slots:n}){const{isMobile:e}=Tl();return()=>[p(Eo),p(Ao,{noSidebar:!0,noToc:!0},{default:()=>n.default(),navScreenBottom:()=>p(go),...e.value?{sidebar:()=>p(IB)}:{}})]}});const TB=()=>p("aside",{class:"vp-blog-info-wrapper"},[p(ms,()=>p(go)),p(ms,{delay:.04},()=>p(IB))]);TB.displayName="InfoPanel";var wa=TB,K6=R({name:"BlogPage",setup(){const s=Bs(),n=hs(),e=Ol(),l=Sl();return()=>{const{key:a="",name:t=""}=n.value.blog||{},o=t?a==="category"?e.value.map[t].items:a==="tag"?l.value.map[t].items:[]:[];return p(La,()=>p("div",{class:"vp-page vp-blog"},p("div",{class:"blog-page-wrapper"},[p("main",{id:"main-content",class:"vp-blog-main"},[p(ms,()=>a==="category"?p(LB):a==="tag"?p(wB):null),t?p(ms,{appear:!0,delay:.24},()=>p(Co,{key:s.value.path,items:o})):null]),p(ms,{delay:.16},()=>p(wa,{key:"blog"}))])))}}});const Y6="//theme-hope-assets.vuejs.press/hero/default.jpg";var Z6=R({name:"BlogHero",slots:Object,setup(s,{slots:n}){const e=hs(),l=Ue(),a=Vs(),t=D(()=>e.value.heroFullScreen??!1),o=D(()=>{const{heroText:i,heroImage:c,heroImageDark:B,heroAlt:u,heroImageStyle:y,tagline:v}=e.value;return{text:i??l.value.title??"Hello",image:c?bs(c):null,imageDark:B?bs(B):null,heroStyle:y,alt:u||i||"",tagline:v??"",isFullScreen:t.value}}),r=D(()=>{const{bgImage:i,bgImageDark:c,bgImageStyle:B}=e.value;return{image:rs(i)?bs(i):i===!1?null:Y6,imageDark:rs(c)?bs(c):null,bgStyle:B,isFullScreen:t.value}});return()=>{var i,c;return e.value.hero===!1?null:p("div",{ref:a,class:["vp-blog-hero",{fullscreen:t.value,"no-bg":!r.value.image}]},[((i=n.heroBg)==null?void 0:i.call(n,r.value))||[r.value.image?p("div",{class:["vp-blog-mask",{light:r.value.imageDark}],style:[{background:`url(${r.value.image}) center/cover no-repeat`},r.value.bgStyle]}):null,r.value.imageDark?p("div",{class:"vp-blog-mask dark",style:[{background:`url(${r.value.imageDark}) center/cover no-repeat`},r.value.bgStyle]}):null],((c=n.heroInfo)==null?void 0:c.call(n,o.value))||[p(ms,{appear:!0,type:"group",delay:.04},()=>[o.value.image?p("img",{key:"light",class:["vp-blog-hero-image",{light:o.value.imageDark}],style:o.value.heroStyle,src:o.value.image,alt:o.value.alt}):null,o.value.imageDark?p("img",{key:"dark",class:"vp-blog-hero-image dark",style:o.value.heroStyle,src:o.value.imageDark,alt:o.value.alt}):null]),p(ms,{appear:!0,delay:.08},()=>o.value.text?p("h1",{class:"vp-blog-hero-title"},o.value.text):null),p(ms,{appear:!0,delay:.12},()=>o.value.tagline?p("p",{class:"vp-blog-hero-description",innerHTML:o.value.tagline}):null)],o.value.isFullScreen?p("button",{type:"button",class:"slide-down-button",onClick:()=>{window.scrollTo({top:a.value.clientHeight,behavior:"smooth"})}},[p(Lt),p(Lt)]):null])}}});const X6=["link","article","book","project","friend"];var J6=R({name:"ProjectPanel",components:{ArticleIcon:Ca,BookIcon:hB,FriendIcon:DB,LinkIcon:gB,ProjectIcon:bB},props:{items:{type:Array,required:!0}},setup(s){const n=Ee(),e=Il(),l=(a="",t="icon")=>X6.includes(a)?p(sn(`${a}-icon`)):me(a)?p("img",{class:"vp-project-image",src:a,alt:t}):Cl(a)?p("img",{class:"vp-project-image",src:bs(a),alt:t}):p(Hs,{icon:a});return()=>p("div",{class:"vp-project-panel"},s.items.map(({icon:a,link:t,name:o,desc:r},i)=>p("div",{class:["vp-project-card",{[`project${i%9}`]:!n.value}],onClick:()=>e(t)},[l(a,o),p("div",{class:"vp-project-name"},o),p("div",{class:"vp-project-desc"},r)])))}}),s0=R({name:"BlogHome",setup(){const s=Pl(),n=hs(),e=D(()=>n.value.projects??[]);return()=>p("div",{class:"vp-page vp-blog"},[p(Z6),p("div",{class:"blog-page-wrapper"},[p("main",{id:"main-content",class:"vp-blog-main"},[e.value.length?p(ms,{appear:!0,delay:.16},()=>p(J6,{items:e.value})):null,p(ms,{appear:!0,delay:.24},()=>p(Co,{items:s.value.items}))]),p(ms,{appear:!0,delay:.16},()=>p(wa,{key:"blog"}))]),p(ms,{appear:!0,delay:.28},()=>p(fo))])}});const kB=()=>p(La,()=>p(s0));kB.displayName="BlogHomeLayout";var n0=kB,e0=R({name:"ArticleType",setup(){const s=Bs(),n=Cn(),e=ps(),l=Pl(),a=Fo(),t=D(()=>{const o=e.value.blogLocales;return[{text:o.all,path:l.value.path},{text:o.star,path:a.value.path},...O6.map(({key:r,path:i})=>({text:o[r],path:i.replace(/^\//,n.value)}))]});return()=>p("ul",{class:"vp-article-type-wrapper"},t.value.map(o=>p("li",{class:["vp-article-type",{active:o.path===s.value.path}]},p(ks,{to:o.path},()=>o.text))))}}),l0=R({name:"BlogPage",setup(){const s=_a(),n=hs(),e=Bs(),l=Pl(),a=Fo(),t=D(()=>{const{key:o="",type:r}=n.value.blog||{};return o==="star"?a.value.items:r==="type"&&o?s.value.items:l.value.items});return()=>p(La,()=>p("div",{class:"vp-page vp-blog"},p("div",{class:"blog-page-wrapper"},[p("main",{id:"main-content",class:"vp-blog-main"},[p(ms,()=>p(e0)),p(ms,{appear:!0,delay:.24},()=>p(Co,{key:e.value.path,items:t.value}))]),p(ms,{delay:.16},()=>p(wa,{key:"blog"}))])))}}),a0=R({name:"TimelineItems",setup(){const s=xl(),n=ps(),e=ho(),l=D(()=>s.value.timeline||n.value.blogLocales.timelineTitle),a=D(()=>e.value.config.map(({year:t})=>({title:t.toString(),level:2,slug:t.toString(),children:[]})));return()=>p("div",{class:"timeline-wrapper"},p("ul",{class:"timeline-content"},[p(ms,()=>p("li",{class:"motto"},l.value)),p(oB,{items:a.value}),e.value.config.map(({year:t,items:o},r)=>p(ms,{appear:!0,delay:.08*(r+1),type:"group"},()=>[p("h3",{key:"title",id:t,class:"timeline-year-title"},p("span",t)),p("li",{key:"content",class:"timeline-year-list"},[p("ul",{class:"timeline-year-wrapper"},o.map(({date:i,info:c,path:B})=>p("li",{class:"timeline-item"},[p("span",{class:"timeline-date"},i),p(ks,{class:"timeline-title",to:B},()=>c[Fs.title])])))])]))]))}});const OB=()=>p(La,()=>p("div",{class:"vp-page vp-blog"},p("div",{class:"blog-page-wrapper"},[p("main",{id:"main-content",class:"vp-blog-main"},[p(ms,{appear:!0,delay:.24},()=>p(a0))]),p(ms,{delay:.16},()=>p(wa,{key:"blog"}))])));OB.displayName="Timeline";var t0=OB,o0={};const he="./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),st=Array.from({length:64},(s,n)=>n),Zl=s=>Array(s).fill(-1),zn=[...Zl(46),0,1,...st.slice(54,64),...Zl(7),...st.slice(2,28),...Zl(6),...st.slice(28,54),...Zl(5)],nr=[608135816,2242054355,320440878,57701188,2752067618,698298832,137296536,3964562569,1160258022,953160567,3193202383,887688300,3232508343,3380367581,1065670069,3041331479,2450970073,2306472731],er=[3509652390,2564797868,805139163,3491422135,3101798381,1780907670,3128725573,4046225305,614570311,3012652279,134345442,2240740374,1667834072,1901547113,2757295779,4103290238,227898511,1921955416,1904987480,2182433518,2069144605,3260701109,2620446009,720527379,3318853667,677414384,3393288472,3101374703,2390351024,1614419982,1822297739,2954791486,3608508353,3174124327,2024746970,1432378464,3864339955,2857741204,1464375394,1676153920,1439316330,715854006,3033291828,289532110,2706671279,2087905683,3018724369,1668267050,732546397,1947742710,3462151702,2609353502,2950085171,1814351708,2050118529,680887927,999245976,1800124847,3300911131,1713906067,1641548236,4213287313,1216130144,1575780402,4018429277,3917837745,3693486850,3949271944,596196993,3549867205,258830323,2213823033,772490370,2760122372,1774776394,2652871518,566650946,4142492826,1728879713,2882767088,1783734482,3629395816,2517608232,2874225571,1861159788,326777828,3124490320,2130389656,2716951837,967770486,1724537150,2185432712,2364442137,1164943284,2105845187,998989502,3765401048,2244026483,1075463327,1455516326,1322494562,910128902,469688178,1117454909,936433444,3490320968,3675253459,1240580251,122909385,2157517691,634681816,4142456567,3825094682,3061402683,2540495037,79693498,3249098678,1084186820,1583128258,426386531,1761308591,1047286709,322548459,995290223,1845252383,2603652396,3431023940,2942221577,3202600964,3727903485,1712269319,422464435,3234572375,1170764815,3523960633,3117677531,1434042557,442511882,3600875718,1076654713,1738483198,4213154764,2393238008,3677496056,1014306527,4251020053,793779912,2902807211,842905082,4246964064,1395751752,1040244610,2656851899,3396308128,445077038,3742853595,3577915638,679411651,2892444358,2354009459,1767581616,3150600392,3791627101,3102740896,284835224,4246832056,1258075500,768725851,2589189241,3069724005,3532540348,1274779536,3789419226,2764799539,1660621633,3471099624,4011903706,913787905,3497959166,737222580,2514213453,2928710040,3937242737,1804850592,3499020752,2949064160,2386320175,2390070455,2415321851,4061277028,2290661394,2416832540,1336762016,1754252060,3520065937,3014181293,791618072,3188594551,3933548030,2332172193,3852520463,3043980520,413987798,3465142937,3030929376,4245938359,2093235073,3534596313,375366246,2157278981,2479649556,555357303,3870105701,2008414854,3344188149,4221384143,3956125452,2067696032,3594591187,2921233993,2428461,544322398,577241275,1471733935,610547355,4027169054,1432588573,1507829418,2025931657,3646575487,545086370,48609733,2200306550,1653985193,298326376,1316178497,3007786442,2064951626,458293330,2589141269,3591329599,3164325604,727753846,2179363840,146436021,1461446943,4069977195,705550613,3059967265,3887724982,4281599278,3313849956,1404054877,2845806497,146425753,1854211946,1266315497,3048417604,3681880366,3289982499,290971e4,1235738493,2632868024,2414719590,3970600049,1771706367,1449415276,3266420449,422970021,1963543593,2690192192,3826793022,1062508698,1531092325,1804592342,2583117782,2714934279,4024971509,1294809318,4028980673,1289560198,2221992742,1669523910,35572830,157838143,1052438473,1016535060,1802137761,1753167236,1386275462,3080475397,2857371447,1040679964,2145300060,2390574316,1461121720,2956646967,4031777805,4028374788,33600511,2920084762,1018524850,629373528,3691585981,3515945977,2091462646,2486323059,586499841,988145025,935516892,3367335476,2599673255,2839830854,265290510,3972581182,2759138881,3795373465,1005194799,847297441,406762289,1314163512,1332590856,1866599683,4127851711,750260880,613907577,1450815602,3165620655,3734664991,3650291728,3012275730,3704569646,1427272223,778793252,1343938022,2676280711,2052605720,1946737175,3164576444,3914038668,3967478842,3682934266,1661551462,3294938066,4011595847,840292616,3712170807,616741398,312560963,711312465,1351876610,322626781,1910503582,271666773,2175563734,1594956187,70604529,3617834859,1007753275,1495573769,4069517037,2549218298,2663038764,504708206,2263041392,3941167025,2249088522,1514023603,1998579484,1312622330,694541497,2582060303,2151582166,1382467621,776784248,2618340202,3323268794,2497899128,2784771155,503983604,4076293799,907881277,423175695,432175456,1378068232,4145222326,3954048622,3938656102,3820766613,2793130115,2977904593,26017576,3274890735,3194772133,1700274565,1756076034,4006520079,3677328699,720338349,1533947780,354530856,688349552,3973924725,1637815568,332179504,3949051286,53804574,2852348879,3044236432,1282449977,3583942155,3416972820,4006381244,1617046695,2628476075,3002303598,1686838959,431878346,2686675385,1700445008,1080580658,1009431731,832498133,3223435511,2605976345,2271191193,2516031870,1648197032,4164389018,2548247927,300782431,375919233,238389289,3353747414,2531188641,2019080857,1475708069,455242339,2609103871,448939670,3451063019,1395535956,2413381860,1841049896,1491858159,885456874,4264095073,4001119347,1565136089,3898914787,1108368660,540939232,1173283510,2745871338,3681308437,4207628240,3343053890,4016749493,1699691293,1103962373,3625875870,2256883143,3830138730,1031889488,3479347698,1535977030,4236805024,3251091107,2132092099,1774941330,1199868427,1452454533,157007616,2904115357,342012276,595725824,1480756522,206960106,497939518,591360097,863170706,2375253569,3596610801,1814182875,2094937945,3421402208,1082520231,3463918190,2785509508,435703966,3908032597,1641649973,2842273706,3305899714,1510255612,2148256476,2655287854,3276092548,4258621189,236887753,3681803219,274041037,1734335097,3815195456,3317970021,1899903192,1026095262,4050517792,356393447,2410691914,3873677099,3682840055,3913112168,2491498743,4132185628,2489919796,1091903735,1979897079,3170134830,3567386728,3557303409,857797738,1136121015,1342202287,507115054,2535736646,337727348,3213592640,1301675037,2528481711,1895095763,1721773893,3216771564,62756741,2142006736,835421444,2531993523,1442658625,3659876326,2882144922,676362277,1392781812,170690266,3921047035,1759253602,3611846912,1745797284,664899054,1329594018,3901205900,3045908486,2062866102,2865634940,3543621612,3464012697,1080764994,553557557,3656615353,3996768171,991055499,499776247,1265440854,648242737,3940784050,980351604,3713745714,1749149687,3396870395,4211799374,3640570775,1161844396,3125318951,1431517754,545492359,4268468663,3499529547,1437099964,2702547544,3433638243,2581715763,2787789398,1060185593,1593081372,2418618748,4260947970,69676912,2159744348,86519011,2512459080,3838209314,1220612927,3339683548,133810670,1090789135,1078426020,1569222167,845107691,3583754449,4072456591,1091646820,628848692,1613405280,3757631651,526609435,236106946,48312990,2942717905,3402727701,1797494240,859738849,992217954,4005476642,2243076622,3870952857,3732016268,765654824,3490871365,2511836413,1685915746,3888969200,1414112111,2273134842,3281911079,4080962846,172450625,2569994100,980381355,4109958455,2819808352,2716589560,2568741196,3681446669,3329971472,1835478071,660984891,3704678404,4045999559,3422617507,3040415634,1762651403,1719377915,3470491036,2693910283,3642056355,3138596744,1364962596,2073328063,1983633131,926494387,3423689081,2150032023,4096667949,1749200295,3328846651,309677260,2016342300,1779581495,3079819751,111262694,1274766160,443224088,298511866,1025883608,3806446537,1145181785,168956806,3641502830,3584813610,1689216846,3666258015,3200248200,1692713982,2646376535,4042768518,1618508792,1610833997,3523052358,4130873264,2001055236,3610705100,2202168115,4028541809,2961195399,1006657119,2006996926,3186142756,1430667929,3210227297,1314452623,4074634658,4101304120,2273951170,1399257539,3367210612,3027628629,1190975929,2062231137,2333990788,2221543033,2438960610,1181637006,548689776,2362791313,3372408396,3104550113,3145860560,296247880,1970579870,3078560182,3769228297,1714227617,3291629107,3898220290,166772364,1251581989,493813264,448347421,195405023,2709975567,677966185,3703036547,1463355134,2715995803,1338867538,1343315457,2802222074,2684532164,233230375,2599980071,2000651841,3277868038,1638401717,4028070440,3237316320,6314154,819756386,300326615,590932579,1405279636,3267499572,3150704214,2428286686,3959192993,3461946742,1862657033,1266418056,963775037,2089974820,2263052895,1917689273,448879540,3550394620,3981727096,150775221,3627908307,1303187396,508620638,2975983352,2726630617,1817252668,1876281319,1457606340,908771278,3720792119,3617206836,2455994898,1729034894,1080033504,976866871,3556439503,2881648439,1522871579,1555064734,1336096578,3548522304,2579274686,3574697629,3205460757,3593280638,3338716283,3079412587,564236357,2993598910,1781952180,1464380207,3163844217,3332601554,1699332808,1393555694,1183702653,3581086237,1288719814,691649499,2847557200,2895455976,3193889540,2717570544,1781354906,1676643554,2592534050,3230253752,1126444790,2770207658,2633158820,2210423226,2615765581,2414155088,3127139286,673620729,2805611233,1269405062,4015350505,3341807571,4149409754,1057255273,2012875353,2162469141,2276492801,2601117357,993977747,3918593370,2654263191,753973209,36408145,2530585658,25011837,3520020182,2088578344,530523599,2918365339,1524020338,1518925132,3760827505,3759777254,1202760957,3985898139,3906192525,674977740,4174734889,2031300136,2019492241,3983892565,4153806404,3822280332,352677332,2297720250,60907813,90501309,3286998549,1016092578,2535922412,2839152426,457141659,509813237,4120667899,652014361,1966332200,2975202805,55981186,2327461051,676427537,3255491064,2882294119,3433927263,1307055953,942726286,933058658,2468411793,3933900994,4215176142,1361170020,2001714738,2830558078,3274259782,1222529897,1679025792,2729314320,3714953764,1770335741,151462246,3013232138,1682292957,1483529935,471910574,1539241949,458788160,3436315007,1807016891,3718408830,978976581,1043663428,3165965781,1927990952,4200891579,2372276910,3208408903,3533431907,1412390302,2931980059,4132332400,1947078029,3881505623,4168226417,2941484381,1077988104,1320477388,886195818,18198404,3786409e3,2509781533,112762804,3463356488,1866414978,891333506,18488651,661792760,1628790961,3885187036,3141171499,876946877,2693282273,1372485963,791857591,2686433993,3759982718,3167212022,3472953795,2716379847,445679433,3561995674,3504004811,3574258232,54117162,3331405415,2381918588,3769707343,4154350007,1140177722,4074052095,668550556,3214352940,367459370,261225585,2610173221,4209349473,3468074219,3265815641,314222801,3066103646,3808782860,282218597,3406013506,3773591054,379116347,1285071038,846784868,2669647154,3771962079,3550491691,2305946142,453669953,1268987020,3317592352,3279303384,3744833421,2610507566,3859509063,266596637,3847019092,517658769,3462560207,3443424879,370717030,4247526661,2224018117,4143653529,4112773975,2788324899,2477274417,1456262402,2901442914,1517677493,1846949527,2295493580,3734397586,2176403920,1280348187,1908823572,3871786941,846861322,1172426758,3287448474,3383383037,1655181056,3139813346,901632758,1897031941,2986607138,3066810236,3447102507,1393639104,373351379,950779232,625454576,3124240540,4148612726,2007998917,544563296,2244738638,2330496472,2058025392,1291430526,424198748,50039436,29584100,3605783033,2429876329,2791104160,1057563949,3255363231,3075367218,3463963227,1469046755,985887462],xB=[1332899944,1700884034,1701343084,1684370003,1668446532,1869963892],wt=(s,n)=>{if(n<=0||n>s.length)throw Error(`Illegal len: ${n}`);let e=0,l,a;const t=[];for(;e<n;){if(l=s[e++]&255,t.push(he[l>>2&63]),l=(l&3)<<4,e>=n){t.push(he[l&63]);break}if(a=s[e++]&255,l|=a>>4&15,t.push(he[l&63]),l=(a&15)<<2,e>=n){t.push(he[l&63]);break}a=s[e++]&255,l|=a>>6&3,t.push(he[l&63]),t.push(he[a&63])}return t.join("")},p0=(s,n)=>{if(n<=0)throw Error(`Illegal len: ${n}`);const e=s.length;let l=0,a=0,t,o,r,i,c,B;const u=[];for(;l<e-1&&a<n&&(B=s.charCodeAt(l++),t=B<zn.length?zn[B]:-1,B=s.charCodeAt(l++),o=B<zn.length?zn[B]:-1,!(t==-1||o==-1||(c=t<<2>>>0,c|=(o&48)>>4,u.push(String.fromCharCode(c)),++a>=n||l>=e)||(B=s.charCodeAt(l++),r=B<zn.length?zn[B]:-1,r==-1)||(c=(o&15)<<4>>>0,c|=(r&60)>>2,u.push(String.fromCharCode(c)),++a>=n||l>=e)));)B=s.charCodeAt(l++),i=B<zn.length?zn[B]:-1,c=(r&3)<<6>>>0,c|=i,u.push(String.fromCharCode(c)),++a;return u.map(y=>y.charCodeAt(0))},r0=(s,n)=>{let e=null;for(typeof s=="number"&&(e=s,s=()=>null);e!==null||(e=s())!==null;)e<128?n(e&127):e<2048?(n(e>>6&31|192),n(e&63|128)):e<65536?(n(e>>12&15|224),n(e>>6&63|128),n(e&63|128)):(n(e>>18&7|240),n(e>>12&63|128),n(e>>6&63|128),n(e&63|128)),e=null},c0=(s,n)=>{let e,l=null;for(;(e=l!==null?l:s())!==null;){if(e>=55296&&e<=57343&&(l=s())!==null&&l>=56320&&l<=57343){n((e-55296)*1024+l-56320+65536),l=null;continue}n(e)}l!==null&&n(l)},i0=(s,n)=>{c0(s,function(e){r0(e,n)})},B0=typeof process=="object"&&o0.NEXT_RUNTIME==="edge"?setTimeout:typeof setImmediate=="function"?setImmediate:typeof process=="object"&&typeof process.nextTick=="function"?process.nextTick:setTimeout,d0=s=>{const n=[];let e=0;return i0(()=>e>=s.length?null:s.charCodeAt(e++),l=>{n.push(l)}),n},Al=(s,n,e,l)=>{let a,t=s[n],o=s[n+1];return t^=e[0],a=l[t>>>24],a+=l[256|t>>16&255],a^=l[512|t>>8&255],a+=l[768|t&255],o^=a^e[1],a=l[o>>>24],a+=l[256|o>>16&255],a^=l[512|o>>8&255],a+=l[768|o&255],t^=a^e[2],a=l[t>>>24],a+=l[256|t>>16&255],a^=l[512|t>>8&255],a+=l[768|t&255],o^=a^e[3],a=l[o>>>24],a+=l[256|o>>16&255],a^=l[512|o>>8&255],a+=l[768|o&255],t^=a^e[4],a=l[t>>>24],a+=l[256|t>>16&255],a^=l[512|t>>8&255],a+=l[768|t&255],o^=a^e[5],a=l[o>>>24],a+=l[256|o>>16&255],a^=l[512|o>>8&255],a+=l[768|o&255],t^=a^e[6],a=l[t>>>24],a+=l[256|t>>16&255],a^=l[512|t>>8&255],a+=l[768|t&255],o^=a^e[7],a=l[o>>>24],a+=l[256|o>>16&255],a^=l[512|o>>8&255],a+=l[768|o&255],t^=a^e[8],a=l[t>>>24],a+=l[256|t>>16&255],a^=l[512|t>>8&255],a+=l[768|t&255],o^=a^e[9],a=l[o>>>24],a+=l[256|o>>16&255],a^=l[512|o>>8&255],a+=l[768|o&255],t^=a^e[10],a=l[t>>>24],a+=l[256|t>>16&255],a^=l[512|t>>8&255],a+=l[768|t&255],o^=a^e[11],a=l[o>>>24],a+=l[256|o>>16&255],a^=l[512|o>>8&255],a+=l[768|o&255],t^=a^e[12],a=l[t>>>24],a+=l[256|t>>16&255],a^=l[512|t>>8&255],a+=l[768|t&255],o^=a^e[13],a=l[o>>>24],a+=l[256|o>>16&255],a^=l[512|o>>8&255],a+=l[768|o&255],t^=a^e[14],a=l[t>>>24],a+=l[256|t>>16&255],a^=l[512|t>>8&255],a+=l[768|t&255],o^=a^e[15],a=l[o>>>24],a+=l[256|o>>16&255],a^=l[512|o>>8&255],a+=l[768|o&255],t^=a^e[16],s[n]=o^e[17],s[n+1]=t,s},be=(s,n)=>{let e=0;for(let l=0;l<4;++l)e=e<<8|s[n]&255,n=(n+1)%s.length;return{key:e,offp:n}},lr=(s,n,e)=>{const l=n.length,a=e.length;let t=0,o=[0,0],r;for(let i=0;i<l;i++)r=be(s,t),t=r.offp,n[i]=n[i]^r.key;for(let i=0;i<l;i+=2)o=Al(o,0,n,e),n[i]=o[0],n[i+1]=o[1];for(let i=0;i<a;i+=2)o=Al(o,0,n,e),e[i]=o[0],e[i+1]=o[1]},u0=(s,n,e,l)=>{const a=e.length,t=l.length;let o=0,r=[0,0],i;for(let c=0;c<a;c++)i=be(n,o),o=i.offp,e[c]=e[c]^i.key;o=0;for(let c=0;c<a;c+=2)i=be(s,o),o=i.offp,r[0]^=i.key,i=be(s,o),o=i.offp,r[1]^=i.key,r=Al(r,0,e,l),e[c]=r[0],e[c+1]=r[1];for(let c=0;c<t;c+=2)i=be(s,o),o=i.offp,r[0]^=i.key,i=be(s,o),o=i.offp,r[1]^=i.key,r=Al(r,0,e,l),l[c]=r[0],l[c+1]=r[1]},ar=(s,n,e,l,a)=>{const t=xB.slice(),o=t.length;if(e<4||e>31){const y=new Error(`Illegal number of rounds (4-31): ${e}`);if(l===!1)return Promise.reject(y);throw y}if(n.length!==16){const y=new Error(`Illegal salt length: ${n.length} != 16`);if(l===!1)return Promise.reject(y);throw y}e=1<<e>>>0;let r,i,c=0,B;Int32Array?(r=new Int32Array(nr),i=new Int32Array(er)):(r=nr.slice(),i=er.slice()),u0(n,s,r,i);const u=()=>{if(a&&a(c/e),c<e){const y=Date.now();for(;c<e&&(c=c+1,lr(s,r,i),lr(n,r,i),!(Date.now()-y>100)););}else{for(c=0;c<64;c++)for(B=0;B<o>>1;B++)Al(t,B<<1,r,i);const y=[];for(c=0;c<o;c++)y.push((t[c]>>24&255)>>>0),y.push((t[c]>>16&255)>>>0),y.push((t[c]>>8&255)>>>0),y.push((t[c]&255)>>>0);return l===!1?Promise.resolve(y):y}if(l===!1)return new Promise(y=>B0(()=>{u().then(y)}))};if(l===!1)return u();{let y;for(;;)if(typeof(y=u())<"u")return y||[]}},y0=s=>{var n;try{const{crypto:e,msCrypto:l}=window,a=new Uint32Array(s);return(n=e||l)==null||n.getRandomValues(a),Array.from(a)}catch{throw Error("WebCryptoAPI is not available")}},v0=(s=10)=>{if(typeof s!="number")throw Error("Illegal arguments: "+typeof s);s<4?s=4:s>31&&(s=31);const n=[];return n.push("$2a$"),s<10&&n.push("0"),n.push(s.toString()),n.push("$"),n.push(wt(y0(16),16)),n.join("")};function m0(s,n,e,l){if(typeof s!="string"||typeof n!="string"){const v=new Error("Invalid string / salt: Not a string");if(e===!1)return Promise.reject(v);throw v}let a,t;if(n.charAt(0)!=="$"||n.charAt(1)!=="2"){const v=new Error("Invalid salt version: "+n.substring(0,2));if(e===!1)return Promise.reject(v);throw v}if(n.charAt(2)==="$")a="\0",t=3;else{if(a=n.charAt(2),a!=="a"&&a!=="b"&&a!=="y"||n.charAt(3)!=="$"){const v=Error("Invalid salt revision: "+n.substring(2,4));if(e===!1)return Promise.reject(v);throw v}t=4}if(n.charAt(t+2)>"$"){const v=new Error("Missing salt rounds");if(e===!1)return Promise.reject(v);throw v}const o=parseInt(n.substring(t,t+1),10)*10,r=parseInt(n.substring(t+1,t+2),10),i=o+r,c=n.substring(t+3,t+25);s+=a>="a"?"\0":"";const B=d0(s),u=p0(c,16),y=v=>{const f=[];return f.push("$2"),a>="a"&&f.push(a),f.push("$"),i<10&&f.push("0"),f.push(i.toString()),f.push("$"),f.push(wt(u,u.length)),f.push(wt(v,xB.length*4-1)),f.join("")};return e===!1?ar(B,u,i,!1,l).then(v=>y(v)):y(ar(B,u,i,!0,l))}const A0=(s,n=10)=>{if(typeof n=="number"&&(n=v0(n)),typeof s!="string"||typeof n!="string")throw Error("Illegal arguments: "+typeof s+", "+typeof n);return m0(s,n,!0)},It=(s,n)=>{if(typeof s!="string"||typeof n!="string")throw Error("Illegal arguments: "+typeof s+", "+typeof n);return n.length!==60?!1:A0(s,n.substring(0,n.length-31))===n},SB=()=>p(ts,{name:"lock"},()=>p("path",{d:"M787.168 952.268H236.832c-30.395 0-55.033-24.638-55.033-55.033V429.45c0-30.395 24.638-55.034 55.033-55.034h82.55V264.35c0-106.38 86.238-192.618 192.618-192.618S704.618 157.97 704.618 264.35v110.066h82.55c30.395 0 55.033 24.639 55.033 55.034v467.785c0 30.395-24.639 55.033-55.033 55.033zM484.483 672.046v115.122h55.034V672.046c31.99-11.373 55.033-41.605 55.033-77.496 0-45.592-36.958-82.55-82.55-82.55s-82.55 36.958-82.55 82.55c0 35.89 23.042 66.123 55.033 77.496zM622.067 264.35c0-60.788-49.28-110.067-110.067-110.067s-110.067 49.28-110.067 110.067v110.066h220.135V264.35z"}));SB.displayName="LockIcon";var PB=R({name:"PasswordModal",props:{full:Boolean},emits:["verify"],setup(s,{emit:n}){const e=hs(),l=ps(),a=U(""),t=U(!1),o=U(!1),r=D(()=>l.value.encryptLocales);let i=null;const c=()=>{i&&clearTimeout(i),t.value=!1,n("verify",a.value,o.value),Mn().then(()=>{t.value=!0,i=setTimeout(()=>{t.value=!1},1e3)})};return()=>p("div",{class:["vp-decrypt-layer",{expand:s.full||e.value.home}]},p("div",{class:"vp-decrypt-modal"},[p("div",{class:["vp-decrypt-hint",{tried:t.value}]},t.value?r.value.errorHint:p(SB,{"aria-label":r.value.iconLabel})),p("div",{class:"vp-decrypt-input"},[p("input",{type:"password",value:a.value,placeholder:r.value.placeholder,onInput:({target:B})=>{a.value=B.value},onKeydown:({key:B})=>{B==="Enter"&&c()}})]),p("div",{class:"vp-remember-password"},[p("input",{type:"checkbox",value:o.value,onChange:()=>o.value=!o.value}),r.value.remember]),p("button",{type:"button",class:"vp-decrypt-submit",onClick:()=>c()},"OK")]))}});const RB=()=>{const s=qn();return D(()=>s.value.encrypt||{})},tr="VUEPRESS_HOPE_GLOBAL_TOKEN",f0=()=>{const s=RB(),n=fe(tr,""),e=Bi(tr,""),l=D(()=>{const{global:t=!1,admin:o=[]}=s.value;return t&&o.length>0}),a=D(()=>{if(l.value){if(n.value)return s.value.admin.some(t=>It(n.value,t));if(e.value)return s.value.admin.some(t=>It(e.value,t))}return!1});return{isEncrypted:l,isDecrypted:a,validate:(t,o=!1)=>{(o?n:e).value=t}}},nt=(s="",n)=>!!s&&It(s,n),or="VUEPRESS_HOPE_PATH_TOKEN",E0=()=>{const s=Bs(),n=RB(),e=fe(or,{}),l=Bi(or,{}),a=o=>Dl(n.value.config)?nn(n.value.config).filter(r=>ne(decodeURI(o),r)).sort((r,i)=>i.length-r.length):[],t=o=>{const r=a(o);if(r.length>0){const{config:i={}}=n.value;return{isEncrypted:!0,isDecrypted:r.some(c=>e.value[c]&&i[c].some(B=>nt(e.value[c],B))||l.value[c]&&i[c].some(B=>nt(l.value[c],B)))}}return{isDecrypted:!1,isEncrypted:!1}};return{status:D(()=>t(s.value.path)),getStatus:t,validate:(o,r=!1)=>{const{config:i={}}=n.value,c=a(s.value.path);for(const B of c)if(i[B].filter(u=>nt(o,u))){(r?e:l).value[B]=o;break}}}};var F0=R({name:"GlobalEncrypt",slots:Object,setup(s,{slots:n}){const{isDecrypted:e,isEncrypted:l,validate:a}=f0(),t=U(!1);return As(()=>{t.value=!0}),()=>p(rB,()=>l.value?t.value?e.value?n.default():p(PB,{full:!0,onVerify:a}):null:n.default())}}),h0=R({name:"LocalEncrypt",slots:Object,setup(s,{slots:n}){const{status:e,validate:l}=E0(),a=U(!1);return As(()=>{a.value=!0}),()=>{const{isEncrypted:t,isDecrypted:o}=e.value;return t?a.value?o?n.default():p(PB,{full:!0,onVerify:l}):null:n.default()}}});i1(s=>{const n=s.t,e=s.I!==!1,l=s.i;return e?{title:n,content:l?()=>[p(Hs,{icon:l}),n]:null,order:s.O,index:s.I}:null});const g0=Fn({enhance:({app:s,router:n})=>{const{scrollBehavior:e}=n.options;n.options.scrollBehavior=async(...l)=>(await pB().wait(),e(...l)),I8(s),s.component("HopeIcon",Hs),s.component("VPLink",ks),s.component("BloggerInfo",go),s.component("GlobalEncrypt",F0),s.component("LocalEncrypt",h0)},setup:()=>{T8(),S8(),H6()},layouts:{Layout:C6,NotFound:w6,BlogCategory:K6,BlogHome:n0,BlogType:l0,Timeline:t0}}),b0=()=>p(ts,{name:"heading"},()=>p("path",{d:"M250.4 704.6H64V595.4h202.4l26.2-166.6H94V319.6h214.4L352 64h127.8l-43.6 255.4h211.2L691 64h126.2l-43.6 255.4H960v109.2H756.2l-24.6 166.6H930v109.2H717L672 960H545.8l43.6-255.4H376.6L333 960H206.8l43.6-255.4zm168.4-276L394 595.4h211.2l24.6-166.6h-211z"}));b0.displayName="HeadingIcon";const D0=()=>p(ts,{name:"heart"},()=>p("path",{d:"M1024 358.156C1024 195.698 892.3 64 729.844 64c-86.362 0-164.03 37.218-217.844 96.49C458.186 101.218 380.518 64 294.156 64 131.698 64 0 195.698 0 358.156 0 444.518 37.218 522.186 96.49 576H96l320 320c32 32 64 64 96 64s64-32 96-64l320-320h-.49c59.272-53.814 96.49-131.482 96.49-217.844zM841.468 481.232 517.49 805.49a2981.962 2981.962 0 0 1-5.49 5.48c-1.96-1.95-3.814-3.802-5.49-5.48L182.532 481.234C147.366 449.306 128 405.596 128 358.156 128 266.538 202.538 192 294.156 192c47.44 0 91.15 19.366 123.076 54.532L512 350.912l94.768-104.378C638.696 211.366 682.404 192 729.844 192 821.462 192 896 266.538 896 358.156c0 47.44-19.368 91.15-54.532 123.076z"}));D0.displayName="HeartIcon";const _0=()=>p(ts,{name:"history"},()=>p("path",{d:"M512 1024a512 512 0 1 1 512-512 512 512 0 0 1-512 512zm0-896a384 384 0 1 0 384 384 384 384 0 0 0-384-384zm192 448H512a64 64 0 0 1-64-64V320a64 64 0 0 1 128 0v128h128a64 64 0 0 1 0 128z"}));_0.displayName="HistoryIcon";const C0=()=>p(ts,{name:"title"},()=>p("path",{d:"M512 256c70.656 0 134.656 28.672 180.992 75.008A254.933 254.933 0 0 1 768 512c0 83.968-41.024 157.888-103.488 204.48C688.96 748.736 704 788.48 704 832c0 105.984-86.016 192-192 192-106.048 0-192-86.016-192-192h128a64 64 0 1 0 128 0 64 64 0 0 0-64-64 255.19 255.19 0 0 1-181.056-75.008A255.403 255.403 0 0 1 256 512c0-83.968 41.024-157.824 103.488-204.544C335.04 275.264 320 235.584 320 192A192 192 0 0 1 512 0c105.984 0 192 85.952 192 192H576a64.021 64.021 0 0 0-128 0c0 35.328 28.672 64 64 64zM384 512c0 70.656 57.344 128 128 128s128-57.344 128-128-57.344-128-128-128-128 57.344-128 128z"}));C0.displayName="TitleIcon";const Lo=()=>p(ts,{name:"search"},()=>p("path",{d:"M192 480a256 256 0 1 1 512 0 256 256 0 0 1-512 0m631.776 362.496-143.2-143.168A318.464 318.464 0 0 0 768 480c0-176.736-143.264-320-320-320S128 303.264 128 480s143.264 320 320 320a318.016 318.016 0 0 0 184.16-58.592l146.336 146.368c12.512 12.48 32.768 12.48 45.28 0 12.48-12.512 12.48-32.768 0-45.28"}));Lo.displayName="SearchIcon";const MB=()=>p("svg",{xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32",preserveAspectRatio:"xMidYMid",viewBox:"0 0 100 100"},[p("circle",{cx:"28",cy:"75",r:"11",fill:"currentColor"},p("animate",{attributeName:"fill-opacity",begin:"0s",dur:"1s",keyTimes:"0;0.2;1",repeatCount:"indefinite",values:"0;1;1"})),p("path",{fill:"none",stroke:"#88baf0","stroke-width":"10",d:"M28 47a28 28 0 0 1 28 28"},p("animate",{attributeName:"stroke-opacity",begin:"0.1s",dur:"1s",keyTimes:"0;0.2;1",repeatCount:"indefinite",values:"0;1;1"})),p("path",{fill:"none",stroke:"#88baf0","stroke-width":"10",d:"M28 25a50 50 0 0 1 50 50"},p("animate",{attributeName:"stroke-opacity",begin:"0.2s",dur:"1s",keyTimes:"0;0.2;1",repeatCount:"indefinite",values:"0;1;1"}))]);MB.displayName="LoadingIcon";const VB=({hint:s})=>p("div",{class:"search-pro-result-wrapper loading"},[p(MB),s]);VB.displayName="SearchLoading";const L0='<svg width="20" height="20" viewBox="0 0 20 20"><path d="M10 10l5.09-5.09L10 10l5.09 5.09L10 10zm0 0L4.91 4.91 10 10l-5.09 5.09L10 10z" stroke="currentColor" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round"></path></svg>';var w0={0:"分类：$content",1:"标签：$content"},I0={"/":{cancel:"取消",placeholder:"搜索",search:"搜索",searching:"搜索中",defaultTitle:"文档",select:"选择",navigate:"切换",autocomplete:"自动补全",exit:"关闭",queryHistory:"搜索历史",resultHistory:"历史结果",emptyHistory:"无搜索历史",emptyResult:"没有找到结果",loading:"正在加载搜索索引..."}},T0={searchDelay:150,suggestDelay:0,queryHistoryCount:5,resultHistoryCount:5,hotKeys:[{key:"k",ctrl:!0},{key:"/",ctrl:!0}],worker:"search-pro.worker.js"};const wo=T0,im=w0,qB=wo.hotKeys,Io=I0;new URL("data:application/javascript;base64,aW1wb3J0e3NlYXJjaCBhcyBDLGdldFN0b3JlZEZpZWxkcyBhcyBSLGF1dG9TdWdnZXN0IGFzIFQsbG9hZEpTT05JbmRleCBhcyB3fWZyb20ic2xpbXNlYXJjaCI7aW1wb3J0ICQgZnJvbSJAdGVtcC9zZWFyY2gtcHJvL2luZGV4IjtpbXBvcnR7ZW50cmllcyBhcyBFfWZyb20idnVlcHJlc3Mtc2hhcmVkL2NsaWVudCI7Y29uc3QgeD0obCxlKT0+e2NvbnN0IG49bC50b0xvd2VyQ2FzZSgpLHM9ZS50b0xvd2VyQ2FzZSgpLG89W107bGV0IHQ9MCxyPTA7Y29uc3QgaT0oYyxnPSExKT0+e2xldCBwPSIiO3I9PT0wP3A9Yy5sZW5ndGg+MjA/YOKApiAke2Muc2xpY2UoLTIwKX1gOmM6Zz9wPWMubGVuZ3RoK3I+MTAwP2Ake2Muc2xpY2UoMCwxMDAtcil94oCmIGA6YzpwPWMubGVuZ3RoPjIwP2Ake2Muc2xpY2UoMCwyMCl9IOKApiAke2Muc2xpY2UoLTIwKX1gOmMscCYmby5wdXNoKHApLHIrPXAubGVuZ3RoLGd8fChvLnB1c2goWyJtYXJrIixlXSkscis9ZS5sZW5ndGgscj49MTAwJiZvLnB1c2goIiDigKYiKSl9O2xldCBoPW4uaW5kZXhPZihzLHQpO2lmKGg9PT0tMSlyZXR1cm4gbnVsbDtmb3IoO2g+PTA7KXtjb25zdCBjPWgrcy5sZW5ndGg7aWYoaShsLnNsaWNlKHQsaCkpLHQ9YyxyPjEwMClicmVhaztoPW4uaW5kZXhPZihzLHQpfXJldHVybiByPDEwMCYmaShsLnNsaWNlKHQpLCEwKSxvfSxTPS9bXHU0ZTAwLVx1OWZhNV0vZyxNPShsPXt9KT0+KHtmdXp6eTouMixwcmVmaXg6ITAscHJvY2Vzc1Rlcm06ZT0+e2NvbnN0IG49ZS5tYXRjaChTKXx8W10scz1lLnJlcGxhY2UoUywiIikudG9Mb3dlckNhc2UoKTtyZXR1cm4gcz9bcywuLi5uXTpbLi4ubl19LC4uLmx9KSxGPShsLGUpPT5lLmNvbnRlbnRzLnJlZHVjZSgobixbLHNdKT0+bitzLDApLWwuY29udGVudHMucmVkdWNlKChuLFssc10pPT5uK3MsMCksXz0obCxlKT0+TWF0aC5tYXgoLi4uZS5jb250ZW50cy5tYXAoKFssbl0pPT5uKSktTWF0aC5tYXgoLi4ubC5jb250ZW50cy5tYXAoKFssbl0pPT5uKSksTz0obCxlLG49e30pPT57Y29uc3Qgcz17fTtyZXR1cm4gQyhlLGwsTSh7Ym9vc3Q6e2g6Mix0OjEsYzo0fSwuLi5ufSkpLmZvckVhY2gobz0+e2NvbnN0e2lkOnQsdGVybXM6cixzY29yZTppfT1vLGg9dC5pbmNsdWRlcygiQCIpLGM9dC5pbmNsdWRlcygiIyIpLFtnLHBdPXQuc3BsaXQoL1sjQF0vKSxtPXIuc29ydCgodSxhKT0+dS5sZW5ndGgtYS5sZW5ndGgpLmZpbHRlcigodSxhKT0+ci5zbGljZShhKzEpLmV2ZXJ5KGY9PiFmLmluY2x1ZGVzKHUpKSkse2NvbnRlbnRzOmR9PXNbZ10/Pz17dGl0bGU6IiIsY29udGVudHM6W119O2lmKGgpZC5wdXNoKFt7dHlwZToiY3VzdG9tRmllbGQiLGtleTpnLGluZGV4OnAsZGlzcGxheTptLm1hcCh1PT5vLmMubWFwKGE9PngoYSx1KSkpLmZsYXQoKS5maWx0ZXIodT0+dSE9PW51bGwpfSxpXSk7ZWxzZXtjb25zdCB1PW0ubWFwKGE9Pngoby5oLGEpKS5maWx0ZXIoYT0+YSE9PW51bGwpO2lmKHUubGVuZ3RoJiZkLnB1c2goW3t0eXBlOmM/ImhlYWRpbmciOiJ0aXRsZSIsa2V5OmcsLi4uYyYme2FuY2hvcjpwfSxkaXNwbGF5OnV9LGldKSwidCJpbiBvKWZvcihjb25zdCBhIG9mIG8udCl7Y29uc3QgZj1tLm1hcCh5PT54KGEseSkpLmZpbHRlcih5PT55IT09bnVsbCk7Zi5sZW5ndGgmJmQucHVzaChbe3R5cGU6InRleHQiLGtleTpnLC4uLmMmJnthbmNob3I6cH0sZGlzcGxheTpmfSxpXSl9fX0pLEUocykuc29ydCgoWyxvXSxbLHRdKT0+U0VBUkNIX1BST19TT1JUX1NUUkFURUdZPT09InRvdGFsIj9GKG8sdCk6XyhvLHQpKS5tYXAoKFtvLHt0aXRsZTp0LGNvbnRlbnRzOnJ9XSk9PntpZighdCl7Y29uc3QgaT1SKGUsbyk7aSYmKHQ9aS5oKX1yZXR1cm57dGl0bGU6dCxjb250ZW50czpyLm1hcCgoW2ldKT0+aSl9fSl9LGs9KGwsZSxuPXt9KT0+VChlLGwsTShuKSkubWFwKCh7c3VnZ2VzdGlvbjpzfSk9PnMpO3NlbGYub25tZXNzYWdlPWFzeW5jKHtkYXRhOnt0eXBlOmw9ImFsbCIscXVlcnk6ZSxsb2NhbGU6bixvcHRpb25zOnN9fSk9Pntjb25zdHtkZWZhdWx0Om99PWF3YWl0ICRbbl0oKSx0PXcobyx7ZmllbGRzOlsiaCIsInQiLCJjIl0sc3RvcmVGaWVsZHM6WyJoIiwidCIsImMiXX0pO2w9PT0ic3VnZ2VzdCI/c2VsZi5wb3N0TWVzc2FnZShrKGUsdCxzKSk6bD09PSJzZWFyY2giP3NlbGYucG9zdE1lc3NhZ2UoTyhlLHQscykpOnNlbGYucG9zdE1lc3NhZ2Uoe3N1Z2dlc3Rpb25zOmsoZSx0LHMpLHJlc3VsdHM6TyhlLHQscyl9KX07Ci8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcAo=",import.meta.url);let k0={};const NB=Symbol(""),O0=()=>vs(NB),x0=s=>{s.provide(NB,k0)},S0=()=>{const s=new Worker(`/${wo.worker}`,{}),n=[];return s.addEventListener("message",({data:e})=>{const{resolve:l}=n.shift();l(e)}),{search:e=>new Promise((l,a)=>{s.postMessage(e),n.push({resolve:l,reject:a})}),terminate:()=>{s.terminate(),n.forEach(({reject:e})=>e(new Error("Worker has been terminated.")))}}},P0=(s,n=!1)=>{const e=U(0),l=D(()=>s.value[e.value]),a=()=>{e.value=e.value>0?e.value-1:s.value.length-1},t=()=>{e.value=e.value<s.value.length-1?e.value+1:0};return cs(s,()=>{n||(e.value=0)}),{index:e,item:l,prev:a,next:t}},To=Symbol(""),R0=()=>{const s=U(!1);cn(To,s)},M0=s=>s instanceof Element?document.activeElement===s&&(["TEXTAREA","SELECT","INPUT"].includes(s.tagName)||s.hasAttribute("contenteditable")):!1,V0=s=>qB.some(n=>{const{key:e,ctrl:l=!1,shift:a=!1,alt:t=!1,meta:o=!1}=n;return e===s.key&&l===s.ctrlKey&&a===s.shiftKey&&t===s.altKey&&o===s.metaKey}),q0='<svg width="15" height="15" aria-label="Enter key" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M12 3.53088v3c0 1-1 2-2 2H4M7 11.53088l-3-3 3-3"></path></g></svg>',N0='<svg width="15" height="15" aria-label="Arrow down" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M7.5 3.5v8M10.5 8.5l-3 3-3-3"></path></g></svg>',$0='<svg width="15" height="15" aria-label="Arrow up" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M7.5 11.5v-8M10.5 6.5l-3-3-3 3"></path></g></svg>',Q0='<svg width="15" height="15" aria-label="Escape key" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M13.6167 8.936c-.1065.3583-.6883.962-1.4875.962-.7993 0-1.653-.9165-1.653-2.1258v-.5678c0-1.2548.7896-2.1016 1.653-2.1016.8634 0 1.3601.4778 1.4875 1.0724M9 6c-.1352-.4735-.7506-.9219-1.46-.8972-.7092.0246-1.344.57-1.344 1.2166s.4198.8812 1.3445.9805C8.465 7.3992 8.968 7.9337 9 8.5c.032.5663-.454 1.398-1.4595 1.398C6.6593 9.898 6 9 5.963 8.4851m-1.4748.5368c-.2635.5941-.8099.876-1.5443.876s-1.7073-.6248-1.7073-2.204v-.4603c0-1.0416.721-2.131 1.7073-2.131.9864 0 1.6425 1.031 1.5443 2.2492h-2.956"></path></g></svg>',H0=s=>{const n=U([]);{const e=O0(),l=Cn();As(()=>{const a=Ov(r=>{r?t({type:"suggest",query:r,locale:l.value,options:e}).then(i=>{n.value=i.length?ne(i[0],r)&&!i[0].slice(r.length).includes(" ")?i:[r,...i]:[]}).catch(i=>{console.error(i)}):n.value=[]},wo.suggestDelay),{search:t,terminate:o}=S0();cs([s,l],()=>a(s.value),{immediate:!0}),ze(()=>{o()})})}return{suggestions:n}},et=qB[0];var z0=R({name:"SearchBox",setup(){const s=le(Io),n=vs(To),e=U(!1),l=D(()=>et?[(e.value?["⌃","⇧","⌥","⌘"]:["Ctrl","Shift","Alt","Win"]).filter((a,t)=>et[["ctrl","shift","alt","meta"][t]]),et.key.toUpperCase()]:null);return ws("keydown",a=>{!n.value&&V0(a)&&!M0(a.target)&&(a.preventDefault(),n.value=!0)}),As(()=>{const{userAgent:a}=navigator;e.value=cv(a)||rv(a)||pv(a)}),()=>[p("button",{type:"button",class:"search-pro-button","aria-label":s.value.search,onClick:()=>{n.value=!0}},[p(Lo),p("div",{class:"search-pro-placeholder"},s.value.search),l.value?p("div",{class:"search-pro-key-hints"},l.value.map(a=>p("kbd",{class:"search-pro-key"},a))):null])]}});const j0=m({loader:()=>d(()=>import("./SearchResult-pDMu_RJ2.js"),__vite__mapDeps([])),loadingComponent:()=>{const s=le(Io);return p(VB,{hint:s.value.loading})}});var U0=R({name:"SearchModal",setup(){const s=vs(To),n=Ue(),e=ti(),l=le(Io),a=U(""),{suggestions:t}=H0(a),o=U(!1),{index:r,prev:i,next:c}=P0(t),B=Vs(),u=Vs(),y=(v=r.value)=>{a.value=t.value[v],o.value=!1};return ws("keydown",v=>{o.value?v.key==="ArrowUp"?i():v.key==="ArrowDown"?c():v.key==="Enter"?y():v.key==="Escape"&&(o.value=!1):v.key==="Escape"&&(s.value=!1)}),As(()=>{const v=co(document.body);cs(s,async f=>{var b;v.value=f,f&&(await Mn(),(b=B.value)==null||b.focus())}),Mv(u,()=>{o.value=!1}),ze(()=>{v.value=!1})}),()=>s.value?p("div",{class:"search-pro-modal-wrapper"},[p("div",{class:"search-pro-mask",onClick:()=>{s.value=!1,a.value=""}}),p("div",{class:"search-pro-modal"},[p("div",{class:"search-pro-box"},[p("form",[p("label",{for:"search-pro","aria-label":l.value.search},p(Lo)),p("input",{ref:B,type:"search",class:"search-pro-input",id:"search-pro",placeholder:l.value.placeholder,spellcheck:"false",autocapitalize:"off",autocomplete:"off",autocorrect:"off",name:`${n.value.title}-search`,value:a.value,"aria-controls":"search-pro-results",onKeydown:v=>{const{key:f}=v;t.value.length&&(f==="Tab"?(y(),v.preventDefault()):(f==="ArrowDown"||f==="ArrowUp"||f==="Escape")&&v.preventDefault())},onInput:({target:v})=>{a.value=v.value,o.value=!0,r.value=0}}),a.value?p("button",{type:"reset",class:"search-pro-clear-button",innerHTML:L0,onClick:()=>{a.value=""}}):null,o.value&&t.value.length?p("ul",{class:"search-pro-suggestions",ref:u},t.value.map((v,f)=>p("li",{class:["search-pro-suggestion",{active:f===r.value}],onClick:()=>{y(f)}},[p("kbd",{class:"search-pro-auto-complete",title:`Tab ${l.value.autocomplete}`},"Tab"),v]))):null]),p("button",{type:"button",class:"search-pro-close-button",onClick:()=>{s.value=!1,a.value=""}},l.value.cancel)]),p(j0,{query:a.value,isFocusing:!o.value,onClose:()=>{s.value=!1},onUpdateQuery:v=>{a.value=v}}),e.value?null:p("div",{class:"search-pro-hints"},[p("span",{class:"search-pro-hint"},[p("kbd",{innerHTML:q0}),l.value.select]),p("span",{class:"search-pro-hint"},[p("kbd",{innerHTML:$0}),p("kbd",{innerHTML:N0}),l.value.navigate]),p("span",{class:"search-pro-hint"},[p("kbd",{innerHTML:Q0}),l.value.exit])])])]):null}}),G0=Fn({enhance({app:s}){x0(s),s.component("SearchBox",z0)},setup(){R0()},rootComponents:[U0]});const Xl=[$u,e1,c1,v1,E1,b1,w1,R1,p8,f8,g0,G0],W0=[["v-184f4da6","/intro.html",{v:"/assets/images/cover3.jpg",e:`<h1> 简历</h1>
<h1> 个人信息</h1>
<ul>
<li>张威/男/1998</li>
<li>硕士/华南师范大学（211）电子信息</li>
<li>技术博客：http://old.ftqq.com</li>
<li>Github：http://github.com/easychen</li>
<li>期望职位：c/c++后端开发工程师</li>
<li>期望薪资：15k~20k</li>
<li>期望城市：广州</li>
</ul>
<p>、</p>
<h1> 技能清单</h1>
<p>（我一般主张将技能清单写入到工作经历里边去。不过很难完整，所以有这么一段也不错）</p>`,r:{minutes:1.03,words:308},y:"a",t:"简历",i:"circle-info"},[":md"]],["v-8daa1a0e","/",{y:"h",t:"博客主页",i:"home"},["/README.md"]],["v-3a1d2930","/tool.html",{e:`<h1> 工具分享</h1>
<h2> <a href="https://github.com/iszhwei/mutalin" target="_blank" rel="noopener noreferrer">基因序列比对工具-mutialin</a></h2>
<p>虽然有很多优秀的软件能做双序列比对，但对于<strong>每个基因要对几十个甚至上百个样品测序结果比对</strong>步骤太繁琐，浪费大量时间和人力，因此编写了个小工具解放劳动力，现在把它分享出来，希望能对医学方向的同学和生物方面研究的同学提供些许帮助。
<mark><strong>这个软件尤其是对做基因编辑方向的同学简直就是福音</strong></mark>
<mark><strong>感觉有用的同学请不吝fork、star一下哦</strong></mark></p>`,r:{minutes:1.48,words:444},y:"a",t:"工具分享"},[":md"]],["v-144c90e3","/algo/",{r:{minutes:.05,words:15},y:"a",t:"算法与数据结构",i:"laptop-code"},["/algo/README.md"]],["v-08062d61","/algo/%E7%BB%9F%E8%AE%A1%E5%8D%95%E8%AF%8D%E7%9A%84%E4%B8%AA%E6%95%B0.html",{c:["使用指南"],g:["页面配置","使用指南"],e:`<p>输入一行字符串（单词和若干空格）， 输出该行单词个数。</p>
<div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #abb2bf">Input：____hello_________world_ how___are___you___\\n</span></span>
<span class="line"><span style="color: #abb2bf">Output:   5</span></span>
<span class="line"><span style="color: #abb2bf"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.56,words:167},y:"a",t:"统计单词的个数",i:"file",O:3},["/algo/统计单词的个数.html","/algo/统计单词的个数.md",":md"]],["v-1a144c13","/algo/%E7%BB%9F%E8%AE%A1%E5%AD%97%E6%AF%8D%E3%80%81%E6%95%B0%E7%BB%84%E3%80%81%E7%A9%BA%E6%A0%BC%E7%9A%84%E4%B8%AA%E6%95%B0.html",{c:["使用指南"],g:["页面配置","使用指南"],e:`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cout;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::endl;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> letter </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> space </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> number </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">char</span><span style="color: #ABB2BF"> content;</span></span>
<span class="line"><span style="color: #ABB2BF">     cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"请输入一行字符："</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">((content </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getchar</span><span style="color: #ABB2BF">()) </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> (content </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'</span><span style="color: #56B6C2">\\n</span><span style="color: #98C379">'</span><span style="color: #ABB2BF">)) {</span></span>
<span class="line"><span style="color: #ABB2BF">         </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">((content </span><span style="color: #C678DD">&gt;=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'a'</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> content </span><span style="color: #C678DD">&lt;=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'z'</span><span style="color: #ABB2BF">) </span><span style="color: #56B6C2">||</span><span style="color: #ABB2BF"> (content </span><span style="color: #C678DD">&gt;=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'A'</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> content </span><span style="color: #C678DD">&lt;=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'Z'</span><span style="color: #ABB2BF">)) {               letter</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">         }       </span></span>
<span class="line"><span style="color: #ABB2BF">         </span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(content </span><span style="color: #C678DD">&gt;=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'0'</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> content </span><span style="color: #C678DD">&lt;=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'9'</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">             number</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">         }       </span></span>
<span class="line"><span style="color: #ABB2BF">         </span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(content </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">' '</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">             space</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">         }       </span></span>
<span class="line"><span style="color: #ABB2BF">     }       </span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">     cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"英文字母个数为："</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> letter </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">     cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"空格个数为："</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> space </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl; </span></span>
<span class="line"><span style="color: #ABB2BF">     cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"数字个数为："</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> number </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">         </span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;                                                                           </span></span>
<span class="line"><span style="color: #ABB2BF"> }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.6,words:181},y:"a",t:"统计字母、数字、空格个数",i:"file",O:3},["/algo/统计字母、数组、空格的个数.html","/algo/统计字母、数组、空格的个数.md",":md"]],["v-1464ca76","/ccpp/",{r:{minutes:.03,words:9},y:"a",t:"c/c++",i:"laptop-code"},["/ccpp/README.md"]],["v-f0383c18","/linux/",{r:{minutes:.04,words:13},y:"a",t:"linux操作系统",i:"laptop-code"},["/linux/README.md"]],["v-40bd95c1","/linux/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.html",{c:["使用指南"],g:["页面配置","使用指南"],e:`<h1> 文件操作</h1>
<p>文件：狭义上的文件，指的是磁盘上数据的集合；广义上的文件指的是一类容量大、读写慢、可以长期存储的数据</p>
<p>FILE结构体是满足ISOC标准的文件流/文件缓冲区；本次学习的是<strong>遵循POSIX标准的文件读写的系统调用</strong></p>
<figure><figcaption>image-20240312103817142</figcaption></figure>
<blockquote>
<p>ISO C是国际标准化组织（ISO）为了<strong>提高C语言的移植性而设立的C语言标准</strong>。它包含两部分：C语法及语义，以及C标准函数库。ISO C主要定义了C语言的语法规则、语义以及标准库中的函数原型和功能，但并未定义函数的具体实现。它的目标是确保不同的编译器在遵循ISO C标准时，对C语言的解释和执行方式保持一致。</p>
<p>POSIX是Portable Operating System Interfaces的缩写，意为可移植操作系统接口。这是一组由IEEE制定的标准簇，<strong>旨在提升应用程序在不同UNIX系统环境之间的可移植性</strong>。POSIX标准不仅包含了ISO C的部分内容，还定义了很多系统服务接口，例如socket相关接口、pthread线程相关接口等。这些接口使得应用程序能够更方便地访问和操作系统提供的各种功能。</p>
<p><strong></strong>，而****。</p>
</blockquote>`,r:{minutes:2.29,words:688},y:"a",t:"页面配置",i:"file",O:3},["/linux/文件操作.html","/linux/文件操作.md",":md"]],["v-eb072ff4","/mysql/",{r:{minutes:.03,words:9},y:"a",t:"MySQL",i:"laptop-code"},["/mysql/README.md"]],["v-4628d8d3","/others/autohotkey%E7%AC%94%E8%AE%B0.html",{e:`<h1> Autohotkey笔记</h1>
<h2> 脚本开机自启</h2>
<p>将 .ahk （Ahk脚本）文件，创建快捷方式，并把快捷方式放入 <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup </code>文件夹即可。如需取消开机自启，就删除这个快捷方式。</p>
<p>方法二：win + R 输入<code>shell:startup</code>回车后自动打开开机自启目录</p>
<h2> 使用</h2>
<p>如果第一次使用的话，双击 .ahk 文件（Ahk脚本所使用的文件名后缀）会弹出打开方式选择框，点“更多应用-&gt;在这台电脑上查找其他应用”，然后找到并选中上一步解<strong>压文件</strong>夹里的 “AutoHotkeyU64.exe” 文件即可。</p>`,r:{minutes:1.65,words:494},y:"a",t:"Autohotkey笔记"},["/others/autohotkey笔记.html","/others/autohotkey笔记.md",":md"]],["v-25b47c13","/others/",{r:{minutes:.03,words:10},y:"a",t:"随笔",i:"laptop-code"},["/others/README.md"]],["v-7945696f","/others/SourceInsight.html",{e:`<h1> Source Insight使用</h1>
<h2> <mark></mark></h2>
<div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #abb2bf">输入法：</span></span>
<span class="line"><span style="color: #abb2bf">	设置-常规-兼容性（打开）</span></span>
<span class="line"><span style="color: #abb2bf"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.86,words:259},y:"a",t:"Source Insight使用"},[":md"]],["v-5095ca42","/others/typora%E9%85%8D%E7%BD%AE.html",{e:`<h1> typora配置</h1>
<h2> 右键新建文件中没有<code>.md</code></h2>
<div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #abb2bf">Windows Registry Editor Version 5.00</span></span>
<span class="line"><span style="color: #abb2bf">[HKEY_CLASSES_ROOT\\.md]</span></span>
<span class="line"><span style="color: #abb2bf">@="Typora.exe"</span></span>
<span class="line"><span style="color: #abb2bf">[HKEY_CLASSES_ROOT\\.md\\ShellNew]</span></span>
<span class="line"><span style="color: #abb2bf">"NullFile"=""</span></span>
<span class="line"><span style="color: #abb2bf">[HKEY_CLASSES_ROOT\\Typora.exe]</span></span>
<span class="line"><span style="color: #abb2bf">@="Markdown"</span></span>
<span class="line"><span style="color: #abb2bf"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:14.56,words:4369},y:"a",t:"typora配置"},["/others/typora配置.html","/others/typora配置.md",":md"]],["v-24f2d5ba","/network/",{r:{minutes:.05,words:15},y:"a",t:"计算机网络",i:"laptop-code"},["/network/README.md"]],["v-450e8862","/network/TCP%E5%92%8CUDP%E7%9A%84%E5%8C%BA%E5%88%AB.html",{c:["使用指南"],g:["页面配置","使用指南"],e:`<h1> tcp（传输控制协议）与udp（用户数据报协议）的区别：</h1>
<p>1.二者的区别本质上就是tcp提供的一些控制功能，控制就 需要有一些状态 而维护状态就需要连接，所以tcp是面向连接的而udp是不需要连接的。
2.Tcp提供的控制首先就是可靠传输，而udp是尽最大努力交付，不保证可靠交付数据
3.为了重传的效率更高二者分片也不同，tcp的数据大小如果大于MSS大小，则会在传输层进行分片，，如果中途丢失了一个分片，传输丢失的这个分片即可， udp的数据大小如果大于mtu大小，则会在ip层进行分片
4.TCP还有拥塞控制和流量控制 udp则没有
5.要实现这么多控制所以tcp首部长度较长，会有一定的开销，首部在没有使用选项字段时是20个字节，udp首部只有8个字节<br>
6.Udp既然没那么多控制功能，也是有好处的 udp支持一对一，一对多，多对多的通信 而tcp则是一对一的两点服务<br>
7.最后就是二者的传输方式   TCP 是流式传输，没有边界，但保证顺序和可靠。UDP 是一个包一个包的发送，是有边界的，但可能会丢包和乱序。</p>`,r:{minutes:1.53,words:458},y:"a",t:"TCP和UDP的区别",i:"file",O:3},["/network/TCP和UDP的区别.html","/network/TCP和UDP的区别.md",":md"]],["v-dc384366","/redis/",{r:{minutes:.03,words:9},y:"a",t:"Redis",i:"laptop-code"},["/redis/README.md"]],["v-0072b68a","/algo/01%20%E6%95%B0%E7%BB%84/344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.html",{c:["数据结构与算法"],g:["数组","双指针","字符串"],e:`<p><a href="https://leetcode.cn/problems/reverse-string/" target="_blank" rel="noopener noreferrer">leetcode344. 反转字符串</a></p>
<p><strong>题目描述</strong>：编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>s</code> 的形式给出。</p>
<p>不要给另外的数组分配额外的空间，你必须<strong>原地修改输入数组</strong>、使用 O(1) 的额外空间解决这一问题。</p>
<blockquote>
<p>**原地算法（in-place algorithm）**基本上不需要额外辅助的数据结构,然而,允许少量额外的辅助变量来转换数据的算法。当算法运行时，输入的数据通常会被要输出的部分覆盖掉，</p>
</blockquote>`,r:{minutes:.97,words:290},y:"a",t:"leetcode 344. 反转字符串",i:"code",O:7},["/algo/01 数组/344.反转字符串.html","/algo/01 数组/344.反转字符串.md",":md"]],["v-4a6b903e","/algo/01%20%E6%95%B0%E7%BB%84/905.%20%E6%8C%89%E5%A5%87%E5%81%B6%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84.html",{c:["数据结构与算法"],g:["数组","双指针"],e:`<p><a href="https://leetcode.cn/problems/sort-array-by-parity/" target="_blank" rel="noopener noreferrer">Leetcode 905. 按奇偶排序数组</a></p>
<p><strong>题目描述</strong>：整形数组，把偶数调整到数组的左边，把奇数调整到数组的右边</p>
<!--more-->
<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">ajustArray</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #E06C75"> </span><span style="color: #E06C75; font-style: italic">arr</span><span style="color: #C678DD">[]</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> </span><span style="color: #C678DD">int</span><span style="color: #E06C75"> </span><span style="color: #E06C75; font-style: italic">len</span><span style="color: #ABB2BF">)</span><span style="color: #7F848E; font-style: italic">   // 整形数组，把偶数调整到数组的左边，把奇数调整到数组的右边</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> left </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> right </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> len </span><span style="color: #C678DD">-</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(left </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> right) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(left </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> right </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> (</span><span style="color: #E06C75">arr</span><span style="color: #ABB2BF">[right] </span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">0x</span><span style="color: #D19A66">01</span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">) {</span><span style="color: #7F848E; font-style: italic">//位操作一定加括号</span></span>
<span class="line"><span style="color: #ABB2BF">            right</span><span style="color: #C678DD">--</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(left </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> right </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> (</span><span style="color: #E06C75">arr</span><span style="color: #ABB2BF">[left] </span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">0x</span><span style="color: #D19A66">01</span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">            left</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(left </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> right) {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #61AFEF">std::swap</span><span style="color: #ABB2BF">(</span><span style="color: #E06C75">arr</span><span style="color: #ABB2BF">[left],</span><span style="color: #E06C75">arr</span><span style="color: #ABB2BF">[right]);</span></span>
<span class="line"><span style="color: #ABB2BF">            left</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">            right</span><span style="color: #C678DD">--</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">arr</span><span style="color: #ABB2BF">[</span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> {</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">};  </span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">srand</span><span style="color: #ABB2BF">(</span><span style="color: #61AFEF">time</span><span style="color: #ABB2BF">(nullptr));</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">; i</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E06C75">arr</span><span style="color: #ABB2BF">[i] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">rand</span><span style="color: #ABB2BF">()</span><span style="color: #C678DD">%</span><span style="color: #D19A66">100</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(auto i : arr) {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">" "</span><span style="color: #ABB2BF"> ;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">ajustArray</span><span style="color: #ABB2BF">(arr, </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(auto i : arr) {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">" "</span><span style="color: #ABB2BF"> ;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">} </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.88,words:265},y:"a",t:"Leetcode 905. 按奇偶排序数组",i:"code",O:6},["/algo/01 数组/905. 按奇偶排序数组.html","/algo/01 数组/905. 按奇偶排序数组.md",":md"]],["v-92d2378e","/algo/01%20%E6%95%B0%E7%BB%84/LeetCode%20209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html",{c:["数据结构与算法"],g:["数组","双指针","滑动窗口"],u:!1,e:`<p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/" target="_blank" rel="noopener noreferrer">LeetCode 209.长度最小的子数组</a></p>
<p><strong>题目描述：<strong>给定</strong>正整数</strong>数组nums和<strong>正整数</strong>target，找<strong>和&gt;=target</strong>的<strong>长度最小</strong>的**连续子数组；**找到返回其长度，找不到返回0；</p>`,r:{minutes:.96,words:289},y:"a",t:"LeetCode 209.长度最小的子数组",i:"code",O:4},["/algo/01 数组/LeetCode 209.长度最小的子数组.html","/algo/01 数组/LeetCode 209.长度最小的子数组.md",":md"]],["v-3945022c","/algo/01%20%E6%95%B0%E7%BB%84/LeetCode%2027.%20%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html",{c:["数据结构与算法"],g:["数组","双指针"],e:`<p><a href="https://leetcode.cn/problems/remove-element/" target="_blank" rel="noopener noreferrer">LeetCode 27. 移除元素</a></p>
<p>**题目描述：**数组nums中<u>原地</u>移除值为val的元素，返回新数组长度</p>
<p>双指针：一层查找，一层覆盖</p>
<!--more-->
<p>双指针：一层查找，一层覆盖</p>
<blockquote>
<ul>
<li>
<p>通过这道题大致了解<code>erase()</code>的大致实现</p>
</li>
<li>
<p>由这道题可知<code>erase()</code>函数的时间复杂度应是<code>O(n)</code></p>
</li>
</ul>
</blockquote>`,r:{minutes:1.64,words:493},y:"a",t:"LeetCode 27. 移除元素",i:"code",O:2},["/algo/01 数组/LeetCode 27. 移除元素.html","/algo/01 数组/LeetCode 27. 移除元素.md",":md"]],["v-0edaacb7","/algo/01%20%E6%95%B0%E7%BB%84/LeetCode%2059.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5%E2%85%A1.html",{c:["数据结构与算法"],g:["数组"],e:`<p><a href="https://leetcode.cn/problems/spiral-matrix-ii/" target="_blank" rel="noopener noreferrer">LeetCode 59.螺旋矩阵Ⅱ</a></p>
<p>**题目描述：**给定正整数n，将1到n²按顺时针顺序填入n×n的正方形矩阵，返回该矩阵。</p>
<figure><figcaption>img</figcaption></figure>
<ul>
<li><strong>循环不变量</strong>：考虑每一圈的四条边按<strong>左闭右开</strong>进行处理</li>
</ul>`,r:{minutes:1.35,words:406},y:"a",t:"LeetCode 59.螺旋矩阵Ⅱ",i:"code",O:5},["/algo/01 数组/LeetCode 59.螺旋矩阵Ⅱ.html","/algo/01 数组/LeetCode 59.螺旋矩阵Ⅱ.md",":md"]],["v-8fe9fd22","/algo/01%20%E6%95%B0%E7%BB%84/LeetCode%20704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html",{c:["数据结构与算法"],g:["二分查找","数组"],e:`<p><a href="https://leetcode.cn/problems/binary-search/" target="_blank" rel="noopener noreferrer">LeetCode 704.二分查找</a></p>
<p><strong>题目描述</strong>：有序数组nums，查找target，成功返回下标，失败返回-1</p>
<!--more-->
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">binarySearch</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt; </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">target</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> left </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> right </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(left </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> right) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> middle </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> left </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> (right </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> left) </span><span style="color: #56B6C2">/</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[middle] </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> target) {</span></span>
<span class="line"><span style="color: #ABB2BF">            left </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> middle </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">( </span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[middle] </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> target) {</span><span style="color: #7F848E; font-style: italic">// 注意==，而不是=</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> middle;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #ABB2BF">            right </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> middle;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">-</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.6,words:180},y:"a",t:"LeetCode 704.二分查找",i:"code",O:1},["/algo/01 数组/LeetCode 704.二分查找.html","/algo/01 数组/LeetCode 704.二分查找.md",":md"]],["v-69d65be6","/algo/01%20%E6%95%B0%E7%BB%84/LeetCode%20977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.html",{c:["数据结构与算法"],g:["数组","双指针"],e:`<p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/submissions/" target="_blank" rel="noopener noreferrer">LeetCode 977.有序数组的平方</a></p>
<p>**题目描述：**非递减数组nums，将各元素平方按非递减顺序排列，返回新数组</p>
<ul>
<li>思路：
<ul>
<li>nums元素组成可能为：①全正；②全负；③有正有负；</li>
<li>对于有正有负的情况，需要比较负数平方与正数平方，才能决定在新数组中的位置</li>
<li>用一个指针扫描负数，一个指针扫描正数，①②可合并到③（一个指针始终未更新）</li>
</ul>
</li>
</ul>`,r:{minutes:.96,words:288},y:"a",t:"LeetCode 977.有序数组的平方",i:"code",O:3},["/algo/01 数组/LeetCode 977.有序数组的平方.html","/algo/01 数组/LeetCode 977.有序数组的平方.md",":md"]],["v-a277331a","/algo/01%20%E6%95%B0%E7%BB%84/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%80%BB%E7%BB%93.html",{c:["数据结构与算法"],g:["数组","二分查找"],e:`<h1> 二分查找总结</h1>
<h2> 使用条件：</h2>
<p>线性表是有序表</p>
<blockquote>
<p>二分查找要求数据结构必须是顺序表，也就是类似于数组的<u>连续存储</u>，因为只有这样<u>才能一下定位出数组的中间位置（直接使用类似a[len / 2]）</u>，然后就可以把数组一分为二，进行后面的操作。
但是对于<u>链表，由于存储是离散的，不能像数组一样，快速定位中间位置，来把链表一分为二，所以一般的二分查找不能直接应用于链表</u></p>
</blockquote>
<!--more-->
<h2> 基础版</h2>
<h3> 左闭右闭</h3>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">binary_search</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt; </span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">target</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> start</span><span style="color: #C678DD">=</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">, end</span><span style="color: #C678DD">=</span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">()</span><span style="color: #56B6C2">-</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic"> //注意end</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(start </span><span style="color: #C678DD">&lt;=</span><span style="color: #ABB2BF"> end) {</span><span style="color: #7F848E; font-style: italic">	//注意循环条件</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> mid </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> start</span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF">(end</span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF">start)</span><span style="color: #56B6C2">/</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">	//计算中间下标</span></span>
<span class="line"><span style="color: #ABB2BF">    	</span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[mid] </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> target)</span><span style="color: #7F848E; font-style: italic"> 	//如果找到了，就返回下标</span></span>
<span class="line"><span style="color: #ABB2BF">        	</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> mid;</span></span>
<span class="line"><span style="color: #ABB2BF">    	</span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[mid] </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> target) start</span><span style="color: #C678DD">=</span><span style="color: #ABB2BF">mid</span><span style="color: #56B6C2">+</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">	//如果发现这个数比目标数字小，就说明左半边都没有，直接从mid+1开始</span></span>
<span class="line"><span style="color: #ABB2BF">    	</span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> end</span><span style="color: #C678DD">=</span><span style="color: #ABB2BF">mid</span><span style="color: #56B6C2">-</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">	//如果发现这个数比目标数字大，就说明右半边都没有，直接从mid-1开始</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.28,words:985},y:"a",t:"二分查找总结",i:"file",O:2},["/algo/01 数组/二分查找总结.html","/algo/01 数组/二分查找总结.md",":md"]],["v-2e7fb111","/algo/01%20%E6%95%B0%E7%BB%84/%E6%95%B0%E7%BB%84%E5%9F%BA%E7%A1%80.html",{c:["数据结构与算法"],g:["数组","基础知识"],e:`<h1> 数组基础</h1>
<p><strong>特点</strong>：内存是<u>连续</u>的</p>
<ul>
<li>
<p><strong>优点</strong></p>
<ul>
<li><u>下标访问（随机访问）</u>时间复杂度是<code>O(1)</code></li>
<li><u>末尾位置增加/删除</u>元素时间复杂度是<code>O(1)</code></li>
<li><u>访问</u>元素前后相邻位置的元素非常方便</li>
</ul>
</li>
<li>
<p><strong>缺点</strong></p>
<ul>
<li>
<p>非末尾位置增加/删除元素需要进行大量的数据移动<code>O(n)</code></p>
</li>
<li>
<p>搜索的时间复杂度</p>
<ul>
<li>无序数组-线性搜索<code>O(n)</code></li>
<li>有序数组-二分搜索<code>O(logn)</code></li>
</ul>
</li>
<li>
<p>数组扩容消耗比较大</p>
<ul>
<li>扩容</li>
</ul>
</li>
</ul>
</li>
</ul>`,r:{minutes:2.29,words:687},y:"a",t:"数组基础",i:"file",O:1},["/algo/01 数组/数组基础.html","/algo/01 数组/数组基础.md",":md"]],["v-75ce370a","/algo/01%20%E6%95%B0%E7%BB%84/%E6%9F%A5%E6%89%BEN%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E5%85%AC%E5%85%B1%E5%85%83%E7%B4%A0.html",{c:["数据结构与算法"],g:["数组"],e:`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;vector&gt;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;unordered_set&gt;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cout;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::endl;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cin;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::vector;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::unordered_set;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> //因为set比数组占用的空间大，并且set把数值映射到key都要做hash计算，速度也比数组慢</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> //如果数组数值范围可控可以使用数组做hash</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> M </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">20</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">   //数值的范围</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt; </span><span style="color: #61AFEF">getIntersection3</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums1</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums2</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">     unordered_set</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> result_set;</span><span style="color: #7F848E; font-style: italic">  //给结果去重</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">hashTable</span><span style="color: #ABB2BF">[M] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> {</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">};</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> num : nums1) {</span></span>
<span class="line"><span style="color: #ABB2BF">         </span><span style="color: #E5C07B">hashTable</span><span style="color: #ABB2BF">[num] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">     }</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> num : nums2) {</span></span>
<span class="line"><span style="color: #ABB2BF">         </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">hashTable</span><span style="color: #ABB2BF">[num] </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">             </span><span style="color: #E5C07B">result_set</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">insert</span><span style="color: #ABB2BF">(num);</span></span>
<span class="line"><span style="color: #ABB2BF">         }</span></span>
<span class="line"><span style="color: #ABB2BF">     }</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">vector</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">result_set</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">begin</span><span style="color: #ABB2BF">(), </span><span style="color: #E5C07B">result_set</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">end</span><span style="color: #ABB2BF">());</span></span>
<span class="line"><span style="color: #ABB2BF"> }</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">vec</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i : vec) {</span></span>
<span class="line"><span style="color: #ABB2BF">         cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">' '</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">     }</span></span>
<span class="line"><span style="color: #ABB2BF">     cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF"> }</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">     vector</span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF">vector</span><span style="color: #C678DD">&lt;int&gt;&gt;</span><span style="color: #ABB2BF"> arr </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> { {</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">4</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">6</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">7</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">8</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">9</span><span style="color: #ABB2BF">},{</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">4</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">6</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">7</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">9</span><span style="color: #ABB2BF">},{</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">4</span><span style="color: #ABB2BF">,  </span><span style="color: #D19A66">4</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">4</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">6</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">6</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">7</span><span style="color: #ABB2BF">},{</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">4</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">6</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">7</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">8</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">9</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">},{</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">4</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">4</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">6</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">8</span><span style="color: #ABB2BF">} };</span></span>
<span class="line"><span style="color: #ABB2BF">     vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> ret </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getIntersection3</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">arr</span><span style="color: #ABB2BF">[</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">],</span><span style="color: #E5C07B">arr</span><span style="color: #ABB2BF">[</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">]);</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">arr</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">(); </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">i) {</span></span>
<span class="line"><span style="color: #ABB2BF">         ret </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getIntersection3</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">arr</span><span style="color: #ABB2BF">[i], ret);</span></span>
<span class="line"><span style="color: #ABB2BF">     }</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(ret);</span></span>
<span class="line"><span style="color: #ABB2BF"> }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.01,words:303},y:"a",t:"查找N个数组的公共元素",i:"file",O:13},["/algo/01 数组/查找N个数组的公共元素.html","/algo/01 数组/查找N个数组的公共元素.md",":md"]],["v-1f0c41ec","/algo/01%20%E6%95%B0%E7%BB%84/%E6%9F%A5%E6%89%BE%E4%B8%89%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E5%85%AC%E5%85%B1%E5%85%83%E7%B4%A0.html",{c:["数据结构与算法"],g:["数组"],e:`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;vector&gt;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;unordered_set&gt;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cout;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::endl;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cin;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::vector;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::unordered_set;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> //因为set比数组占用的空间大，并且set把数值映射到key都要做hash计算，速度也比数组慢</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> //如果数组数值范围可控可以使用数组做hash</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> M </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">20</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">   //数值的范围</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt; </span><span style="color: #61AFEF">getIntersection3</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums1</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums2</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">     unordered_set</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> result_set;</span><span style="color: #7F848E; font-style: italic">  //给结果去重</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">hashTable</span><span style="color: #ABB2BF">[M] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> {</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">};</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> num : nums1) {</span></span>
<span class="line"><span style="color: #ABB2BF">         </span><span style="color: #E5C07B">hashTable</span><span style="color: #ABB2BF">[num] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">     }</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> num : nums2) {</span></span>
<span class="line"><span style="color: #ABB2BF">         </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">hashTable</span><span style="color: #ABB2BF">[num] </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">             </span><span style="color: #E5C07B">result_set</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">insert</span><span style="color: #ABB2BF">(num);</span></span>
<span class="line"><span style="color: #ABB2BF">         }</span></span>
<span class="line"><span style="color: #ABB2BF">     }</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">vector</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">result_set</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">begin</span><span style="color: #ABB2BF">(), </span><span style="color: #E5C07B">result_set</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">end</span><span style="color: #ABB2BF">());</span></span>
<span class="line"><span style="color: #ABB2BF"> }</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">  </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">vec</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i : vec) {</span></span>
<span class="line"><span style="color: #ABB2BF">         cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">' '</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">     }</span></span>
<span class="line"><span style="color: #ABB2BF">     cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF"> }</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">       vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> v1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> { </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">4</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">8</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">9</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">11</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">13</span><span style="color: #ABB2BF"> };</span></span>
<span class="line"><span style="color: #ABB2BF">       vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> v2 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> { </span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">6</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">7</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">7</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">8</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">9</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">12</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">12</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">13</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">13</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">14</span><span style="color: #ABB2BF"> };</span></span>
<span class="line"><span style="color: #ABB2BF">       vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> v3 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> { </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">4</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">6</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">7</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">7</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">8</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">9</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">14</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">14</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">17</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">18</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">20</span><span style="color: #ABB2BF"> };</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">       //print(v1);</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">       //print(v2);</span></span>
<span class="line"><span style="color: #ABB2BF">   </span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">       //vector&lt;int&gt; ret = getIntersection(v1, v2);</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">       //print(ret);</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">       //vector&lt;int&gt; ret2 = getIntersection2(v1, v2);</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">       //print(ret2);</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">       //vector&lt;int&gt; ret3 = getIntersection3(v1, v2);</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">       //print(ret3);</span></span>
<span class="line"><span style="color: #ABB2BF">   </span></span>
<span class="line"><span style="color: #ABB2BF">       cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"----------------三个有序数组的各个元素为"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">       </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(v1);</span></span>
<span class="line"><span style="color: #ABB2BF">       </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(v2);</span></span>
<span class="line"><span style="color: #ABB2BF">       </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(v3);</span></span>
<span class="line"><span style="color: #ABB2BF">       vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> temp </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getIntersection2</span><span style="color: #ABB2BF">(v1, v2);</span></span>
<span class="line"><span style="color: #ABB2BF">       vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> ret4 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getIntersection2</span><span style="color: #ABB2BF">(temp, v3);</span></span>
<span class="line"><span style="color: #ABB2BF">       </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(ret4);</span></span>
<span class="line"><span style="color: #ABB2BF">       </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">   }</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.15,words:346},y:"a",t:"查找三个数组的公共元素",i:"file",O:12},["/algo/01 数组/查找三个数组的公共元素.html","/algo/01 数组/查找三个数组的公共元素.md",":md"]],["v-98398990","/algo/01%20%E6%95%B0%E7%BB%84/%E6%9F%A5%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E5%85%AC%E5%85%B1%E5%85%83%E7%B4%A0.html",{c:["数据结构与算法"],g:["数组","双指针","哈希"],e:`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;vector&gt;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;unordered_set&gt;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cout;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::endl;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cin;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::vector;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::unordered_set;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> //查找两个有序数组的公共部分</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> //不去重版本</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt; </span><span style="color: #61AFEF">getIntersection</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums1</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums2</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">     vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> result;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> p1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> p2 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(p1 </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">nums1</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">() </span><span style="color: #56B6C2">||</span><span style="color: #ABB2BF"> p2 </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">nums2</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">()) {</span></span>
<span class="line"><span style="color: #ABB2BF">         </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">nums1</span><span style="color: #ABB2BF">[p1] </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">nums2</span><span style="color: #ABB2BF">[p2]) {</span></span>
<span class="line"><span style="color: #ABB2BF">             </span><span style="color: #E5C07B">result</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push_back</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">nums1</span><span style="color: #ABB2BF">[p1]);</span></span>
<span class="line"><span style="color: #ABB2BF">             </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">p1;</span></span>
<span class="line"><span style="color: #ABB2BF">             </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">p2;</span></span>
<span class="line"><span style="color: #ABB2BF">         }   </span></span>
<span class="line"><span style="color: #ABB2BF">         </span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">nums1</span><span style="color: #ABB2BF">[p1] </span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">nums2</span><span style="color: #ABB2BF">[p2]) {</span></span>
<span class="line"><span style="color: #ABB2BF">             </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">p2;</span></span>
<span class="line"><span style="color: #ABB2BF">         }   </span></span>
<span class="line"><span style="color: #ABB2BF">         </span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #ABB2BF">             </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">p1;</span></span>
<span class="line"><span style="color: #ABB2BF">         }   </span></span>
<span class="line"><span style="color: #ABB2BF">     }   </span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> result;</span></span>
<span class="line"><span style="color: #ABB2BF"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">vec</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i : vec) {</span></span>
<span class="line"><span style="color: #ABB2BF">         cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">' '</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">     }</span></span>
<span class="line"><span style="color: #ABB2BF">     cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF"> }</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">     vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> v1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> { </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">4</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">8</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">9</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">11</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">13</span><span style="color: #ABB2BF"> };</span></span>
<span class="line"><span style="color: #ABB2BF">     vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> v2 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> { </span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">6</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">7</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">7</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">8</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">9</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">12</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">12</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">13</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">13</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">14</span><span style="color: #ABB2BF"> };</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(v1);</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(v2);</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">     vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> ret </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getIntersection</span><span style="color: #ABB2BF">(v1, v2);</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(ret);</span></span>
<span class="line"><span style="color: #ABB2BF">     vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> ret2 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getIntersection2</span><span style="color: #ABB2BF">(v1, v2);</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(ret2);</span></span>
<span class="line"><span style="color: #ABB2BF">     vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> ret3 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getIntersection3</span><span style="color: #ABB2BF">(v1, v2);</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(ret3);</span></span>
<span class="line"><span style="color: #ABB2BF"> }   </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.47,words:442},y:"a",t:"查找两个有序数组的公共部分",i:"file",O:11},["/algo/01 数组/查找两个数组的公共元素.html","/algo/01 数组/查找两个数组的公共元素.md",":md"]],["v-752e9b82","/algo/01%20%E6%95%B0%E7%BB%84/%E6%9F%A5%E6%89%BE%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E5%85%83%E7%B4%A0.html",{c:["数据结构与算法"],g:["数组"],e:`<h1> <a href="https://leetcode.cn/problems/majority-element/" target="_blank" rel="noopener noreferrer">169. 多数元素 - 力扣（LeetCode）</a></h1>
<p>给定一个大小为 <code>n</code> 的数组 <code>nums</code> ，返回其中的多数元素。多数元素是指在数组中出现次数 <strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素。</p>
<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>
<h2> 方法一</h2>`,r:{minutes:.77,words:232},y:"a",t:"查找出现次数超过一半的元素",i:"file",O:14},["/algo/01 数组/查找出现次数超过一半的元素.html","/algo/01 数组/查找出现次数超过一半的元素.md",":md"]],["v-c01690d8","/algo/01%20%E6%95%B0%E7%BB%84/%E6%9F%A5%E6%89%BE%E6%9C%80%E5%A4%A7%E5%92%8C%E6%AC%A1%E5%A4%A7%E7%9A%84%E5%85%83%E7%B4%A0.html",{c:["数据结构与算法"],g:["数组"],e:`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;vector&gt;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;climits&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #7F848E; font-style: italic">//INT_MIN</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cout;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::endl;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::vector;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">find1and2big</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">big1</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">big2</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">         </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">     }</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">     big1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> INT_MIN;</span></span>
<span class="line"><span style="color: #ABB2BF">     big2 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> INT_MIN;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> num : nums) {</span></span>
<span class="line"><span style="color: #ABB2BF">         </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(num </span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> big1) {</span></span>
<span class="line"><span style="color: #ABB2BF">             big2 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> big1;</span></span>
<span class="line"><span style="color: #ABB2BF">             big1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> num;</span></span>
<span class="line"><span style="color: #ABB2BF">         }</span></span>
<span class="line"><span style="color: #ABB2BF">         </span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(num </span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> big2 </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> num </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> big1) {</span></span>
<span class="line"><span style="color: #ABB2BF">             big2 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> num;</span></span>
<span class="line"><span style="color: #ABB2BF">         }</span></span>
<span class="line"><span style="color: #ABB2BF">     }</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(big2 </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> INT_MIN) {</span></span>
<span class="line"><span style="color: #ABB2BF">         cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"数组中所有元素都相同或数组大小小于2，无法找到次大值"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">     }</span></span>
<span class="line"><span style="color: #ABB2BF"> }</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">     vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> vec </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> {</span><span style="color: #D19A66">12</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">13</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">34</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">};</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i : vec) {</span></span>
<span class="line"><span style="color: #ABB2BF">         cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">' '</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">     }</span></span>
<span class="line"><span style="color: #ABB2BF">     cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> big1, big2;</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #61AFEF">find1and2big</span><span style="color: #ABB2BF">(vec, big1, big2);</span></span>
<span class="line"><span style="color: #ABB2BF">     cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> big1 </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">' '</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> big2 </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF"> }                                                                            </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.64,words:193},y:"a",t:"查找最大和次大的元素",i:"file",O:13},["/algo/01 数组/查找最大和次大的元素.html","/algo/01 数组/查找最大和次大的元素.md",":md"]],["v-152dfd8d","/algo/02%20%E9%93%BE%E8%A1%A8/234.%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8.html",{c:["数据结构与算法"],g:["链表","数组","双指针"],e:`<p><a href="https://leetcode.cn/problems/palindrome-linked-list/" target="_blank" rel="noopener noreferrer">Leetcode 234. 回文链表</a></p>
<p><strong>题目描述</strong>：给你一个单链表的头节点 <code>head</code> ，请你判断该链表是否为回文链表。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<!--more-->
<h2> 方法一：数组+双指针</h2>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">/**</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * struct ListNode {</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     int val;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode *next;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode() : val(0), next(nullptr) {}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode(int x) : val(x), next(nullptr) {}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode(int x, ListNode *next) : val(x), next(next) {}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * };</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Solution</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">isPalindrome</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">ListNode</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">head</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">        vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> vec;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> p </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> head; p </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">; p </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">p</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">) {</span><span style="color: #7F848E; font-style: italic">//O(n)</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">vec</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push_back</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">p</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">val</span><span style="color: #ABB2BF">);</span><span style="color: #7F848E; font-style: italic">	//空间复杂度O(n)</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">,  j </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vec</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">() </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> j; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">i, </span><span style="color: #C678DD">--</span><span style="color: #ABB2BF">j) {</span><span style="color: #7F848E; font-style: italic">	//O(n/2)</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vec</span><span style="color: #ABB2BF">[i] </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vec</span><span style="color: #ABB2BF">[j]) {</span></span>
<span class="line"><span style="color: #ABB2BF">                </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">            }</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">true</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.5,words:749},y:"a",t:"Leetcode 234. 回文链表",i:"code",O:13},["/algo/02 链表/234.回文链表.html","/algo/02 链表/234.回文链表.md",":md"]],["v-735dfe06","/algo/02%20%E9%93%BE%E8%A1%A8/LeetCode%20203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.html",{c:["数据结构与算法"],g:["链表","虚拟头结点"],e:`<p><a href="https://leetcode.cn/problems/remove-linked-list-elements/" target="_blank" rel="noopener noreferrer">LeetCode 203.移除链表元素</a></p>
<p><strong>题目描述</strong>：给定链表头节点head和整数val，删除所有值为val的节点 ，返回新的头节点</p>
<!--more-->
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">/**</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * struct ListNode {</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     int val;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode *next;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode() : val(0), next(nullptr) {}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode(int x) : val(x), next(nullptr) {}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode(int x, ListNode *next) : val(x), next(next) {}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * };</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Solution</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">ListNode</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">removeElements</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">ListNode</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">head</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">val</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">       ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> dummyHead </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">ListNode</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">, head);</span></span>
<span class="line"><span style="color: #ABB2BF">       ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> cur </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> dummyHead;</span></span>
<span class="line"><span style="color: #ABB2BF">       </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">cur</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">           </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">cur</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E5C07B">next</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">val</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> val) {</span><span style="color: #7F848E; font-style: italic">	//cur-&gt;next-&gt;val不是cur-&gt;next.val</span></span>
<span class="line"><span style="color: #ABB2BF">               ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> temp </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">cur</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">               </span><span style="color: #E5C07B">cur</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">cur</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E5C07B">next</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">               </span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF"> temp;</span></span>
<span class="line"><span style="color: #ABB2BF">               temp </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">           }</span></span>
<span class="line"><span style="color: #ABB2BF">           </span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #ABB2BF">               cur </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">cur</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">           }</span></span>
<span class="line"><span style="color: #ABB2BF">       }</span></span>
<span class="line"><span style="color: #ABB2BF">       head </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">dummyHead</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">       </span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF"> dummyHead;</span></span>
<span class="line"><span style="color: #ABB2BF">       dummyHead </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">       </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> head;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.96,words:287},y:"a",t:"LeetCode 203.移除链表元素",i:"code",O:1},["/algo/02 链表/LeetCode 203.移除链表元素.html","/algo/02 链表/LeetCode 203.移除链表元素.md",":md"]],["v-d977ced4","/algo/02%20%E9%93%BE%E8%A1%A8/leetcode%2021.%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8.html",{c:["数据结构与算法"],g:["链表","虚拟头结点","双指针"],e:`<p><a href="https://leetcode.cn/problems/merge-two-sorted-lists/" target="_blank" rel="noopener noreferrer">21. 合并两个有序链表</a></p>
<p>**题目表述：**将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。<u>新链表是通过拼接给定的两个链表的所有节点组成的。</u></p>
<blockquote>
<p>注意：读清题意，不是用新的链表</p>
</blockquote>
<!--more-->
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">/**</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * struct ListNode {</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     int val;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode *next;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode() : val(0), next(nullptr) {}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode(int x) : val(x), next(nullptr) {}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode(int x, ListNode *next) : val(x), next(next) {}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * };</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Solution</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">ListNode</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">mergeTwoLists</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">ListNode</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">list1</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">ListNode</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">list2</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">        ListNode </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">dummyHead </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">ListNode</span><span style="color: #ABB2BF">(</span><span style="color: #56B6C2">-</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        ListNode </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">res </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> dummyHead;</span></span>
<span class="line"><span style="color: #ABB2BF">        ListNode </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">p1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> list1;</span></span>
<span class="line"><span style="color: #ABB2BF">        ListNode </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">p2 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> list2;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(p1 </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> p2 </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">            // ListNode* newNode = nullptr;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">p1</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">val</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">p2</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">val</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">                //newNode = new ListNode(p1-&gt;val,nullptr);</span></span>
<span class="line"><span style="color: #ABB2BF">                </span><span style="color: #E5C07B">res</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> p1;</span></span>
<span class="line"><span style="color: #ABB2BF">                p1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">p1</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">	//记得让p1往前走一位</span></span>
<span class="line"><span style="color: #ABB2BF">            }</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">                // newNode = new ListNode(p2-&gt;val, nullptr);</span></span>
<span class="line"><span style="color: #ABB2BF">                </span><span style="color: #E5C07B">res</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> p2;</span></span>
<span class="line"><span style="color: #ABB2BF">                p2 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">p2</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">            }</span></span>
<span class="line"><span style="color: #ABB2BF">            res </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">res</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">//让新链表的指针往前走一位</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">            // res-&gt;next = newNode;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">            // res = res-&gt;next;</span></span>
<span class="line"><span style="color: #ABB2BF">        } </span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(p1 </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">) {</span><span style="color: #7F848E; font-style: italic">	//if判断哪个还有剩，不需要while遍历后面的所有的结点</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">            // ListNode* newNode = new ListNode(p1-&gt;val);</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">            // res-&gt;next = newNode;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">            // res = res-&gt;next;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">res</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> p1;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(p2 </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">            // ListNode* newNode = new ListNode(p2-&gt;val);</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">            // res-&gt;next = newNode;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">            // res = res-&gt;next;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">res</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> p2;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> head </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">dummyHead</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF"> dummyHead;</span></span>
<span class="line"><span style="color: #ABB2BF">        dummyHead </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> head;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.21,words:362},y:"a",t:"leetcode 21. 合并两个有序链表",i:"code",O:3},["/algo/02 链表/leetcode 21. 合并两个有序链表.html","/algo/02 链表/leetcode 21. 合并两个有序链表.md",":md"]],["v-64506cc7","/algo/02%20%E9%93%BE%E8%A1%A8/leetcode141.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8(%E5%88%A4%E6%96%AD%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF).html",{c:["数据结构与算法"],g:["链表","双指针"],e:`<p><a href="https://leetcode.cn/problems/linked-list-cycle/" target="_blank" rel="noopener noreferrer">leetcode 141. 环形链表 (<strong>判断链表是否有环</strong>)</a></p>
<p>判断链表是否包含环属于经典问题了，解决方案也是用：</p>
<p>每当慢指针 <code>slow</code> 前进一步，快指针 <code>fast</code> 就前进两步。如果 <code>fast</code> 最终遇到空指针，说明链表中没有环；如果 <code>fast</code> 最终和 <code>slow</code> 相遇，那肯定是 <code>fast</code> 超过了 <code>slow</code> 一圈（<strong>相对静止</strong>），说明链表中含有环。</p>`,r:{minutes:.93,words:278},y:"a",t:"leetcode 141. 环形链表 (判断链表是否有环)",i:"code",O:9},["/algo/02 链表/leetcode141.环形链表(判断链表是否有环).html","/algo/02 链表/leetcode141.环形链表(判断链表是否有环).md",":md"]],["v-13ade0aa","/algo/02%20%E9%93%BE%E8%A1%A8/Leetcode142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II(%E6%9F%A5%E6%89%BE%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3%E5%9C%B0%E5%9D%80).html",{c:["数据结构与算法"],g:["链表","双指针"],e:`<p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/" target="_blank" rel="noopener noreferrer">Leetcode 142. 环形链表 II (查找环的入口地址)</a></p>
<p>**题目描述：**给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 <em>如果链表无环，则返回 <code>null</code>。</em></p>
<!--more-->
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">/**</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * struct ListNode {</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     int val;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode *next;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode(int x) : val(x), next(NULL) {}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * };</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Solution</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">ListNode</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #61AFEF">detectCycle</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">ListNode</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #E06C75; font-style: italic">head</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">       ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> fast </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> head;</span></span>
<span class="line"><span style="color: #ABB2BF">	    ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> slow </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> head;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">        // 快指针到尾部时停止</span></span>
<span class="line"><span style="color: #ABB2BF">	    </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(fast </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">fast</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">        // 慢指针走一步，快指针走两步</span></span>
<span class="line"><span style="color: #ABB2BF">		    fast </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">fast</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E5C07B">next</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">		    slow </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">slow</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">        // 快慢指针相遇，说明含有环</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(fast </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF">  slow) {</span></span>
<span class="line"><span style="color: #ABB2BF">			    slow </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> head;</span></span>
<span class="line"><span style="color: #ABB2BF">                </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(fast </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> slow) {</span></span>
<span class="line"><span style="color: #ABB2BF">                    fast </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">fast</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">                    slow </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">slow</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">                }</span></span>
<span class="line"><span style="color: #ABB2BF">                </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> slow;</span></span>
<span class="line"><span style="color: #ABB2BF">		    }</span></span>
<span class="line"><span style="color: #ABB2BF">	    }</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	    // 不包含环</span></span>
<span class="line"><span style="color: #ABB2BF">	    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">; </span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.8,words:241},y:"a",t:"Leetcode 142. 环形链表 II (查找环的入口地址)",i:"code",O:10},["/algo/02 链表/Leetcode142.环形链表II(查找环的入口地址).html","/algo/02 链表/Leetcode142.环形链表II(查找环的入口地址).md",":md"]],["v-641d44d2","/algo/02%20%E9%93%BE%E8%A1%A8/leetcode160.%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8(%E5%88%A4%E6%96%AD%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E7%9B%B8%E4%BA%A4).html",{c:["数据结构与算法"],g:["链表","双指针"],e:`<p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/" target="_blank" rel="noopener noreferrer">leetcode 160. 相交链表 (<strong>判断链表是否相交</strong>)</a></p>
<p>**题目描述：**给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 <code>null</code> 。</p>
<!--more-->`,r:{minutes:1.69,words:508},y:"a",t:"leetcode 160. 相交链表 (判断链表是否相交)",i:"code",O:11},["/algo/02 链表/leetcode160.相交链表(判断链表是否相交).html","/algo/02 链表/leetcode160.相交链表(判断链表是否相交).md",":md"]],["v-8a944abe","/algo/02%20%E9%93%BE%E8%A1%A8/Leetcode19.%20%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B9.html",{c:["数据结构与算法"],g:["链表","双指针"],e:`<p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="noopener noreferrer">Leetcode 19. 删除链表的倒数第 N 个结点</a></p>
<p>**题目描述：**给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p>
<p>**关键：**fast首先走n + 1步 ，为什么是n+1呢，因为只有这样同时移动的时候slow才能指向删除节点的上一个节点（方便做删除操作）</p>
<!--more-->`,r:{minutes:1.39,words:416},y:"a",t:"Leetcode 19. 删除链表的倒数第 N 个结点",i:"code",O:7},["/algo/02 链表/Leetcode19. 删除链表的倒数第N个结点.html","/algo/02 链表/Leetcode19. 删除链表的倒数第N个结点.md",":md"]],["v-703548b8","/algo/02%20%E9%93%BE%E8%A1%A8/leetcode206.%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.html",{c:["数据结构与算法"],g:["链表"],e:`<p><a href="https://leetcode.cn/problems/reverse-linked-list/" target="_blank" rel="noopener noreferrer">leetcode 206. 反转链表</a></p>
<p>**题目描述：**给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p>
<!--more-->
<p>方法一：虚拟头结点+头插法</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Solution</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">ListNode</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">reverseList</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">ListNode</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">head</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(head </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> dummyHead </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">ListNode</span><span style="color: #ABB2BF">(</span><span style="color: #56B6C2">-</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">, head);</span></span>
<span class="line"><span style="color: #ABB2BF">        ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> p1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> dummyHead;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">( p1 </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">p1</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">) {</span><span style="color: #7F848E; font-style: italic">    //头插</span></span>
<span class="line"><span style="color: #ABB2BF">            ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> temp </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">p1</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">p1</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">dummyHead</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">dummyHead</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> p1;</span></span>
<span class="line"><span style="color: #ABB2BF">            p1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> temp;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(p1 </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">) {</span><span style="color: #7F848E; font-style: italic">//最后一个结点</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">p1</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">dummyHead</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">head</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> p1;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.83,words:249},y:"a",t:"leetcode 206. 反转链表",i:"code",O:12},["/algo/02 链表/leetcode206.反转链表.html","/algo/02 链表/leetcode206.反转链表.md",":md"]],["v-711b4cec","/algo/02%20%E9%93%BE%E8%A1%A8/Leetcode23.%20%E5%90%88%E5%B9%B6%20K%20%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8.html",{c:["数据结构与算法"],g:["链表","分治思想","双指针","优先队列"],e:`<p><a href="https://leetcode.cn/problems/merge-k-sorted-lists/" target="_blank" rel="noopener noreferrer">Leetcode 23. 合并 K 个升序链表</a></p>
<p>**题目描述：**给你一个链表数组，每个链表都已经按升序排列。请你将所有链表合并到一个升序链表中，返回合并后的链表。</p>
<!--more-->
<h3> 分治思想</h3>
<h4> 方法一：顺序合并</h4>
<p><strong>两两合并</strong>，用一个变量res 来维护以及合并的链表，第 i 次循环把第 i 个链表和res合并，答案保存到 res 中。</p>`,r:{minutes:3.72,words:1117},y:"a",t:"Leetcode 23. 合并 K 个升序链表",i:"code",O:5},["/algo/02 链表/Leetcode23. 合并 K 个升序链表.html","/algo/02 链表/Leetcode23. 合并 K 个升序链表.md",":md"]],["v-fb458a48","/algo/02%20%E9%93%BE%E8%A1%A8/leetcode61.%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8.html",{c:["数据结构与算法"],g:["链表","双指针"],e:`<p><a href="https://leetcode.cn/problems/rotate-list/" target="_blank" rel="noopener noreferrer">Leetcode 61. 旋转链表</a></p>
<p>给你一个链表的头节点 <code>head</code> ，旋转链表，将链表每个节点向右移动 <code>k</code> 个位置。</p>
<!--more-->
<figure><figcaption>img</figcaption></figure>
<p><strong>思路</strong>：</p>
<ol>
<li>计算链表长度</li>
<li>找到 k取模链表长度 (k % length) 开始的子链表</li>
<li>拼接子链表和原链表(被截取后的部分)</li>
</ol>`,r:{minutes:.95,words:285},y:"a",t:"Leetcode 61.旋转链表.md",i:"code",O:14},["/algo/02 链表/leetcode61.旋转链表.html","/algo/02 链表/leetcode61.旋转链表.md",":md"]],["v-67248f78","/algo/02%20%E9%93%BE%E8%A1%A8/LeetCode707.html",{c:["数据结构与算法"],g:["链表"],e:`<p><a href="https://leetcode.cn/problems/design-linked-list/" target="_blank" rel="noopener noreferrer">LeetCode 707.设计链表</a></p>
<p><strong>题目描述</strong>：在链表类中实现这些功能：</p>
<ol>
<li>get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。</li>
<li>addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。</li>
<li>addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。</li>
<li>addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。</li>
<li>deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。</li>
</ol>`,r:{minutes:3.12,words:937},y:"a",t:"LeetCode 707.设计链表",i:"code",O:2},["/algo/02 链表/LeetCode707.html","/algo/02 链表/LeetCode707.md",":md"]],["v-db839be2","/algo/02%20%E9%93%BE%E8%A1%A8/leetcode86.%20%E5%88%86%E9%9A%94%E9%93%BE%E8%A1%A8%EF%BC%88%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%86%E8%A7%A3%EF%BC%89.html",{c:["数据结构与算法"],g:["链表","双指针"],e:`<p><a href="https://leetcode.cn/problems/partition-list/" target="_blank" rel="noopener noreferrer">leetcode 86. 分隔链表（<strong>链表的分解</strong>）</a></p>
<p>给你一个链表的头节点 <code>head</code> 和一个特定值 <code>x</code> ，请你对链表进行分隔，使得所有 <strong>小于</strong> <code>x</code> 的节点都出现在 <strong>大于或等于</strong> <code>x</code> 的节点之前。</p>`,r:{minutes:1.68,words:505},y:"a",t:"leetcode 86. 分隔链表（链表的分解）",i:"code",O:4},["/algo/02 链表/leetcode86. 分隔链表（链表的分解）.html","/algo/02 链表/leetcode86. 分隔链表（链表的分解）.md",":md"]],["v-16787a3c","/algo/02%20%E9%93%BE%E8%A1%A8/Leetcode876.%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E7%BB%93%E7%82%B9.html",{c:["数据结构与算法"],g:["双指针","链表"],e:`<p><a href="https://leetcode.cn/problems/middle-of-the-linked-list/" target="_blank" rel="noopener noreferrer">Leetcode 876. 链表的中间结点</a></p>
<p>**题目描述：**给你单链表的头结点 <code>head</code> ，请你找出并返回链表的中间结点。<u>如果有两个中间结点，则返回第二个中间结点。</u></p>
<!--more-->
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">/**</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * struct ListNode {</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     int val;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode *next;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode() : val(0), next(nullptr) {}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode(int x) : val(x), next(nullptr) {}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> *     ListNode(int x, ListNode *next) : val(x), next(next) {}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * };</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Solution</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">ListNode</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">middleNode</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">ListNode</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">head</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">        ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> dummyHead </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">ListNode</span><span style="color: #ABB2BF">(</span><span style="color: #56B6C2">-</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">, head);</span></span>
<span class="line"><span style="color: #ABB2BF">        ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> fast </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> dummyHead;</span></span>
<span class="line"><span style="color: #ABB2BF">        ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> slow </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> dummyHead;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(fast</span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">fast</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">            fast </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">fast</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E5C07B">next</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">            slow </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">slow</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(fast </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">fast</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">            slow </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">slow</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> slow;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.91,words:272},y:"a",t:"Leetcode 876. 链表的中间结点",i:"code",O:8},["/algo/02 链表/Leetcode876.链表的中间结点.html","/algo/02 链表/Leetcode876.链表的中间结点.md",":md"]],["v-a323322a","/algo/02%20%E9%93%BE%E8%A1%A8/leetcode92.%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8II.html",{c:["数据结构与算法"],g:["链表","双指针"],e:`<p><a href="https://leetcode.cn/problems/reverse-linked-list-ii/" target="_blank" rel="noopener noreferrer">leetcode 92. 反转链表 II</a></p>
<p>给你单链表的头指针 <code>head</code> 和两个整数 <code>left</code> 和 <code>right</code> ，其中 <code>left &lt;= right</code> 。请你反转从位置 <code>left</code> 到位置 <code>right</code> 的链表节点，返回 <strong>反转后的链表</strong> 。</p>`,r:{minutes:1.8,words:539},y:"a",t:"leetcode 92. 反转链表 II",i:"code",O:13},["/algo/02 链表/leetcode92.反转链表II.html","/algo/02 链表/leetcode92.反转链表II.md",":md"]],["v-4e6f8416","/algo/02%20%E9%93%BE%E8%A1%A8/%E6%9F%A5%E6%89%BE%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B9.html",{c:["数据结构与算法"],g:["链表","双指针"],e:`<h1> 查找链表中倒数第N个结点</h1>
<!--more-->
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #E5C07B">ListNode</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">findFromEnd</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">ListNode</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">list</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">n</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">	ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> fast </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> list;</span></span>
<span class="line"><span style="color: #ABB2BF">	ListNode</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> slow </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> list;</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(fast </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #ABB2BF"> n</span><span style="color: #C678DD">--</span><span style="color: #ABB2BF">) {</span><span style="color: #7F848E; font-style: italic">	//先走N步</span></span>
<span class="line"><span style="color: #ABB2BF">		fast </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">fast</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(fast) {</span><span style="color: #7F848E; font-style: italic">	//当fast为空时 slow刚好指在目标元素上</span></span>
<span class="line"><span style="color: #ABB2BF">		fast </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">fast</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">		slow </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">slow</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> slow;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.46,words:138},y:"a",t:"查找链表中倒数第N个结点",i:"code",O:6},["/algo/02 链表/查找链表中倒数第N个结点.html","/algo/02 链表/查找链表中倒数第N个结点.md",":md"]],["v-ebfa549c","/algo/02%20%E9%93%BE%E8%A1%A8/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E9%97%AE%E9%A2%98.html",{c:["数据结构与算法"],g:["链表","循环链表"],e:`<h1> 约瑟夫环问题</h1>
<h2> 情景一</h2>
<p>约瑟夫环是一个数学的应用问题：已知<code>n</code>个人（以编号<code>1，2，3...n</code>分别表示）围坐在一张圆桌周围，从
编号为<code>k</code>的人开始报数，数到<code>m</code>的那个人出列，它的下一个人又从<code>1</code>开始报数，数到<code>m</code>的那个人又出列，
依此规律重复下去，直到圆桌周围的人全部出列，输出人的出列顺序。</p>
<!--more-->
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cout;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">struct</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Node</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _data;</span></span>
<span class="line"><span style="color: #ABB2BF">    Node</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> _next;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">Node</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">data</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">Node</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">) : </span><span style="color: #61AFEF">_data</span><span style="color: #ABB2BF">(data), </span><span style="color: #61AFEF">_next</span><span style="color: #ABB2BF">(next) {}</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">josephRing</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">n</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">k</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">m</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    //创建循环链表</span></span>
<span class="line"><span style="color: #ABB2BF">    Node</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> head </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Node</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    Node</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> p </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> head;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;=</span><span style="color: #ABB2BF"> n; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">i) {</span></span>
<span class="line"><span style="color: #ABB2BF">        Node</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> newNode </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Node</span><span style="color: #ABB2BF">(i);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">p</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">_next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> newNode;</span></span>
<span class="line"><span style="color: #ABB2BF">        p </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">p</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">_next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">p</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">_next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> head;</span><span style="color: #7F848E; font-style: italic">    //p指向尾结点</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    //先走k步</span></span>
<span class="line"><span style="color: #ABB2BF">    Node</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> q </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> head;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> k; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">i) {</span></span>
<span class="line"><span style="color: #ABB2BF">        p </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> q;</span></span>
<span class="line"><span style="color: #ABB2BF">        q </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">q</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">_next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span><span style="color: #7F848E; font-style: italic">   //结束后q指向第K个人</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> m; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">i) {</span></span>
<span class="line"><span style="color: #ABB2BF">            p </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> q;</span></span>
<span class="line"><span style="color: #ABB2BF">            q </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">q</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">_next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span><span style="color: #7F848E; font-style: italic">//q指向第m人</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">q</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">_data</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">" "</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">( p </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> q) {</span><span style="color: #7F848E; font-style: italic">//只剩最后一个结点</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF"> q;</span></span>
<span class="line"><span style="color: #ABB2BF">            cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">p</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">_next</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">q</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">_next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        	</span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF"> q;</span></span>
<span class="line"><span style="color: #ABB2BF">        	q </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">p</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">_next</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">josephRing</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">8</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">josephRing</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">8</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.1,words:630},y:"a",t:"约瑟夫环问题",i:"code",O:15},["/algo/02 链表/约瑟夫环问题.html","/algo/02 链表/约瑟夫环问题.md",":md"]],["v-08a1ce30","/algo/02%20%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E5%9F%BA%E7%A1%80.html",{c:["数据结构与算法"],g:["基础知识","链表"],e:`<h1> 链表基础知识</h1>
<p><strong>特点</strong>：每一个<u>节点</u>都是在堆内存上<u>独立</u>new出来的，节点<u>内存不连续</u></p>
<ul>
<li>优点
<ul>
<li>内存利用率高，不需要大块连续内存</li>
<li>插入和删除节点不需要移动其它节点，时间复杂度O(1)</li>
<li>不需要专门进行扩容操作</li>
</ul>
</li>
<li>缺点
<ul>
<li>内存占用量大，每一个节点多出存放地址的空间</li>
<li>节点内存不连续，无法进行内存随机访问</li>
<li>链表搜索效率不高，只能从头节点开始逐节点遍历</li>
</ul>
</li>
</ul>`,r:{minutes:4.54,words:1363},y:"a",t:"链表基础知识",i:"file",O:1},["/algo/02 链表/链表基础.html","/algo/02 链表/链表基础.md",":md"]],["v-155542a2","/algo/03%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/1.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html",{c:["数据结构与算法"],g:["哈希","双指针"],e:`<p><a href="https://leetcode.cn/problems/two-sum/" target="_blank" rel="noopener noreferrer">1. 两数之和</a></p>
<p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>`,r:{minutes:1.34,words:403},y:"a",t:"leetcode 1. 两数之和",i:"code",O:10},["/algo/03 哈希算法/1. 两数之和.html","/algo/03 哈希算法/1. 两数之和.md",":md"]],["v-6e9dbc4c","/algo/03%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/128.%20%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97.html",{c:["数据结构与算法"],g:["哈希"],e:`<p><a href="https://leetcode.cn/problems/longest-consecutive-sequence/" target="_blank" rel="noopener noreferrer">128. 最长连续序列</a></p>
<p>给定一个未排序的整数数组 <code>nums</code> ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</p>
<p>请你设计并实现时间复杂度为 <code>O(n)</code> 的算法解决此问题。</p>
<p><strong>示例 1：</strong></p>
<div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #abb2bf">输入：nums = [100,4,200,1,3,2]</span></span>
<span class="line"><span style="color: #abb2bf">输出：4</span></span>
<span class="line"><span style="color: #abb2bf">解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4。</span></span>
<span class="line"><span style="color: #abb2bf"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.92,words:277},y:"a",t:"leetcode 128. 最长连续序列",i:"code",O:7},["/algo/03 哈希算法/128. 最长连续序列.html","/algo/03 哈希算法/128. 最长连续序列.md",":md"]],["v-cdbdf9f8","/algo/03%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/15.%20%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html",{c:["数据结构与算法"],g:["哈希","双指针"],e:`<p><a href="https://leetcode.cn/problems/3sum/" target="_blank" rel="noopener noreferrer">15. 三数之和</a></p>
<p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请</p>`,r:{minutes:4.02,words:1207},y:"a",t:"leetcode 15. 三数之和",i:"code",O:12},["/algo/03 哈希算法/15. 三数之和.html","/algo/03 哈希算法/15. 三数之和.md",":md"]],["v-21edb74e","/algo/03%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/167.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%20II%20-%20%E8%BE%93%E5%85%A5%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84.html",{c:["数据结构与算法"],g:["哈希","二分查找","双指针"],e:`<p><a href="https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/" target="_blank" rel="noopener noreferrer">167. 两数之和 II - 输入有序数组</a></p>
<p>给你一个下标从 <strong>1</strong> 开始的整数数组 <code>numbers</code> ，该数组已按 <strong>非递减顺序排列</strong> ，请你从数组中找出满足相加之和等于目标数 <code>target</code> 的两个数。如果设这两个数分别是 <code>numbers[index1]</code> 和 <code>numbers[index2]</code> ，则 <code>1 &lt;= index1 &lt; index2 &lt;= numbers.length</code> 。</p>`,r:{minutes:1.96,words:589},y:"a",t:"leetcode 167. 两数之和 II - 输入有序数组",i:"code",O:11},["/algo/03 哈希算法/167. 两数之和 II - 输入有序数组.html","/algo/03 哈希算法/167. 两数之和 II - 输入有序数组.md",":md"]],["v-525b6569","/algo/03%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/202.%20%E5%BF%AB%E4%B9%90%E6%95%B0.html",{c:["数据结构与算法"],g:["哈希","双指针"],e:`<p><a href="https://leetcode.cn/problems/happy-number/" target="_blank" rel="noopener noreferrer">leetcode 202. 快乐数</a></p>
<p>编写一个算法来判断一个数 <code>n</code> 是不是快乐数。</p>
<p><strong>「快乐数」</strong> 定义为：</p>
<ul>
<li>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。</li>
<li>然后重复这个过程直到这个数变为 1，也可能是 <strong>无限循环</strong> 但始终变不到 1。</li>
<li>如果这个过程 <strong>结果为</strong> 1，那么这个数就是快乐数。</li>
</ul>`,r:{minutes:1.83,words:550},y:"a",t:"leetcode 202. 快乐数",i:"code",O:9},["/algo/03 哈希算法/202. 快乐数.html","/algo/03 哈希算法/202. 快乐数.md",":md"]],["v-30fc6476","/algo/03%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/217.%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0.html",{c:["数据结构与算法"],g:["哈希表"],e:`<p><a href="https://leetcode.cn/problems/contains-duplicate/" target="_blank" rel="noopener noreferrer">leetcode 217. 存在重复元素</a></p>
<p><strong>题目描述</strong>：给定一个整数数组，判断是否存在重复元素。</p>
<p>如果任意一值在数组中出现至少两次，函数返回 true 。如果数组中每个元素都不相同，则返回 false 。</p>
<!--more-->
<h2> 方法一</h2>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Solution</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">containsDuplicate</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">        unordered_set</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> set;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">auto</span><span style="color: #ABB2BF"> i : nums) {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">set</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">find</span><span style="color: #ABB2BF">(i) </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">set</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">end</span><span style="color: #ABB2BF">()) {</span></span>
<span class="line"><span style="color: #ABB2BF">                </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">true</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">            }</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #ABB2BF">                </span><span style="color: #E5C07B">set</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">insert</span><span style="color: #ABB2BF">(i);</span></span>
<span class="line"><span style="color: #ABB2BF">            }</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.82,words:247},y:"a",t:"Leetcode 217.存在重复元素",i:"code",O:3},["/algo/03 哈希算法/217.存在重复元素.html","/algo/03 哈希算法/217.存在重复元素.md",":md"]],["v-30a803f7","/algo/03%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/219.%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%20II.html",{c:["数据结构与算法"],g:["哈希表"],e:`<p><a href="https://leetcode.cn/problems/contains-duplicate-ii/" target="_blank" rel="noopener noreferrer">leetcode 219. 存在重复元素 II</a></p>
<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，判断数组中是否存在两个 <strong>不同的索引</strong> <code>i</code> 和 <code>j</code> ，满足 <code>nums[i] == nums[j]</code> 且 <code>abs(i - j) &lt;= k</code> 。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>`,r:{minutes:.63,words:188},y:"a",t:"leetcode 219. 存在重复元素 II",i:"code",O:4},["/algo/03 哈希算法/219.存在重复元素 II.html","/algo/03 哈希算法/219.存在重复元素 II.md",":md"]],["v-115ac7e7","/algo/03%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/220.%20%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%20III.html",{c:["数据结构与算法"],g:["哈希表","二分查找","滑动窗口"],e:`<p><a href="https://leetcode.cn/problems/contains-duplicate-iii/" target="_blank" rel="noopener noreferrer">leetcode 220. 存在重复元素 III</a></p>
<p>给你一个整数数组 <code>nums</code> 和两个整数 <code>indexDiff</code> 和 <code>valueDiff</code> 。</p>
<p>找出满足下述条件的下标对 <code>(i, j)</code>：</p>
<ul>
<li><code>i != j</code>,</li>
<li><code>abs(i - j) &lt;= indexDiff</code></li>
<li><code>abs(nums[i] - nums[j]) &lt;= valueDiff</code></li>
</ul>`,r:{minutes:3.57,words:1070},y:"a",t:"leetcode 220. 存在重复元素 III",i:"code",O:5},["/algo/03 哈希算法/220. 存在重复元素 III.html","/algo/03 哈希算法/220. 存在重复元素 III.md",":md"]],["v-534e82f8","/algo/03%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.html",{c:["数据结构与算法"],g:["哈希","数组","字符串"],e:`<p><a href="https://leetcode.cn/problems/valid-anagram/" target="_blank" rel="noopener noreferrer">242. 有效的字母异位词</a></p>
<p>给定两个字符串 <code>s</code> 和 <code>t</code> ，编写一个函数来判断 <code>t</code> 是否是 <code>s</code> 的字母异位词。</p>
<p>**注意：**若 <code>s</code> 和 <code>t</code> 中每个字符出现的次数都相同，则称 <code>s</code> 和 <code>t</code> 互为字母异位词。</p>`,r:{minutes:.67,words:200},y:"a",t:"leetcode 242. 有效的字母异位词",i:"code",O:1},["/algo/03 哈希算法/242.有效的字母异位词.html","/algo/03 哈希算法/242.有效的字母异位词.md",":md"]],["v-e58201ee","/algo/03%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/349.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86.html",{c:["数据结构与算法"],g:["哈希","数组"],e:`<p><a href="https://leetcode.cn/problems/intersection-of-two-arrays/" target="_blank" rel="noopener noreferrer">349. 两个数组的交集（有相同的数字）</a></p>
<p>给定两个数组 <code>nums1</code> 和 <code>nums2</code> ，返回 <em>它们的交集</em> 。输出结果中的每个元素一定是 <strong>唯一</strong> 的。我们可以 <strong>不考虑输出结果的顺序</strong> 。</p>
<p><strong>示例 1：</strong></p>`,r:{minutes:1.2,words:361},y:"a",t:"leetcode 349. 两个数组的交集（有相同的数字）",i:"code",O:2},["/algo/03 哈希算法/349.两个数组的交集.html","/algo/03 哈希算法/349.两个数组的交集.md",":md"]],["v-21b182ee","/algo/03%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/383.%20%E8%B5%8E%E9%87%91%E4%BF%A1.html",{c:["数据结构与算法"],g:["哈希"],e:`<p><a href="https://leetcode.cn/problems/ransom-note/" target="_blank" rel="noopener noreferrer">383. 赎金信</a></p>
<p>给你两个字符串：<code>ransomNote</code> 和 <code>magazine</code> ，判断 <code>ransomNote</code> 能不能由 <code>magazine</code> 里面的字符构成。</p>
<p>如果可以，返回 <code>true</code> ；否则返回 <code>false</code> 。</p>`,r:{minutes:.55,words:164},y:"a",t:"leetcode 383. 赎金信",i:"code",O:8},["/algo/03 哈希算法/383. 赎金信.html","/algo/03 哈希算法/383. 赎金信.md",":md"]],["v-deb0c8ec","/algo/03%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/594.%20%E6%9C%80%E9%95%BF%E5%92%8C%E8%B0%90%E5%AD%90%E5%BA%8F%E5%88%97.html",{c:["数据结构与算法"],g:["哈希","双指针"],e:`<p><a href="https://leetcode.cn/problems/longest-harmonious-subsequence/" target="_blank" rel="noopener noreferrer">leetcode 594. 最长和谐子序列</a></p>
<p>和谐数组是指一个数组里元素的最大值和最小值之间的差别 <strong>正好是 <code>1</code></strong> 。</p>
<p>现在，给你一个整数数组 <code>nums</code> ，请你在所有可能的子序列中找到最长的和谐子序列的长度。</p>
<p>数组的子序列是一个由数组派生出来的序列，它可以通过删除一些元素或不删除元素、且不改变其余元素的顺序而得到。</p>`,r:{minutes:1.34,words:402},y:"a",t:"leetcode 594. 最长和谐子序列",i:"code",O:6},["/algo/03 哈希算法/594. 最长和谐子序列.html","/algo/03 哈希算法/594. 最长和谐子序列.md",":md"]],["v-1a50115e","/algo/04%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.html",{c:["数据结构与算法"],g:["排序算法"],e:`<p>把⼩的元素往前调或者把⼤的元素往后调，⽐较是相邻的两个元素⽐较，交换也发⽣在这两个元素之间。</p>
<ul>
<li>外循环表示需要<code>N-1轮</code>循环</li>
<li>内循环表示<code>每轮循环需要比较的次数</code></li>
<li>如果前面的元素比后面的大，则交换</li>
</ul>
<!--more-->
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">//bubbleSort.h</span></span>
<span class="line"><span style="color: #C678DD">#ifndef</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_BUBBLE_SORT_H_</span></span>
<span class="line"><span style="color: #C678DD">#define</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_BUBBLE_SORT_H_</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;vector&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::vector; </span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::swap;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">bubbleSort</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #C678DD">#endif</span><span style="color: #7F848E; font-style: italic"> //_BUBBLE_SORT_H_</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.98,words:295},y:"a",t:"冒泡排序",i:"file",O:1},["/algo/04 排序算法/冒泡排序.html","/algo/04 排序算法/冒泡排序.md",":md"]],["v-53acd735","/algo/04%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F.html",{c:["数据结构与算法"],g:["排序算法"],e:`<h1> 基数排序</h1>
<p>将整数按位数切割成不同的数字，然后按每个位数分别比较,从最低位开始排序。</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;vector&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;string&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;cstdlib&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;ctime&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;climits&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cout;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::endl;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::vector;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//只有正整数和0</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">radixSort</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">()) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> maxNum </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> INT_MIN;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> num : nums) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(num </span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> maxNum) {</span></span>
<span class="line"><span style="color: #ABB2BF">            maxNum </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> num;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> maxNunLen </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> std::</span><span style="color: #61AFEF">to_string</span><span style="color: #ABB2BF">(maxNum).</span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> mod </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> div </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    vector</span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF">vector</span><span style="color: #C678DD">&lt;int&gt;&gt;</span><span style="color: #ABB2BF"> bucket;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> maxNunLen; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">i, mod </span><span style="color: #C678DD">*=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">, div </span><span style="color: #C678DD">*=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">bucket</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">resize</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> j </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; j </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">(); </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">j) {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> index </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> (</span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[j] </span><span style="color: #56B6C2">%</span><span style="color: #ABB2BF"> mod) </span><span style="color: #56B6C2">/</span><span style="color: #ABB2BF"> div;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">bucket</span><span style="color: #ABB2BF">[index].</span><span style="color: #61AFEF">push_back</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[j]);</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> count </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">auto</span><span style="color: #ABB2BF"> vec : bucket) {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> num : vec) {</span></span>
<span class="line"><span style="color: #ABB2BF">                </span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[count</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> num;</span></span>
<span class="line"><span style="color: #ABB2BF">            }</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">bucket</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">clear</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//nums含有负数</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">radixSort2</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> maxNum </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> INT_MIN;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> num : nums) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #61AFEF">abs</span><span style="color: #ABB2BF">(num) </span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> maxNum) {</span><span style="color: #7F848E; font-style: italic">     //正负数中长的数字</span></span>
<span class="line"><span style="color: #ABB2BF">            maxNum </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">abs</span><span style="color: #ABB2BF">(num);</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> maxNunLen </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> std::</span><span style="color: #61AFEF">to_string</span><span style="color: #ABB2BF">(maxNum).</span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> mod </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> div </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    vector</span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF">vector</span><span style="color: #C678DD">&lt;int&gt;&gt;</span><span style="color: #ABB2BF"> bucket;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> maxNunLen; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">i, mod </span><span style="color: #C678DD">*=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">, div </span><span style="color: #C678DD">*=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">bucket</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">resize</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">20</span><span style="color: #ABB2BF">);</span><span style="color: #7F848E; font-style: italic">  //更改桶的数量</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> j </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; j </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">size</span><span style="color: #ABB2BF">(); </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">j) {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> index </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> (</span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[j] </span><span style="color: #56B6C2">%</span><span style="color: #ABB2BF"> mod) </span><span style="color: #56B6C2">/</span><span style="color: #ABB2BF"> div </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic"> //-10~9 映射到下标0~19</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">bucket</span><span style="color: #ABB2BF">[index].</span><span style="color: #61AFEF">push_back</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[j]);</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> count </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">auto</span><span style="color: #ABB2BF"> vec : bucket) {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> num : vec) {</span></span>
<span class="line"><span style="color: #ABB2BF">                </span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[count</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> num;</span></span>
<span class="line"><span style="color: #ABB2BF">            }</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">bucket</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">clear</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> num : nums) {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> num </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">' '</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getTestDate</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">srand</span><span style="color: #ABB2BF">(</span><span style="color: #61AFEF">time</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">));</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">i) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push_back</span><span style="color: #ABB2BF">(</span><span style="color: #61AFEF">rand</span><span style="color: #ABB2BF">()</span><span style="color: #56B6C2">%</span><span style="color: #D19A66">99</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getTestDate2</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">srand</span><span style="color: #ABB2BF">(</span><span style="color: #61AFEF">time</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">));</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> i </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; i </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">i) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push_back</span><span style="color: #ABB2BF">(</span><span style="color: #61AFEF">rand</span><span style="color: #ABB2BF">()</span><span style="color: #56B6C2">%</span><span style="color: #D19A66">199</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">100</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">    vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> nums1;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">getTestDate</span><span style="color: #ABB2BF">(nums1);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(nums1);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">radixSort</span><span style="color: #ABB2BF">(nums1);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(nums1);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span></span>
<span class="line"><span style="color: #ABB2BF">    vector</span><span style="color: #C678DD">&lt;int&gt;</span><span style="color: #ABB2BF"> nums2 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> {</span><span style="color: #56B6C2">-</span><span style="color: #D19A66">1234</span><span style="color: #ABB2BF">,</span><span style="color: #D19A66">7</span><span style="color: #ABB2BF">, </span><span style="color: #56B6C2">-</span><span style="color: #D19A66">89</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">256</span><span style="color: #ABB2BF">};</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(nums2);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">radixSort2</span><span style="color: #ABB2BF">(nums2);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">print</span><span style="color: #ABB2BF">(nums2);</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.36,words:407},y:"a",t:"基数排序",i:"file",O:8},["/algo/04 排序算法/基数排序.html","/algo/04 排序算法/基数排序.md",":md"]],["v-00fc7494","/algo/04%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%A0%86%E6%8E%92%E5%BA%8F.html",{c:["数据结构与算法"],g:["排序算法"],e:`<h1> 堆排序</h1>
<p><strong>堆排序 = 建堆 +排序（交换）</strong></p>
<!--more-->
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">//heapSort.h</span></span>
<span class="line"><span style="color: #C678DD">#ifndef</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_HEAP_SORT_H_</span></span>
<span class="line"><span style="color: #C678DD">#define</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_HEAP_SORT_H_</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;vector&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cout;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::endl;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::vector;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::swap;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">heapify</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">N</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">parent</span><span style="color: #ABB2BF">);</span><span style="color: #7F848E; font-style: italic"> //大顶堆,下沉</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">heapSort</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#endif</span><span style="color: #7F848E; font-style: italic"> //_HEAP_SORT_H_</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.23,words:370},y:"a",t:"🍖堆排序",O:7},["/algo/04 排序算法/堆排序.html","/algo/04 排序算法/堆排序.md",":md"]],["v-380a6c84","/algo/04%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.html",{c:["数据结构与算法"],g:["排序算法"],e:`<p>希尔排序是插入排序(gap = 1)的升级版，插入排序的gap = n/2，n/4，……</p>
<!--more-->
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#ifndef</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_SHELL_SORT_H_</span></span>
<span class="line"><span style="color: #C678DD">#define</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_SHELL_SORT_H_</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;vector&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::vector;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::swap;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">shellSortCore</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt; </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">gap</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">pos</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">shellSort</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">); </span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#endif</span><span style="color: #7F848E; font-style: italic"> //_SHELLSORT_H_</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.62,words:185},y:"a",t:"希尔排序",i:"file",O:5},["/algo/04 排序算法/希尔排序.html","/algo/04 排序算法/希尔排序.md",":md"]],["v-4b65c060","/algo/04%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.html",{c:["数据结构与算法"],g:["排序算法"],e:`<p>将⼀个⼤的⽆序数组有序，我们可以<u>把⼤的数组分成两个，然后对这两个数组分别进⾏排序，之后在把这两个数组</u>
<u>合并成⼀个有序的数组。</u>由于两个⼩的数组都是有序的，所以在合并的时候是很快的。
通过递归的⽅式将⼤的数组⼀直分割，直到数组的⼤⼩为 1，此时只有⼀个元素，那么该数组就是有序的了，之后
再把两个数组⼤⼩为1的合并成⼀个⼤⼩为2的，再把两个⼤⼩为2的合并成4的 … 直到全部⼩的数组合并起来。</p>
<p>该算法是采⽤<strong>分治法</strong>（Divide and Conquer）的⼀个⾮常典型的应⽤。将已有序的⼦序列合并，得到完全有序的序列；即先使每个⼦序列有序，再使⼦序列段间有序。<u>若将两个有序表合并成⼀个有序表，称为2-路归并</u>。</p>`,r:{minutes:2.12,words:637},y:"a",t:"归并排序",i:"file",O:6},["/algo/04 排序算法/归并排序.html","/algo/04 排序算法/归并排序.md",":md"]],["v-0cc447aa","/algo/04%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.html",{c:["数据结构与算法"],g:["排序算法"],e:`<!--more-->
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">//insertSort.h</span></span>
<span class="line"><span style="color: #C678DD">#ifndef</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_INSERT_SORT_H_</span></span>
<span class="line"><span style="color: #C678DD">#define</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_INSERT_SORT_H_</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;vector&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::vector;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::swap;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">insertSort</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt; </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#endif</span><span style="color: #7F848E; font-style: italic"> //_INSERT_SORT_H_</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.46,words:137},y:"a",t:"插入排序",i:"file",O:3},["/algo/04 排序算法/插入排序.html","/algo/04 排序算法/插入排序.md",":md"]],["v-64dd32fe","/algo/04%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E6%A1%B6%E6%8E%92%E5%BA%8F.html",{c:["使用指南"],g:["页面配置","使用指南"],r:{minutes:.25,words:75},y:"a",t:"页面配置",i:"file",O:3},["/algo/04 排序算法/桶排序.html","/algo/04 排序算法/桶排序.md",":md"]],["v-85d8c71c","/algo/04%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F.html",{c:["数据结构与算法"],g:["排序算法"],e:`<h1> 计数排序</h1>
<h2> 计数排序应用场景</h2>
<p>计数排序只适用于**的序列的排序**，若待排序列的数据较分散，则会造成空间浪费，并且计数排序只适用于<strong>整型排序</strong>，不适用与浮点型排序。</p>
<h2> 步骤</h2>
<ol>
<li>先找出序列中最大值和最小值，计算出计数数组的范围</li>
<li>遍历序列，统计出现的次数</li>
<li>为了使排序具有稳定性（保证相同值的前后顺序），计数数组累计求和，累计和就是该元素要存放的位置</li>
<li>倒叙遍历序列，查找该元素存放的位置（）</li>
</ol>
<h2> 代码实现</h2>`,r:{minutes:1.9,words:570},y:"a",t:"计数排序",i:"file",O:9},["/algo/04 排序算法/计数排序.html","/algo/04 排序算法/计数排序.md",":md"]],["v-64c90a94","/algo/04%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.html",{c:["数据结构与算法"],g:["排序算法"],e:`<ul>
<li>外循环，依次选择前N-1个位置，存放最小的数据</li>
<li>内循环，需要指定待比较数据的位置</li>
</ul>
<!--more-->
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">//selectSort.h</span></span>
<span class="line"><span style="color: #C678DD">#ifndef</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_SELECT_SORT_H_</span></span>
<span class="line"><span style="color: #C678DD">#define</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_SELECT_SORT_H_</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;vector&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::vector;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::swap;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">selectSort</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt; </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #C678DD">#endif</span><span style="color: #7F848E; font-style: italic">	//_SELECT_SOTR_H_</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.59,words:176},y:"a",t:"选择排序",i:"file",O:2},["/algo/04 排序算法/选择排序.html","/algo/04 排序算法/选择排序.md",":md"]],["v-155d00d3","/algo/04%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%EF%BC%88%E7%AE%80%E5%8D%95%EF%BC%89%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.html",{c:["数据结构与算法"],g:["排序算法"],e:`<p>关键在于找一个基准（一般选第一个元素）</p>
<ul>
<li>小于基准的放左边，大于的放右边</li>
<li>递归</li>
</ul>
<!--more-->
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">//quickSort.h</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#ifndef</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_QUICK_SORT_H_</span></span>
<span class="line"><span style="color: #C678DD">#define</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_QUICK_SORT_H_</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;vector&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::vector;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::swap;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">quickSort</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt; </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">begin</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">end</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#endif</span><span style="color: #7F848E; font-style: italic"> //_QUICK_SORT_H_</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.69,words:207},y:"a",t:"（简单）快速排序",i:"file",O:4},["/algo/04 排序算法/（简单）快速排序.html","/algo/04 排序算法/（简单）快速排序.md",":md"]],["v-74d93789","/algo/%E5%A0%86/%E4%B8%8A%E6%BB%A4.html",{c:["使用指南"],g:["页面配置","使用指南"],e:`<h1> 上滤操作</h1>
<p>用于往堆内插入数据</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">//nums 待插入的数组</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//pos 待插入的下标</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//val 待插入的值</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">upAdjust</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">vector</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">nums</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">pos</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">val</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(pos </span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">) {</span><span style="color: #7F848E; font-style: italic"> //最多计算到根节点</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> parent </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> (pos </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">) </span><span style="color: #56B6C2">/</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(val </span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[parent]) {</span><span style="color: #7F848E; font-style: italic">	//如果本身为大根堆，调整使用&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[pos] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[parent];</span></span>
<span class="line"><span style="color: #ABB2BF">        	pos </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> parent;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">break</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">   	//把val放到i的位置</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">nums</span><span style="color: #ABB2BF">[pos] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> val;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.57,words:171},y:"a",t:"上滤",i:"file",O:3},["/algo/堆/上滤.html","/algo/堆/上滤.md",":md"]],["v-f1165cc2","/algo/%E6%A0%88/%E6%96%B0%E5%BB%BA%20Markdown.html",{c:["使用指南"],g:["页面配置","使用指南"],e:`<!--more-->
<h2> 顺序栈的实现</h2>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;stdexcept&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;cstring&gt;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cout;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">SeqStack</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">SeqStack</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">cap</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">        :</span><span style="color: #61AFEF">_top</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">        ,</span><span style="color: #61AFEF">_cap</span><span style="color: #ABB2BF">(cap)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        _pstack </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">[_cap]();</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">~SeqStack</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">delete[]</span><span style="color: #ABB2BF"> _pstack;</span><span style="color: #7F848E; font-style: italic">//不要用delete</span></span>
<span class="line"><span style="color: #ABB2BF">        _pstack </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">push</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">val</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(_top </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> _cap) {</span><span style="color: #7F848E; font-style: italic"> //栈满了</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #61AFEF">expand</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">2</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">_cap);</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">_pstack</span><span style="color: #ABB2BF">[_top] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> val;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">_top;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">pop</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(_top </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">){</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">throw</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Stack is empty!!!"</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">--</span><span style="color: #ABB2BF">_top;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">top</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(_top </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">throw</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Stack is empty!!!"</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_pstack</span><span style="color: #ABB2BF">[_top</span><span style="color: #56B6C2">-</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">];</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> _top </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;    </span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">expand</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">size</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">int</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> newStack </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">[size];</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">memcpy</span><span style="color: #ABB2BF">(newStack, _pstack, _top</span><span style="color: #56B6C2">*</span><span style="color: #C678DD">sizeof</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">));</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">delete[]</span><span style="color: #ABB2BF"> _pstack;</span><span style="color: #7F848E; font-style: italic">   //这里也是delete[]</span></span>
<span class="line"><span style="color: #ABB2BF">        _pstack </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> newStack;</span></span>
<span class="line"><span style="color: #ABB2BF">        _cap </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> size;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> _pstack;</span><span style="color: #7F848E; font-style: italic">   //指向数据域</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _top;</span><span style="color: #7F848E; font-style: italic">  //指向栈顶,也是栈的大小</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _cap;</span><span style="color: #7F848E; font-style: italic">    //栈的容量</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    SeqStack s;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">s</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">12</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">s</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">17</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">s</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">100</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">s</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">78</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    //cout &lt;&lt; s.top() &lt;&lt; endl;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    //s.pop();</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    //cout &lt;&lt; s.top() &lt;&lt; endl;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    //s.pop();</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    //cout &lt;&lt; s.top() &lt;&lt; endl;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    //s.pop();</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    //cout &lt;&lt; s.top() &lt;&lt; endl;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    //s.pop();</span></span>
<span class="line"><span style="color: #ABB2BF">    </span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(</span><span style="color: #56B6C2">!</span><span style="color: #E5C07B">s</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">()) {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">s</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">top</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">s</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">pop</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.88,words:265},y:"a",t:"页面配置",i:"file",O:3},["/algo/栈/新建 Markdown.html","/algo/栈/新建 Markdown.md",":md"]],["v-eeb8a63a","/algo/%E9%98%9F/%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.html",{c:["数据结构与算法"],g:["队列"],e:`<h1> 232.用栈实现队列</h1>
<p><a href="https://leetcode.cn/problems/implement-queue-using-stacks/" target="_blank" rel="noopener noreferrer">leetcode 232.用栈实现队列</a></p>
<p>使用栈实现队列的下列操作：</p>
<p>push(x) -- 将一个元素放入队列的尾部。
pop() -- 从队列首部移除元素。
peek() -- 返回队列首部的元素。
empty() -- 返回队列是否为空。</p>
<p>示例:</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">MyQueue queue </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">MyQueue</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E5C07B">queue</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #E5C07B">queue</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #E5C07B">queue</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">peek</span><span style="color: #ABB2BF">();</span><span style="color: #7F848E; font-style: italic">  // 返回 1</span></span>
<span class="line"><span style="color: #E5C07B">queue</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">pop</span><span style="color: #ABB2BF">();</span><span style="color: #7F848E; font-style: italic">   // 返回 1</span></span>
<span class="line"><span style="color: #E5C07B">queue</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">();</span><span style="color: #7F848E; font-style: italic"> // 返回 false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.26,words:378},y:"a",t:"leetcode 232.用栈实现队列",i:"code",O:2},["/algo/队/两个栈实现队列.html","/algo/队/两个栈实现队列.md",":md"]],["v-c84ce682","/algo/%E9%98%9F/%E6%96%B0%E5%BB%BA%20Markdown.html",{c:["使用指南"],g:["页面配置","使用指南"],e:`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::cout;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//对头指针_front与队尾指针_rear在进行变化的时候，需要考虑边界条件</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Queue</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">Queue</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">sz</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    : </span><span style="color: #61AFEF">_size</span><span style="color: #ABB2BF">(sz)</span></span>
<span class="line"><span style="color: #ABB2BF">    , </span><span style="color: #61AFEF">_front</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    , </span><span style="color: #61AFEF">_rear</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    , </span><span style="color: #61AFEF">_data</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">[_size]())</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Queue(int = 10)"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> _front </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> _rear;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">full</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> _front </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> (_rear </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">)</span><span style="color: #56B6C2">%</span><span style="color: #ABB2BF"> _size;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">push</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">value</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #56B6C2">!</span><span style="color: #61AFEF">full</span><span style="color: #ABB2BF">())</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">_data</span><span style="color: #ABB2BF">[_rear</span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">] </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> value;</span></span>
<span class="line"><span style="color: #ABB2BF">            _rear </span><span style="color: #C678DD">%=</span><span style="color: #ABB2BF"> _size;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">else</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">            cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"The queue is full"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">pop</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #56B6C2">!</span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">())</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">_front;</span></span>
<span class="line"><span style="color: #ABB2BF">            _front </span><span style="color: #C678DD">%=</span><span style="color: #ABB2BF"> _size;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">else</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">            cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"The queue is empty"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">front</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">const</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_data</span><span style="color: #ABB2BF">[_front];</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">back</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">const</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">_data</span><span style="color: #ABB2BF">[(_rear </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> _size)</span><span style="color: #56B6C2">%</span><span style="color: #ABB2BF">_size];</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getFront</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">const</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> _front;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getRear</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">const</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> _rear;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">~Queue</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"~Queue()"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(_data)</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">[]</span><span style="color: #ABB2BF"> _data;</span></span>
<span class="line"><span style="color: #ABB2BF">            _data </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _size;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _front;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _rear;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">_data;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">argc</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">char</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">**</span><span style="color: #E06C75; font-style: italic">argv</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    Queue que;</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"此时队列是否为空?"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">que</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">que</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"此时队列是否为满?"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">que</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">full</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">size_t</span><span style="color: #ABB2BF"> idx </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">; idx </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">12</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">++</span><span style="color: #ABB2BF">idx)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">que</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">push</span><span style="color: #ABB2BF">(idx);</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"此时队列是否为满?"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">que</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">full</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"打印队列头尾"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"队头元素"</span><span style="color: #ABB2BF">  </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">que</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">front</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"对头指针"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">que</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">getFront</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"队尾元素"</span><span style="color: #ABB2BF">  </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">que</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">back</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"对尾指针"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">que</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">getRear</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(</span><span style="color: #56B6C2">!</span><span style="color: #E5C07B">que</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">())</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">que</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">front</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">que</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">pop</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"此时队列是否为空?"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">que</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.11,words:333},y:"a",t:"页面配置",i:"file",O:3},["/algo/队/新建 Markdown.html","/algo/队/新建 Markdown.md",":md"]],["v-038e0b34","/ccpp/00%20%E5%9F%BA%E7%A1%80%E5%BF%85%E5%A4%87/%E5%8F%8D%E6%B1%87%E7%BC%96%E5%B0%8F%E7%BB%93.html",{c:["c/c++"],g:["反汇编"],e:`<h1> 反汇编小结</h1>
<p>记录一下常用的反汇编指令方便查看</p>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">objdump </span><span style="color: #C678DD">-</span><span style="color: #ABB2BF">M intel </span><span style="color: #C678DD">-</span><span style="color: #ABB2BF">d </span><span style="color: #C678DD">-</span><span style="color: #ABB2BF">C binary_file</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:.9,words:271},y:"a",t:"反汇编小结",i:"file",O:4},["/ccpp/00 基础必备/反汇编小结.html","/ccpp/00 基础必备/反汇编小结.md",":md"]],["v-403c82cd","/ccpp/00%20%E5%9F%BA%E7%A1%80%E5%BF%85%E5%A4%87/%E6%8C%87%E4%BB%A4%E8%A7%92%E5%BA%A6%E5%A0%86%E6%A0%88%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B.html",{c:["c/c++"],g:["操作系统","堆栈"],e:`<h2> 栈空间</h2>
<figure><figcaption>image-20240130155633380</figcaption></figure>
<!--more-->
<p>栈空间是从高地址向低地址扩充，堆地址是从低地址向高地址扩充。</p>
<p><u>堆栈</u>是一种具有一定规则的，我们可以按照一定的规则进行添加和删除数据。它使用的是<strong>先进后出</strong>的原则。在x86等汇编集合中堆栈与弹栈的操作指令分别为：</p>
<ul>
<li>
<p><code>PUSH</code>：将目标内存推入栈顶。</p>
</li>
<li>
<p><code>POP</code>：从栈顶中移除目标。</p>
</li>
</ul>`,r:{minutes:9.79,words:2936},y:"a",t:"指令角度理解堆栈调用过程",i:"file",O:2},["/ccpp/00 基础必备/指令角度堆栈调用过程.html","/ccpp/00 基础必备/指令角度堆栈调用过程.md",":md"]],["v-5aef7a82","/ccpp/00%20%E5%9F%BA%E7%A1%80%E5%BF%85%E5%A4%87/%E7%BC%96%E8%AF%91%E5%99%A8%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3c__%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BC%96%E8%AF%91%E5%92%8C%E9%93%BE%E6%8E%A5.html",{c:["c/c++"],g:["操作系统","编译链接"],e:`<h1> 编译器角度理解c++代码的编译和链接</h1>
<p>c/c++这种<strong>本地编译型语言</strong>的编译过程</p>
<figure><figcaption>image-20231230103243664</figcaption></figure>
<h2> <strong>重点</strong>：</h2>
<ol>
<li><strong><code>*.o</code>文件的组成格式是什么样的？</strong></li>
<li><strong>可执行文件的组成格式是什么样的？</strong></li>
<li><strong>链接的两个步骤做的是什么事情？</strong></li>
<li><strong>符号表中的符号怎么理解？</strong></li>
<li><strong>符号何时分配虚拟地址？</strong></li>
</ol>`,r:{minutes:8.41,words:2522},y:"a",t:"编译器角度理解c++代码的编译和链接",i:"file",O:3},["/ccpp/00 基础必备/编译器角度理解c__代码的编译和链接.html","/ccpp/00 基础必备/编译器角度理解c++代码的编译和链接.html","/ccpp/00%20%E5%9F%BA%E7%A1%80%E5%BF%85%E5%A4%87/%E7%BC%96%E8%AF%91%E5%99%A8%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3c++%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BC%96%E8%AF%91%E5%92%8C%E9%93%BE%E6%8E%A5.html","/ccpp/00 基础必备/编译器角度理解c++代码的编译和链接.md","/ccpp/00%20%E5%9F%BA%E7%A1%80%E5%BF%85%E5%A4%87/%E7%BC%96%E8%AF%91%E5%99%A8%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3c++%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BC%96%E8%AF%91%E5%92%8C%E9%93%BE%E6%8E%A5.md"]],["v-4d611284","/ccpp/00%20%E5%9F%BA%E7%A1%80%E5%BF%85%E5%A4%87/%E8%BF%9B%E7%A8%8B%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4.html",{c:["c/c++"],g:["操作系统","虚拟内存"],e:`<p>任何的编程语言都会产生两种东西：<strong>指令和数据</strong>。c++代码编译链接之后产生一个可执行文件<code>***.exe</code>存储在<u>磁盘</u>上，运行时会把程序从磁盘加载到内存（虚拟）中，</p>
<!--more-->
<p><strong>产生几个问题</strong>：</p>
<ol>
<li><u>运行时把可执行程序的哪些东西加载到内存中？</u></li>
<li><u>加载到内存后是如何存放的？</u></li>
<li><u>内存空间有没有区域划分？划分后是什么样的？？</u></li>
</ol>
<p><strong>前提条件</strong>：</p>`,r:{minutes:3.16,words:947},y:"a",t:"进程虚拟地址空间",i:"file",O:1},["/ccpp/00 基础必备/进程虚拟地址空间.html","/ccpp/00 基础必备/进程虚拟地址空间.md",":md"]],["v-f103c4b8","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/do-while(0).html",{c:["c/c++"],g:["do-while(0)"],e:`<h1> do-while(0)</h1>
<h2> 为了代码<strong>分块</strong>，比仅仅使用{}更直观些。例如在<code>cocos2d-x</code>代码中</h2>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">do</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    CCImage</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> pImage </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> new </span><span style="color: #61AFEF">CCImage</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">CC_BREAK_IF</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">NULL</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> pImage);</span></span>
<span class="line"><span style="color: #ABB2BF">    bRet </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">pImage</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #61AFEF">initWithString</span><span style="color: #ABB2BF">(text, (</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">)</span><span style="color: #E5C07B">dimensions</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">width</span><span style="color: #ABB2BF">, (</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">)</span><span style="color: #E5C07B">dimensions</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">height</span><span style="color: #ABB2BF">, eAlign, fontName, (</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">)fontSize);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">CC_BREAK_IF</span><span style="color: #ABB2BF">(</span><span style="color: #56B6C2">!</span><span style="color: #ABB2BF">bRet);</span></span>
<span class="line"><span style="color: #ABB2BF">    bRet </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">initWithImage</span><span style="color: #ABB2BF">(pImage);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">CC_SAFE_RELEASE</span><span style="color: #ABB2BF">(pImage);</span></span>
<span class="line"><span style="color: #ABB2BF">} </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF"> (</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.96,words:889},y:"a",t:"do-while(0)",i:"file",O:12},["/ccpp/01 c语言基础/do-while(0).html","/ccpp/01 c语言基础/do-while(0).md",":md"]],["v-332dfae6","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/scanf.html",{c:["c/c++"],g:["c基础"],e:`<h1> scanf</h1>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#define</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_CRT_SECURE_NO_WARNINGS</span><span style="color: #7F848E; font-style: italic">	//放在文件最上端；vs studio要写这个，linux不需要</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color: #61AFEF">scanf</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"</span><span style="color: #D19A66">%d</span><span style="color: #98C379">"</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> </span><span style="color: #C678DD">&amp;</span><span style="color: #E06C75; font-style: italic">i2</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.84,words:252},y:"a",t:"scanf",i:"file",O:9},["/ccpp/01 c语言基础/scanf.html","/ccpp/01 c语言基础/scanf.md",":md"]],["v-062c257f","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/%E5%85%B3%E9%94%AE%E5%AD%97.html",{c:["c/c++"],g:["c基础"],e:`<p>知道关键字有哪些，这里列出避免大家后面命名变量名时， 和我们关键字重名。</p>
<table>
<thead>
<tr>
<th>auto</th>
<th>double</th>
<th>int</th>
<th>struct</th>
<th>else</th>
<th>break</th>
<th>long</th>
<th>switch</th>
</tr>
</thead>
<tbody>
<tr>
<td>case</td>
<td>enum</td>
<td>register</td>
<td>typedef</td>
<td>char</td>
<td>extern</td>
<td>return</td>
<td>union</td>
</tr>
<tr>
<td>const</td>
<td>float</td>
<td>short</td>
<td>unsigned</td>
<td>continue</td>
<td>for</td>
<td>signed</td>
<td>void</td>
</tr>
<tr>
<td>default</td>
<td>goto</td>
<td>sizeof</td>
<td>volatile</td>
<td>do</td>
<td>if</td>
<td>while</td>
<td>static</td>
</tr>
</tbody>
</table>`,r:{minutes:.44,words:131},y:"a",t:"关键字",i:"file",O:3},["/ccpp/01 c语言基础/关键字.html","/ccpp/01 c语言基础/关键字.md",":md"]],["v-70779923","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/%E5%89%8D%E8%A8%80.html",{c:["c/c++"],g:["c基础"],e:`<h1> 前言</h1>
<!--more-->
<h2> 为什么叫c语言</h2>
<blockquote>
<p>详细请看wd_C语言</p>
</blockquote>
<p>其实是因为先有高级语言ALGOL 60，简称 A 语言，后来经过简化，变为 BCPL 语言，简称 B 语言，而 <u>C 语言是在 B 语言的基础之上发展而来的</u>，所以就称为 C 语言。所以<u>世界上第一个 C 语言的编译器是用 B语言编写的。</u></p>
<h2> UNIX和c语言的发展史</h2>
<ul>
<li>
<p>1965年为了<u>解决大型机连接终端数量不够用的问题</u>(当时大型主机至多能提供 30 台终端（30 个键盘、显示器)，连接一台电脑)，<strong>贝尔实验室</strong> 加入了 <strong>麻省理工学院</strong> 以及 <strong>通用电气</strong> 合作的计划</p>
</li>
<li>
<p>1969 年前后这个项目进度缓慢，资金短缺，贝尔实验室退出了研究</p>
</li>
<li>
<p>1969 年从这个项目中退出的 <strong>Ken Thompson</strong> 当时在实验室无聊时，为了让一台空闲的电脑上能够运行 “星际旅行（Space Travel）” 游行，在 8 月份左右趁着其妻子探亲的时间，用了 <strong>1 个月的时间</strong>，使用<u>汇编</u>写出了 <strong>Unix 操作系统的原型</strong></p>
</li>
<li>
<p>1970 年，美国贝尔实验室的 <strong>Ken Thompson</strong> ，以 BCPL 语言为基础，设计出很简单且很接近硬件的 B 语言（取 BCPL 的首字母），并且他用 <strong><u>B 语言</u> 写了第一个 UNIX 操作系统</strong></p>
</li>
<li>
<p>1971 年，同样酷爱 “星际旅行（Space Travel）” 的 <strong>Dennis M.Ritchie</strong> 为了能早点儿玩上游戏，加入了 <strong>Thompson</strong> 的开发项目，合作开发 UNIX，<strong>他的主要工作是改造 B语言，因为 B 语言 的跨平台性较差</strong></p>
</li>
<li>
<p>1972 年， <strong><u>Dennis M.Ritchie（丹尼斯·里奇）</u> 在 B 语言 的基础上最终设计出了</strong>一种新的语言，他取了 CPL 的第二个字母作为这种语言的名字，这就是 <strong>C 语言</strong></p>
</li>
<li>
<p>1973 年初， C 语言的主体完成， <strong>Thompson 和 Ritchie</strong> 迫不及待地开始用它完全重写了现在大名鼎鼎的 <strong>Unix 操作系统</strong></p>
</li>
</ul>`,r:{minutes:7.58,words:2273},y:"a",t:"前言",i:"file",O:1},["/ccpp/01 c语言基础/前言.html","/ccpp/01 c语言基础/前言.md",":md"]],["v-198bd17a","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/%E5%8F%98%E9%87%8F.html",{c:["c/c++"],g:["c基础"],e:`<h1> 变量</h1>
<p><strong>变量：有名字的内存空间</strong></p>
<!--more-->
<h2> 变量命名(标识符)的规定：</h2>
<ul>
<li>由字母、 数字和下划线三种字符组成，</li>
<li>第一个字符必须为字母或下划线</li>
<li>不能与关键字重名</li>
</ul>
<p>注意：</p>
<ul>
<li>区分大小写，</li>
<li>
 ，</li>
<li>应注意做到“见名知意” ， 即选有含意的英文单词 （或其缩写） 作标识符。</li>
</ul>
<h2> 数据类型</h2>
<ol>
<li><strong>内存大小</strong></li>
<li><strong>解释方式</strong></li>
</ol>`,r:{minutes:.61,words:183},y:"a",t:"变量",i:"file",O:6},["/ccpp/01 c语言基础/变量.html","/ccpp/01 c语言基础/变量.md",":md"]],["v-a688fcfc","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/%E5%AD%97%E7%AC%A6.html",{c:["c/c++"],g:["c基础"],e:`<ul>
<li>字面值界定符<code>'</code></li>
</ul>
<p>字符字面值的表示方法：</p>
<figure><figcaption>image-20231230175915108</figcaption></figure>
`,r:{minutes:.29,words:87},y:"a",t:"字符",i:"file",O:10},["/ccpp/01 c语言基础/字符.html","/ccpp/01 c语言基础/字符.md",":md"]],["v-505a1229","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/%E5%B8%B8%E9%87%8F.html",{c:["c/c++"],g:["c基础"],e:`<p>基本数据类型有常量和变量， 首先我们先来看一下常量， <strong>在程序运行过程中,其值不能被改变的量</strong>称为<strong>常量</strong></p>
<!--more-->
<figure><figcaption>image-20231230130126412</figcaption></figure>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//#define PI 3	</span></span>
<span class="line"><span style="color: #C678DD">#define</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">PI</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">0x</span><span style="color: #D19A66">123</span><span style="color: #ABB2BF">	</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">/*</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">1. 宏定义一般大写</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">2. 字面值常量  --&gt;magic number</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">   符号常量</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #7F848E; font-style: italic">//printf("PI = %d\\n", 3);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">printf</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"PI = </span><span style="color: #D19A66">%d</span><span style="color: #56B6C2">\\n</span><span style="color: #98C379">"</span><span style="color: #ABB2BF">, PI);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #7F848E; font-style: italic">//3 = 4</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #7F848E; font-style: italic">//PI = 4	//常量不可改变值</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.71,words:212},y:"a",t:"常量",i:"file",O:4},["/ccpp/01 c语言基础/常量.html","/ccpp/01 c语言基础/常量.md",":md"]],["v-1c610f8b","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",{c:["c/c++"],g:["c基础"],e:`<h1> 数据类型</h1>
<figure><figcaption>image-20231230124538132</figcaption></figure>
<!--more-->
<p><mark>数据类型作用：</mark></p>
<ol>
<li><mark><strong>内存大小</strong></mark></li>
<li><mark><strong>解释方式</strong></mark></li>
</ol>
`,r:{minutes:.32,words:96},y:"a",t:"数据类型",i:"file",O:2},["/ccpp/01 c语言基础/数据类型.html","/ccpp/01 c语言基础/数据类型.md",":md"]],["v-573fd3b5","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/%E6%95%B4%E5%9E%8B.html",{c:["c/c++"],g:["c基础"],e:`<h1> 整型（integer）</h1>
<figure><figcaption>image-20231230140401166</figcaption></figure>
<!--more-->
<h2> 有符号整型</h2>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">char</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">short</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">long</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:.61,words:182},y:"a",t:"整型（integer）",i:"file",O:7},["/ccpp/01 c语言基础/整型.html","/ccpp/01 c语言基础/整型.md",":md"]],["v-63c16f9b","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/%E6%B5%AE%E7%82%B9%E6%95%B0.html",{c:["c/c++"],g:["c基础"],e:`<h1> 浮点数</h1>
<blockquote>
<p>使用浮点数直接使用 double 即可</p>
</blockquote>
<!--more-->
<h2> 浮点数字面值表示方法</h2>
<ol>
<li>小数形式：0.123</li>
<li>指数形式：3e-3（为3 * 10<sup>-3</sup> ，即0.003）</li>
</ol>
<p>注意：</p>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//#define PI 3.14</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//#define PI 0.314E1</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//#define PI 0.314e1</span></span>
<span class="line"><span style="color: #C678DD">#define</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">PI</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">31.4</span><span style="color: #E06C75">e</span><span style="color: #ABB2BF">-</span><span style="color: #D19A66">1</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//#define PI 31.4E0.5 e后面只能写整数</span></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">printf</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"PI = </span><span style="color: #D19A66">%f</span><span style="color: #56B6C2">\\n</span><span style="color: #98C379">"</span><span style="color: #ABB2BF">,PI);</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.61,words:484},y:"a",t:"浮点数",i:"file",O:10},["/ccpp/01 c语言基础/浮点数.html","/ccpp/01 c语言基础/浮点数.md",":md"]],["v-a253b292","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/%E8%A1%A5%E7%A0%81.html",{c:["c/c++"],g:["c基础"],e:`<h1> 补码</h1>
<h2> 为什么需要补码</h2>
<p>计算机的 CPU 是无法做减法操作 的，只能做加法，其实 <mark>CPU 中有一个逻辑单元叫加法器</mark>，计算机所做的<u><em>减法，乘法，除法</em>，都是由科学家将其变化为<strong>加法</strong></u>。</p>
<!--more-->
<h2> 补码的实现</h2>
<figure><figcaption>img</figcaption></figure>
<figure><figcaption>在这里插入图片描述</figcaption></figure>
<blockquote>
<p><u>负数</u>快速求机器数的方法</p>
<p>-2 + 12 = 10</p>
<p><strong></strong></p>
</blockquote>`,r:{minutes:.67,words:201},y:"a",t:"补码",i:"file",O:8},["/ccpp/01 c语言基础/补码.html","/ccpp/01 c语言基础/补码.md",":md"]],["v-35cd92ed","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2.html",{c:["c/c++"],g:["c基础"],e:`<ol>
<li>八进制字面值   023
<ul>
<li>以0作为八进制数的前缀</li>
<li>数码取值为0～7</li>
<li>八进制数通常是无符号数。</li>
</ul>
</li>
<li>十进制字面值	456</li>
<li>十六进制字面值	0x456</li>
</ol>
<!--more-->
<figure><figcaption>image-20231230134403043</figcaption></figure>
`,r:{minutes:.47,words:140},y:"a",t:"8进制、10进制、16进制及进制转换",i:"file",O:5},["/ccpp/01 c语言基础/进制转换.html","/ccpp/01 c语言基础/进制转换.md",":md"]],["v-5f9477f2","/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/this.html",{c:["c/c++"],g:["类和对象"],e:`<p><u>类可以实例无数的对象，每个对象都有自己的成员变量，但是共享一套成员方法代码（存储在.text）</u>。类的成员方法一经<u>，会给的<strong>非静态成员函数</strong>都加一个this指针，接收调用该方法的对象的地址（即<strong>this指针的作用就是区分不同对象的</strong>(<strong>接收调用该方法的对象的地址</strong>)</u></p>
<!--more-->
<figure><figcaption></figcaption></figure>
<ol>
<li>this指针<strong>指向本身</strong></li>
<li>this指针隐藏在**（非静态）成员函数<strong>的</strong>第一个参数的位置**</li>
<li>被const修饰<code>类类型 * const this</code> ，即<strong>指针常量</strong></li>
</ol>`,r:{minutes:1.54,words:462},y:"a",t:"this指针",i:"file",O:4},["/ccpp/03 类和对象/this.html","/ccpp/03 类和对象/this.md",":md"]],["v-31530dfb","/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.html",{c:["c/c++"],g:["类和对象"],e:`<h1> 拷贝构造函数</h1>
<figure><figcaption>img</figcaption></figure>
<p>C++中经常会使用一个变量初始化另一个变量，如</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> x </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> y </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> x;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.81,words:1144},y:"a",t:"拷贝构造函数",i:"file",O:3},["/ccpp/03 类和对象/拷贝构造函数.html","/ccpp/03 类和对象/拷贝构造函数.md",":md"]],["v-3bc3bfaf","/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%92%8C%E8%B5%8B%E5%80%BC%E9%87%8D%E8%BD%BD%E7%9A%84%E5%AE%9E%E8%B7%B5.html",{c:["c/c++"],g:["类和对象"],e:`<h1> 拷贝构造和赋值重载的实践</h1>
<p><strong>这个类的对象的成员变量有占用外部资源，所以我们要重写它的拷贝构造函数和赋值函数。</strong></p>
<h2> 实现String类型</h2>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">namespace</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">std</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">String</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">String</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">char*</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">str</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">)</span><span style="color: #7F848E; font-style: italic">//普通构造函数</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (str </span><span style="color: #C678DD">!=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #ABB2BF">			m_data </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">char</span><span style="color: #ABB2BF">[</span><span style="color: #61AFEF">strlen</span><span style="color: #ABB2BF">(str) </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">];</span><span style="color: #7F848E; font-style: italic">//'\\0'要算上 </span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #61AFEF">strcpy</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">-&gt;</span><span style="color: #E06C75">m_data</span><span style="color: #ABB2BF">, str);</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">else</span><span style="color: #7F848E; font-style: italic">//用户传进来的字符串是空的话 ，为了让其他方法不用判空 </span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #ABB2BF">			m_data </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">char</span><span style="color: #ABB2BF">[</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">];</span><span style="color: #7F848E; font-style: italic">//new char;开辟1个字节大小的空间 </span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF">m_data </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'</span><span style="color: #56B6C2">\\0</span><span style="color: #98C379">'</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">//0</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">String</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">String</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">other</span><span style="color: #ABB2BF">)</span><span style="color: #7F848E; font-style: italic">//拷贝构造函数，深拷贝 </span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		m_data </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">char</span><span style="color: #ABB2BF">[</span><span style="color: #61AFEF">strlen</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">other</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">m_data</span><span style="color: #ABB2BF">) </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">];</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #61AFEF">strcpy</span><span style="color: #ABB2BF">(m_data, </span><span style="color: #E5C07B">other</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">m_data</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #61AFEF">~String</span><span style="color: #ABB2BF">(void)</span><span style="color: #7F848E; font-style: italic">//析构函数</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF">[]m_data;</span></span>
<span class="line"><span style="color: #ABB2BF">		m_data </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">//防止野指针的出现 </span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	//使用String&amp;是为了支持连续的operator=赋值操作</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">String</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">operator</span><span style="color: #ABB2BF">=(</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">String</span><span style="color: #C678DD">&amp;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">other</span><span style="color: #ABB2BF">)</span><span style="color: #7F848E; font-style: italic">//赋值重载函数，深拷贝 </span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">==</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">other)</span><span style="color: #7F848E; font-style: italic">//防止自赋值 </span></span>
<span class="line"><span style="color: #ABB2BF">		{</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">//str1</span></span>
<span class="line"><span style="color: #ABB2BF">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF">[]m_data;</span><span style="color: #7F848E; font-style: italic">//释放当前的外部资源 </span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">		m_data </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">char</span><span style="color: #ABB2BF">[</span><span style="color: #61AFEF">strlen</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">other</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">m_data</span><span style="color: #ABB2BF">) </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">];</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #61AFEF">strcpy</span><span style="color: #ABB2BF">(m_data, </span><span style="color: #E5C07B">other</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">m_data</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">//str1</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">char</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> m_data;</span><span style="color: #7F848E; font-style: italic">//用于保存字符串</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	//用带const char*参数的构造函数</span></span>
<span class="line"><span style="color: #ABB2BF">	String str1;</span><span style="color: #7F848E; font-style: italic">//调用默认的构造，形参是nullptr </span></span>
<span class="line"><span style="color: #ABB2BF">	String </span><span style="color: #61AFEF">str2</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"hello"</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">	String str3 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"world"</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">//str2 </span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	//调用拷贝构造函数</span></span>
<span class="line"><span style="color: #ABB2BF">	String str4 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> str3;</span></span>
<span class="line"><span style="color: #ABB2BF">	String </span><span style="color: #61AFEF">str5</span><span style="color: #ABB2BF">(str3);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	//调用赋值重载函数</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	/*</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	str1 = str2</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	str1.operator=(str2) =&gt; str1</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	str3 = str1</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	*/</span></span>
<span class="line"><span style="color: #ABB2BF">	str3 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> str1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> str2;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.79,words:836},y:"a",t:"拷贝构造和赋值重载的实践",i:"file",O:6},["/ccpp/03 类和对象/拷贝构造和赋值重载的实践.html","/ccpp/03 类和对象/拷贝构造和赋值重载的实践.md",":md"]],["v-3a9cf65c","/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/%E6%8C%87%E5%90%91%E7%B1%BB%E5%9E%8B%E6%88%90%E5%91%98%E7%9A%84%E6%8C%87%E9%92%88.html",{c:["c/c++"],g:["类和对象"],e:`<h1> 指向类型成员的指针</h1>
<h2> 普通成员变量</h2>
<p><strong>普通成员变量：我们定义指针指向类的成员变量，。而且。</strong></p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Test</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">func</span><span style="color: #ABB2BF">()</span><span style="color: #7F848E; font-style: italic">//普通成员方法</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"call Test::func"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">static</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">static_func</span><span style="color: #ABB2BF">()</span><span style="color: #7F848E; font-style: italic">//静态成员方法</span></span>
<span class="line"><span style="color: #ABB2BF">	{</span></span>
<span class="line"><span style="color: #ABB2BF">		cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Test::static_func"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> ma;</span><span style="color: #7F848E; font-style: italic">//普通成员变量</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.59,words:478},y:"a",t:"指向类型成员的指针",i:"file",O:3},["/ccpp/03 类和对象/指向类型成员的指针.html","/ccpp/03 类和对象/指向类型成员的指针.md",":md"]],["v-10e1c6eb","/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0.html",{c:["c/c++"],g:["类和对象"],e:`<h1> 构造函数、初始化列表和析构函数</h1>
<figure><figcaption>img</figcaption></figure>
<!--more-->
<h2> 构造函数</h2>
<h3> 构造函数的特点：</h3>
<ul>
<li><strong>函数的名字<u>与类名相同</u></strong></li>
<li><u><strong>没有返回值</strong></u></li>
<li><strong><u>没有返回类型</u>，即使是void也不能有</strong></li>
<li>构造函数在对象创建时<u>自动调用</u>，用以<strong>完成对象及其他操作(如为指针成员等)</strong>；</li>
<li>如果程序员<u>没有显式定义它，系统会提供一个默认构造函数</u>。</li>
</ul>`,r:{minutes:6.12,words:1836},y:"a",t:"构造函数、初始化列表和析构函数",i:"file",O:2},["/ccpp/03 类和对象/构造函数和析构函数.html","/ccpp/03 类和对象/构造函数和析构函数.md",":md"]],["v-451c83e2","/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E6%88%90%E5%91%98%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96.html",{c:["c/c++"],g:["类和对象"],e:`<h1> 特殊数据成员的初始化</h1>
<p>在C++的类中，有4种比较特殊的数据成员，他们分别是<strong>常量成员、引用成员、类对象成员和静态成员</strong>，他们的初始化与普通数据成员有所不同。</p>
<h2> 常量数据成员</h2>
<p>当数据成员用const关键字进行修饰以后，就成为常量成员。一经初始化，该数据成员便具有“只读属
性”，在程序中无法对其值修改。事实上，在构造函数体内初始化const数据成员是非法的，它们<strong>只能在</strong>
<strong>构造函数初始化列表中进行初始化</strong>。如：</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Point</span><span style="color: #ABB2BF"> </span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> &nbsp; &nbsp;//错误写法</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #61AFEF">Point</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">ix</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">iy</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  {</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp; &nbsp;_ix </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> ix;</span><span style="color: #7F848E; font-style: italic">//error, 这是赋值语句，const成员不能修改</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp; &nbsp;_iy </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> iy;</span><span style="color: #7F848E; font-style: italic">//error</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp; &nbsp;_iz </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> _ix;</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  }</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> &nbsp; &nbsp;//正确写法</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #61AFEF">Point</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">ix</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">iy</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  : </span><span style="color: #61AFEF">_ix</span><span style="color: #ABB2BF">(ix)</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  , </span><span style="color: #61AFEF">_iy</span><span style="color: #ABB2BF">(iy)</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  , </span><span style="color: #61AFEF">_iz</span><span style="color: #ABB2BF">(_ix)</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  {</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp; &nbsp;</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp;  }</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _ix;</span><span style="color: #7F848E; font-style: italic">	//常量数据成员,必须在初始化列表中进行</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _iy;</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF"> _iz;</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.33,words:1300},y:"a",t:"特殊数据成员的初始化",i:"file",O:7},["/ccpp/03 类和对象/特殊数据成员的初始化.html","/ccpp/03 类和对象/特殊数据成员的初始化.md",":md"]],["v-6577db5e","/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/%E7%89%B9%E6%AE%8A%E7%9A%84%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0.html",{c:["c/c++"],g:["类和对象"],e:`<h1> 特殊的成员函数</h1>
<figure><figcaption>img</figcaption></figure>
<p>除了特殊的数据成员以外，C++类中还有两种特殊的成员函数：静态成员函数和 const 成员函数。我们
先来看看静态成员函数。</p>
<h2> 静态成员函数</h2>
<p>成员函数也可以定义成静态的，<strong>静态成员函数的特点:</strong></p>
<ol>
<li>
<p><mark>静态的成员函数的第一个参数位置<strong>没有this指针</strong></mark></p>
</li>
<li>
<p><mark>静态的成员函数<strong>不能访问非静态</strong>的数据成员和非静态的成员函数</mark></p>
</li>
<li>
<p><mark><strong>非静态的成员函数</strong><strong>静态的</strong>数据成员和静态的成员函数</mark></p>
</li>
<li>
<p><mark>静态成员函数可以使用<strong>类名加作用符的形式进行调用</strong>（静态成员函数的特殊用法）</mark></p>
</li>
</ol>`,r:{minutes:4.05,words:1216},y:"a",t:"特殊的成员函数",i:"file",O:8},["/ccpp/03 类和对象/特殊的成员函数.html","/ccpp/03 类和对象/特殊的成员函数.md",":md"]],["v-e41f0618","/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1.html",{c:["c/c++"],g:["类和对象"],e:`<h1> 类和对象</h1>
<figure><figcaption>img</figcaption></figure>
<!--more-->
<h2> 什么是OOP思想？</h2>
<p>面向对象的程序设计语言必须有描述对象及其相互之间关系的语言成分。这些程序设计语言可以归纳为以下几类：<strong>系统中一切事物皆为对象；对象是属性及其操作的封装体；对象可按其性质划分为类，对象成为类的实例；实例关系和继承关系是对象之间的静态关系；消息传递是对象之间动态联系的唯一形式，也是计算的唯一形式；方法是消息的序列。</strong></p>
<h2> oop编程方法：</h2>
<ol>
<li>先确定有哪些实体，根据实体的属性和行为抽象出 ADT(abstract data type)</li>
<li>类（属性-&gt;成员变量，行为-&gt;成员方法）实例化得到对象</li>
</ol>`,r:{minutes:4.49,words:1347},y:"a",t:"类和对象",i:"file",O:1},["/ccpp/03 类和对象/类和对象.html","/ccpp/03 类和对象/类和对象.md",":md"]],["v-3eca3d30","/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/%E7%BB%84%E7%BB%87%E5%AF%B9%E8%B1%A1.html",{c:["c/c++"],g:["类和对象"],e:`<h1> <strong>对象</strong>的组织</h1>
<figure><figcaption></figcaption></figure>
<p>有了自己定义的类，或者使用别人定义好的类创建对象，其机制与使用int等创建普通变量几乎完全一致，同样可以创建const对象、创建指向对象的指针、创建对象数组，还可使用new和delete等创建动态对象。</p>
<h2> const对象</h2>
<p>类对象也可以声明为const对象，一般来说，<u>能作用于const对象的成员函数除了和**<strong>，便只有</strong>**了，<strong>因为const对象只能被、以及</strong>，</u>。</p>`,r:{minutes:3.8,words:1140},y:"a",t:"对象的组织",i:"file",O:10},["/ccpp/03 类和对象/组织对象.html","/ccpp/03 类和对象/组织对象.md",":md"]],["v-1da04370","/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6%E5%87%BD%E6%95%B0.html",{c:["c/c++"],g:["类和对象"],e:`<h1> 赋值运算符函数</h1>
<figure><figcaption>img</figcaption></figure>
<h2> 形式</h2>
<p>赋值运算是一种很常见的运算，比如：</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> x </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">, y </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">x </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> y;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.4,words:1020},y:"a",t:"赋值运算符函数",i:"file",O:5},["/ccpp/03 类和对象/赋值运算符函数.html","/ccpp/03 类和对象/赋值运算符函数.md",":md"]],["v-66aab0b0","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/bool.html",{c:["c/c++"],g:["c++基础"],e:`<h1> bool</h1>
<figure><figcaption>1681304077461-c2f9d32f-49d2-4aaf-9f81-1c3da4cd2450</figcaption></figure>
<!--more-->
<p>在C++中，还添加了一种基本类型，就是bool类型，用来表示true和false。true和false是字面值，可以通过转换变为int类型，true为1，false为0.</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> x </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">true</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">// 1</span></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> y </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">// 0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.73,words:220},y:"a",t:"bool",i:"file",O:9},["/ccpp/02 c__基础/bool.html","/ccpp/02 c++基础/bool.html","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/bool.html","/ccpp/02 c++基础/bool.md","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/bool.md"]],["v-1073124a","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/c__%E5%88%9D%E6%8E%A2.html",{c:["c/c++"],g:["c++基础"],e:`<!--more-->
<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;iostream&gt;</span><span style="color: #7F848E; font-style: italic">//C++头文件没有加.h，因为C++头文件都是用模板写的，</span></span>
<span class="line"><span style="color: #ABB2BF">                   </span><span style="color: #7F848E; font-style: italic">//而模板有个特点：必须要知道所有实现之后才能正常编译</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">using namespace std;</span><span style="color: #7F848E; font-style: italic">//命名空间</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//函数的声明</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//函数声明可以有多次，函数定义只能有一次</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">test</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">test</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">test</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">test</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">test</span><span style="color: #ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">test</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #E06C75"> </span><span style="color: #E06C75; font-style: italic">argc</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> </span><span style="color: #C678DD">char</span><span style="color: #E06C75"> </span><span style="color: #C678DD">**</span><span style="color: #E06C75; font-style: italic">argv</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    /* &amp;10;//error,字面值常量,右值，不能取地址 */</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">    /* &amp;"Hello, world";//ok */</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #7F848E; font-style: italic">//cout,标准输出</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #7F848E; font-style: italic">//&lt;&lt;,输出流运算符</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #7F848E; font-style: italic">//"Hello world",字符串常量</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #7F848E; font-style: italic">//endl end of line</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"Hello world"</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    operator</span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF">(cout, </span><span style="color: #98C379">"Hello world"</span><span style="color: #ABB2BF">).</span><span style="color: #E06C75">operator</span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF">(endl);</span><span style="color: #7F848E; font-style: italic">//运算符重载</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> number </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #7F848E; font-style: italic">//cin，标准输入</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #7F848E; font-style: italic">//&gt;&gt;，输入流运算符</span></span>
<span class="line"><span style="color: #ABB2BF">    cin </span><span style="color: #C678DD">&gt;&gt;</span><span style="color: #ABB2BF"> number;</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"number = "</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> number </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.89,words:267},y:"a",t:"c++初探",i:"file",O:1},["/ccpp/02 c__基础/c__初探.html","/ccpp/02 c++基础/c++初探.html","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/c++%E5%88%9D%E6%8E%A2.html","/ccpp/02 c++基础/c++初探.md","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/c++%E5%88%9D%E6%8E%A2.md"]],["v-3cc85216","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/const.html",{c:["c/c++"],g:["c++基础"],e:`<h1> const</h1>
<figure><figcaption>1681302938745-c100c3cc-4cb4-4f9d-a1cb-94d6bd99e2ad</figcaption></figure>
<!--more-->
<h2> const关键字修饰变量</h2>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> number1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">//const关键字修饰的变量称为常量</span></span>
<span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> number2 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">20</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> val;</span><span style="color: #7F848E; font-style: italic">//error  常量必须要进行初始化</span></span>
<span class="line"><span style="color: #ABB2BF">number1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">30</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">//error   常量不能被赋值（初始化后不可修改）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:11.17,words:3350},y:"a",t:"const",i:"file",O:3},["/ccpp/02 c__基础/const.html","/ccpp/02 c++基础/const.html","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/const.html","/ccpp/02 c++基础/const.md","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/const.md"]],["v-ba4c1c2a","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/inline%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0.html",{c:["c/c++"],g:["c++基础"],e:`<h1> inline内联函数</h1>
<figure><figcaption>1681304109194-2447f7ce-8687-48ed-932c-a4679599e78c</figcaption></figure>
<!--more-->
<p>在C++中，通常定义以下函数来求取两个整数的最大值</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">max</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">x</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">y</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> x </span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> y </span><span style="color: #C678DD">?</span><span style="color: #ABB2BF"> x </span><span style="color: #C678DD">:</span><span style="color: #ABB2BF"> y;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:8.28,words:2485},y:"a",t:"inline内联函数",i:"file",O:10},["/ccpp/02 c__基础/inline内联函数.html","/ccpp/02 c++基础/inline内联函数.html","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/inline%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0.html","/ccpp/02 c++基础/inline内联函数.md","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/inline%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0.md"]],["v-c97d844a","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/new%E3%80%81delete.html",{c:["c/c++"],g:["c++基础"],e:`<h1> new/delete关键字</h1>
<figure><figcaption>1681303112683-41ec0262-0bfb-46e8-a571-0e4cd626492a</figcaption></figure>
<!--more-->
<p>在C语言中，我们写程序时，总是会有动态开辟内存的需求，每到这个时候我们就会想到用<code>malloc/free </code>去从堆里面动态申请出来一段内存给我们用。但对这一块申请出来的内存，往往还需要我们对它进行稍许的“加工”后<strong>即初始化</strong> 才能为我们所用，<u>虽然C语言为我们提供了<code>calloc</code>来开辟一段初始化好（0)的一段内存，但，它同样束手无策</u>。同时，为了保持良好的编程习惯，我们也都应该对申请出来的内存作<u>手动进行初始化</u>。于是到了C++中就有了new/delete, new []/delete[] 。用它们便可实现动态的内存管理。</p>`,r:{minutes:15.07,words:4520},y:"a",t:"new/delete关键字",i:"file",O:4},["/ccpp/02 c__基础/new、delete.html","/ccpp/02 c++基础/new、delete.html","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/new%E3%80%81delete.html","/ccpp/02 c++基础/new、delete.md","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/new%E3%80%81delete.md"]],["v-6ef0e0ae","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/string.html",{c:["c/c++"],g:["c++基础"],e:`<h1> string</h1>
<figure><figcaption></figcaption></figure>
<!--more-->
<h2> c风格字符串</h2>
<p>两种定义字符串方式：</p>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">//1.数组定义</span></span>
<span class="line"><span style="color: #C678DD">char</span><span style="color: #ABB2BF"> str1</span><span style="color: #C678DD">[]</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> {</span><span style="color: #98C379">'h'</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'e'</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'l'</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'l'</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'o'</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'</span><span style="color: #56B6C2">\\0</span><span style="color: #98C379">'</span><span style="color: #ABB2BF">};</span><span style="color: #7F848E; font-style: italic">//局部变量，栈空间</span></span>
<span class="line"><span style="color: #C678DD">char</span><span style="color: #ABB2BF"> str2</span><span style="color: #C678DD">[]</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"hello"</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">	//结尾自动包含\\0,等价于str1</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">//2.指针定义</span></span>
<span class="line"><span style="color: #C678DD">char*</span><span style="color: #ABB2BF"> str3 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"world"</span><span style="color: #ABB2BF">;</span><span style="color: #7F848E; font-style: italic">	//文字常量区</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:8.51,words:2553},y:"a",t:"string",i:"file",O:12},["/ccpp/02 c__基础/string.html","/ccpp/02 c++基础/string.html","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/string.html","/ccpp/02 c++基础/string.md","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/string.md"]],["v-f8fc3194","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90.html",{c:["c/c++"],g:["c++基础","内存对齐"],e:`<h1> 内存对齐</h1>
<h2> 对齐规则</h2>
<p>对齐规则是<strong>按照成员的，依次安排内存，其为大小的整数倍，，最后的大小为的整数倍</strong></p>
<h2> 为什么要内存对齐？</h2>
<p>1.平台原因(移植原因)：不是所有的硬件平台都能访问任意地址上的任意数据的；某些硬件平台只能在某些地址处取某些特定类型的数据，否则抛出硬件异常。
2.性能原因：数据结构(尤其是栈)应该尽可能地在自然边界上对齐。原因在于，为了访问未对齐的内存，处理器需要作两次内存访问；而对齐的内存访问仅需要一次访问。
解释二
原因有这么几点：
<strong>1、的读取不是连续的，而是的，块的大小只能是1、2、4、8、16 ... 字节；</strong>
<strong>2、总线周期来，因此；</strong>
<strong>3、，否则会。</strong></p>`,r:{minutes:3.04,words:913},y:"a",t:"内存对齐",i:"file",O:13},["/ccpp/02 c__基础/内存对齐.html","/ccpp/02 c++基础/内存对齐.html","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90.html","/ccpp/02 c++基础/内存对齐.md","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90.md"]],["v-14c9e918","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD.html",{c:["c/c++"],g:["c++基础"],e:`<h1> 函数重载</h1>
<figure><figcaption></figcaption></figure>
<!--more-->
<p>在实际开发中，有时候需要实现几个功能类似的函数，只是细节有所不同。如交换两个变量的值，但这两种变量可以有多种类型，short, int, float等。<u>在C语言中</u>，必须要设计出不同名的函数，其原型类似于：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">swap1</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">short</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">short</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">swap2</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">swap3</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">float</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">float</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:11.13,words:3339},y:"a",t:"函数重载",i:"file",O:7},["/ccpp/02 c__基础/函数重载.html","/ccpp/02 c++基础/函数重载.html","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD.html","/ccpp/02 c++基础/函数重载.md","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD.md"]],["v-1155c5a0","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.html",{c:["c/c++"],g:["c++基础"],e:`<h1> 命名空间</h1>
<figure><figcaption>image-20240101150131801</figcaption></figure>
<!--more-->
<h2> 为什么要使用命名空间？</h2>
<p>一个大型的工程往往是由若干个人独立完成的，不同的人分别完成不同的部分，最后再组合成一个完整的程序。由于各个头文件是由不同的人设计的，有可能在不同的头文件中用了相同的名字来命名所定义的类或函数，这样在程序中就会出现名字冲突。不仅如此，有可能我们自己定义的名字会与C++库中的名字发生冲突。</p>
<p>名字冲突就是在同一个作用域中有两个或多个同名的实体，<u>为了解决 ，C++中引入了<strong>命名空间</strong></u>，所谓命名空间就是一个可以由用户自己定义的作用域，在不同的作用域中可以定义相同名字的变量，互不干扰，系统能够区分它们。</p>`,r:{minutes:8.92,words:2675},y:"a",t:"命名空间",i:"file",O:2},["/ccpp/02 c__基础/命名空间.html","/ccpp/02 c++基础/命名空间.html","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.html","/ccpp/02 c++基础/命名空间.md","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.md"]],["v-636256d6","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%AE%89%E5%85%A8.html",{c:["c/c++"],g:["c++基础"],e:`<h1> 异常安全--当出现异常时，要保证程序是安全的(<strong>预判错误</strong>)</h1>
<figure><figcaption>1681304184845-87c43f84-fc0b-472f-ac86-2c5c6dfa9716</figcaption></figure>
<!--more-->
<p><u>程序的错误大致可以分为三种，分别是<strong>语法错误</strong>、<strong>逻辑错误</strong>和<strong>运行时错误</strong></u>：</p>
<ol>
<li>语法错误在<strong>编译</strong>和<strong>链接</strong>阶段就能发现，只有 100% 符合语法规则的代码才能生成可执行程序。语法错误是最容易发现、最容易定位、最容易排除的错误，程序员最不需要担心的就是这种错误。</li>
<li>逻辑错误是说我们编写的<u>代码思路有问题</u>，不能够达到最终的目标，这种错误可以<u>通过调试来解决。</u></li>
<li>运行时错误是指程序在运行期间发生的错误，例如<strong>除数为 0、内存分配失败、数组越界、文件不存在</strong>等。<strong></strong>。</li>
</ol>`,r:{minutes:13.4,words:4020},y:"a",t:"异常安全--当出现异常时，要保证程序是安全的(预判错误)",i:"file",O:3},["/ccpp/02 c__基础/异常安全.html","/ccpp/02 c++基础/异常安全.html","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%AE%89%E5%85%A8.html","/ccpp/02 c++基础/异常安全.md","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%AE%89%E5%85%A8.md"]],["v-51ee3d17","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E5%BC%95%E7%94%A8.html",{c:["c/c++"],g:["c++基础"],e:`<h1> 引用</h1>
<figure><figcaption></figcaption></figure>
<!--more-->
<h2> 什么是引用？</h2>
<p>在理解引用概念前，先回顾一下变量名。 <u>变量名实质就是一段连续<strong>内存空间的别名</strong></u>。那一段连续的内存空间只能取一个别名吗？ 显然不是，引用的概念油然而生。在C++中，<u>引用是一个已定义变量的<strong>别名</strong></u>。其语法是：</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">类型 </span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">引用名 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> 目标变量名；</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">test0</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> a </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">ref1 </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> a;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">ref2;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:12.45,words:3734},y:"a",t:"引用",i:"file",O:5},["/ccpp/02 c__基础/引用.html","/ccpp/02 c++基础/引用.html","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E5%BC%95%E7%94%A8.html","/ccpp/02 c++基础/引用.md","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E5%BC%95%E7%94%A8.md"]],["v-132402e1","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2.html",{c:["c/c++"],g:["c++基础"],e:`<h1> 强制转换</h1>
<figure><figcaption></figcaption></figure>
<!--more-->
<p>类型转换有c风格的，当然还有c++风格的。c风格的转换的格式很简单</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">TYPE a </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> （TYPE）EXPRESSION;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:6.89,words:2067},y:"a",t:"强制转换",i:"file",O:6},["/ccpp/02 c__基础/强制转换.html","/ccpp/02 c++基础/强制转换.html","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2.html","/ccpp/02 c++基础/强制转换.md","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2.md"]],["v-01408bc4","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0.html",{c:["c/c++"],g:["c++基础"],e:`<h1> 默认参数</h1>
<figure><figcaption>1681304023862-96f676ac-4269-4aa5-bf35-9cf222f1743c</figcaption></figure>
<ol>
<li>
</li>
<li>
</li>
<li>
</li>
<li>
</li>
</ol>
<!--more-->
<h2> 默认参数的目的</h2>
<p>C++可以给函数定义默认参数值。通常，调用函数时，要为函数的每个参数给定对应的实参</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">func1</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">x</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">y</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">func1</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">x</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">y</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"x = "</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> x </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">    cout </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"y = "</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> y </span><span style="color: #C678DD">&lt;&lt;</span><span style="color: #ABB2BF"> endl;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.68,words:1404},y:"a",t:"默认参数",i:"file",O:8},["/ccpp/02 c__基础/默认参数.html","/ccpp/02 c++基础/默认参数.html","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0.html","/ccpp/02 c++基础/默认参数.md","/ccpp/02%20c++%E5%9F%BA%E7%A1%80/%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0.md"]],["v-dd2c326a","/linux/01%20%E5%B7%A5%E5%85%B7%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/netstat%E4%BD%BF%E7%94%A8.html",{c:["使用指南"],g:["linux工具和基本命令"],e:`<h1> netstat 使用方法</h1>
<p>在Linux使用过程中，需要了解当前系统开放了哪些<strong>端口</strong>，并且要查看开放这些<strong>端口的具体进程和用户</strong>，可以通过netstat命令进行简单查询</p>
<h2> netstat命令各个参数</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">-a或--all：显示所有连线中的Socket；</span></span>
<span class="line"><span style="color: #61AFEF">-A&lt;网络类型&gt;或--&lt;网络类型&gt;：列出该网络类型连线中的相关地址；</span></span>
<span class="line"><span style="color: #61AFEF">-c或--continuous：持续列出网络状态；</span></span>
<span class="line"><span style="color: #61AFEF">-C或--cache：显示路由器配置的快取信息；</span></span>
<span class="line"><span style="color: #61AFEF">-e或--extend：显示网络其他相关信息；</span></span>
<span class="line"><span style="color: #61AFEF">-F或--fib：显示FIB；</span></span>
<span class="line"><span style="color: #61AFEF">-g或--groups：显示多重广播功能群组组员名单；</span></span>
<span class="line"><span style="color: #61AFEF">-h或--help：在线帮助；</span></span>
<span class="line"><span style="color: #61AFEF">-i或--interfaces：显示网络界面信息表单；</span></span>
<span class="line"><span style="color: #61AFEF">-l或--listening：显示监控中的服务器的Socket；</span></span>
<span class="line"><span style="color: #61AFEF">-M或--masquerade：显示伪装的网络连线；</span></span>
<span class="line"><span style="color: #61AFEF">-n或--numeric：直接使用ip地址，而不通过域名服务器；</span></span>
<span class="line"><span style="color: #61AFEF">-N或--netlink或--symbolic：显示网络硬件外围设备的符号连接名称；</span></span>
<span class="line"><span style="color: #61AFEF">-o或--timers：显示计时器；</span></span>
<span class="line"><span style="color: #61AFEF">-p或--programs：显示正在使用Socket的程序识别码和程序名称；</span></span>
<span class="line"><span style="color: #61AFEF">-r或--route：显示Routing</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">Table；</span></span>
<span class="line"><span style="color: #61AFEF">-s或--statistice：显示网络工作信息统计表；</span></span>
<span class="line"><span style="color: #61AFEF">-t或--tcp：显示TCP传输协议的连线状况；</span></span>
<span class="line"><span style="color: #61AFEF">-u或--udp：显示UDP传输协议的连线状况；</span></span>
<span class="line"><span style="color: #61AFEF">-v或--verbose：显示指令执行过程；</span></span>
<span class="line"><span style="color: #61AFEF">-V或--version：显示版本信息；</span></span>
<span class="line"><span style="color: #61AFEF">-w或--raw：显示RAW传输协议的连线状况；</span></span>
<span class="line"><span style="color: #61AFEF">-x或--unix：此参数的效果和指定</span><span style="color: #61AFEF">"-A unix"</span><span style="color: #61AFEF">参数相同；</span></span>
<span class="line"><span style="color: #61AFEF">--ip或--inet：此参数的效果和指定</span><span style="color: #61AFEF">"-A inet"</span><span style="color: #61AFEF">参数相同。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.15,words:1245},y:"a",t:"页面配置",i:"file",O:3},["/linux/01 工具和基本命令/netstat使用.html","/linux/01 工具和基本命令/netstat使用.md",":md"]],["v-5481f6b5","/linux/01%20%E5%B7%A5%E5%85%B7%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/tree%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",{c:["linux"],g:["linux工具和基本命令"],e:`<h1> tree常用命令</h1>
<h2> windows 上tree查看文件名</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">tree</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">/f</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:.44,words:132},y:"a",t:"tree常用命令",i:"file",O:3},["/linux/01 工具和基本命令/tree常用命令.html","/linux/01 工具和基本命令/tree常用命令.md",":md"]],["v-70781306","/linux/01%20%E5%B7%A5%E5%85%B7%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/wget%E4%BD%BF%E7%94%A8.html",{c:["linux"],g:["linux工具和基本命令"],e:`<h1> wget使用方法</h1>
<p>基本的语法是：wget [参数列表] URL</p>
<h2> 使用<code>wget</code>下载单个文件</h2>
<p>以下的例子是从网络下载一个文件并保存在当前目录</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">wget</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">http://cn.wordpress.org/wordpress-3.1-zh_CN.zip</span><span style="color: #ABB2BF"> </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:2.7,words:810},y:"a",t:"wget使用方法",i:"file",O:3},["/linux/01 工具和基本命令/wget使用.html","/linux/01 工具和基本命令/wget使用.md",":md"]],["v-fae24824","/linux/01%20%E5%B7%A5%E5%85%B7%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/%E6%89%93%E5%8C%85%E5%92%8C%E5%8E%8B%E7%BC%A9.html",{c:["linux"],g:["linux工具和基本命令"],e:`<h1> 打包和压缩</h1>
<h2> tar的使用方法</h2>
<figure><figcaption>image-20240311104103732</figcaption></figure>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">tar</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">cfv</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">packet.tar</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">file</span><span style="color: #E5C07B">*</span><span style="color: #ABB2BF">	</span><span style="color: #7F848E; font-style: italic">#将file*打包成packet.tar</span></span>
<span class="line"><span style="color: #61AFEF">tar</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">xfv</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">packet.tar</span><span style="color: #ABB2BF">	</span><span style="color: #7F848E; font-style: italic">#从包文件中释放文件</span></span>
<span class="line"><span style="color: #61AFEF">tar</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">cfvz</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">packet.tar.gz</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">test</span><span style="color: #ABB2BF">	</span><span style="color: #7F848E; font-style: italic">#将test打包并压缩</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">#tar rfvz packet.tar.gz file1	#error,压缩后不能追加</span></span>
<span class="line"><span style="color: #61AFEF">tar</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">xfvz</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">packet.tar.gz</span><span style="color: #ABB2BF">	</span><span style="color: #7F848E; font-style: italic">#解压缩</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.33,words:399},y:"a",t:"打包和压缩",i:"file",O:3},["/linux/01 工具和基本命令/打包和压缩.html","/linux/01 工具和基本命令/打包和压缩.md",":md"]],["v-29390dd2","/linux/01%20%E5%B7%A5%E5%85%B7%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/%E8%BD%AF%E9%93%BE%E6%8E%A5%EF%BC%88%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5%EF%BC%89%E5%92%8C%E7%A1%AC%E9%93%BE%E6%8E%A5.html",{c:["linux"],g:["linux工具和基本命令"],e:`<h1> 软链接（符号链接）和硬链接</h1>
<h2> 硬链接</h2>
<p>如果A文件和B文件的关系是硬链接的关系。当用户修改A文件的内容，B文件的内容也会被改变；反之，修改文件B，文件A内容也会改变。</p>
<p><strong>特点</strong>：</p>
<ol>
<li>可以在多个文件间进行，<code>ls -l</code>显示文件的硬链接数</li>
<li>
做硬链接</li>
<li>
做硬链接（Linux的文件系统：ext4、xfs等）</li>
<li>所有的硬链接、<strong>具备相同的iNode节点号</strong></li>
</ol>
<h2> 软链接</h2>`,r:{minutes:2.26,words:677},y:"a",t:"软链接（符号链接）和硬链接",i:"file",O:2},["/linux/01 工具和基本命令/软链接（符号链接）和硬链接.html","/linux/01 工具和基本命令/软链接（符号链接）和硬链接.md",":md"]],["v-45955c7c","/linux/01%20%E5%B7%A5%E5%85%B7%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/%E9%85%8D%E7%BD%AE%E4%B8%80%E5%8F%B0ubuntu.html",{c:["ubuntu"],g:["配置"],e:`<h1> 配置一台ubuntu</h1>
<h2> 网络设置</h2>
<p><strong>桥接</strong>：虚拟机和电脑在同一网络，同一子网下其他的电脑可以访问虚拟机</p>
<p><strong>NAT</strong>:宿主机充当虚拟路由器</p>
<figure><figcaption>image-20240209211150556</figcaption></figure>
<h3> 为什么配置成静态ip</h3>
<p>自动状态下ip地址可能会变，设置成静态ip有利于xshell外部连接</p>
<figure><figcaption>image-20240209211620696</figcaption></figure>`,r:{minutes:4.28,words:1283},y:"a",t:"配置一台ubuntu",i:"file",O:1},["/linux/01 工具和基本命令/配置一台ubuntu.html","/linux/01 工具和基本命令/配置一台ubuntu.md",":md"]],["v-5d0a9dce","/linux/02%20vim/vim%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8.html",{c:["linux"],g:["vim配置"],e:`<h1> amix/vimrc的配置和使用</h1>
<h2> 安装前先安装插件</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">sudo</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">apt</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">install</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-y</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">ack</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">universal-ctags</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:2.15,words:646},y:"a",t:"amix/vimrc的配置和使用",i:"file",O:3},["/linux/02 vim/vim的配置和使用.html","/linux/02 vim/vim的配置和使用.md",":md"]],["v-91127220","/linux/03%20%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/CMake%E7%9A%84%E4%BD%BF%E7%94%A8.html",{c:["linux"],g:["编译工具"],e:`<h1> CMake的使用</h1>
<h2> CMake介绍</h2>
<p><strong>CMake： 使用简单方便，可以跨平台，构建项目编译环境。比直接写Makefile简单()，可以通过简单的，一个命令便将我们项目想编译的可执行文件、静态库、动态库都编译出来了。</strong></p>
<h2> 安装</h2>
<h3> Linux环境安装CMake</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">sudo</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">apt</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">install</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">cmake</span></span>
<span class="line"><span style="color: #61AFEF">cmake</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-version</span><span style="color: #ABB2BF"> </span><span style="color: #7F848E; font-style: italic">#查看版本</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:9.02,words:2707},y:"a",t:"CMake的使用",i:"file",O:4},["/linux/03 编译工具/CMake的使用.html","/linux/03 编译工具/CMake的使用.md",":md"]],["v-4c6cb231","/linux/03%20%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/gcc_g__%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BC%96%E8%AF%91%E5%91%BD%E4%BB%A4.html",{c:["linux"],g:["编译工具"],e:`<h1> gcc/g++ 常见的编译命令</h1>
<h2> 基本编译命令</h2>
<ul>
<li>编译C程序：<code>gcc filename.c -o outputname</code></li>
<li>编译C++程序：<code>g++ filename.cpp -o outputname</code></li>
</ul>
<h2> 添加编译选项</h2>
<ul>
<li>
<p><code>-g</code>：添加调试信息，用于gdb等调试器。</p>
</li>
<li>
<p><code>-O2</code> 或 <code>-O3</code>：优化代码，提高运行效率。</p>
</li>
<li>
<p><code>-Wall</code>：显示所有警告信息。</p>
</li>
<li>
<p><code>-Wextra</code>：显示额外的警告信息。</p>
</li>
<li>
<p><code>-Werror</code>：将所有警告当作错误处理。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">gcc</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-g</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-O2</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-Wall</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">filename.c</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-o</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">outputname</span></span>
<span class="line"><span style="color: #61AFEF">g++</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">main.cc</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-m32</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-g</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-o</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">main.o</span><span style="color: #ABB2BF">	</span><span style="color: #7F848E; font-style: italic">#-m32指定编译为32位程序</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ul>`,r:{minutes:5.99,words:1796},y:"a",t:"gcc/g++ 常见的编译命令",i:"file",O:1},["/linux/03 编译工具/gcc_g__常见的编译命令.html","/linux/03 编译工具/gcc_g++常见的编译命令.html","/linux/03%20%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/gcc_g++%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BC%96%E8%AF%91%E5%91%BD%E4%BB%A4.html","/linux/03 编译工具/gcc_g++常见的编译命令.md","/linux/03%20%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/gcc_g++%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BC%96%E8%AF%91%E5%91%BD%E4%BB%A4.md"]],["v-5342bc7a","/linux/03%20%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/gdb%E8%B0%83%E8%AF%95%E5%87%BA%E9%94%99%E7%9A%84%E7%A8%8B%E5%BA%8F.html",{c:["linux"],g:["编译工具"],e:`<h1> 程序出错了，怎么办？？？</h1>
<p>利用<strong>黑匣子</strong>（当程序异常终止时，操作系统保存程序执行时的内存映像的文件）</p>
<ol>
<li><code>ulimit -c unlimited</code> 命令在 Linux 系统中用于设置 core 文件的大小限制为无限制</li>
</ol>
<figure><figcaption>image-20240310141538480</figcaption></figure>
<blockquote>
<p>具体来说，<code>ulimit -c unlimited</code> 命令的作用如下：</p>
<ol>
<li>
<p><strong>取消大小限制</strong>：<u>默认情况下，Linux 系统可能不生成 core 文件，或者对 core 文件的大小有限制</u>。使用 <code>ulimit -c unlimited</code> 可以确保当程序崩溃时，系统不会因文件大小限制而截断 core 文件，从而可以保存完整的内存映像。</p>
<figure><figcaption>image-20240310141436371</figcaption></figure>
</li>
<li>
<p><strong>便于调试</strong>：完整的 core 文件对于程序员和系统管理员来说是非常有价值的，因为它可以帮助他们了解程序崩溃时的状态，包括变量的值、内存布局等，从而更容易地定位问题所在。</p>
</li>
<li>
<p><strong>注意安全性</strong>：需要注意的是，<mark></mark>。此外，core 文件可能包含敏感信息，因此需要注意文件的安全性和隐私保护。</p>
</li>
</ol>
</blockquote>`,r:{minutes:4.99,words:1496},y:"a",t:"gdb调试出错的程序",i:"file",O:2},["/linux/03 编译工具/gdb调试出错的程序.html","/linux/03 编译工具/gdb调试出错的程序.md",":md"]],["v-f6ba6062","/linux/03%20%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/makefile%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.html",{c:["linux"],g:["编译工具"],e:`<h1> makefile使用方法</h1>
<h2> 使用方法</h2>
<p>先建立一个名为<code>makefile</code>或者是<code>Makefile</code>的文件，然后在里面写入符合语法规则的编译命令，完成以后只需要在<u>文件所在目录</u>使用<code>make</code>命令就能运行编译命令</p>
<h2> 书写规则</h2>
<p>从第一行命令开始，先确认目标文件，根据目标文件确定所需的依赖文件，然后递归地找到依赖文件的依赖文件，直到依赖文件是没有子依赖文件</p>
<div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">#注释   书写格式</span></span>
<span class="line"><span style="color: #61AFEF">[目标文件]</span><span style="color: #ABB2BF">:</span><span style="color: #E06C75">[依赖文件]</span></span>
<span class="line"><span style="color: #E5C07B">&lt;tab&gt;[command]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.51,words:1352},y:"a",t:"makefile使用方法",i:"file",O:3},["/linux/03 编译工具/makefile使用方法.html","/linux/03 编译工具/makefile使用方法.md",":md"]],["v-7c3e20c2","/linux/04%20%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E4%B8%8D%E5%90%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E5%AD%97.html",{c:["使用指南"],g:["页面配置","使用指南"],e:`<p>strtol()函数字符串转换成十进制、十六进制 、二进制、 八进制 long类型</p>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;stdlib.h&gt;</span></span>
<span class="line"><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">strtol</span><span style="color: #E06C75"> </span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">const</span><span style="color: #E06C75"> </span><span style="color: #C678DD">char*</span><span style="color: #E06C75"> </span><span style="color: #E06C75; font-style: italic">str</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> </span><span style="color: #C678DD">char**</span><span style="color: #E06C75"> </span><span style="color: #E06C75; font-style: italic">endptr</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> </span><span style="color: #C678DD">int</span><span style="color: #E06C75"> </span><span style="color: #E06C75; font-style: italic">base</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.48,words:445},y:"a",t:"字符串转不同进制数学",i:"file",O:3},["/linux/04 文件操作/字符串转不同进制数字.html","/linux/04 文件操作/字符串转不同进制数字.md",":md"]],["v-18f8cde9","/mysql/01%20MySQL%E5%9F%BA%E7%A1%80/c%E8%AF%AD%E8%A8%80%E8%BF%9E%E6%8E%A5MySQL.html",{c:["mysql"],g:["c/c++连接数据库"],e:`<h1> c语言连接MySQL</h1>
<p>安装开发c/c++的库：<code>apt install libmysqlclient-dev</code></p>
<h2> 1. 连接数据库使用的头文件和库文件</h2>
<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;mysql/mysql.h&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">有些也在 #include </span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF">mysql.h</span><span style="color: #C678DD">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">程序中使用了访问mysql的有关函数接口，需要在链接时指定库名: linux平台为 </span><span style="color: #C678DD">-</span><span style="color: #ABB2BF">lmysqlclient</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.23,words:1269},y:"a",t:"c语言连接MySQL",i:"file",O:9},["/mysql/01 MySQL基础/c语言连接MySQL.html","/mysql/01 MySQL基础/c语言连接MySQL.md",":md"]],["v-17cb7aa4","/mysql/01%20MySQL%E5%9F%BA%E7%A1%80/mysql%E7%9A%84%E5%AE%89%E8%A3%85.html",{c:["mysql"],g:["安装方法"],e:`<h1> mysql的安装</h1>
<h2> 查看当前有没有安装MySQL</h2>
<h3> 执行以下命令，如果执行后什么都没有返回，则进入MySQL的安装步骤</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">dpkg</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-l</span><span style="color: #ABB2BF"> | </span><span style="color: #61AFEF">grep</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">mysql</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:5.08,words:1523},y:"a",t:"mysql5.7的安装",i:"file",O:1},["/mysql/01 MySQL基础/mysql的安装.html","/mysql/01 MySQL基础/mysql的安装.md",":md"]],["v-0dd7df9c","/mysql/01%20MySQL%E5%9F%BA%E7%A1%80/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E8%AE%BE%E8%AE%A1.html",{c:["mysql"],g:["mysql基础"],e:`<h1> 关系型数据库表设计</h1>
<h2> 一对一</h2>
<p>主要是通过外键实现</p>
<p><strong>父表</strong>：被依赖/关联的表</p>
<p><strong>子表</strong>：设置外键的表</p>
<div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #abb2bf">#用户表 User  父表</span></span>
<span class="line"><span style="color: #abb2bf">uid  name age sex</span></span>
<span class="line"><span style="color: #abb2bf">1100 zhang 20 M</span></span>
<span class="line"><span style="color: #abb2bf">1000 liu 19 F</span></span>
<span class="line"><span style="color: #abb2bf">2000 wang 21 M</span></span>
<span class="line"><span style="color: #abb2bf"></span></span>
<span class="line"><span style="color: #abb2bf">#身份信息 Info 子表</span></span>
<span class="line"><span style="color: #abb2bf">cardid addrinfo</span></span>
<span class="line"><span style="color: #abb2bf">131331 aaaaa</span></span>
<span class="line"><span style="color: #abb2bf">646465 bbbbb</span></span>
<span class="line"><span style="color: #abb2bf">894946 ccccc</span></span>
<span class="line"><span style="color: #abb2bf"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.05,words:315},y:"a",t:"关系型数据库表设计",i:"file",O:6},["/mysql/01 MySQL基础/关系型数据库表设计.html","/mysql/01 MySQL基础/关系型数据库表设计.md",":md"]],["v-067342a0","/mysql/01%20MySQL%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",{c:["mysql"],g:["mysql基础"],e:`<h1> 基本数据类型</h1>
<h2> 数值类型</h2>
<figure><figcaption>image-20240406204529908</figcaption></figure>
<h3> 选取适当的数据类型</h3>
<ul>
<li>比如age TINYINT;  不要写成age int</li>
</ul>
<h3> 选数据类型两个原则</h3>
<ul>
<li>是否越界	（text类型评论发送不了全文）</li>
<li>精度是否足够（float 7; double 15）</li>
</ul>
<h3> INT(7) 什么意思</h3>
<p>int底层内存存储的数据大小固定不变（INT 类型总是占用 4 个字节的存储空间，无论括号中的数字是多少），<strong>括号内数字是一个显示时显示的宽度</strong>；即，与显示和格式化有关，与数据的实际存储或值域无关</p>`,r:{minutes:2.36,words:709},y:"a",t:"基本数据类型",i:"file",O:3},["/mysql/01 MySQL基础/基本数据类型.html","/mysql/01 MySQL基础/基本数据类型.md",":md"]],["v-c8a2e14a","/mysql/01%20MySQL%E5%9F%BA%E7%A1%80/%E5%AE%8C%E6%95%B4%E6%80%A7%E7%BA%A6%E6%9D%9F.html",{c:["mysql"],g:["mysql基础"],e:`<h1> MySQL完整性约束</h1>
<h2> 主键约束</h2>
<p><code>primary key</code>不能重复；不能为空；能唯一标识一条记录</p>
<h2> 自增键约束</h2>
<p><code>auto_increment</code>，不能用于字符串</p>
<figure><figcaption></figcaption></figure>
<h2> 唯一键约束</h2>
<p><code>unique</code>保证索引不重复-唯一索引；可以为空；可以用<code>not null</code>约束；<code>default</code> 设置默认值</p>`,r:{minutes:1.15,words:344},y:"a",t:"完整性约束/约束条件",i:"file",O:5},["/mysql/01 MySQL基础/完整性约束.html","/mysql/01 MySQL基础/完整性约束.md",":md"]],["v-a87f8e4c","/mysql/01%20MySQL%E5%9F%BA%E7%A1%80/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0.html",{c:["mysql"],g:["mysql基础"],e:`<h1> 常用函数</h1>
<h2> 字符串函数</h2>
<h2> 数值函数</h2>
<h2> 时间和日期函数</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">NOW</span><span style="color: #ABB2BF">()：返回当前的日期和时间</span></span>
<span class="line"><span style="color: #ABB2BF">UNIX_TIMESTAMP(</span><span style="color: #C678DD">data</span><span style="color: #ABB2BF">)：返回日期date的UNIX时间戳</span></span>
<span class="line"><span style="color: #ABB2BF">CURRENT_TIMESTAMP、</span><span style="color: #56B6C2">CURRENT_TIMESTAMP</span><span style="color: #ABB2BF">() ：当前时间</span></span>
<span class="line"><span style="color: #ABB2BF">CURDATE()：当前日期</span></span>
<span class="line"><span style="color: #ABB2BF">CURTIME()：当前时间</span></span>
<span class="line"><span style="color: #C678DD">DATE_FORMAT</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">date</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">"%y-%m-%d"</span><span style="color: #ABB2BF">)：格式化日期时间等</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.5,words:150},y:"a",t:"常用函数",i:"file",O:8},["/mysql/01 MySQL基础/常用函数.html","/mysql/01 MySQL基础/常用函数.md",":md"]],["v-1df5d4d6","/mysql/01%20MySQL%E5%9F%BA%E7%A1%80/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E4%B8%8E%E6%8E%88%E6%9D%83.html",{c:["mysql"],g:["mysql基础"],e:`<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">查看用户信息： </span><span style="color: #C678DD">select</span><span style="color: #ABB2BF"> user,host,plugin </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">mysql</span><span style="color: #ABB2BF">.</span><span style="color: #D19A66">user</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">创建用户示例： </span><span style="color: #C678DD">create</span><span style="color: #ABB2BF"> user </span><span style="color: #98C379">'stu'</span><span style="color: #ABB2BF">@</span><span style="color: #98C379">'localhost'</span><span style="color: #ABB2BF"> identified </span><span style="color: #C678DD">by</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'123456'</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">创建用户指定加密方式 示例：</span><span style="color: #C678DD">create</span><span style="color: #ABB2BF"> user </span><span style="color: #98C379">'stu1'</span><span style="color: #ABB2BF">@</span><span style="color: #98C379">'localhost'</span><span style="color: #ABB2BF"> identified </span><span style="color: #C678DD">WITH</span><span style="color: #ABB2BF"> mysql_native_password </span><span style="color: #C678DD">by</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'123456'</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">更新用户密码，指定加密方式，注意密码强度大小写数字：</span></span>
<span class="line"><span style="color: #C678DD">ALTER</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">user</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'root'</span><span style="color: #ABB2BF">@</span><span style="color: #98C379">'localhost'</span><span style="color: #ABB2BF"> IDENTIFIED </span><span style="color: #C678DD">WITH</span><span style="color: #ABB2BF"> mysql_native_password </span><span style="color: #C678DD">BY</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'123456'</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">授权用户对那些数据库的那些表可以进行操作 示例：</span></span>
<span class="line"><span style="color: #C678DD">GRANT</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">SELECT</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">ON</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">database_name</span><span style="color: #ABB2BF">.</span><span style="color: #D19A66">table_name</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">TO</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'user_name'</span><span style="color: #ABB2BF">@</span><span style="color: #98C379">'localhost'</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #C678DD">GRANT</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">INSERT</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">ON</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">database_name</span><span style="color: #ABB2BF">.</span><span style="color: #D19A66">table_name</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">TO</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'user_name'</span><span style="color: #ABB2BF">@</span><span style="color: #98C379">'localhost'</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #C678DD">GRANT</span><span style="color: #ABB2BF"> ALL </span><span style="color: #C678DD">ON</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">database_name</span><span style="color: #ABB2BF">.</span><span style="color: #D19A66">table_name</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">TO</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'user_name'</span><span style="color: #ABB2BF">@</span><span style="color: #98C379">'localhost'</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #C678DD">GRANT</span><span style="color: #ABB2BF"> ALL PRIVILEGES </span><span style="color: #C678DD">ON</span><span style="color: #ABB2BF"> *.* </span><span style="color: #C678DD">TO</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'user_name'</span><span style="color: #ABB2BF">@</span><span style="color: #98C379">'%'</span><span style="color: #ABB2BF">; </span><span style="color: #7F848E; font-style: italic">-- * 表示任意所有库、所有表，%表示任意地址</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">删除用户：</span><span style="color: #C678DD">drop</span><span style="color: #ABB2BF"> user </span><span style="color: #98C379">'name'</span><span style="color: #ABB2BF">@</span><span style="color: #98C379">'localhost'</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.77,words:231},y:"a",t:"用户管理与授权",i:"file",O:10},["/mysql/01 MySQL基础/用户管理与授权.html","/mysql/01 MySQL基础/用户管理与授权.md",":md"]],["v-2648a679","/mysql/01%20MySQL%E5%9F%BA%E7%A1%80/%E7%9F%A5%E8%AF%86%E6%8B%93%E5%B1%95.html",{c:["mysql"],g:["mysql基础"],e:`<h1> 知识拓展</h1>
<h2> 什么是关系型数据库？</h2>
<p>**关系型数据库（RDBMS）**是建立在关系模型基础上的数据库系统。关系模型是一种数据模型，它表示数据之间的联系，包括一对一、一对多和多对多的关系。在关系型数据库中，数据以表格的形式存储，每个表格称为一个“关系”，每个关系由行（记录或元组）和列（字段或属性）组成。</p>
<p>每个关系都有一个唯一的标识符，称为“主键”，用于唯一标识关系中的每一行数据。主键可以是单列或多列的组合，其值能够唯一地标识关系中的每一行数据。</p>
<h2> 常见的数据库有哪些？</h2>
<ul>
<li>关系型数据库
<ul>
<li>MySQL、Oracle、MariaDB(MySQL作者担心MySQL收购后收费写的)</li>
<li>安卓开发使用的SQList（进程类的数据库，不同进程访问不同的SQList；Mysql是基于C/S，多个进程访问同一个MySQL数据库）</li>
<li>金融行业使用的DB2</li>
</ul>
</li>
<li>非关系型数据库 key-value
<ul>
<li>NoSQL、Redis</li>
<li>HBase（大数据分析列式数据库）</li>
</ul>
</li>
</ul>`,r:{minutes:1.5,words:450},y:"a",t:"知识拓展",i:"file",O:2},["/mysql/01 MySQL基础/知识拓展.html","/mysql/01 MySQL基础/知识拓展.md",":md"]],["v-cc05253e","/mysql/01%20MySQL%E5%9F%BA%E7%A1%80/%E8%8C%83%E5%BC%8F%E8%AE%BE%E8%AE%A1.html",{c:["mysql"],g:["mysql基础"],e:`<h1> 范式设计</h1>
<h2> 范式设计好处</h2>
<ol>
<li>主要是为了<strong>减少数据冗余</strong></li>
<li>如果冗余太多，那么数据插入、删除、更新的时候，要对多条记录的同样的数据进行更新删除，可能会产生问题</li>
</ol>
<h2> 第一范式（1NF）</h2>
<blockquote>
<p>满足第一范式才被称为关系型数据库。<strong>每一列保持原子特性</strong>，不能再分割。</p>
</blockquote>
则设计成<strong>一对多</strong>的实体关系。例如地址字段，可以再细分为省，市，区等不可再分割（即原子特性）的字段`,r:{minutes:2.87,words:860},y:"a",t:"范式设计",i:"file",O:7},["/mysql/01 MySQL基础/范式设计.html","/mysql/01 MySQL基础/范式设计.md",":md"]],["v-84ceb2f4","/mysql/01%20MySQL%E5%9F%BA%E7%A1%80/%E8%BF%90%E7%AE%97%E7%AC%A6.html",{c:["mysql"],g:["mysql基础"],e:`<h1> MySQL运算符</h1>
<h2> 算数运算符</h2>
<figure><figcaption>image-20240406210003709</figcaption></figure>
<p><strong>运算后的结果如果需要存储在表内</strong>，需要注意</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">update</span><span style="color: #ABB2BF"> user </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF"> age </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> age + </span><span style="color: #D19A66">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:.91,words:272},y:"a",t:"mysql运算符",i:"file",O:4},["/mysql/01 MySQL基础/运算符.html","/mysql/01 MySQL基础/运算符.md",":md"]],["v-47deb978","/mysql/02%20MySQL%E6%A0%B8%E5%BF%83SQL/CRUD.html",{c:["mysql"],g:["mysql核心SQL"],e:`<h1> CRUD操作</h1>
<p>涉及一些的过程</p>
<h2> insert增加</h2>
<p>可以先在本地文本编辑器写，然后复制到shell运行，记录命令</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">insert into</span><span style="color: #ABB2BF"> user </span><span style="color: #C678DD">values</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">,</span><span style="color: #98C379">'zhang san'</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">22</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'male'</span><span style="color: #ABB2BF">); #不要这样写，因为后面可以会涉及字段的增删，这样写数据和字段（个数、顺序、类型）必须一一对应</span></span>
<span class="line"><span style="color: #C678DD">insert into</span><span style="color: #ABB2BF"> user(</span><span style="color: #C678DD">name</span><span style="color: #ABB2BF">, age, sex) </span><span style="color: #C678DD">values</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">'zhang san'</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">22</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'male'</span><span style="color: #ABB2BF">); #这样写即使字段顺序不一致也无所谓</span></span>
<span class="line"><span style="color: #C678DD">insert into</span><span style="color: #ABB2BF"> user(</span><span style="color: #C678DD">name</span><span style="color: #ABB2BF">, age, sex) </span><span style="color: #C678DD">values</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">'zhang san'</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">22</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'male'</span><span style="color: #ABB2BF">),(</span><span style="color: #98C379">'li si'</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">21</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'female'</span><span style="color: #ABB2BF">),(</span><span style="color: #98C379">'wang wu'</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">18</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'male'</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.01,words:604},y:"a",t:"mysql CRUD操作",i:"file",O:4},["/mysql/02 MySQL核心SQL/CRUD.html","/mysql/02 MySQL核心SQL/CRUD.md",":md"]],["v-68cfc132","/mysql/02%20MySQL%E6%A0%B8%E5%BF%83SQL/DCL%E5%B0%8F%E7%BB%93.html",{c:["mysql"],g:["mysql核心SQL"],e:`<h1> DCL语句小结</h1>
<h2> (1)授予权限grant</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">grant</span><span style="color: #ABB2BF"> 权限 </span><span style="color: #C678DD">on</span><span style="color: #ABB2BF"> 库名.* </span><span style="color: #C678DD">to</span><span style="color: #ABB2BF"> “用户名”；</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">select</span><span style="color: #ABB2BF">//查询权限</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">update</span><span style="color: #ABB2BF">//修改权限</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">insert</span><span style="color: #ABB2BF">//插入权限</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">delete</span><span style="color: #ABB2BF">//删除权限</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">create</span><span style="color: #ABB2BF">//创建数据库、表的权限</span></span>
<span class="line"><span style="color: #ABB2BF">     </span><span style="color: #C678DD">drop</span><span style="color: #ABB2BF">//删除数据库、表的权限</span></span>
<span class="line"><span style="color: #ABB2BF">     all//所有权限</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.77,words:231},y:"a",t:"DCL语句小结",i:"file",O:8},["/mysql/02 MySQL核心SQL/DCL小结.html","/mysql/02 MySQL核心SQL/DCL小结.md",":md"]],["v-1509bd1e","/mysql/02%20MySQL%E6%A0%B8%E5%BF%83SQL/DML%E5%B0%8F%E7%BB%93.html",{c:["mysql"],g:["mysql核心SQL"],e:`<h1> DML语句小结</h1>
<p>DML数据操作语言：<strong>操纵数据，针对数据的增删改查；</strong></p>
<h2> (1)增insert：</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">insert into</span><span style="color: #ABB2BF"> 表名 </span><span style="color: #C678DD">values</span><span style="color: #ABB2BF">(数据的集合)；//添加一条数据；</span></span>
<span class="line"><span style="color: #C678DD">insert into</span><span style="color: #ABB2BF"> 表名(字段名1，字段名2，字段名3) </span><span style="color: #C678DD">values</span><span style="color: #ABB2BF">(“数据1”，“数据2”，“数据3”)； //添加指定字段数据，其他系统默认；</span></span>
<span class="line"><span style="color: #C678DD">insert into</span><span style="color: #ABB2BF"> 表名 </span><span style="color: #C678DD">values</span><span style="color: #ABB2BF">(数据集合1)，(数据集合2)，(数据集合3)；//insert进行小批量数据插入</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.72,words:1116},y:"a",t:"DML语句小结",i:"file",O:7},["/mysql/02 MySQL核心SQL/DML小结.html","/mysql/02 MySQL核心SQL/DML小结.md",":md"]],["v-5312ebd6","/mysql/02%20MySQL%E6%A0%B8%E5%BF%83SQL/mysql%E7%9A%84%E5%BA%93%E6%93%8D%E4%BD%9C.html",{c:["mysql"],g:["mysql核心SQL"],e:`<h1> MySQL核心SQL</h1>
<h2> 库操作</h2>
<p>查询数据库</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">show databases;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:.96,words:289},y:"a",t:"mysql的库操作",i:"file",O:2},["/mysql/02 MySQL核心SQL/mysql的库操作.html","/mysql/02 MySQL核心SQL/mysql的库操作.md",":md"]],["v-cb572402","/mysql/02%20MySQL%E6%A0%B8%E5%BF%83SQL/select%E6%9F%A5%E8%AF%A2.html",{c:["mysql"],g:["mysql核心SQL"],e:`<h1> select查询</h1>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">select</span><span style="color: #ABB2BF"> * </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> user; </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:6.94,words:2081},y:"a",t:"单表select查询",i:"file",O:5},["/mysql/02 MySQL核心SQL/select查询.html","/mysql/02 MySQL核心SQL/select查询.md",":md"]],["v-a056d220","/mysql/02%20MySQL%E6%A0%B8%E5%BF%83SQL/%E5%A4%9A%E8%A1%A8select-%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2.html",{c:["mysql"],g:["mysql核心SQL"],e:`<h1> 多表select-连接查询</h1>
<h2> 为什么需要连接查询</h2>
<p>当单表设计不满足范式设计时需要进行拆分，因此可能涉及到多表查询。连接查询相比单表查询<u>减少了TCP三次握手和四次挥手</u>，也<u>减少了mysql server对client sql的校验</u>过程。当然，一般满足范式三即可，范式越高表越多，连接查询效率越低。</p>
<figure><figcaption></figcaption></figure>
<h2> 概述</h2>
<figure><figcaption></figcaption></figure>
<p>左连接：指的是表1特有的数据</p>`,r:{minutes:6.98,words:2093},y:"a",t:"多表select-连接查询",i:"file",O:8},["/mysql/02 MySQL核心SQL/多表select-连接查询.html","/mysql/02 MySQL核心SQL/多表select-连接查询.md",":md"]],["v-eedfc64a","/mysql/02%20MySQL%E6%A0%B8%E5%BF%83SQL/%E6%A6%82%E8%BF%B0.html",{c:["mysql"],g:["mysql核心SQL"],e:`<h2> 结构化查询语句SQL（Structure Query Language）</h2>
<p>所有的<a href="https://iszhwei.gitee.io/mysql/MySQL%E5%9F%BA%E7%A1%80/%E7%9F%A5%E8%AF%86%E6%8B%93%E5%B1%95.html" target="_blank" rel="noopener noreferrer">关系型数据库</a>都支持SQL语句</p>
<p>SQL主要可以划分为以下 3 个类别：</p>
<ul>
<li>
<p>DDL（Data Deﬁnition Languages）语句-</p>
<p>数据定义语言，这些语句定义了不同的数据库、表、列、索引等数据库对象的定义。常用的语句关键字主要包括 <code>create、drop、alter</code>等。</p>
<ul>
<li>
</li>
</ul>
</li>
<li>
<p>DML（Data Manipulation Language）语句-</p>
<p>数据操纵语句，用于添加、删除、更新和查询数据库记录，并检查数据完整性，常用的语句关键字主要包括<code> insert、delete、update</code> 和<code>select</code> 等。</p>
<ul>
<li><strong>用的最多就是查询<code>select</code></strong></li>
</ul>
</li>
<li>
<p>DCL（Data Control Language）语句</p>
<p>数据控制语句，用于控制不同的许可和访问级别的语句。这些语句定义了数据库、表、字段、用户的。主要的语句关键字包括<code> grant、revoke</code> 等。</p>
</li>
</ul>`,r:{minutes:1.15,words:344},y:"a",t:"SQL概述",i:"file",O:1},["/mysql/02 MySQL核心SQL/概述.html","/mysql/02 MySQL核心SQL/概述.md",":md"]],["v-0c1daf9d","/mysql/02%20MySQL%E6%A0%B8%E5%BF%83SQL/%E8%A1%A8%E6%93%8D%E4%BD%9C.html",{c:["mysql"],g:["mysql核心SQL"],e:`<h1> 表操作</h1>
<p>查看表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">show tables;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:2.36,words:707},y:"a",t:"mysql的表操作",i:"file",O:3},["/mysql/02 MySQL核心SQL/表操作.html","/mysql/02 MySQL核心SQL/表操作.md",":md"]],["v-15be756c","/mysql/03%20MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E.html",{c:["mysql"],g:["mysql存储引擎"],e:`<h1> MySQL存储引擎</h1>
<p>mysql的一大优点就是插件式存储引擎</p>
<p>不同存储引擎主要是影响表的结构、数据以及索引的存储方式</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">show engines; #查看支持的存储引擎</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:1.65,words:494},y:"a",t:"MySQL存储引擎",i:"file",O:1},["/mysql/03 MySQL存储引擎/MySQL存储引擎.html","/mysql/03 MySQL存储引擎/MySQL存储引擎.md",":md"]],["v-32ca78ec","/mysql/04%20MYSQL%E7%B4%A2%E5%BC%95/InnoDB%E7%9A%84%E4%B8%BB%E9%94%AE%E5%92%8C%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95%E6%A0%91.html",{c:["mysql"],g:["mysql索引"],e:`<h1> InnoDB的主键和二级索引树</h1>
<h2> 主键</h2>
<p>​	</p>
<figure><figcaption></figcaption></figure>
<ul>
<li>主键树中叶子节点key是主键值，data是主键所在行的数据</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">select</span><span style="color: #ABB2BF"> * </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> student; #在有序链表中进行全文搜索</span></span>
<span class="line"><span style="color: #C678DD">select</span><span style="color: #ABB2BF"> * </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> stduent </span><span style="color: #C678DD">where</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">uid</span><span style="color: #56B6C2">=</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">; #等值搜索，从根节点开始在B+树上进行二分搜索</span></span>
<span class="line"><span style="color: #C678DD">select</span><span style="color: #ABB2BF"> * </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> stduent </span><span style="color: #C678DD">where</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">uid</span><span style="color: #56B6C2">&lt;</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">; #范围查询，在有序链表中查找</span></span>
<span class="line"><span style="color: #C678DD">select</span><span style="color: #ABB2BF"> * </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> stduent </span><span style="color: #C678DD">where</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">name</span><span style="color: #56B6C2">=</span><span style="color: #98C379">'liuxiang'</span><span style="color: #ABB2BF">; #没有索引，在有序链表上进行整表搜索</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.56,words:469},y:"a",t:"InnoDB的主键和二级索引树",i:"file",O:4},["/mysql/04 MYSQL索引/InnoDB的主键和二级索引树.html","/mysql/04 MYSQL索引/InnoDB的主键和二级索引树.md",":md"]],["v-f2fadc9e","/mysql/04%20MYSQL%E7%B4%A2%E5%BC%95/InnoDB%E8%87%AA%E9%80%82%E5%BA%94%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95.html",{c:["mysql"],g:["mysql索引"],e:`<h1> InnoDB自适应哈希索引</h1>
<p><strong>自适应哈希索引作用</strong>：MySQL Server为<u>避免频繁回表</u>，</p>
<ul>
<li>自动创建的</li>
<li>也是只能等值查询</li>
<li>是InnoDB对B+树二级索引的一个优化措施</li>
</ul>
<p>假如name是有索引的，我们不断使用如下的方式查询，那就得先访问name的二级索引树，从二级索引树上取出主键uid，然后<strong>回表</strong>，用这个uid去主键索引树上取得对应的数据</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">select</span><span style="color: #ABB2BF"> * </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> student </span><span style="color: #C678DD">where</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">name</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"zhangsan"</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #C678DD">select</span><span style="color: #ABB2BF"> * </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> student </span><span style="color: #C678DD">where</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">name</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"gaoyang"</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #C678DD">select</span><span style="color: #ABB2BF"> * </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> student </span><span style="color: #C678DD">where</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">name</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"linfeng"</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.95,words:886},y:"a",t:"InnoDB自适应哈希索引",i:"file",O:6},["/mysql/04 MYSQL索引/InnoDB自适应哈希索引.html","/mysql/04 MYSQL索引/InnoDB自适应哈希索引.md",":md"]],["v-08c9d541","/mysql/04%20MYSQL%E7%B4%A2%E5%BC%95/MySQL%E4%BC%98%E5%8C%96%E4%B9%8B%E6%85%A2%E6%97%A5%E5%BF%97%E6%9F%A5%E8%AF%A2.html",{c:["mysql"],g:["mysql日志"],e:`<h1> MySQL优化之慢日志查询</h1>
<p><u>对于SQL和索引的优化问题，我们会使用explain去分析SQL语句</u>。但是真正的企业级项目有，我们不可能从头开始一条一条explain去分析。我们从什么地方可以获取那些运行时间长，耗性能的SQL？？</p>
<p>我们可以打开<strong>慢查询日志</strong></p>
<h2> 慢查询使用方法</h2>
<p><u>根据<strong>具体的业务</strong>和<strong>并发量</strong>来，设置好后<strong>开启业务</strong>，压测后打开慢查询日志，就会看到超过执行时间的SQL，然后使用explain分析这些耗时的SQL语句</u></p>`,r:{minutes:3.74,words:1123},y:"a",t:"MySQL优化之慢日志查询",i:"file",O:8},["/mysql/04 MYSQL索引/MySQL优化之慢日志查询.html","/mysql/04 MYSQL索引/MySQL优化之慢日志查询.md",":md"]],["v-976bf48a","/mysql/04%20MYSQL%E7%B4%A2%E5%BC%95/MySQL%E7%B4%A2%E5%BC%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html",{c:["mysql"],g:["mysql索引"],e:`<h1> MySQL索引常见问题</h1>
<h2> 问题1：用联合索引优化using filesort</h2>
<figure><figcaption></figcaption></figure>
<p>首先，要给userid加索引（<strong>一般过滤条件的字段需要加索引</strong>），！</p>
<p>这样的话，<u>在二级索引树上用userid过滤出来的数据中，addtime就已经是有序的了</u></p>
<figure><figcaption></figcaption></figure>
。用userid<strong>选择出来的数据越多，耗费的排序性能差的越大</strong>`,r:{minutes:4.56,words:1369},y:"a",t:"MySQL索引常见问题",i:"file",O:7},["/mysql/04 MYSQL索引/MySQL索引常见问题.html","/mysql/04 MYSQL索引/MySQL索引常见问题.md",":md"]],["v-19f8f8e4","/mysql/04%20MYSQL%E7%B4%A2%E5%BC%95/%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95.html",{c:["mysql"],g:["mysql索引"],e:`<h1> 哈希索引</h1>
<h2> 查看索引类型</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #ABB2BF">show indexes </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> student;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:3.54,words:1063},y:"a",t:"哈希索引",i:"file",O:5},["/mysql/04 MYSQL索引/哈希索引.html","/mysql/04 MYSQL索引/哈希索引.md",":md"]],["v-4b2179bb","/mysql/04%20MYSQL%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95%E5%9F%BA%E7%A1%80.html",{c:["mysql"],g:["mysql索引"],e:`<h1> 索引基础</h1>
<h2> 索引是什么</h2>
<p>索引：是存储引擎提高查询的<strong>数据结构</strong></p>
<p>索引的核心/目的：<strong>提高查询的速度</strong></p>
<h2> 索引的好处和坏处</h2>
<p>当表中的数据量到达几十万甚至上百万的时候，SQL查询所花费的时间会很长，导致业务超时出错，此时就需要用索引来加速SQL查询。</p>
<p>由于索引也是需要存储成<strong>索引文件</strong>的，因此对索引的使用也会<strong>涉及。如果索引创建过多，使用不当，会造成SQL查询时，进行大量无用的磁盘I/O操作，降低了SQL的查询效率，适得其反</strong>，因此掌握良好的索引创建原则非常重要！</p>`,r:{minutes:3.44,words:1032},y:"a",t:"索引基础",i:"file",O:1},["/mysql/04 MYSQL索引/索引基础.html","/mysql/04 MYSQL索引/索引基础.md",":md"]],["v-4d1339f4","/mysql/04%20MYSQL%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E5%88%86%E6%9E%90.html",{c:["mysql"],g:["mysql索引"],e:`<h1> 索引的使用和分析</h1>
<h2> 索引的创建和删除</h2>
<p>创建表的时候指定索引字段，会自动给 primary key 和 unique 创建索引。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">CREATE</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">TABLE</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">index1</span><span style="color: #ABB2BF">(id </span><span style="color: #C678DD">INT</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  </span><span style="color: #C678DD">name</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">VARCHAR</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">20</span><span style="color: #ABB2BF">),</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  sex ENUM(</span><span style="color: #98C379">'male'</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'female'</span><span style="color: #ABB2BF">),</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  </span><span style="color: #C678DD">INDEX</span><span style="color: #ABB2BF"> (id)); #普通索引，单列索引</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  </span></span>
<span class="line"><span style="color: #C678DD">CREATE</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">TABLE</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">index1</span><span style="color: #ABB2BF">(id </span><span style="color: #C678DD">INT</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  </span><span style="color: #C678DD">name</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">VARCHAR</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">20</span><span style="color: #ABB2BF">),</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  sex ENUM(</span><span style="color: #98C379">'male'</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'female'</span><span style="color: #ABB2BF">),</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  </span><span style="color: #C678DD">INDEX</span><span style="color: #ABB2BF">(id, </span><span style="color: #C678DD">name</span><span style="color: #ABB2BF">));#普通索引，多列索引</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  </span></span>
<span class="line"><span style="color: #C678DD">CREATE</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">TABLE</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">index1</span><span style="color: #ABB2BF">(id </span><span style="color: #C678DD">INT</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  </span><span style="color: #C678DD">name</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">VARCHAR</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">20</span><span style="color: #ABB2BF">),</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  sex ENUM(</span><span style="color: #98C379">'male'</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'female'</span><span style="color: #ABB2BF">),</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  </span><span style="color: #C678DD">INDEX</span><span style="color: #ABB2BF">(id, </span><span style="color: #C678DD">name</span><span style="color: #ABB2BF">),</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">INDEX</span><span style="color: #ABB2BF">(sex));#创建多个索引</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  </span></span>
<span class="line"><span style="color: #C678DD">CREATE</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">TABLE</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">index1</span><span style="color: #ABB2BF">(id </span><span style="color: #C678DD">INT</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  </span><span style="color: #C678DD">name</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">VARCHAR</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">20</span><span style="color: #ABB2BF">),</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  sex ENUM(</span><span style="color: #98C379">'male'</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">'female'</span><span style="color: #ABB2BF">),</span></span>
<span class="line"><span style="color: #ABB2BF"> &nbsp; &nbsp; &nbsp;  </span><span style="color: #C678DD">INDEX</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'index_name'</span><span style="color: #ABB2BF"> (id)); #还可以自定义一个索引名</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.53,words:1359},y:"a",t:"索引的使用和分析",i:"file",O:2},["/mysql/04 MYSQL索引/索引的使用和分析.html","/mysql/04 MYSQL索引/索引的使用和分析.md",":md"]],["v-b30276bc","/mysql/04%20MYSQL%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html",{c:["mysql"],g:["mysql索引"],e:`<h1> 索引的底层实现原理</h1>
<p><mark>数据库索引是<strong>存储在磁盘上</strong>的，当数据量大时，就不能把整个索引全部加载到内存了，只能<strong>逐一加载每一个磁盘块（对应索引树的节点</strong>），<u>索引树越低，越“矮胖”，磁盘IO次数就少</u></mark></p>
<h2> AVL平衡二叉树索引</h2>
<figure><figcaption></figcaption></figure>
<p>不管是，增加，删除，还是等值查找，<strong>时间复杂度都是O(logn)</strong>，n 是数据页的数目。并且<strong>支持范围查找</strong>。</p>`,r:{minutes:7.02,words:2106},y:"a",t:"索引的底层实现原理",i:"file",O:3},["/mysql/04 MYSQL索引/索引的底层实现原理.html","/mysql/04 MYSQL索引/索引的底层实现原理.md",":md"]],["v-1776ebf2","/mysql/05%20MySQL%E4%BA%8B%E5%8A%A1/MySQL%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB.html",{c:["mysql"],g:["事务"],e:`<h1> MySQL事务的隔离级别</h1>
<h2> 隔离级别概念</h2>
<p>事务的隔离级别就是<strong>对事务并发的控制</strong></p>
<p>MySQL支持的四种隔离级别是：</p>
<ol>
<li>
<p><strong>TRANSACTION_READ_UNCOMMITTED：未提交读</strong>。说明在提交前事务A可以看到事务B的变化。这样，和都是可能发生的。</p>
</li>
<li>
<p><strong>TRANSACTION_READ_COMMITTED：已提交读（oracle默认）</strong>，说明读取未提交的数据是不允许的（防止脏读）。在这个级别和可能发生的。</p>
</li>
<li>
<p><strong>TRANSACTION_REPEATABLE_READ：可重复读（MySQL默认）</strong>，说明事务保证能够<u>再次读取相同的数据而不会失败，即使其他的事务把这个数据改了</u>，你也不会看到前后两次查询的数据的不同，<u>完全可以保证两次查询的结果是一样的</u>，但是仍然会出现。</p>
</li>
<li>
<p><strong>TRANSACTION_SERIALIZABLE：串行化</strong>，是最高的事务隔离级别，它防止脏读，不可重复读和幻读。串行执行，，一般不会用</p>
</li>
</ol>`,r:{minutes:4.44,words:1331},y:"a",t:"MySQL事务的隔离级别",i:"file",O:3},["/mysql/05 MySQL事务/MySQL事务的隔离级别.html","/mysql/05 MySQL事务/MySQL事务的隔离级别.md",":md"]],["v-51f2dcf6","/mysql/05%20MySQL%E4%BA%8B%E5%8A%A1/%E4%BA%8B%E5%8A%A1%E5%B9%B6%E5%8F%91%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98(%E8%84%8F%E8%AF%BB%E3%80%81%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB%E5%92%8C%E5%B9%BB%E8%AF%BB).html",{c:["mysql"],g:["事务"],e:`<h1> 事务并发存在的问题(脏读、不可重复读和幻读)</h1>
<p>事务处理如果，<strong>并发执行事务</strong>时通常会发生以下问题：</p>
<ul>
<li>
<p>脏读（Dirty Read）：。</p>
<ul>
<li>例如当事务A和事务B并发执行时，当事务A更新后，事务B查询读取到A尚未提交的数据，此时如果事务A rollback了，那事务B读到的数据就不是数据库所存放的数据了，而是无效的脏数据（<mark>脏读必须杜绝，因为事务没有commit</mark>；<u>而不可重复读和幻读不一定出问题，因为事务<strong>已经commit</strong></u>）</li>
</ul>
</li>
<li>
<p>不可重复读（NonRepeatable Read）：一个事务的操作导致另一个事务 。</p>
<ul>
<li>
<p>例如当事务A和事务B并发执行时，当事务B查询读取数据后，事务A 更改事务B查询到的数据，此时事务B再次去读该数据，发现前后两次读的数据不一样（事务B读取了事务A已commit的数据）</p>
</li>
<li>
</li>
</ul>
</li>
<li>
<p>幻读（Phantom Read）：一个事务的操作导致另一个事务前后。</p>
<ul>
<li>例如 当事务A和事务B并发执行时，当事务B查询读取数据后，事务A或者了一条满足事务B查询条件的记录，此时事务B再去查询，<u>发现查询到前一次不存在的记录，或者前一次查询的一些记录不见了</u>（事务B读取了事务A新增加的数据或者读到事务A删除的数据）</li>
</ul>
</li>
</ul>`,r:{minutes:3.88,words:1163},y:"a",t:"事务并发存在的问题(脏读、不可重复读和幻读)",i:"file",O:3},["/mysql/05 MySQL事务/事务并发存在的问题(脏读、不可重复读和幻读).html","/mysql/05 MySQL事务/事务并发存在的问题(脏读、不可重复读和幻读).md",":md"]],["v-0359a68f","/mysql/05%20MySQL%E4%BA%8B%E5%8A%A1/%E4%BA%8B%E5%8A%A1%E7%9A%84ACID%E7%89%B9%E6%80%A7.html",{c:["mysql"],g:["事务"],e:`<h1> 事务的ACID特性</h1>
<h2> ACID特性</h2>
<p>每一个事务必须满足下面的4个特性：</p>
<ul>
<li>
<p><strong>原子性（Atomic）</strong>：事务是一个不可分割的整体，事务必须具有原子特性。当修改数据时，<u>要么全执行，要么全不执行</u>，即不允许部分事务完成</p>
</li>
<li>
<p><strong>一致性（Consistency）</strong>：事务执行之前和执行之后，数据库<u><strong>数据</strong>必须保持一致性状态</u>。数据库的一致性状态必须由用户来负责，由<strong>并发</strong>控制机制实现。拿银行转账来说，只有让一个用户的余额减少，又让一个用户的余额增加才能构成一个完整的事务</p>
</li>
<li>
<p><strong>隔离性（Isolation）</strong>：当两个或者多个<strong>事务并发执行时</strong>，为了保证数据的安全性，将<u>一个事物内部的操作</u>与其它事务的操作隔离起来，<u>不被其它正在执行的事务所看到</u>，使得并发执行的各个事务之间不能互相影响。隔离级别：数据的安全性和事务的并发性。<u>隔离越严格，安全性越高，并发性越低</u>（就是并发控制，保证数据安全）</p>
</li>
<li>
<p><strong>持久性（Durability）</strong>：<u>事务完成（<strong>事务commit成功</strong>）以后</u>，DBMS保证它对数据库中的数据的修改是永久性的，<u>即使数据库因为故障出错，也应该能够恢复数据</u></p>
</li>
</ul>`,r:{minutes:2.84,words:853},y:"a",t:"事务的ACID特性",i:"file",O:2},["/mysql/05 MySQL事务/事务的ACID特性.html","/mysql/05 MySQL事务/事务的ACID特性.md",":md"]],["v-558f976c","/mysql/05%20MySQL%E4%BA%8B%E5%8A%A1/%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%A6%82%E5%BF%B5.html",{c:["mysql"],g:["事务"],e:`<h1> 事务的概念</h1>
<h2> 定义</h2>
<blockquote>
<p><strong>InnoDB支持事务，而MyISAM不支持事务</strong></p>
</blockquote>
<p>一个事务是由<u>一条或者多条对数据库操作的SQL语句</u>所组成的<strong>一个不可分割的单元</strong>，<u>只有当事务中的所有操作都正常执行完了，整个事务才会被提交给数据库；如果有部分事务处理失败，那么事务就要回退到最初的状态</u>，因此，<strong>事务要么全部执行成功，要么全部失败</strong>。</p>
<p>所以记住事务的几个基本概念，如下：</p>`,r:{minutes:2.42,words:726},y:"a",t:"事务的概念",i:"file",O:1},["/mysql/05 MySQL事务/事务的概念.html","/mysql/05 MySQL事务/事务的概念.md",":md"]],["v-3ef06b8b","/mysql/06%20MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/MySQL%20MVCC%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%88%E8%84%8F%E8%AF%BB%E5%92%8C%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB%E8%A7%A3%E5%86%B3%E5%8E%9F%E7%90%86%EF%BC%89.html",{c:["mysql"],g:["mysql MVCC","mysql日志"],e:`<h1> MySQL MVCC多版本并发控制（脏读和不可重复读解决原理）</h1>
<h2> 一、MVCC概念</h2>
<p>MVCC是多版本并发控制（Multi-Version Concurrency Control），<u>是MySQL中基于<strong>乐观锁</strong>理论实现隔离级别的方式，用于实现已提交读和可重复读隔离级别</u>，也经常称为多版本数据库。MVCC机制会生成一个数据请求时间点的一致性数据快照 （Snapshot)， 并用这个快照来提供一定级别 （语句级或事务级） 的一致性读取。从用户的角度来看，好象是数据库可以提供同一数据的多个版本（系统版本号和事务版本号）</p>`,r:{minutes:9.7,words:2910},y:"a",t:"MySQL MVCC多版本并发控制（脏读和不可重复读解决原理）",i:"file",O:5},["/mysql/06 MySQL的锁机制/MySQL MVCC多版本并发控制（脏读和不可重复读解决原理）.html","/mysql/06 MySQL的锁机制/MySQL MVCC多版本并发控制（脏读和不可重复读解决原理）.md",":md"]],["v-a01dbb18","/mysql/06%20MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/MySQL%20%E6%84%8F%E5%90%91%E5%85%B1%E4%BA%AB%E9%94%81%E3%80%81%E6%84%8F%E5%90%91%E6%8E%92%E4%BB%96%E9%94%81.html",{c:["mysql"],g:["mysql锁机制"],e:`<h1> MySQL 意向共享锁、意向排他锁</h1>
<p>![image-20240420193947369](MySQL 意向共享锁、意向排他锁.assets/image-20240420193947369.png)</p>
<h2> 一、InnoDB表级锁</h2>
<p>我们知道，InnoDB是支持行锁，但不是每次都获取行锁，如果不使用索引的，那还是获取的表锁。而且有的时候，我们希望直接去使用表锁</p>
<h3> 适合使用表索的情况</h3>
<p>在绝大部分情况下都应该使用行锁，因为事务的并发效率比表锁更高，但个别情况下也使用表级锁：</p>
<ul>
<li>
<p>事务需要<strong>更新大部分或全部数据，表又比较大</strong>，如果使用默认的行锁，给大部分行都加锁（此时不如直接加表锁），不仅这个事务执行效率低，而且可能造成其他事务长时间等待和锁冲突</p>
</li>
<li>
<p><strong>事务涉及多个表</strong>，比较复杂，如果都用行锁，很可能引起死锁，造成大量事务回滚</p>
</li>
</ul>`,r:{minutes:3.61,words:1083},y:"a",t:"MySQL意向共享锁、意向排他锁",i:"file",O:6},["/mysql/06 MySQL的锁机制/MySQL 意向共享锁、意向排他锁.html","/mysql/06 MySQL的锁机制/MySQL 意向共享锁、意向排他锁.md",":md"]],["v-329074fa","/mysql/06%20MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/MySQL%E5%9B%9E%E6%BB%9A%E6%97%A5%E5%BF%97undo%20log.html",{c:["mysql"],g:["mysql日志","mysql MVCC"],e:`<h1> MySQL回滚日志undo log</h1>
<h2> 一、引入 undo log</h2>
<p>![](MySQL回滚日志undo log.assets/image-20240420132938427.png)</p>
<p>一般数据库引擎默认工作在事务的中间两个隔离级别：</p>
<ol>
<li>TRANSACTION_READ_COMMITTED，已提交读，oracle默认工作级别。不允许读取未commit的数据，这个级别仍然允许不可重复读和幻读产生。</li>
<li>TRANSACTION_REPEATABLE_READ，可重复读，MySQL默认工作级别。保证事务再次读取是依然得到相同的数据，部分解决了幻读，但幻读是仍然会出现的</li>
</ol>`,r:{minutes:5.94,words:1783},y:"a",t:"MySQL回滚日志undo log",i:"file",O:4},["/mysql/06 MySQL的锁机制/MySQL回滚日志undo log.html","/mysql/06 MySQL的锁机制/MySQL回滚日志undo log.md",":md"]],["v-1029a01f","/mysql/06%20MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/MySQL%E9%97%B4%E9%9A%99%E9%94%81%EF%BC%88%E5%B9%BB%E8%AF%BB%E8%A7%A3%E5%86%B3%E5%8E%9F%E7%90%86%EF%BC%89.html",{c:["mysql"],g:["mysql锁机制"],e:`<h1> MySQL间隙锁（幻读解决原理）</h1>
<h2> 一、间隙锁概念</h2>
<ol>
<li>当我们用范围条件而不是相等条件检索数据， 并请求共享或排他锁时，InnoDB 会给符合条件的已有数据记录的索引项加锁；对于键值在条件范围内但并不存在的记录，叫做“间隙（GAP)” ，InnoDB 也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁</li>
<li>举例来说， 假如 user 表中只有 101 条记录， 其userid 的值分别是 1,2,…,100,101， 下面的 SQL： select * from user where userid &gt; 100 for update;是一个范围条件的检索，InnoDB 不仅会对符合条件的 userid 值为 101 的记录加锁，也会对userid 大 于 101（但是这些记录并不存在）的"间隙"加锁，防止其它事务在表的末尾增加数据</li>
<li>InnoDB <strong></strong> ，对于上面的例子，要是不使用间隙锁，如果其他事务插入了 userid 大于 100 的任何记录，那么本事务如果再次执行上述语句，就会发生幻读</li>
</ol>`,r:{minutes:7.82,words:2346},y:"a",t:"MySQL间隙锁（幻读解决原理）",i:"file",O:3},["/mysql/06 MySQL的锁机制/MySQL间隙锁（幻读解决原理）.html","/mysql/06 MySQL的锁机制/MySQL间隙锁（幻读解决原理）.md",":md"]],["v-664794b6","/mysql/06%20MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/%E6%8E%92%E5%AE%83%E9%94%81%E5%92%8C%E5%85%B1%E4%BA%AB%E9%94%81.html",{c:["mysql"],g:["mysql锁机制"],e:`<h1> 排它锁和共享锁</h1>
<p><strong>排它锁</strong>（Exclusive），又称为<strong>X锁，写锁</strong>
<strong>共享锁</strong>（Shared），又称为<strong>S锁，读锁</strong></p>
，但是<p>对事务加X和S锁之间有以下的关系：</p>
<ul>
<li>
<p>一个事务对数据对象A<strong>加了 S 锁</strong>，可以对A进行但，加锁期间但</p>
</li>
<li>
<p>一个事务对数据对象A<strong>加了 X 锁</strong>，就可以对A进行，加锁期间其它事务</p>
</li>
</ul>`,r:{minutes:5.11,words:1533},y:"a",t:"排它锁和共享锁",i:"file",O:2},["/mysql/06 MySQL的锁机制/排它锁和共享锁.html","/mysql/06 MySQL的锁机制/排它锁和共享锁.md",":md"]],["v-1743001b","/mysql/06%20MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/%E6%AD%BB%E9%94%81.html",{c:["mysql"],g:["mysql锁机制"],e:`<h1> 死锁</h1>
<h2> 数据库中的死锁</h2>
<p><strong>MyISAM 表锁是 deadlock free 的</strong>， 这是因为 MyISAM 不支持事务，<u>只支持表锁，而且总是一次获得所需的全部锁，要么全部满足，要么等待，因此不会出现死锁</u>。</p>
<figure><figcaption></figcaption></figure>
<p>在 InnoDB 中，除单个 SQL 组成的事务外，锁是逐步获得的，即锁的粒度比较小（行锁），这就决定了在 InnoDB 中发生死锁是可能的</p>
<p><strong>死锁问题一般都是我们自己的应用造成的，和多线程编程的死锁情况相似</strong>，大部分都是由于我们多个线程在获取多个锁资源的时候，<strong>获取的顺序不同而导致的死锁问题</strong>。因此我们应用在对数据库的多个表做更新的时候，不同的代码段，<strong>应对这些表按，以防止锁冲突导致死锁问题</strong></p>`,r:{minutes:2.64,words:791},y:"a",t:"死锁",i:"file",O:3},["/mysql/06 MySQL的锁机制/死锁.html","/mysql/06 MySQL的锁机制/死锁.md",":md"]],["v-25bb8896","/mysql/06%20MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/%E8%A1%A8%E7%BA%A7%E9%94%81%E5%92%8C%E8%A1%8C%E7%BA%A7%E9%94%81.html",{c:["mysql"],g:["mysql锁机制"],e:`<h1> 表级锁和行级锁</h1>
<p><strong>事务隔离级别的实现原理</strong>：简单来说就是<u>各种锁机制和MVCC</u>多版本并发控制</p>
<p>我们学习知识的时候，需要了解知识点出现的原因，什么情况下能用到这个知识</p>
<p>我们说到事务，就得说到事务的ACID特性，<u>为什么需要隔离性呢？因为事务要能够允许并发执行，并发执行为了同时保证数据的<strong>安全性，一致性</strong>和<strong>并发的效率</strong>，就需要设置事务的隔离级别</u></p>
<h2> 一、事务隔离机制的选择</h2>
<figure><figcaption>image-20240419183553280</figcaption></figure>`,r:{minutes:3.07,words:920},y:"a",t:"表级锁和行级锁",i:"file",O:1},["/mysql/06 MySQL的锁机制/表级锁和行级锁.html","/mysql/06 MySQL的锁机制/表级锁和行级锁.md",":md"]],["v-5dfb342e","/mysql/06%20MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/%E8%AE%B0%E5%BD%95%E9%94%81_%E9%97%B4%E9%9A%99%E9%94%81%E5%8F%AF%E4%BB%A5%E9%98%B2%E6%AD%A2%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C%E8%80%8C%E5%AF%BC%E8%87%B4%E7%9A%84%E5%B9%BB%E8%AF%BB%E5%90%97.html",{c:["mysql"],g:["mysql锁机制"],e:`<h1> 记录锁+间隙锁可以防止删除操作而导致的幻读吗？</h1>
<h2> MySQL 是怎么解决幻读的？</h2>
<p>MySQL InnoDB 引擎的默认隔离级别虽然是「可重复读」，但是它很大程度上避免幻读现象（并不是完全解决了），解决的方案有两种：</p>
<ul>
<li>针对<strong>快照读</strong>（普通 select 语句），是<strong>通过 MVCC 方式解决了幻读</strong>，<u>因为可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，即使中途有其他事务插入了一条数据，是查询不出来这条数据的，所以就很好了避免幻读问题。</u></li>
<li>针对<strong>当前读</strong>（select … for update 等语句），是<strong>通过 next-key lock（记录锁+间隙锁）方式解决了幻读</strong>，因为当执行 select … for update 语句的时候，会加上 next-key lock，<u>如果有其他事务在 next-key lock 锁范围内插入了一条记录，那么这个插入语句就会被阻塞，无法成功插入，所以就很好了避免幻读问题</u>。</li>
</ul>`,r:{minutes:3.57,words:1071},y:"a",t:"记录锁+间隙锁可以防止删除操作而导致的幻读吗？",i:"file",O:9},["/mysql/06 MySQL的锁机制/记录锁_间隙锁可以防止删除操作而导致的幻读吗.html","/mysql/06 MySQL的锁机制/记录锁+间隙锁可以防止删除操作而导致的幻读吗.html","/mysql/06%20MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/%E8%AE%B0%E5%BD%95%E9%94%81+%E9%97%B4%E9%9A%99%E9%94%81%E5%8F%AF%E4%BB%A5%E9%98%B2%E6%AD%A2%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C%E8%80%8C%E5%AF%BC%E8%87%B4%E7%9A%84%E5%B9%BB%E8%AF%BB%E5%90%97.html","/mysql/06 MySQL的锁机制/记录锁+间隙锁可以防止删除操作而导致的幻读吗.md","/mysql/06%20MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/%E8%AE%B0%E5%BD%95%E9%94%81+%E9%97%B4%E9%9A%99%E9%94%81%E5%8F%AF%E4%BB%A5%E9%98%B2%E6%AD%A2%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C%E8%80%8C%E5%AF%BC%E8%87%B4%E7%9A%84%E5%B9%BB%E8%AF%BB%E5%90%97.md"]],["v-416fc51c","/mysql/06%20MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/%E9%94%81%E7%9A%84%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE.html",{c:["mysql"],g:["mysql锁机制"],e:`<h1> 锁的优化建议</h1>
<ul>
<li>
<p>在能正确完成业务的前提下，为确保效率，<u>尽量使用较低的隔离级别（必须避免脏读）</u></p>
</li>
<li>
<p>设计合理的索引并**引访问数据，使加锁更准确，减少锁冲突的机会，提高并发能力**</p>
</li>
<li>
<p>选择合理的事务大小，<strong>发生锁冲突的概率小</strong>（<u>事务越大，包含的SQL越多，可能包含更多的表资源和行资源的锁，增大了锁冲突的概率</u>）</p>
</li>
<li>
<p>不同的程序访问一组表时，应尽量约定<strong>以相同的访问各表</strong>，对一个表而言，尽可能<strong>以固定的顺序存取表中的行</strong>。这样可以大大减少死锁的机会</p>
</li>
<li>
<p><strong>尽量用访问数据，这样可以避免对并发插入的影响</strong>（）</p>
</li>
<li>
<p><strong>不要申请超过实际需要的锁级别</strong></p>
</li>
<li>
<p><strong>除非必须，查询时不要显示加锁</strong>（）</p>
</li>
</ul>`,r:{minutes:1.31,words:392},y:"a",t:"锁的优化建议",i:"file",O:3},["/mysql/06 MySQL的锁机制/锁的优化建议.html","/mysql/06 MySQL的锁机制/锁的优化建议.md",":md"]],["v-167ae4a4","/mysql/07%20MySQL%E4%BC%98%E5%8C%96/sql%E4%BC%98%E5%8C%96.html",{c:["mysql"],g:["mysql优化"],e:`<h1> sql优化</h1>
<h2> 一、大批量插入数据</h2>
<p>当使用load 命令导入数据的时候，适当的设置可以提高导入的效率</p>
<figure><figcaption></figcaption></figure>
<h3> 1） 主键顺序插入</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">load</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">data</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">local</span><span style="color: #ABB2BF"> infile </span><span style="color: #98C379">'/root/data1.log'</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">into</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">table</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">\`tb_user\`</span><span style="color: #ABB2BF"> fields terminated </span><span style="color: #C678DD">by</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">','</span><span style="color: #ABB2BF"> lines terminated </span><span style="color: #C678DD">by</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'\\n'</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:4.41,words:1322},y:"a",t:"sql优化",i:"file",O:1},["/mysql/07 MySQL优化/sql优化.html","/mysql/07 MySQL优化/sql优化.md",":md"]],["v-fb0c9a20","/mysql/07%20MySQL%E4%BC%98%E5%8C%96/SQL%E5%92%8C%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93.html",{c:["mysql"],g:["mysql优化"],e:`<h1> SQL和索引优化总结</h1>
<p>首先我们需要知道MySQL主要是从以下3个方面进行优化：</p>
<ul>
<li>SQL语句和索引</li>
<li>应用优化（引入缓存、连接池）</li>
<li>配置参数优化</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 一、SQL语句和索引的优化</h2>
<p>当数据量比较大，若SQL语句写的不合适，会导致SQL的执行效率低，我们需要等待很长时间才能拿到结果</p>
<figure><figcaption></figcaption></figure>
<p>针对性优化的时候，</p>`,r:{minutes:7.05,words:2114},y:"a",t:"SQL和索引优化总结",i:"file",O:2},["/mysql/07 MySQL优化/SQL和索引优化总结.html","/mysql/07 MySQL优化/SQL和索引优化总结.md",":md"]],["v-403714d4","/mysql/08%20MySQL%E6%97%A5%E5%BF%97/MySQL%E9%87%8D%E5%81%9A%E6%97%A5%E5%BF%97redo%20log.html",{c:["mysql"],g:["mysql日志"],e:`<h1> MySQL重做日志redo log</h1>
<p>在事务的ACID特性中，原子性（A）、一致性（C）、持久性（D）由undo log和redo log实现，隔离性（I）由锁+MVCC实现</p>
<p><strong>undo log</strong>：<u>事务还没有commit，中途执行异常，可以使用undo log把数据恢复到事务执行前的状态，确保事务的原子性</u>
<strong>redo log</strong>：<u>事务commit成功，，此时若发生异常，就要使用redo log重新执行这一事务的SQL，<strong>确保事务的持久性</strong></u>（只要事务commit成功，不管发生什么异常事件，只要下一次MySQL服务正常进行，那上一次commit的数据一定要恢复回来）</p>`,r:{minutes:7.27,words:2180},y:"a",t:"MySQL重做日志redo log",i:"file",O:3},["/mysql/08 MySQL日志/MySQL重做日志redo log.html","/mysql/08 MySQL日志/MySQL重做日志redo log.md",":md"]],["v-f10dc5a4","/mysql/08%20MySQL%E6%97%A5%E5%BF%97/Server%20%E5%B1%82%E5%9B%9B%E4%B8%AA%E6%97%A5%E5%BF%97.html",{c:["mysql"],g:["mysql日志","数据备份"],e:`<h1> Server 层四个日志</h1>
<h2> 一、MySQL Server层日志简介</h2>
<p>一个mysql client发起一个连接请求，处理请求的过程如下图所示：</p>
<p>![](Server 层四个日志.assets/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQnVnTWFrZXItc2hlbg==,size_20,color_FFFFFF,t_70,g_se,x_16.png)</p>
<p>MySQL日志是在MySQL server上生成的，不管更改哪个存储引擎，这些日志都是需要有的，包括：</p>`,r:{minutes:9.03,words:2708},y:"a",t:"Server层四个日志",i:"file",O:3},["/mysql/08 MySQL日志/Server 层四个日志.html","/mysql/08 MySQL日志/Server 层四个日志.md",":md"]],["v-18b96408","/mysql/09%20%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/mysqldump%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD.html",{c:["mysql"],g:["数据备份"],e:`<h1> mysqldump数据备份</h1>
<p>在远程服务器，所以我们一般都是通过命令mysqldump进行备份</p>
<figure><figcaption></figcaption></figure>
<p>导出建库建表的SQL：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #61AFEF">mysqldump</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-u</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">用户名</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-p111111</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">--all-databases</span><span style="color: #ABB2BF"> &gt; </span><span style="color: #98C379">~/all.sql</span><span style="color: #ABB2BF">          </span><span style="color: #7F848E; font-style: italic"># 导出所有的库</span></span>
<span class="line"><span style="color: #61AFEF">mysqldump</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-u</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">用户名</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-p111111</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">--databases</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">school</span><span style="color: #ABB2BF"> &gt; </span><span style="color: #98C379">~/school.sql</span><span style="color: #ABB2BF">    </span><span style="color: #7F848E; font-style: italic"># 导出school库</span></span>
<span class="line"><span style="color: #61AFEF">mysqldump</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-u</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">用户名</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-p111111</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">--databases</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">db1</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">db2</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">db3</span><span style="color: #ABB2BF"> &gt; </span><span style="color: #98C379">~/dbs.sql</span><span style="color: #ABB2BF">    </span><span style="color: #7F848E; font-style: italic"># 导出多个库</span></span>
<span class="line"><span style="color: #61AFEF">mysqldump</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-u</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">用户名</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">-p111111</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">school</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">stu</span><span style="color: #ABB2BF"> &gt; </span><span style="color: #98C379">~/stu.sql</span><span style="color: #ABB2BF">               </span><span style="color: #7F848E; font-style: italic"># 导出school库下的stu表</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.91,words:573},y:"a",t:"mysqldump数据备份",i:"file",O:2},["/mysql/09 数据备份/mysqldump数据备份.html","/mysql/09 数据备份/mysqldump数据备份.md",":md"]],["v-125a45f0","/mysql/11%20%E6%8B%93%E5%B1%95/SQL%E7%9A%84%E5%AE%8C%E6%95%B4%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.html",{c:["mysql"],g:["mysql拓展"],e:`<h1> SQL的完整处理流程</h1>
<p>mysql client和 mysql server进行通信的时候，如果走完所有的MySQL Server模块，需要依次经过连接器、解析器、优化器、执行器、存储引擎</p>
<ol>
<li><strong>连接器</strong>：使用<strong>TCP加密的ssl通信协议</strong>，<u>管理连接，控制最大连接量，检测连接时长（长时间不通信会断开，释放连接资源），权限验证（账号密码等），查询缓存（两次同样的select之间有更新操作，缓存会清空）</u></li>
<li><strong>解析器</strong>：生成语法树，<u>解析SQL词法以及语法分</u>析</li>
<li><strong>优化器</strong>：<u>生成执行计划，选择索引</u>（explain可查看）</li>
<li><strong>执行器</strong>：<u>调用存储引擎提供的相应API接口进行数据的读写</u></li>
<li><strong>存储引擎</strong>：<u>读写磁盘数据，构建B+树索引，事务日志（undo log/redo log），锁机制，隔离级别…</u></li>
</ol>`,r:{minutes:1.48,words:445},y:"a",t:"SQL的完整处理流程",i:"file",O:1},["/mysql/11 拓展/SQL的完整处理流程.html","/mysql/11 拓展/SQL的完整处理流程.md",":md"]],["v-73d634fe","/mysql/11%20%E6%8B%93%E5%B1%95/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%AE%9E%E8%B7%B5.html",{c:["mysql"],g:["mysql拓展"],e:`<h1> 分库分表实践</h1>
<h2> 一、为什么要分库分表</h2>
<p>数据库架构演变</p>
<p>刚开始多数项目用单机数据库就够了，随着服务器流量越来越大，面对的请求也越来越多，我们做了数据库读写分离， 使用多个从库副本（Slave）负责读，使用主库（Master）负责写，master和slave通过主从复制实现数据同步更新，保持数据一致。slave 从库可以水平扩展，所以更多的读请求不成问题</p>
<p>但是当用户量级上升，写请求越来越多，怎么保证数据库的负载足够？增加一个Master是不能解决问题的， 因为数据要保存一致性，写操作需要2个master之间同步，相当于是重复了，而且架构设计更加复杂</p>`,r:{minutes:7.13,words:2138},y:"a",t:"分库分表实践",i:"file",O:2},["/mysql/11 拓展/分库分表实践.html","/mysql/11 拓展/分库分表实践.md",":md"]],["v-4dda2b40","/mysql/10%20MySQL%E9%9B%86%E7%BE%A4/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86.html",{c:["mysql"],g:["mysql集群"],e:`<h1> 主从复制原理</h1>
<p>在实际生产环境中，<u>如果对MySQL数据库的读和写都在一台数据库服务器中操作，无论是在安全性、高可用性，还是高并发等各个方面都是不能满足实际需求的，一般要通过数据库集群的<strong>主从复制机制来数据</strong>，再通过<strong>读写分离来提升数据库的负载能力</strong></u></p>
<h2> 主从复制概念</h2>
<p><strong>主库对外提供数据的增删改查服务，主库中涉及到数据的修改都会写binlog</strong></p>
<p>从库用来数据的同步和备份，，<strong>相当于就是主库的所有修改通过主从复制机制体现在从库上</strong></p>`,r:{minutes:5.02,words:1506},y:"a",t:"主从复制原理",i:"file",O:1},["/mysql/10 MySQL集群/主从复制原理.html","/mysql/10 MySQL集群/主从复制原理.md",":md"]],["v-1015e72b","/mysql/10%20MySQL%E9%9B%86%E7%BE%A4/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E5%8E%9F%E7%90%86.html",{c:["mysql"],g:["mysql集群"],e:`<h1> 读写分离原理</h1>
<h2> 读写分离概念</h2>
<p>基于主从复制的读写分离，是我们在单机环境下，数据库的性能到瓶颈了，可以通过读写分离，提高后台服务性能。存储这一块的增删改查的并发的处理能力，<strong>主库专门负责相对少的写操作，从库专门负责相对多的读操作，主库的数据更改通过主从复制同步到从库</strong></p>
<p>读写分离就是在主服务器上修改，数据会同步到从服务器，从服务器只能提供读取数据，不能写入，实现备份的同时也实现了数据库性能的优化，以及提升了服务器安全</p>
<figure><figcaption></figcaption></figure>
`,r:{minutes:3.95,words:1184},y:"a",t:"读写分离原理",i:"file",O:3},["/mysql/10 MySQL集群/读写分离原理.html","/mysql/10 MySQL集群/读写分离原理.md",":md"]],["v-afe3b5ec","/mysql/10%20MySQL%E9%9B%86%E7%BE%A4/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E9%85%8D%E7%BD%AE%E5%AE%9E%E8%B7%B5.html",{c:["mysql"],g:["mysql集群"],e:`<h1> 读写分离配置实践</h1>
<h2> 一、环境准备</h2>
<p>master（虚拟机centos7，NAT模式，固定ip）：192.168.131.129
slave（win10，路由器局域网，DHCP协议）：192.168.31.27</p>
<p>由于MyCat是用Java写的，需要JDK1.7版本以上
MySQL的root账户有远程访问权限</p>
<h3> 1.查看主从复制状态</h3>
<p>读写分离基于主从复制，查看主从复制状态</p>
<figure><figcaption></figcaption></figure>
<h3> 2. 查看JDK版本</h3>
<div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #abb2bf">java -version</span></span>
<span class="line"><span style="color: #abb2bf"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,r:{minutes:9.85,words:2955},y:"a",t:"读写分离配置实践",i:"file",O:3},["/mysql/10 MySQL集群/读写分离配置实践.html","/mysql/10 MySQL集群/读写分离配置实践.md",":md"]],["v-ab0fa402","/mysql/10%20MySQL%E9%9B%86%E7%BE%A4/%E9%85%8D%E7%BD%AE%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%AE%9E%E8%B7%B5.html",{c:["mysql"],g:["mysql集群"],e:`<h1> 配置主从复制实践</h1>
<h2> 一、检测通信</h2>
<p>查看master（centos7）和slave（win10）的ip地址，并检测是否可以相互通信</p>
<blockquote>
<p>我自己用的是ubuntu 18.04(192.168.216.135)和ubuntu 22.04(192.168.216.136)</p>
</blockquote>
<figure><figcaption></figcaption></figure>
<p>到这里我们知道，master的ip为192.168.131.129，slave的ip为192.168.0.6，并且可以相互通信</p>`,r:{minutes:8.47,words:2540},y:"a",t:"配置主从复制实践",i:"file",O:2},["/mysql/10 MySQL集群/配置主从复制实践.html","/mysql/10 MySQL集群/配置主从复制实践.md",":md"]],["v-fb24ca0e","/mysql/12%20%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E9%A1%B9.html",{c:["mysql"],g:["mysql连接池"],e:`<h1> 加载配置项</h1>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#ifndef</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_CONNECTIONPOOL_H</span></span>
<span class="line"><span style="color: #C678DD">#define</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_CONNECTIONPOOL_H</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;string&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;queue&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;mutex&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;atomic&gt;</span><span style="color: #ABB2BF">   </span><span style="color: #7F848E; font-style: italic">//atomic_int  原子类型</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"connection.h"</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::string;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::queue;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::mutex;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ConnectionPool</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">static</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ConnectionPool</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getConnectionPool</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">ConnectionPool</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">~ConnectionPool</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #C678DD">public:</span><span style="color: #7F848E; font-style: italic"> //测试的时候可以先变成共有的</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">loadConfigFile</span><span style="color: #ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">	string _ip;</span><span style="color: #7F848E; font-style: italic"> // mysql的ip地址</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">unsigned</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">short</span><span style="color: #ABB2BF"> _port;</span><span style="color: #7F848E; font-style: italic"> // mysql的端口号 3306</span></span>
<span class="line"><span style="color: #ABB2BF">	string _username;</span><span style="color: #7F848E; font-style: italic"> // mysql登录用户名</span></span>
<span class="line"><span style="color: #ABB2BF">	string _password;</span><span style="color: #7F848E; font-style: italic"> // mysql登录密码</span></span>
<span class="line"><span style="color: #ABB2BF">	string _dbname;</span><span style="color: #7F848E; font-style: italic"> // 连接的数据库名称</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _initSize;</span><span style="color: #7F848E; font-style: italic"> // 连接池的初始连接量</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _maxSize;</span><span style="color: #7F848E; font-style: italic"> // 连接池的最大连接量</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _maxIdleTime;</span><span style="color: #7F848E; font-style: italic"> // 连接池最大空闲时间</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _connectionTimeout;</span><span style="color: #7F848E; font-style: italic"> // 连接池获取连接的超时时间</span></span>
<span class="line"><span style="color: #ABB2BF">    </span></span>
<span class="line"><span style="color: #ABB2BF">    queue</span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF">Connection</span><span style="color: #56B6C2">*</span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> _connectionQue;</span><span style="color: #7F848E; font-style: italic">  // 存储mysql连接的队列</span></span>
<span class="line"><span style="color: #ABB2BF">    mutex _queueMutex;</span><span style="color: #7F848E; font-style: italic">  // 维护连接队列的线程安全互斥锁</span></span>
<span class="line"><span style="color: #ABB2BF">    std::atomic_int _connectionCnt;</span><span style="color: #7F848E; font-style: italic"> // 记录连接所创建的connection连接的总数量 </span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#endif</span><span style="color: #7F848E; font-style: italic"> //_CONNECTIONPOOL_H</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.07,words:621},y:"a",t:"加载配置项",i:"file",O:4},["/mysql/12 连接池/加载配置项.html","/mysql/12 连接池/加载配置项.md",":md"]],["v-379adba2","/mysql/12%20%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95.html",{c:["mysql"],g:["mysql连接池"],e:`<h1> 连接池压力测试</h1>
<h2> 连接池代码</h2>
<h3> <code>mysql.cnf</code>配置文件</h3>
<div class="language-ini line-numbers-mode" data-ext="ini"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">#数据库连接池的配置文件，下面和宏一样就不要加多余的空格了</span></span>
<span class="line"><span style="color: #C678DD">ip</span><span style="color: #ABB2BF">=</span><span style="color: #98C379">127.0.0.1</span></span>
<span class="line"><span style="color: #C678DD">port</span><span style="color: #ABB2BF">=</span><span style="color: #98C379">3306</span></span>
<span class="line"><span style="color: #C678DD">username</span><span style="color: #ABB2BF">=</span><span style="color: #98C379">root</span></span>
<span class="line"><span style="color: #C678DD">password</span><span style="color: #ABB2BF">=</span><span style="color: #98C379">147258</span></span>
<span class="line"><span style="color: #C678DD">dbname</span><span style="color: #ABB2BF">=</span><span style="color: #98C379">chat</span></span>
<span class="line"><span style="color: #C678DD">initSize</span><span style="color: #ABB2BF">=</span><span style="color: #98C379">10</span></span>
<span class="line"><span style="color: #C678DD">maxSize</span><span style="color: #ABB2BF">=</span><span style="color: #98C379">1024</span></span>
<span class="line"><span style="color: #98C379">// 连接池最大空闲时间默认单位是秒</span></span>
<span class="line"><span style="color: #C678DD">maxIdleTime</span><span style="color: #ABB2BF">=</span><span style="color: #98C379">60</span></span>
<span class="line"><span style="color: #98C379">// 连接池获取连接的超时时间单位是毫秒</span></span>
<span class="line"><span style="color: #C678DD">connectionTimeOut</span><span style="color: #ABB2BF">=</span><span style="color: #98C379">100</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:6.41,words:1922},y:"a",t:"连接池压力测试",i:"file",O:8},["/mysql/12 连接池/压力测试.html","/mysql/12 连接池/压力测试.md",":md"]],["v-2247d511","/mysql/12%20%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B%E9%83%A8%E5%88%86%E5%AE%9E%E7%8E%B0.html",{c:["mysql"],g:["mysql连接池"],e:`<h1> 数据库编程部分的实现</h1>
<h2> 在VS上使用MySQL的头文件和库文件的配置</h2>
<ol>
<li>
<p>右键项目 - C/C++ - 常规 - 附加包含目录，填写mysql.h头文件的路径</p>
</li>
<li>
<p>右键项目 - 链接器 - 常规 - 附加库目录，填写libmysql.lib的路径</p>
</li>
<li>
<p>右键项目 - 链接器 - 输入 - 附加依赖项，填写libmysql.lib库的名字</p>
</li>
<li>
<p>把libmysql.dll动态链接库（Linux下后缀名是.so库）放在工程目录下</p>
</li>
</ol>`,r:{minutes:1.7,words:511},y:"a",t:"数据库编程部分的实现",i:"file",O:2},["/mysql/12 连接池/数据库编程部分实现.html","/mysql/12 连接池/数据库编程部分实现.md",":md"]],["v-874c376e","/mysql/12%20%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E6%9C%80%E5%A4%A7%E7%A9%BA%E9%97%B2%E6%97%B6%E9%97%B4%E5%9B%9E%E6%94%B6%E8%BF%9E%E6%8E%A5%E6%89%AB%E6%8F%8F%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0.html",{c:["mysql"],g:["mysql连接池"],e:`<h1> 最大空闲时间回收连接扫描线程的实现</h1>
<p>给对象添加一个属性-记录时间</p>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">/*</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic"> * 实现MySQL数据库的操作</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#ifndef</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_CONNECTION_H</span></span>
<span class="line"><span style="color: #C678DD">#define</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_CONNECTION_H</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;string&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;mysql/mysql.h&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;ctime&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::string;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Connection</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	// 刷新一下连接的起始的空闲时间点</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">refreshAliveTime</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">        _aliveTime </span><span style="color: #C678DD">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">clock</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	// 返回存活的时间</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">clock_t</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getAliveTime</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">clock</span><span style="color: #ABB2BF">() </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> _aliveTime;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">    MYSQL</span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> _conn;</span><span style="color: #7F848E; font-style: italic">    //表示和MySQL的一条连接</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">clock_t</span><span style="color: #ABB2BF"> _aliveTime;</span><span style="color: #7F848E; font-style: italic"> // 记录进入空闲状态后的起始存活时间</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#endif</span><span style="color: #7F848E; font-style: italic">  // _CONNECTION_H</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.03,words:1208},y:"a",t:"最大空闲时间回收连接扫描线程的实现",i:"file",O:3},["/mysql/12 连接池/最大空闲时间回收连接扫描线程的实现.html","/mysql/12 连接池/最大空闲时间回收连接扫描线程的实现.md",":md"]],["v-5e84d900","/mysql/12%20%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E6%A6%82%E8%BF%B0.html",{c:["mysql"],g:["mysql连接池"],e:`<h1> 概述</h1>
<h2> 关键技术点</h2>
<p>MySQL数据库编程、单例模式、queue队列容器、C++11多线程编程、线程互斥、线程同步通信和
unique_lock、基于CAS的原子整形、智能指针shared_ptr、lambda表达式、生产者-消费者线程模型</p>
<h2> 项目背景</h2>
<p><u>索引和数据都是存储在磁盘</u>上，提高MySQL数据库（<u>基于C/S设计，服务器应用相当于MySQL Client，通过既定的API将SQL语句发送给MySQL Server，然后执行处理流程CRUD,然后再通过结果返回给服务器应用</u>）的访问瓶颈：</p>`,r:{minutes:4.87,words:1461},y:"a",t:"概述",i:"file",O:1},["/mysql/12 连接池/概述.html","/mysql/12 连接池/概述.md",":md"]],["v-51fa1311","/mysql/12%20%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E6%B6%88%E8%B4%B9%E8%80%85%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0.html",{c:["mysql"],g:["mysql连接池"],e:`<h1> 消费者线程的实现</h1>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">//消费者线程函数，从队列中获取连接</span></span>
<span class="line"><span style="color: #E5C07B">shared_ptr</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">Connection</span><span style="color: #ABB2BF">&gt; </span><span style="color: #E5C07B">ConnectionPool</span><span style="color: #ABB2BF">::</span><span style="color: #61AFEF">getConnection</span><span style="color: #ABB2BF">() {</span></span>
<span class="line"><span style="color: #ABB2BF">    unique_lock</span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF">mutex</span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">lock</span><span style="color: #ABB2BF">(_queueMutex);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">_connectionQue</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">()) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">cond</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">wait_for</span><span style="color: #ABB2BF">(lock, std::</span><span style="color: #E5C07B">chrono</span><span style="color: #ABB2BF">::</span><span style="color: #61AFEF">milliseconds</span><span style="color: #ABB2BF">(_connectionTimeout));</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">_connectionQue</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">()) {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #61AFEF">LOG</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">"获取空闲连接超时了...获取连接失败!"</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">nullptr</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        } </span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span></span>
<span class="line"><span style="color: #ABB2BF">    shared_ptr</span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF">Connection</span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">sp</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">_connectionQue</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">front</span><span style="color: #ABB2BF">());</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">_connectionQue</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">pop</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">_connectionQue</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">empty</span><span style="color: #ABB2BF">()) {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">cond</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">notify_all</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.98,words:593},y:"a",t:"消费者线程的实现",i:"file",O:6},["/mysql/12 连接池/消费者线程的实现.html","/mysql/12 连接池/消费者线程的实现.md",":md"]],["v-47e7636c","/mysql/12%20%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E7%94%9F%E4%BA%A7%E8%80%85%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0.html",{c:["mysql"],g:["mysql连接池"],e:`<h1> 生产者线程的实现</h1>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">#ifndef</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_CONNECTIONPOOL_H</span></span>
<span class="line"><span style="color: #C678DD">#define</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">_CONNECTIONPOOL_H</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;string&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;queue&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;mutex&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;atomic&gt;</span><span style="color: #ABB2BF">   </span><span style="color: #7F848E; font-style: italic">//atomic_int  原子类型</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;memory&gt;</span><span style="color: #ABB2BF">	</span><span style="color: #7F848E; font-style: italic">//shared_ptr</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;thread&gt;</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;condition_variable&gt;</span><span style="color: #ABB2BF">	</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&lt;functional&gt;</span><span style="color: #ABB2BF">	</span><span style="color: #7F848E; font-style: italic">//bind</span></span>
<span class="line"><span style="color: #C678DD">#include</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"connection.h"</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::string;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::queue;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::mutex;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::thread;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::atomic_int;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::shared_ptr;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::bind;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::condition_variable;</span></span>
<span class="line"><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> std::unique_lock;</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ConnectionPool</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	// 获取连接池对象实例</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">static</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ConnectionPool</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getConnectionPool</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	// 给外部提供接口，从连接池中获取一个可用的空闲连接</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">shared_ptr</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">Connection</span><span style="color: #ABB2BF">&gt; </span><span style="color: #61AFEF">getConnection</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">ConnectionPool</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">~ConnectionPool</span><span style="color: #ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#ifdef</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">TEST_LOAD_CONFIG_FILE</span></span>
<span class="line"><span style="color: #C678DD">public:</span><span style="color: #7F848E; font-style: italic"> //测试的时候可以先变成共有的</span></span>
<span class="line"><span style="color: #C678DD">#endif</span><span style="color: #7F848E; font-style: italic">	//TEST_LOAD_CONFIG_FILE</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">loadConfigFile</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">	</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	// 运行在独立的线程中，专门负责生产新连接</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">	//之所以写成成员函数而不是全局函数，是因为可以更好访问成员变量</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">produceConnectionTask</span><span style="color: #ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">	string _ip;</span><span style="color: #7F848E; font-style: italic"> // mysql的ip地址</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">unsigned</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">short</span><span style="color: #ABB2BF"> _port;</span><span style="color: #7F848E; font-style: italic"> // mysql的端口号 3306</span></span>
<span class="line"><span style="color: #ABB2BF">	string _username;</span><span style="color: #7F848E; font-style: italic"> // mysql登录用户名</span></span>
<span class="line"><span style="color: #ABB2BF">	string _password;</span><span style="color: #7F848E; font-style: italic"> // mysql登录密码</span></span>
<span class="line"><span style="color: #ABB2BF">	string _dbname;</span><span style="color: #7F848E; font-style: italic"> // 连接的数据库名称</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _initSize;</span><span style="color: #7F848E; font-style: italic"> // 连接池的初始连接量</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _maxSize;</span><span style="color: #7F848E; font-style: italic"> // 连接池的最大连接量</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _maxIdleTime;</span><span style="color: #7F848E; font-style: italic"> // 连接池最大空闲时间</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> _connectionTimeout;</span><span style="color: #7F848E; font-style: italic"> // 连接池获取连接的超时时间</span></span>
<span class="line"><span style="color: #ABB2BF">    </span></span>
<span class="line"><span style="color: #ABB2BF">    queue</span><span style="color: #C678DD">&lt;</span><span style="color: #ABB2BF">Connection</span><span style="color: #56B6C2">*</span><span style="color: #C678DD">&gt;</span><span style="color: #ABB2BF"> _connectionQue;</span><span style="color: #7F848E; font-style: italic">  // 存储mysql连接的队列</span></span>
<span class="line"><span style="color: #ABB2BF">    mutex _queueMutex;</span><span style="color: #7F848E; font-style: italic">  // 维护连接队列的线程安全互斥锁</span></span>
<span class="line"><span style="color: #ABB2BF">    atomic_int _connectionCnt;</span><span style="color: #7F848E; font-style: italic"> // 记录连接所创建的connection连接的总数量 </span></span>
<span class="line"><span style="color: #ABB2BF">	condition_variable cond;</span><span style="color: #7F848E; font-style: italic">	// 设置条件变量，用于连接生产线程和连接消费线程的通信</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">#endif</span><span style="color: #7F848E; font-style: italic"> //_CONNECTIONPOOL_H</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3,words:899},y:"a",t:"生产者线程的实现",i:"file",O:5},["/mysql/12 连接池/生产者线程的实现.html","/mysql/12 连接池/生产者线程的实现.md",":md"]],["v-f00ce0e0","/mysql/12%20%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5.html",{c:["mysql"],g:["mysql连接池"],e:`<h1> 连接池单例模式实践</h1>
<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">//饿汉式 线程安全的单例</span></span>
<span class="line"><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ConnectionPool</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #C678DD">public:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">static</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ConnectionPool</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">getConnectionPool</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #C678DD">private:</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">ConnectionPool</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">~ConnectionPool</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 线程安全的懒汉单例函数接口</span></span>
<span class="line"><span style="color: #E5C07B">ConnectionPool</span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ConnectionPool</span><span style="color: #ABB2BF">::</span><span style="color: #61AFEF">getConnectionPool</span><span style="color: #ABB2BF">() {</span><span style="color: #7F848E; font-style: italic"> //静态函数的实现，不写static</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">static</span><span style="color: #ABB2BF"> ConnectionPool pool;</span><span style="color: #7F848E; font-style: italic"> //静态局部变量的初始化，编译器会生成lock和unlock</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&amp;</span><span style="color: #ABB2BF">pool;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.83,words:1149},y:"a",t:"连接池单例模式实践",i:"file",O:3},["/mysql/12 连接池/连接池单例模式实践.html","/mysql/12 连接池/连接池单例模式实践.md",":md"]],["v-6dabb7d0","/network/%E5%BA%8F%E5%88%97%E5%8C%96/Json%E7%AE%80%E4%BB%8B%E5%8F%8A%E4%BD%BF%E7%94%A8.html",{c:["network"],g:["数据序列化"],e:`<h1> Json简介及使用</h1>
<h2> 一、Json简介</h2>
<p><strong></strong>：<strong>是一种轻量级的)，采用完全<u>独立于编程语言的来存储和表示数据</u>。 简洁和清晰的层次结构使得 Json 成为理想的数据交换语言，易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率</strong>。</p>
<p>例如：聊天软件的业务，消息种类分为很多种，例如：登录消息、注册消息、聊天消息、加好友消息等等，<strong></strong>。而<u>网络中TCP传输数据时为字节流，因此我们需要数据序列化将其转为字节流发送到对端主机，对端主机读取字节流上报应用服务，再将数据反序列化出来解析使用</u>。</p>`,r:{minutes:5.88,words:1765},y:"a",t:"Json简介及使用",i:"file",O:1},["/network/序列化/Json简介及使用.html","/network/序列化/Json简介及使用.md",":md"]],["v-5dfb637b","/network/%E5%BA%8F%E5%88%97%E5%8C%96/Protobuf%E7%AE%80%E4%BB%8B%E5%8F%8A%E4%BD%BF%E7%94%A8.html",{c:["network"],g:["Protobuf简介及使用"],e:`<h1> Protobuf简介及使用</h1>
<h2> 一、Protobuf简介</h2>
<p><strong>Protobuf(protocol buffer)：是google 的一种数据交换的格式，它独立于平台语言</strong>。 google 提供了protobuf多种语言的实现：<u>java、c#、c++、go 和 python，每一种实现都包含了相应语言的编译器以及库文件</u>。<strong>它是一种，网络传输时，而且它，比使用xml、json进行数据交换许多，用protobuf序列化后的大是json的10分之一，xml格式的20分之一，是二进制序列化的10分之一</strong>。 可以把它用于分布式应用之间的数据通信或者异构环境下的数据交换。作为一种效率和兼容性都很优秀的二进制数据传输格式，可以<u>用于诸如网络传输、配置文件、数据存储等诸多领域。</u></p>`,r:{minutes:2.93,words:879},y:"a",t:"Protobuf简介及使用",i:"file",O:3},["/network/序列化/Protobuf简介及使用.html","/network/序列化/Protobuf简介及使用.md",":md"]],["v-3706649a","/404.html",{y:"p",t:""},[]],["v-430f9745","/algo/01%20%E6%95%B0%E7%BB%84/",{y:"p",t:"01 数组"},["/algo/01 数组/"]],["v-5782c814","/algo/02%20%E9%93%BE%E8%A1%A8/",{y:"p",t:"02 链表"},["/algo/02 链表/"]],["v-7d94f39a","/algo/03%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/",{y:"p",t:"03 哈希算法"},["/algo/03 哈希算法/"]],["v-25ac69a1","/algo/04%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",{y:"p",t:"04 排序算法"},["/algo/04 排序算法/"]],["v-a38f78a4","/algo/%E5%A0%86/",{y:"p",t:"堆"},["/algo/堆/"]],["v-161970cb","/algo/%E6%A0%88/",{y:"p",t:"栈"},["/algo/栈/"]],["v-4086f3eb","/algo/%E9%98%9F/",{y:"p",t:"队"},["/algo/队/"]],["v-18808a57","/ccpp/00%20%E5%9F%BA%E7%A1%80%E5%BF%85%E5%A4%87/",{y:"p",t:"00 基础必备"},["/ccpp/00 基础必备/"]],["v-39d32ddd","/ccpp/01%20c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/",{y:"p",t:"01 C语言基础"},["/ccpp/01 c语言基础/"]],["v-0d4e4374","/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/",{y:"p",t:"03 类和对象"},["/ccpp/03 类和对象/"]],["v-18205b42","/ccpp/02%20c__%E5%9F%BA%E7%A1%80/",{y:"p",t:"02 C 基础"},["/ccpp/02 c__基础/"]],["v-718e2d40","/linux/01%20%E5%B7%A5%E5%85%B7%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/",{y:"p",t:"01 工具和基本命令"},["/linux/01 工具和基本命令/"]],["v-1e2d2742","/linux/02%20vim/",{y:"p",t:"02 Vim"},["/linux/02 vim/"]],["v-14d4901c","/linux/03%20%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/",{y:"p",t:"03 编译工具"},["/linux/03 编译工具/"]],["v-6efd5e40","/linux/04%20%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/",{y:"p",t:"04 文件操作"},["/linux/04 文件操作/"]],["v-3899b171","/mysql/01%20MySQL%E5%9F%BA%E7%A1%80/",{y:"p",t:"01 My S Q L基础"},["/mysql/01 MySQL基础/"]],["v-5157b212","/mysql/02%20MySQL%E6%A0%B8%E5%BF%83SQL/",{y:"p",t:"02 My S Q L核心 S Q L"},["/mysql/02 MySQL核心SQL/"]],["v-266f8726","/mysql/03%20MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/",{y:"p",t:"03 My S Q L存储引擎"},["/mysql/03 MySQL存储引擎/"]],["v-1f23f62c","/mysql/04%20MYSQL%E7%B4%A2%E5%BC%95/",{y:"p",t:"04 M Y S Q L索引"},["/mysql/04 MYSQL索引/"]],["v-5764c670","/mysql/05%20MySQL%E4%BA%8B%E5%8A%A1/",{y:"p",t:"05 My S Q L事务"},["/mysql/05 MySQL事务/"]],["v-ed8603cc","/mysql/06%20MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/",{y:"p",t:"06 My S Q L的锁机制"},["/mysql/06 MySQL的锁机制/"]],["v-9eec0ba4","/mysql/07%20MySQL%E4%BC%98%E5%8C%96/",{y:"p",t:"07 My S Q L优化"},["/mysql/07 MySQL优化/"]],["v-13ac5d5f","/mysql/08%20MySQL%E6%97%A5%E5%BF%97/",{y:"p",t:"08 My S Q L日志"},["/mysql/08 MySQL日志/"]],["v-44e73480","/mysql/09%20%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/",{y:"p",t:"09 数据备份"},["/mysql/09 数据备份/"]],["v-42abb996","/mysql/11%20%E6%8B%93%E5%B1%95/",{y:"p",t:"11 拓展"},["/mysql/11 拓展/"]],["v-7c538d12","/mysql/10%20MySQL%E9%9B%86%E7%BE%A4/",{y:"p",t:"10 My S Q L集群"},["/mysql/10 MySQL集群/"]],["v-8f661f1c","/mysql/12%20%E8%BF%9E%E6%8E%A5%E6%B1%A0/",{y:"p",t:"12 连接池"},["/mysql/12 连接池/"]],["v-706b751e","/network/%E5%BA%8F%E5%88%97%E5%8C%96/",{y:"p",t:"序列化"},["/network/序列化/"]],["v-5bc93818","/category/",{y:"p",t:"分类",I:!1},[]],["v-744d024e","/tag/",{y:"p",t:"标签",I:!1},[]],["v-e52c881c","/article/",{y:"p",t:"文章",I:!1},[]],["v-154dc4c4","/star/",{y:"p",t:"星标",I:!1},[]],["v-01560935","/timeline/",{y:"p",t:"时间轴",I:!1},[]],["v-03d57386","/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{y:"p",t:"使用指南 分类",I:!1},["/category/使用指南/"]],["v-a378ad66","/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/",{y:"p",t:"标签: 页面配置",I:!1},["/tag/页面配置/"]],["v-5c5af6a7","/category/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/",{y:"p",t:"数据结构与算法 分类",I:!1},["/category/数据结构与算法/"]],["v-7b167472","/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{y:"p",t:"标签: 使用指南",I:!1},["/tag/使用指南/"]],["v-57cf9ed7","/category/cc__/",{y:"p",t:"c/c++ 分类",I:!1},[]],["v-f64eddd4","/tag/%E6%95%B0%E7%BB%84/",{y:"p",t:"标签: 数组",I:!1},["/tag/数组/"]],["v-9c48d85a","/category/linux/",{y:"p",t:"linux 分类",I:!1},[]],["v-0b674df5","/tag/%E5%8F%8C%E6%8C%87%E9%92%88/",{y:"p",t:"标签: 双指针",I:!1},["/tag/双指针/"]],["v-5a1c7f10","/category/ubuntu/",{y:"p",t:"ubuntu 分类",I:!1},[]],["v-93cb9d6e","/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2/",{y:"p",t:"标签: 字符串",I:!1},["/tag/字符串/"]],["v-9717cc36","/category/mysql/",{y:"p",t:"mysql 分类",I:!1},[]],["v-cf2ceaf0","/tag/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/",{y:"p",t:"标签: 滑动窗口",I:!1},["/tag/滑动窗口/"]],["v-a074e84e","/category/network/",{y:"p",t:"network 分类",I:!1},[]],["v-11d405d3","/tag/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/",{y:"p",t:"标签: 二分查找",I:!1},["/tag/二分查找/"]],["v-0440a8b6","/tag/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",{y:"p",t:"标签: 基础知识",I:!1},["/tag/基础知识/"]],["v-0b4e059c","/tag/%E5%93%88%E5%B8%8C/",{y:"p",t:"标签: 哈希",I:!1},["/tag/哈希/"]],["v-4f1a28a4","/tag/%E9%93%BE%E8%A1%A8/",{y:"p",t:"标签: 链表",I:!1},["/tag/链表/"]],["v-576828c2","/tag/%E8%99%9A%E6%8B%9F%E5%A4%B4%E7%BB%93%E7%82%B9/",{y:"p",t:"标签: 虚拟头结点",I:!1},["/tag/虚拟头结点/"]],["v-4b30edaa","/tag/%E5%88%86%E6%B2%BB%E6%80%9D%E6%83%B3/",{y:"p",t:"标签: 分治思想",I:!1},["/tag/分治思想/"]],["v-22b11fef","/tag/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/",{y:"p",t:"标签: 优先队列",I:!1},["/tag/优先队列/"]],["v-63c72547","/tag/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/",{y:"p",t:"标签: 循环链表",I:!1},["/tag/循环链表/"]],["v-a0d22de6","/tag/%E5%93%88%E5%B8%8C%E8%A1%A8/",{y:"p",t:"标签: 哈希表",I:!1},["/tag/哈希表/"]],["v-fe7b1fa2","/tag/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",{y:"p",t:"标签: 排序算法",I:!1},["/tag/排序算法/"]],["v-7d0f4556","/tag/%E9%98%9F%E5%88%97/",{y:"p",t:"标签: 队列",I:!1},["/tag/队列/"]],["v-56e816c6","/tag/%E5%8F%8D%E6%B1%87%E7%BC%96/",{y:"p",t:"标签: 反汇编",I:!1},["/tag/反汇编/"]],["v-10a04a2f","/tag/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/",{y:"p",t:"标签: 操作系统",I:!1},["/tag/操作系统/"]],["v-5f8d23be","/tag/%E5%A0%86%E6%A0%88/",{y:"p",t:"标签: 堆栈",I:!1},["/tag/堆栈/"]],["v-3a4a854e","/tag/%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5/",{y:"p",t:"标签: 编译链接",I:!1},["/tag/编译链接/"]],["v-93bed62a","/tag/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/",{y:"p",t:"标签: 虚拟内存",I:!1},["/tag/虚拟内存/"]],["v-2be2ad6b","/tag/do-while(0)/",{y:"p",t:"标签: do-while(0)",I:!1},[]],["v-c263983c","/tag/c%E5%9F%BA%E7%A1%80/",{y:"p",t:"标签: c基础",I:!1},["/tag/c基础/"]],["v-5cb0e330","/tag/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/",{y:"p",t:"标签: 类和对象",I:!1},["/tag/类和对象/"]],["v-2d6af57c","/tag/c__%E5%9F%BA%E7%A1%80/",{y:"p",t:"标签: c++基础",I:!1},["/tag/c__基础/"]],["v-725e7306","/tag/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/",{y:"p",t:"标签: 内存对齐",I:!1},["/tag/内存对齐/"]],["v-6942f2d0","/tag/linux%E5%B7%A5%E5%85%B7%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/",{y:"p",t:"标签: linux工具和基本命令",I:!1},["/tag/linux工具和基本命令/"]],["v-72049510","/tag/%E9%85%8D%E7%BD%AE/",{y:"p",t:"标签: 配置",I:!1},["/tag/配置/"]],["v-6b9ab792","/tag/vim%E9%85%8D%E7%BD%AE/",{y:"p",t:"标签: vim配置",I:!1},["/tag/vim配置/"]],["v-2ddd04a0","/tag/%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/",{y:"p",t:"标签: 编译工具",I:!1},["/tag/编译工具/"]],["v-039b9630","/tag/cc__%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/",{y:"p",t:"标签: c/c++连接数据库",I:!1},["/tag/cc__连接数据库/"]],["v-539ae27f","/tag/%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/",{y:"p",t:"标签: 安装方法",I:!1},["/tag/安装方法/"]],["v-0f7cde43","/tag/mysql%E5%9F%BA%E7%A1%80/",{y:"p",t:"标签: mysql基础",I:!1},["/tag/mysql基础/"]],["v-71173084","/tag/mysql%E6%A0%B8%E5%BF%83sql/",{y:"p",t:"标签: mysql核心SQL",I:!1},["/tag/mysql核心sql/"]],["v-7c8d7d81","/tag/mysql%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/",{y:"p",t:"标签: mysql存储引擎",I:!1},["/tag/mysql存储引擎/"]],["v-69c73501","/tag/mysql%E7%B4%A2%E5%BC%95/",{y:"p",t:"标签: mysql索引",I:!1},["/tag/mysql索引/"]],["v-54d85698","/tag/mysql%E6%97%A5%E5%BF%97/",{y:"p",t:"标签: mysql日志",I:!1},["/tag/mysql日志/"]],["v-26374ab8","/tag/%E4%BA%8B%E5%8A%A1/",{y:"p",t:"标签: 事务",I:!1},["/tag/事务/"]],["v-7a59998d","/tag/mysql-mvcc/",{y:"p",t:"标签: mysql MVCC",I:!1},[]],["v-0aedece4","/tag/mysql%E9%94%81%E6%9C%BA%E5%88%B6/",{y:"p",t:"标签: mysql锁机制",I:!1},["/tag/mysql锁机制/"]],["v-3af20a74","/tag/mysql%E4%BC%98%E5%8C%96/",{y:"p",t:"标签: mysql优化",I:!1},["/tag/mysql优化/"]],["v-497728a6","/tag/%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/",{y:"p",t:"标签: 数据备份",I:!1},["/tag/数据备份/"]],["v-470617df","/tag/mysql%E6%8B%93%E5%B1%95/",{y:"p",t:"标签: mysql拓展",I:!1},["/tag/mysql拓展/"]],["v-1ab7dcc2","/tag/mysql%E9%9B%86%E7%BE%A4/",{y:"p",t:"标签: mysql集群",I:!1},["/tag/mysql集群/"]],["v-117d546a","/tag/mysql%E8%BF%9E%E6%8E%A5%E6%B1%A0/",{y:"p",t:"标签: mysql连接池",I:!1},["/tag/mysql连接池/"]],["v-85dac2ea","/tag/%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97%E5%8C%96/",{y:"p",t:"标签: 数据序列化",I:!1},["/tag/数据序列化/"]],["v-254becce","/tag/protobuf%E7%AE%80%E4%BB%8B%E5%8F%8A%E4%BD%BF%E7%94%A8/",{y:"p",t:"标签: Protobuf简介及使用",I:!1},["/tag/protobuf简介及使用/"]]];var pr=R({name:"Vuepress",setup(){const s=Ru();return()=>p(s.value)}}),K0=()=>W0.reduce((s,[n,e,l,a])=>(s.push({name:n,path:e,component:pr,meta:l},{path:e.endsWith("/")?e+"index.html":e.substring(0,e.length-5),redirect:e},...a.map(t=>({path:t===":md"?e.substring(0,e.length-5)+".md":t,redirect:e}))),s),[{name:"404",path:"/:catchAll(.*)",component:pr}]),Y0=ty,Z0=()=>{const s=Qy({history:Y0(Jt("/")),routes:K0(),scrollBehavior:(n,e,l)=>l||(n.hash?{el:n.hash}:{top:0})});return s.beforeResolve(async(n,e)=>{var l;(n.path!==e.path||e===On)&&([n.meta._data]=await Promise.all([kn.resolvePageData(n.name),(l=mc[n.name])==null?void 0:l.__asyncLoader()]))}),s},X0=s=>{s.component("ClientOnly",Fa),s.component("Content",_c)},J0=(s,n,e)=>{const l=Mp(()=>n.currentRoute.value.path),a=Mp(()=>kn.resolveRouteLocale(_e.value.locales,l.value)),t=oo(l,()=>n.currentRoute.value.meta._data),o=D(()=>kn.resolveLayouts(e)),r=D(()=>kn.resolveSiteLocaleData(_e.value,a.value)),i=D(()=>kn.resolvePageFrontmatter(t.value)),c=D(()=>kn.resolvePageHeadTitle(t.value,r.value)),B=D(()=>kn.resolvePageHead(c.value,i.value,r.value)),u=D(()=>kn.resolvePageLang(t.value,r.value)),y=D(()=>kn.resolvePageLayout(t.value,o.value));return s.provide(Ou,o),s.provide(Ac,t),s.provide(fc,i),s.provide(Pu,c),s.provide(Ec,B),s.provide(Fc,u),s.provide(gc,y),s.provide(so,a),s.provide(Dc,r),Object.defineProperties(s.config.globalProperties,{$frontmatter:{get:()=>i.value},$head:{get:()=>B.value},$headTitle:{get:()=>c.value},$lang:{get:()=>u.value},$page:{get:()=>t.value},$routeLocale:{get:()=>a.value},$site:{get:()=>_e.value},$siteLocale:{get:()=>r.value},$withBase:{get:()=>bs}}),{layouts:o,pageData:t,pageFrontmatter:i,pageHead:B,pageHeadTitle:c,pageLang:u,pageLayout:y,routeLocale:a,siteData:_e,siteLocaleData:r}},sm=()=>{const s=Su(),n=hc(),e=U([]),l=()=>{s.value.forEach(t=>{const o=nm(t);o&&e.value.push(o)})},a=()=>{document.documentElement.lang=n.value,e.value.forEach(t=>{t.parentNode===document.head&&document.head.removeChild(t)}),e.value.splice(0,e.value.length),s.value.forEach(t=>{const o=em(t);o!==null&&(document.head.appendChild(o),e.value.push(o))})};cn(Vu,a),As(()=>{l(),a(),cs(()=>s.value,a)})},nm=([s,n,e=""])=>{const l=Object.entries(n).map(([r,i])=>rs(i)?`[${r}=${JSON.stringify(i)}]`:i===!0?`[${r}]`:"").join(""),a=`head > ${s}${l}`;return Array.from(document.querySelectorAll(a)).find(r=>r.innerText===e)||null},em=([s,n,e])=>{if(!rs(s))return null;const l=document.createElement(s);return Dl(n)&&Object.entries(n).forEach(([a,t])=>{rs(t)?l.setAttribute(a,t):t===!0&&l.setAttribute(a,"")}),rs(e)&&l.appendChild(document.createTextNode(e)),l},lm=Fu,am=async()=>{var e;const s=lm({name:"VuepressApp",setup(){var l;sm();for(const a of Xl)(l=a.setup)==null||l.call(a);return()=>[p(Rc),...Xl.flatMap(({rootComponents:a=[]})=>a.map(t=>p(t)))]}}),n=Z0();X0(s),J0(s,n,Xl);for(const l of Xl)await((e=l.enhance)==null?void 0:e.call(l,{app:s,router:n,siteData:_e}));return s.use(n),{app:s,router:n}};am().then(({app:s,router:n})=>{n.isReady().then(()=>{s.mount("#app")})});export{D0 as A,Vs as B,As as C,ze as D,rs as E,im as F,Dl as G,wo as H,Ov as I,le as J,S0 as O,O0 as R,om as a,pm as b,tm as c,am as createVueApp,ec as d,lc as e,Ts as f,R as g,zs as h,Cn as i,Io as j,U as k,D as l,ws as m,cs as n,L2 as o,p,_0 as q,sn as r,L0 as s,He as t,cm as u,ks as v,qd as w,VB as x,C0 as y,b0 as z};
function __vite__mapDeps(indexes) {
  if (!__vite__mapDeps.viteFileDeps) {
    __vite__mapDeps.viteFileDeps = ["assets/intro.html-XWuoAznC.js","assets/plugin-vue_export-helper-x3n3nnut.js","assets/index.html-PCVYnsrU.js","assets/tool.html-pHhx2vSI.js","assets/index.html-4zm9pl8t.js","assets/统计单词的个数.html-tgFSjKro.js","assets/统计字母、数组、空格的个数.html-XyPm164r.js","assets/index.html-cCz1Oqxm.js","assets/index.html--LK6Smsl.js","assets/文件操作.html-LEvaWH5F.js","assets/index.html-GjNhOi_a.js","assets/autohotkey笔记.html-TSHFoPdQ.js","assets/index.html-RkQfByKa.js","assets/SourceInsight.html-eLTtfQK5.js","assets/typora配置.html-dAPyyGgH.js","assets/index.html-b8FEFcT1.js","assets/TCP和UDP的区别.html-VuS3UhKh.js","assets/index.html-x9NKYhoZ.js","assets/344.反转字符串.html-8SL01hMI.js","assets/905. 按奇偶排序数组.html-V_DI6Kb1.js","assets/LeetCode 209.长度最小的子数组.html-HC7nIN4y.js","assets/LeetCode 27. 移除元素.html-BoY9rQIO.js","assets/LeetCode 59.螺旋矩阵Ⅱ.html-oP_joNgn.js","assets/LeetCode 704.二分查找.html-4DEo41Rj.js","assets/LeetCode 977.有序数组的平方.html-x3cqiX_m.js","assets/二分查找总结.html--IZR-cY7.js","assets/数组基础.html-l5_4_w1L.js","assets/查找N个数组的公共元素.html-Uq60rzBD.js","assets/查找三个数组的公共元素.html-IYgL23r_.js","assets/查找两个数组的公共元素.html-9eN4PwZC.js","assets/查找出现次数超过一半的元素.html-y7VeZ4P7.js","assets/查找最大和次大的元素.html-tZ_7659G.js","assets/234.回文链表.html-BJf91OVo.js","assets/LeetCode 203.移除链表元素.html-XpsqEEWe.js","assets/leetcode 21. 合并两个有序链表.html-AJn893j6.js","assets/leetcode141.环形链表(判断链表是否有环).html-vVPIPfjq.js","assets/Leetcode142.环形链表II(查找环的入口地址).html--XOsPPdi.js","assets/leetcode160.相交链表(判断链表是否相交).html-nPzI8lol.js","assets/Leetcode19. 删除链表的倒数第N个结点.html-oC5L7wDp.js","assets/leetcode206.反转链表.html-q23mNygH.js","assets/Leetcode23. 合并 K 个升序链表.html-TVw1Aik7.js","assets/leetcode61.旋转链表.html-TWHzL1-6.js","assets/LeetCode707.html-pBn9YAx5.js","assets/leetcode86. 分隔链表（链表的分解）.html-gDvPBo6r.js","assets/Leetcode876.链表的中间结点.html-JRo_uYqG.js","assets/leetcode92.反转链表II.html-UDF24Nx7.js","assets/查找链表中倒数第N个结点.html-XEJSfXGU.js","assets/约瑟夫环问题.html-ncqCgrSY.js","assets/链表基础.html-o57WrCap.js","assets/1. 两数之和.html-2Z-BGfsU.js","assets/128. 最长连续序列.html-2dxj6JKX.js","assets/15. 三数之和.html-av0xr1Ml.js","assets/167. 两数之和 II - 输入有序数组.html-Fiw06kgD.js","assets/202. 快乐数.html-lpf4Ncg-.js","assets/217.存在重复元素.html-yiSzATdn.js","assets/219.存在重复元素 II.html-ujD8bQRV.js","assets/220. 存在重复元素 III.html-k2fS16xE.js","assets/242.有效的字母异位词.html-TmjFs2UP.js","assets/349.两个数组的交集.html-Pj7NKzBv.js","assets/383. 赎金信.html-z8zsEfH1.js","assets/594. 最长和谐子序列.html-YoPL1Uhu.js","assets/冒泡排序.html-N3rQlv4p.js","assets/基数排序.html-cfHnyJHE.js","assets/堆排序.html-JzPkvA3i.js","assets/希尔排序.html-ly6LzBA3.js","assets/归并排序.html-UFxOYFiw.js","assets/插入排序.html-MeOHVVTv.js","assets/桶排序.html-z7DeC_-X.js","assets/计数排序.html-AgrPujVr.js","assets/选择排序.html-J7E4ISxS.js","assets/（简单）快速排序.html-r4XuVTYP.js","assets/上滤.html-XGgALZeL.js","assets/新建 Markdown.html-VoAU1qoJ.js","assets/两个栈实现队列.html-Lb5LGkN7.js","assets/新建 Markdown.html-4RPQQmE_.js","assets/反汇编小结.html-oNYFZPkW.js","assets/指令角度堆栈调用过程.html-5lUWF93s.js","assets/编译器角度理解c__代码的编译和链接.html-peYq_62b.js","assets/进程虚拟地址空间.html-MNosWmHr.js","assets/do-while(0).html-J1KeGlh9.js","assets/scanf.html-li2BI7AA.js","assets/关键字.html-tRHS80Xw.js","assets/前言.html--3YeToWn.js","assets/变量.html-T8yPS0sA.js","assets/字符.html-J-HLjyDy.js","assets/常量.html-x_Fm7n1H.js","assets/数据类型.html-5IcQ9ft4.js","assets/整型.html-QMB0bF8N.js","assets/浮点数.html-95t3v70X.js","assets/补码.html-F0MOm07L.js","assets/进制转换.html-Infypb5p.js","assets/this.html-LcwmzApo.js","assets/拷贝构造函数.html-__WveO7E.js","assets/拷贝构造和赋值重载的实践.html-WGKspCdy.js","assets/指向类型成员的指针.html-FUSWm0EF.js","assets/构造函数和析构函数.html-OjONH7Uy.js","assets/特殊数据成员的初始化.html-r3nglm9R.js","assets/特殊的成员函数.html-6iAm-_g_.js","assets/类和对象.html-mL8ophKn.js","assets/组织对象.html-tyE9ZP8g.js","assets/赋值运算符函数.html-9mQMeeur.js","assets/bool.html-LGDfTDx4.js","assets/c__初探.html-Gqy_oA3t.js","assets/const.html-IkFTRxiD.js","assets/inline内联函数.html-c9z6M8WE.js","assets/new、delete.html-sPXtRqNy.js","assets/string.html--3Giitdh.js","assets/内存对齐.html-yDjiA1mc.js","assets/函数重载.html-5v_5dEJ2.js","assets/命名空间.html-ICkpH4vx.js","assets/异常安全.html-5wEs78q9.js","assets/引用.html-bVZyM7Ta.js","assets/强制转换.html-yizgv2jf.js","assets/默认参数.html-J976NTdO.js","assets/netstat使用.html-FPXrpEAF.js","assets/tree常用命令.html-w4J49QKb.js","assets/wget使用.html-ZGQRSFyt.js","assets/打包和压缩.html-cY19K_wM.js","assets/软链接（符号链接）和硬链接.html-wIwW51PU.js","assets/配置一台ubuntu.html-vNT2UU_J.js","assets/vim的配置和使用.html-xCam-WWV.js","assets/CMake的使用.html-A9a9bOtM.js","assets/gcc_g__常见的编译命令.html-EeAbHLWF.js","assets/gdb调试出错的程序.html-sSYVkSWf.js","assets/makefile使用方法.html-udf24ZSo.js","assets/字符串转不同进制数字.html--DrQ3-6s.js","assets/c语言连接MySQL.html-yQbNEZ2j.js","assets/mysql的安装.html-oaueIit3.js","assets/关系型数据库表设计.html-4yNydrq2.js","assets/基本数据类型.html-pvyLmUeo.js","assets/完整性约束.html-GdN8o1Lv.js","assets/常用函数.html-yrGtTv0K.js","assets/用户管理与授权.html-qe7FsFsr.js","assets/知识拓展.html-VldMBh19.js","assets/范式设计.html-cC4lDtJe.js","assets/运算符.html-Z8WNGqq0.js","assets/CRUD.html-KnzFAiiW.js","assets/DCL小结.html-ERMgPAqp.js","assets/DML小结.html-PXZm0iSZ.js","assets/mysql的库操作.html-yLRo8i1X.js","assets/select查询.html-ziQQZzs7.js","assets/多表select-连接查询.html-sYtBHXtA.js","assets/概述.html-CobyiC_E.js","assets/表操作.html-Udf6iRii.js","assets/MySQL存储引擎.html-8sltDvm9.js","assets/InnoDB的主键和二级索引树.html-utdMagSo.js","assets/InnoDB自适应哈希索引.html-ZRUFaZkz.js","assets/MySQL优化之慢日志查询.html-ezruEdBU.js","assets/MySQL索引常见问题.html-jSluOGp6.js","assets/哈希索引.html-jZi0FG1n.js","assets/索引基础.html-ZY7N_BSe.js","assets/索引的使用和分析.html-P4K7-aBA.js","assets/索引的底层实现原理.html-QpNz3ahF.js","assets/MySQL事务的隔离级别.html-x2i339AL.js","assets/事务并发存在的问题(脏读、不可重复读和幻读).html-nLOFP8uH.js","assets/事务的ACID特性.html-nYIOq4zZ.js","assets/事务的概念.html-2-CAudq_.js","assets/MySQL MVCC多版本并发控制（脏读和不可重复读解决原理）.html-69_Z8fly.js","assets/MySQL 意向共享锁、意向排他锁.html-3pmR_Xna.js","assets/MySQL回滚日志undo log.html--BfEuwK_.js","assets/MySQL间隙锁（幻读解决原理）.html-EMOYd4yD.js","assets/排它锁和共享锁.html-AVskcTm8.js","assets/死锁.html-35Mvvhya.js","assets/表级锁和行级锁.html-QjS9uPPW.js","assets/记录锁_间隙锁可以防止删除操作而导致的幻读吗.html-PS0x6E-s.js","assets/锁的优化建议.html-v9qy0gbe.js","assets/sql优化.html-T3pNcZFL.js","assets/SQL和索引优化总结.html-MF4d4SqT.js","assets/MySQL重做日志redo log.html-iPD_rAQs.js","assets/Server 层四个日志.html-9ozNCXuv.js","assets/mysqldump数据备份.html-r1WOBHh4.js","assets/SQL的完整处理流程.html-M1FTpStb.js","assets/分库分表实践.html-f3iZWov4.js","assets/主从复制原理.html-86_mY0fd.js","assets/读写分离原理.html-KKIcMZXA.js","assets/读写分离配置实践.html-X20MOux3.js","assets/配置主从复制实践.html-ZuTHwGf2.js","assets/加载配置项.html-rwnlJFgp.js","assets/压力测试.html-m2gl_YC1.js","assets/数据库编程部分实现.html-t0jGhmhr.js","assets/最大空闲时间回收连接扫描线程的实现.html-4fvJEvwA.js","assets/概述.html-lYbhhJuS.js","assets/消费者线程的实现.html-DZlLHRXa.js","assets/生产者线程的实现.html-__KWNpDy.js","assets/连接池单例模式实践.html-vEgURNOy.js","assets/Json简介及使用.html-yh3UgZFs.js","assets/Protobuf简介及使用.html-AVwgzqDK.js","assets/404.html-AznTn1Rb.js","assets/index.html-SWiSNJ9I.js","assets/index.html-qs-vreXd.js","assets/index.html-dGdaO5-d.js","assets/index.html-GTsF7Eir.js","assets/index.html-Caj_PDJK.js","assets/index.html-O5coBjz4.js","assets/index.html-iI-ngrCo.js","assets/index.html-OqkWQMPy.js","assets/index.html-HwYUgY8q.js","assets/index.html-5-gcU5Xk.js","assets/index.html-_9LvaO6i.js","assets/index.html-os_7ObvY.js","assets/index.html-OEx8bIle.js","assets/index.html-RnHRmpKo.js","assets/index.html-S9B62hlN.js","assets/index.html-OlDDXh_N.js","assets/index.html-JS8eLwLB.js","assets/index.html-Qb37Q4N8.js","assets/index.html-u5gTRPK5.js","assets/index.html-8LBWTE5L.js","assets/index.html-tSkqkLdp.js","assets/index.html-fiutTwGr.js","assets/index.html-fJrRaL7_.js","assets/index.html-se7VbwDn.js","assets/index.html-Ts-G3aR3.js","assets/index.html-DLzCNnI6.js","assets/index.html-7y-7qKfM.js","assets/index.html-YjPyRpSF.js","assets/index.html-XFXT1uec.js","assets/index.html-yoCKFhcO.js","assets/index.html-L_mhJOuT.js","assets/index.html-FBvdlMdJ.js","assets/index.html-2cSGpmC-.js","assets/index.html-POSXs7OC.js","assets/index.html-8zArXlKF.js","assets/index.html-0P4M1iHo.js","assets/index.html-ypCFuI6-.js","assets/index.html-yhuuP0TA.js","assets/index.html-VInjZWuz.js","assets/index.html-W0UFKCbV.js","assets/index.html-bv_FEyTQ.js","assets/index.html-vTuHaY90.js","assets/index.html-2KCqLpXi.js","assets/index.html-pQODz3fR.js","assets/index.html-MF0YsLjf.js","assets/index.html-hg-HUM8k.js","assets/index.html-Luk__8aU.js","assets/index.html-VLJGNP8z.js","assets/index.html-GEb9ALeK.js","assets/index.html-UMDXRTVN.js","assets/index.html-xnj7nIdI.js","assets/index.html-pvBbbSam.js","assets/index.html-imBHtT6X.js","assets/index.html-IzfebBP2.js","assets/index.html-k83WSuuj.js","assets/index.html-yMorF4l3.js","assets/index.html-7iAVGxs5.js","assets/index.html-bnFQL8XW.js","assets/index.html-8HEXYFKo.js","assets/index.html-AeHFVR04.js","assets/index.html-5Rr5EBgs.js","assets/index.html-ekUM3Uc7.js","assets/index.html-mmDzmkk3.js","assets/index.html-pFHpHfBa.js","assets/index.html-wua6Ei1V.js","assets/index.html-Kb7-SpXt.js","assets/index.html-1aLGb89n.js","assets/index.html-HIiLQh5q.js","assets/index.html-JrgtTfsL.js","assets/index.html-Fo-Zy1qB.js","assets/index.html-dwS8f1mx.js","assets/index.html-ULUJ9GEI.js","assets/index.html-uLpDcigF.js","assets/index.html-9NWbR3nX.js","assets/index.html-aLCYMOfp.js","assets/index.html-wCF3r-2U.js","assets/index.html-hoUWrN5n.js","assets/index.html-IIacVnZt.js","assets/index.html-8e9Z2vnr.js","assets/index.html-O-YkFRSi.js","assets/index.html--_gMmo4Y.js","assets/index.html-3jpOBwtB.js","assets/index.html-sibB5XuC.js","assets/index.html-ePgumXfP.js","assets/index.html-uYXIeHwZ.js","assets/index.html-zS8eVvkU.js","assets/index.html-VT5hfcu7.js","assets/index.html-ujTNkgMR.js"]
  }
  return indexes.map((i) => __vite__mapDeps.viteFileDeps[i])
}
