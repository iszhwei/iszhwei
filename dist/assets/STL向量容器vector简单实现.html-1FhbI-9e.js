const t=JSON.parse('{"key":"v-2a2097b4","path":"/ccpp/04%20%E6%A8%A1%E6%9D%BF/STL%E5%90%91%E9%87%8F%E5%AE%B9%E5%99%A8vector%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0.html","title":"STL向量容器vector简单实现","lang":"zh-CN","frontmatter":{"title":"STL向量容器vector简单实现","icon":"file","order":4,"headerDepth":4,"category":["c/c++"],"tag":["模板实践","STL"],"description":"STL向量容器vector简单实现 什么是容器 就是保存其他对象的对象。而且，这种“对象”还有处理“其他对象”的方法 C++采用基于模版的方式处理容器，STL中的容器提供了多种数据结构。 它可以像数组一样被操作，由于它的特性我们完全可以将vector 看作动态数组。 特点 随机访问 线性顺序结构。可以指定一块连续的空间，也可以不预先指定大小，空间可自动扩展，也可以像数组一样被操作，即支持[ ]操作符和vector.at()，因此可看做动态数组，通常体现在追加数据push_back()和删除末尾数据pop_back()。 当分配空间不够时，vector会申请一块更大的内存块（以2的倍数增长），然后将原来的数据拷贝到新内存块中并将原内存块中的对象销毁，最后释放原来的内存空间。因此如果vector保存的数据量很大时会很消耗性能，因此在预先知道它大小时性能最优。 节省空间。因为它是连续存储，在存储数据的区域是没有浪费的，但实际上大多数时候是存不满的，因此实际上未存储的区域是浪费的。 在内部进行插入和删除的操作效率低。由于vector内部按顺序表结构设计，因此这样的操作基本上是**，它被设计成**。","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/04%20%E6%A8%A1%E6%9D%BF/STL%E5%90%91%E9%87%8F%E5%AE%B9%E5%99%A8vector%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"STL向量容器vector简单实现"}],["meta",{"property":"og:description","content":"STL向量容器vector简单实现 什么是容器 就是保存其他对象的对象。而且，这种“对象”还有处理“其他对象”的方法 C++采用基于模版的方式处理容器，STL中的容器提供了多种数据结构。 它可以像数组一样被操作，由于它的特性我们完全可以将vector 看作动态数组。 特点 随机访问 线性顺序结构。可以指定一块连续的空间，也可以不预先指定大小，空间可自动扩展，也可以像数组一样被操作，即支持[ ]操作符和vector.at()，因此可看做动态数组，通常体现在追加数据push_back()和删除末尾数据pop_back()。 当分配空间不够时，vector会申请一块更大的内存块（以2的倍数增长），然后将原来的数据拷贝到新内存块中并将原内存块中的对象销毁，最后释放原来的内存空间。因此如果vector保存的数据量很大时会很消耗性能，因此在预先知道它大小时性能最优。 节省空间。因为它是连续存储，在存储数据的区域是没有浪费的，但实际上大多数时候是存不满的，因此实际上未存储的区域是浪费的。 在内部进行插入和删除的操作效率低。由于vector内部按顺序表结构设计，因此这样的操作基本上是**，它被设计成**。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"模板实践"}],["meta",{"property":"article:tag","content":"STL"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"STL向量容器vector简单实现\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[{"level":2,"title":"什么是容器","slug":"什么是容器","link":"#什么是容器","children":[]},{"level":2,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":2,"title":"简单版","slug":"简单版","link":"#简单版","children":[]}],"git":{},"readingTime":{"minutes":3.04,"words":912},"filePathRelative":"ccpp/04 模板/STL向量容器vector简单实现.md","excerpt":"<h1> STL向量容器vector简单实现</h1>\\n<h2> 什么是容器</h2>\\n<p><strong>就是<u>保存其他对象的对象</u>。而且，这种“对象”<u>还有处理“其他对象”的方法</u></strong></p>\\n<p>C++采用基于<strong>模版</strong>的方式处理容器，STL中的容器提供了多种数据结构。</p>\\n<p><strong>它可以像数组一样被操作，由于它的特性我们完全可以将vector 看作动态数组。</strong></p>\\n<h2> 特点</h2>\\n<ol>\\n<li>随机访问</li>\\n<li>线性顺序结构。可以指定一块连续的空间，也可以不预先指定大小，空间可自动扩展，也可以像数组一样被操作，即支持[ ]操作符和vector.at()，因此可看做动态数组，通常体现在追加数据push_back()和删除末尾数据pop_back()。</li>\\n<li>当分配空间不够时，vector会申请一块更大的内存块（以2的倍数增长），然后将原来的数据拷贝到新内存块中并将原内存块中的对象销毁，最后释放原来的内存空间。因此如果vector保存的数据量很大时会很消耗性能，因此在<u>预先知道它大小时性能最优</u>。</li>\\n<li>节省空间。因为它是连续存储，在存储数据的区域是没有浪费的，但实际上大多数时候是存不满的，因此实际上未存储的区域是浪费的。</li>\\n<li>在内部进行插入和删除的操作效率低。由于vector内部按顺序表结构设计，因此这样的操作基本上是**<strong>，它被设计成</strong>**。</li>\\n</ol>","autoDesc":true}');export{t as data};
