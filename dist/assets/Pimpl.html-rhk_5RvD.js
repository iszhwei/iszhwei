const t=JSON.parse('{"key":"v-16792cec","path":"/ccpp/10%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Pimpl.html","title":"Pimpl","lang":"zh-CN","frontmatter":{"title":"Pimpl","icon":"file","order":1,"headerDepth":4,"category":["c/c++"],"tag":["设计模式"],"description":"Pimpl PIMPL（Private Implementation 或Pointer to Implementation）是通过一个，将指针所指向的类的内部。PIMPL又称作“编译防火墙”，它的实现中就用到了嵌套类。PIMPL设计模式有如下优点： 提高编译速度； 数据成员只有一个指针，使得每个对象占用内存较小 可以将实现文件编译成库文件 实现信息隐藏； 头文件只有接口和一个数据指针，无法推断出底层的实现 减小编译依赖，可以用最小的代价平滑的升级库文件； 不需要重新编译就可以替换库文件，便于软件升级 如果用户代码需要使用这个类，它就需要 include 这个头文件，根据 C++ 的头文件展开原则，其他的代码也需要 include 这个头文件里面涉及到的所有的头文件。因此，一旦这里面相关的代码有变动，不止变动的代码需要重新编译，用户代码也需要重新编译，这会使编译速度变得很慢。 接口与实现进行解耦； 移动语义友好。","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/10%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Pimpl.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"Pimpl"}],["meta",{"property":"og:description","content":"Pimpl PIMPL（Private Implementation 或Pointer to Implementation）是通过一个，将指针所指向的类的内部。PIMPL又称作“编译防火墙”，它的实现中就用到了嵌套类。PIMPL设计模式有如下优点： 提高编译速度； 数据成员只有一个指针，使得每个对象占用内存较小 可以将实现文件编译成库文件 实现信息隐藏； 头文件只有接口和一个数据指针，无法推断出底层的实现 减小编译依赖，可以用最小的代价平滑的升级库文件； 不需要重新编译就可以替换库文件，便于软件升级 如果用户代码需要使用这个类，它就需要 include 这个头文件，根据 C++ 的头文件展开原则，其他的代码也需要 include 这个头文件里面涉及到的所有的头文件。因此，一旦这里面相关的代码有变动，不止变动的代码需要重新编译，用户代码也需要重新编译，这会使编译速度变得很慢。 接口与实现进行解耦； 移动语义友好。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"设计模式"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Pimpl\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":1.77,"words":532},"filePathRelative":"ccpp/10 设计模式/Pimpl.md","excerpt":"<h1> Pimpl</h1>\\n<p>PIMPL（Private Implementation 或Pointer to Implementation）是通过一个，将指针所指向的类的内部。PIMPL又称作“<strong>编译防火墙</strong>”，它的实现中就用到了<strong>嵌套类</strong>。PIMPL设计模式有如下优点：</p>\\n<ol>\\n<li>\\n<p>提高编译速度；</p>\\n<ul>\\n<li>数据成员只有一个指针，使得每个对象占用内存较小</li>\\n<li>可以将实现文件编译成库文件</li>\\n</ul>\\n</li>\\n<li>\\n<p>实现信息隐藏；</p>\\n<ul>\\n<li>头文件只有接口和一个数据指针，无法推断出底层的实现</li>\\n</ul>\\n</li>\\n<li>\\n<p>减小编译依赖，可以用最小的代价平滑的升级库文件；</p>\\n<ul>\\n<li>\\n<p>不需要重新编译就可以替换库文件，便于软件升级</p>\\n<p>如果用户代码需要使用这个类，它就需要 include 这个头文件，根据 C++ 的头文件展开原则，其他的代码也需要 include 这个头文件里面涉及到的所有的头文件。因此，一旦这里面相关的代码有变动，不止变动的代码需要重新编译，用户代码也需要重新编译，这会使编译速度变得很慢。</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>接口与实现进行解耦；</p>\\n</li>\\n<li>\\n<p>移动语义友好。</p>\\n</li>\\n</ol>","autoDesc":true}');export{t as data};
