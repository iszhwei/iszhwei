import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as t,c as r,b as B,f as l,w as p,e as s,d as n,a as o}from"./app--8O2lHwG.js";const i="/assets/1681303202245-ba0f5804-b6c2-4a13-8304-d68e14ca90da-bhik1Jb6.png",y="/assets/image-20240202155647969-K8isqMeQ.png",d="/assets/image-20240202162644415-hZ9PfxK6.png",F={},A=n("h1",{id:"引用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#引用","aria-hidden":"true"},"#"),s(" 引用")],-1),v=n("figure",null,[n("img",{src:i,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),u=o(`<h2 id="什么是引用" tabindex="-1"><a class="header-anchor" href="#什么是引用" aria-hidden="true">#</a> 什么是引用？</h2><p>在理解引用概念前，先回顾一下变量名。 <u>变量名实质就是一段连续<strong>内存空间的别名</strong></u>。那一段连续的内存空间只能取一个别名吗？ 显然不是，引用的概念油然而生。在C++中，<u>引用是一个已定义变量的<strong>别名</strong></u>。其语法是：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">类型 </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">引用名 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> 目标变量名；</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test0</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">ref1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> a;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">ref2;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用引用的过程中，要注意以下几点：</p><ol><li>&amp;在这里不再是取地址符号，而是引用符号，相当于&amp;有了第二种用法</li><li>引用的类型必须和其绑定的变量的<u>类型相同</u></li><li>声明引用的同时，<u>必须对引用进行初始化</u>；否则编译时报错</li><li>一旦<u>绑定到某个变量之后，就不会再改变其指向</u> (<code>类型 * const</code>)</li></ol><h3 id="引用和取地址的区别" tabindex="-1"><a class="header-anchor" href="#引用和取地址的区别" aria-hidden="true">#</a> 引用和取地址的区别</h3>`,6),D=o(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">int &amp;b = a;</span></span>
<span class="line"><span style="color:#abb2bf;">&amp;c;</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="引用的本质" tabindex="-1"><a class="header-anchor" href="#引用的本质" aria-hidden="true">#</a> 引用的本质</h2>`,2),m=n("u",null,[s("C++中的引用本质上是一种被限制的指针("),n("code",null,"类型 * const"),s(")")],-1),b=n("u",null,"只不过逻辑上的用法不同而已",-1),C=n("strong",null,"过引用变量修改所引用内存的值，和通过指针解引用修改指针指向的内存的值，其底层指令也是一模一样的",-1),f=o(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//#include &lt;typeinfo.h&gt;	编译提示typeinfo.h找不到</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;typeinfo&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">a;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">b </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> a;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    b</span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>编译提示typeinfo.h找不到 解决方法：typeinfo.h 改为typeinfo</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">$g</span><span style="color:#ABB2BF;">++ -g main.cc</span></span>
<span class="line"><span style="color:#E06C75;">$objdump</span><span style="color:#ABB2BF;"> -M intel -S a.out </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+y+`" alt="image-20240202155647969" tabindex="0" loading="lazy"><figcaption>image-20240202155647969</figcaption></figure><p><u>由于引用是被限制的指针，所以引用是占据内存的，占据的大小就是一个指针的大小</u>。有很多的说法，都说<u>引用不会占据存储空间，其只是一个变量的别名</u>，但这种说法并不准确。引用变量会占据存储空间，存放的是一个地址，但是编译器阻止对它本身的任何访问，从一而终总是指向初始的目标单元。在汇编里， 引用的本质就是“间接寻址”。在后面学习了类之后，我们也能看到相关的用法。</p><h2 id="引用作为函数参数" tabindex="-1"><a class="header-anchor" href="#引用作为函数参数" aria-hidden="true">#</a> 引用作为函数参数</h2><p>在没有引用之前，如果我们想<strong>通过形参改变实参的值</strong>，只有使用指针才能到达目的。但<u>使用指针的过程中，不好操作，很容易犯错</u>。 而引用既然可以<u>作为其他变量的别名而存在</u>，那在很多场合下就可以<u>用引用代替指针</u>，因而也<u>具有更好的可读性和实用性。这就是引用存在的意义</u>。 一个经典的例子就是交换两个变量的值。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//用指针作为参数</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">swap</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">pa</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">pb</span><span style="color:#ABB2BF;">) </span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> temp </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pa;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pa </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pb;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pb </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> temp;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//引用作为参数</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">swap</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> temp </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> x;</span></span>
<span class="line"><span style="color:#ABB2BF;">    x </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> y;</span></span>
<span class="line"><span style="color:#ABB2BF;">    y </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> temp;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),h=n("u",null,"指针传递",-1),g=n("u",null,"引用传递",-1),E=n("u",null,"值传递",-1),_=n("u",null,[s("采用值传递时，系统会在内存中开辟空间用来存储形参变量，并将实参变量的值拷贝给形参变量，即形参变量只是实参变量的副本而已；如果函数传递的是"),n("strong",null,"类对象"),s("，系统还会调用类中的拷贝构造函数来构造形参对象，假如对象占据的存储空间比较大，那就很不划算了")],-1),x=n("strong",null,"强烈建议使用引用作为函数的形参",-1),k=o(`<h2 id="引用作为函数的返回值" tabindex="-1"><a class="header-anchor" href="#引用作为函数的返回值" aria-hidden="true">#</a> 引用作为函数的返回值</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//语法： </span></span>
<span class="line"><span style="color:#ABB2BF;">类型 </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">函数名(形参列表)</span></span>
<span class="line"><span style="color:#ABB2BF;">{ </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //函数体 </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),q=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> gNumber;</span><span style="color:#7F848E;font-style:italic;">//全局变量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">func1</span><span style="color:#ABB2BF;">()</span><span style="color:#7F848E;font-style:italic;"> // 当函数返回时，会对temp进行复制</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    temp </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> temp;</span><span style="color:#7F848E;font-style:italic;">//此处会进行复制操作</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#61AFEF;">func2</span><span style="color:#ABB2BF;">()</span><span style="color:#7F848E;font-style:italic;">//当函数返回时，不会对temp进行复制，因为返回的是引用</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    temp </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> temp;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当引用作为函数的返回值时，必须遵守以下规则：</p>`,2),w=n("mark",null,"不能返回局部变量的引用",-1),I=n("mark",null,"不能在函数内部返回new分配的堆空间变量的引用",-1),N=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#61AFEF;">func3</span><span style="color:#ABB2BF;">() </span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> number </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> number;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#61AFEF;">func4</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pInt </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pInt;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, b </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> c </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> a </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">func4</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> b;</span><span style="color:#7F848E;font-style:italic;">//内存泄漏</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="引用总结" tabindex="-1"><a class="header-anchor" href="#引用总结" aria-hidden="true">#</a> 引用总结：</h2>`,2),V=n("li",null,[s("在引用的使用中，单纯给某个变量取个别名是毫无意义的，引用的目的"),n("u",null,"主要用于在函数参数传递"),s("中，解决大块数据或对象的传递效率和空间不如意的问题。")],-1),K=n("li",null,[s("用引用传递函数的参数，"),n("u",null,"能保证参数传递中不产生副本，提高传递的效率"),s("，且"),n("u",null,"通过const的使用，保证了引用传递的安全性"),s("。")],-1),$=o(`<h2 id="课堂代码" tabindex="-1"><a class="header-anchor" href="#课堂代码" aria-hidden="true">#</a> 课堂代码</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::cout;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//指针与引用的异同点？</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> number </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">ref </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> number;</span><span style="color:#7F848E;font-style:italic;">//引用是变量的别名,引用的提出就是为了减少指针的使用</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">ref;</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;number = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> number </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;ref = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> ref </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;number = </span><span style="color:#D19A66;">%p</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">number);</span><span style="color:#7F848E;font-style:italic;">	//打印地址常用printf %p更方便 </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ref = </span><span style="color:#D19A66;">%p</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">ref);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> number2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    ref </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> number2;</span><span style="color:#7F848E;font-style:italic;">//操作引用与操作变量本身是一样的</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;number2 = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> number2 </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;number = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> number </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;ref = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> ref </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;number2 = </span><span style="color:#D19A66;">%p</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">number2);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;number = </span><span style="color:#D19A66;">%p</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">number);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ref = </span><span style="color:#D19A66;">%p</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">ref);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //引用的实质：指针常量 * const</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* int &amp;ref2;//引用不能独立存在，在定义的时候必须要进行初始化,在定义的 */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">              //的时候绑定到变量上面，跟变量绑定到一起，不会改变引用的指向</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//1、引用作为函数参数</span></span>
<span class="line"><span style="color:#C678DD;">#if</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//值传递====副本</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//没有触及a b本身</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">swap</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//int x = a, int y = b</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> temp </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> x;</span></span>
<span class="line"><span style="color:#ABB2BF;">    x </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> y;</span></span>
<span class="line"><span style="color:#ABB2BF;">    y </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> temp;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">#endif</span></span>
<span class="line"><span style="color:#C678DD;">#if</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//值传递====地址值</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">swap</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">px</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">py</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//int *px = &amp;a, int *py = &amp;b;</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> temp </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">px;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">px </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">py;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">py </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> temp;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">#endif</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//引用传递====变量本身</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">swap</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//int &amp;x = a, int &amp;y = b</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> temp </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> x;</span></span>
<span class="line"><span style="color:#ABB2BF;">    x </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> y;</span></span>
<span class="line"><span style="color:#ABB2BF;">    y </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> temp;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test2</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, b </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;在交换之前 a = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;, b = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> b </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">swap</span><span style="color:#ABB2BF;">(a, b);</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;在交换之后 a = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;, b = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> b </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//2、引用作为函数返回类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">func1</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> number </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> number;</span><span style="color:#7F848E;font-style:italic;">//执行一个拷贝操作</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#61AFEF;">func2</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> number </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//局部变量</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> number;</span><span style="color:#7F848E;font-style:italic;">//不能返回一个局部变量的引用</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//不要去返回堆空间的引用,必须要有内存回收的机制</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#61AFEF;">getHeapData</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pInt </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pInt;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test4</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, b </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> temp </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> a </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getHeapData</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> b;</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;temp = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> temp </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">ref </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getHeapData</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">ref;</span><span style="color:#7F848E;font-style:italic;">	//虽然没问题，但这种写法很怪，而且别人不知道分装了new</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//函数返回类型是引用的前提:实体的生命周期一定要大于函数的生命周期</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#61AFEF;">getIndex</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">idx</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">[idx];</span><span style="color:#7F848E;font-style:italic;">//先不去考虑越界</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test3</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;getIndex(0) = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getIndex</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">getIndex</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;getIndex(0) = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getIndex</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;arr[0] = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* func1() = 200; */</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">argc</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">**</span><span style="color:#E06C75;font-style:italic;">argv</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">test4</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="引用和指针的区别" tabindex="-1"><a class="header-anchor" href="#引用和指针的区别" aria-hidden="true">#</a> 引用和指针的区别</h2><ol><li>引用是变量的别名，是对目标对象的直接操作；指针是通过某个指针变量指向一个对象，对所指的对象进行间接操作</li><li>引用必须初始化，不能初始化空对象，初始化后不能改变；指针可以不初始化，但最好初始化（野指针）</li><li>引用的本质是指针常量，在汇编上引用和指针生成的指令一样，通过引用变量修改所引用内存的值，和通过指针解引用修改指针指向的内存的值，其底层指令也是一模一样的</li><li>引用只有一级引用，没有多级引用；指针可以有一级指针，也可以有多级指针</li><li>在参数传递时，引用不会产生副本，指针会将实参地址拷贝给形参</li></ol><h2 id="左值引用" tabindex="-1"><a class="header-anchor" href="#左值引用" aria-hidden="true">#</a> 左值引用</h2><p><strong>左值：有内存地址，有名字，值可以修改；</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">	//左值：有内存地址，有名字，值可以修改；</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">b </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;">a;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">c </span><span style="color:#C678DD;">=</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//错误 20 是右值，20=40是错误的，其值不能修改，没内存，没名字，是一个立即数；</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码是无法编译通过的，因为10无法进行取地址操作，无法对一个立即数取地址，因为<strong>立即数并没有在内存中存储，而是存储在寄存器中</strong>，可以通过下述方法解决：</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">var </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用<strong>常引用</strong>来引用常量数字10，因为此刻<u>内存上产生了临时变量保存了10，这个临时变量是可以进行取地址操作的，因此var引用的其实是这个临时变量</u>，相当于下面的操作：</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> temp </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">; </span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">var </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> temp;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>根据上述分析，得出如下结论：</p>`,12),z=n("strong",null,"我们只能通过引用来读取数据，无法去修改数据，因为其被const修饰成常量引用了",-1),H=o(`<p>那么C++11 引入了右值引用的概念，使用右值引用能够很好的解决这个问题。</p><h2 id="右值引用" tabindex="-1"><a class="header-anchor" href="#右值引用" aria-hidden="true">#</a> 右值引用</h2><p>C++对于左值和右值没有标准定义，但是有一个被广泛认同的说法：</p><ul><li>可以取地址的，有名字的，非临时的就是左值；</li><li>不能取地址的，没有名字的，临时的就是右值；</li></ul><p><u>可见<strong>立即数</strong>，<strong>函数返回的值</strong>等都是右值</u>；<u>而<strong>非匿名对象(包括变量</strong>)，<strong>函数返回的引用</strong>，<strong>const对象</strong>等都是左值。</u></p><p>从本质上理解，</p><ul><li>创建和销毁由<u>编译器幕后控制</u>，程序员只能确保在<u>本行代码有效的</u>，就是<strong>右值</strong>(包括立即数)；</li><li>而<u>用户创建的</u>，通过<u>作用域规则可知其生存期的</u>，就是<strong>左值</strong>(包括函数返回的局部变量的引用以及const对象)。</li></ul><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;typeinfo&gt;</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">b </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> a;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;">c </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">	//C++11提供了右值引用     </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    std::cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> typeid(b).</span><span style="color:#61AFEF;">name</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> std::endl;</span><span style="color:#7F848E;font-style:italic;"> //i	</span></span>
<span class="line"><span style="color:#ABB2BF;">    std::cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> typeid(c).</span><span style="color:#61AFEF;">name</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> std::endl;</span><span style="color:#7F848E;font-style:italic;"> //i</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">d </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">a;</span></span>
<span class="line"><span style="color:#ABB2BF;">    std::cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> typeid(d).</span><span style="color:#61AFEF;">name</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> std::endl;</span><span style="color:#7F848E;font-style:italic;"> //PKi</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">$g</span><span style="color:#ABB2BF;">++ -g -std = c++11 main.cc</span></span>
<span class="line"><span style="color:#E06C75;">$objdump</span><span style="color:#ABB2BF;"> -M intel -S a.out</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+'" alt="image-20240202162644415" tabindex="0" loading="lazy"><figcaption>image-20240202162644415</figcaption></figure>',10),M=o(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">var </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//var = 20;	//error,被const修饰不可以修改</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;">c </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">	//右值引用  </span></span>
<span class="line"><span style="color:#ABB2BF;">c </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">	//OK，没有const修饰，右值引用可以修改值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">e </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> c;</span><span style="color:#7F848E;font-style:italic;">	//一个右值引用变量本身是一个左值（c本身有内存有名字）</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//int &amp;&amp;e = c;	//error,右值引用只能引用右值，因为右值引用会产生一个临时量，而左值本身就有内存，所有代码有冲突</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结：</h3><ol><li><p>右值引用只能用来引用右值类型<code>int &amp;&amp;c = 20</code>；指令上，可以自动产生临时量，然后直接引用临时量；可以修改临时量的内存<code>c = 30</code></p></li><li><p>右值引用本身是一个左值，只能用左值引用来引用它</p></li><li><p><strong>不能用一个右值引用变量来引用左值</strong></p></li></ol><h2 id="例题" tabindex="-1"><a class="header-anchor" href="#例题" aria-hidden="true">#</a> 例题</h2>`,4),S=o(`<h3 id="写一句代码在内存的0x0018ff44处写一个4字节的10" tabindex="-1"><a class="header-anchor" href="#写一句代码在内存的0x0018ff44处写一个4字节的10" aria-hidden="true">#</a> 写一句代码在内存的0x0018ff44处写一个4字节的10</h3><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">0x</span><span style="color:#D19A66;">0018ff44</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">	//0x0018ff44是一个整数需要强转</span></span>
<span class="line"><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*&amp;&amp;</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">0x</span><span style="color:#D19A66;">0018ff44</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">	//右值引用，引用对象是int * 类型</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">0x</span><span style="color:#D19A66;">0018ff44</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">	//引用对象是个常量</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),j={id:"判断对错🍗🍗🍗",tabindex:"-1"},P=n("a",{class:"header-anchor",href:"#判断对错🍗🍗🍗","aria-hidden":"true"},"#",-1),J=o(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 例1</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">a;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*&amp;</span><span style="color:#ABB2BF;">q </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> p;</span><span style="color:#7F848E;font-style:italic;"> // 等价于const int** &lt;= int**,error</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//不要被表象迷住了,看成const int* &lt;= int*,要转成指针看</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//-&gt; const int **q = &amp;p</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//-&gt; const int ** = int**</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 例2</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">a;</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*&amp;</span><span style="color:#ABB2BF;">q </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> p;</span><span style="color:#7F848E;font-style:italic;"> //因为p是一个指针常量，即指针的值（即地址）是不可变的，但是q却是一个指向指针的引用，它允许改变指针的值</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 等价于int **q = &amp;p; </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//即 int** &lt;= int* const *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//-&gt; int* &lt;= const int *,error</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function O(Q,T){const a=c("font");return t(),r("div",null,[A,v,B("more"),u,l(a,{color:"red"},{default:p(()=>[s("前面带类型")]),_:1}),s("的为引用，不带的是取地址"),D,n("p",null,[m,s("。类似于线性表和栈的关系，栈是被限制的线性表，底层实现相同，"),b,s("，"),l(a,{color:"red"},{default:p(()=>[s("汇编上引用和指针的指令一样(都是拷贝a的地址到p,b 中)，"),C]),_:1}),s("(获取地址，然后赋值)。")]),f,n("p",null,[s("参数传递的方式除了上面的"),h,s("和"),g,s("两种外，还有"),E,s("。"),_,s("。这种情况下，"),x,s("，这样会大大提高函数的时空效率。 当用引用作为函数的参数时，其效果和用指针作为函数参数的效果相当。当调用函数时，函数中的形参就会被当成实参变量或对象的一个别名来使用，也就是说此时函数中对形参的各种操作实际上是对实参本身进行操作，而非简单的将实参变量或对象的值拷贝给形参。 "),n("strong",null,[s("使用指针作为函数的形参虽然达到的效果和使用引用一样，但"),l(a,{color:"red"},{default:p(()=>[s("当调用函数时仍需要为形参指针变量在内存中分配空间")]),_:1}),s("，而引用则不需要这样，故在C++中推荐使用引用而非指针作为函数的参数")])]),k,n("p",null,[s("当以引用作为函数的返回值时，"),n("u",null,[s("返回的变量其生命周期一定是要大于函数的生命周期的，即当函数执行完毕时，"),l(a,{color:"red"},{default:p(()=>[s("返回的变量还存在")]),_:1}),s("。")])]),q,n("ol",null,[n("li",null,[w,s("。主要原因是"),l(a,{color:"red"},{default:p(()=>[s('局部变量会在函数返回后被销毁，因此被返回的引用就成为了"无所指"的引用，程序会进入未知状态')]),_:1}),s("。")]),n("li",null,[I,s("。"),l(a,{color:"red"},{default:p(()=>[s("如果返回的引用只是作为一个临时变量出现，而没有被赋予一个实际的变量，那么该引用所在的空间就无法释放，会造成内存泄漏")]),_:1}),s("。")])]),N,n("ol",null,[V,K,n("li",null,[s("引用与指针的区别是，"),n("u",null,[s("指针"),l(a,{color:"red"},{default:p(()=>[s("通过某个指针变量指向一个变量")]),_:1}),s("后，对它所指向的变量"),l(a,{color:"red"},{default:p(()=>[s("间接操作")]),_:1})]),s("。程序中使用指针，程序的可读性差；而"),n("u",null,[s("引用本身就是目标变量的别名，对引用的操作就是对目标变量的操作("),l(a,{color:"red"},{default:p(()=>[s("直接操作")]),_:1}),s(")")]),s("。")])]),$,n("ul",null,[n("li",null,[n("strong",null,[l(a,{color:"red"},{default:p(()=>[s("左值引用要求右边的值必须能够取地址，如果无法取地址，可以用常引用")]),_:1})]),s("； 但使用常引用后，"),z])]),H,n("p",null,[n("strong",null,[l(a,{color:"red"},{default:p(()=>[s("一个右值引用变量本身是一个左值")]),_:1})])]),M,n("p",null,[n("strong",null,[l(a,{color:"red"},{default:p(()=>[s("做题时把引用还原为指针，便于理解")]),_:1})])]),S,n("h3",j,[P,s(),l(a,{color:"red"},{default:p(()=>[s("判断对错")]),_:1}),s("🍗🍗🍗")]),J])}const L=e(F,[["render",O],["__file","引用.html.vue"]]);export{L as default};
