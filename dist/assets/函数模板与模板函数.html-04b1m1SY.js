const e=JSON.parse('{"key":"v-4ee2bd74","path":"/ccpp/04%20%E6%A8%A1%E6%9D%BF/%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E4%B8%8E%E6%A8%A1%E6%9D%BF%E5%87%BD%E6%95%B0.html","title":"函数模板与模板函数","lang":"zh-CN","frontmatter":{"title":"函数模板与模板函数","icon":"file","order":1,"headerDepth":4,"category":["c/c++"],"tag":["模板"],"description":"函数模板与模板函数 为什么要定义模板？ 简化程序，少写代码，维持结构的清晰，大大提高程序的效率。 解决强类型语言的严格性和灵活性之间的冲突。 带参数的宏定义(原样替换) 函数重载(函数名字相同，参数不同) 模板(将数据类型作为参数) 强类型语言程序设计：C/C++/Java等，有严格的类型检查，如int a = 10，在编译时候明确变量的类 型，如果有问题就可以在编译时发现错误，安全，但是不够灵活，。 弱类型程序语言设计：js/python等，虽然也有类型，但是在使用的时候直接使用let/var number,不知道变量具体类型，由编译器解释变量类型，属于解释型语言。如果有错，到运行时才发现，虽然灵活，但是不安全。","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/04%20%E6%A8%A1%E6%9D%BF/%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E4%B8%8E%E6%A8%A1%E6%9D%BF%E5%87%BD%E6%95%B0.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"函数模板与模板函数"}],["meta",{"property":"og:description","content":"函数模板与模板函数 为什么要定义模板？ 简化程序，少写代码，维持结构的清晰，大大提高程序的效率。 解决强类型语言的严格性和灵活性之间的冲突。 带参数的宏定义(原样替换) 函数重载(函数名字相同，参数不同) 模板(将数据类型作为参数) 强类型语言程序设计：C/C++/Java等，有严格的类型检查，如int a = 10，在编译时候明确变量的类 型，如果有问题就可以在编译时发现错误，安全，但是不够灵活，。 弱类型程序语言设计：js/python等，虽然也有类型，但是在使用的时候直接使用let/var number,不知道变量具体类型，由编译器解释变量类型，属于解释型语言。如果有错，到运行时才发现，虽然灵活，但是不安全。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"模板"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"函数模板与模板函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[{"level":2,"title":"为什么要定义模板？","slug":"为什么要定义模板","link":"#为什么要定义模板","children":[]},{"level":2,"title":"模板的定义","slug":"模板的定义","link":"#模板的定义","children":[]},{"level":2,"title":"模板的类型","slug":"模板的类型","link":"#模板的类型","children":[]},{"level":2,"title":"函数模板","slug":"函数模板","link":"#函数模板","children":[{"level":3,"title":"注意：","slug":"注意","link":"#注意","children":[]}]},{"level":2,"title":"实例化：隐式实例化与显示实例化","slug":"实例化-隐式实例化与显示实例化","link":"#实例化-隐式实例化与显示实例化","children":[]},{"level":2,"title":"模板函数：用模板实现的函数","slug":"模板函数-用模板实现的函数","link":"#模板函数-用模板实现的函数","children":[]},{"level":2,"title":"函数模板、普通函数间的关系","slug":"函数模板、普通函数间的关系","link":"#函数模板、普通函数间的关系","children":[]},{"level":2,"title":"模板的特化：偏特化与全特化","slug":"模板的特化-偏特化与全特化","link":"#模板的特化-偏特化与全特化","children":[{"level":3,"title":"全特化","slug":"全特化","link":"#全特化","children":[]},{"level":3,"title":"偏特化：函数模板不能偏特化！！！！！！！！！！！！！","slug":"偏特化-函数模板不能偏特化","link":"#偏特化-函数模板不能偏特化","children":[]}]},{"level":2,"title":"函数模板的参数类型","slug":"函数模板的参数类型","link":"#函数模板的参数类型","children":[]},{"level":2,"title":"成员函数模板","slug":"成员函数模板","link":"#成员函数模板","children":[]}],"git":{},"readingTime":{"minutes":6.46,"words":1939},"filePathRelative":"ccpp/04 模板/函数模板与模板函数.md","excerpt":"<h1> 函数模板与模板函数</h1>\\n<h2> 为什么要定义模板？</h2>\\n<ol>\\n<li>\\n<p>简化程序，少写代码，维持结构的清晰，大大提高程序的效率。</p>\\n</li>\\n<li>\\n<p>解决强类型语言的<strong>严格性</strong>和<strong>灵活性</strong>之间的冲突。</p>\\n<ol>\\n<li>带参数的宏定义(原样替换)</li>\\n<li>函数重载(函数名字相同，参数不同)</li>\\n<li>模板(将数据类型作为参数)</li>\\n</ol>\\n</li>\\n<li>\\n<p><strong>强类型语言程序设计</strong>：C/C++/Java等，有严格的类型检查，如int a = 10，<u>在编译时候明确变量的类</u>\\n<u>型，如果有问题就可以在编译时发现错误，安全，但是不够灵活</u>，<strong></strong>。</p>\\n</li>\\n<li>\\n<p><strong>弱类型程序语言设计</strong>：js/python等，虽然也有类型，但是在使用的时候直接使用let/var number,<u>不知道变量具体类型，由编译器解释变量类型，属于解释型语言。如果有错，到运行时才发现，虽然灵活，但是不安全。</u></p>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
