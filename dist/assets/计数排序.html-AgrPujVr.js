import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o as B,c,d as s,e as n,f as a,w as p,a as t}from"./app--8O2lHwG.js";const r={},i=s("h1",{id:"计数排序",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#计数排序","aria-hidden":"true"},"#"),n(" 计数排序")],-1),y=s("h2",{id:"计数排序应用场景",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#计数排序应用场景","aria-hidden":"true"},"#"),n(" 计数排序应用场景")],-1),F=s("strong",null,"整型排序",-1),A=s("h2",{id:"步骤",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#步骤","aria-hidden":"true"},"#"),n(" 步骤")],-1),d=s("li",null,"先找出序列中最大值和最小值，计算出计数数组的范围",-1),u=s("li",null,"遍历序列，统计出现的次数",-1),m=s("li",null,"为了使排序具有稳定性（保证相同值的前后顺序），计数数组累计求和，累计和就是该元素要存放的位置",-1),v=s("strong",null,"注意这里的映射关系",-1),D=t(`<h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h2><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;vector&gt;</span><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;climits&gt;</span><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;algorithm&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">//min_element(),max_element()返回下标</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::cout;  </span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::endl;  </span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::vector;  </span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">countSort</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">vector</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">nums</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">vector</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">result</span><span style="color:#ABB2BF;">) {  </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">nums</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">()) {  </span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // 如果输入为空，则直接返回，避免不必要的操作  </span></span>
<span class="line"><span style="color:#ABB2BF;">    }  </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //int maxNum = *max_element(nums.begin(), nums.end());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //int minNum = *min_element(nums.begin(), nums.end());</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> maxNum </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">nums</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">];  </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> minNum </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">nums</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">];  </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> num : nums) {  </span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (num </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> maxNum) {  </span></span>
<span class="line"><span style="color:#ABB2BF;">            maxNum </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> num;  </span></span>
<span class="line"><span style="color:#ABB2BF;">        }  </span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (num </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> minNum) {</span><span style="color:#7F848E;font-style:italic;"> // 不需要else if，因为可能同时遇到更大和更小的数  </span></span>
<span class="line"><span style="color:#ABB2BF;">            minNum </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> num;  </span></span>
<span class="line"><span style="color:#ABB2BF;">        }  </span></span>
<span class="line"><span style="color:#ABB2BF;">    }  </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> range </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> maxNum </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> minNum </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;  </span></span>
<span class="line"><span style="color:#ABB2BF;">      </span></span>
<span class="line"><span style="color:#ABB2BF;">    vector</span><span style="color:#C678DD;">&lt;int&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">countVec</span><span style="color:#ABB2BF;">(range, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">  //此时记录的是出现的次数</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> num : nums) {  </span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">++</span><span style="color:#E5C07B;">countVec</span><span style="color:#ABB2BF;">[num </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> minNum];  </span></span>
<span class="line"><span style="color:#ABB2BF;">    }  </span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 累积计数，注意从第二个元素开始（index为1）  </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">; i </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">countVec</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">size</span><span style="color:#ABB2BF;">(); </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">i) {  </span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">countVec</span><span style="color:#ABB2BF;">[i] </span><span style="color:#C678DD;">+=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">countVec</span><span style="color:#ABB2BF;">[i </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span><span style="color:#7F848E;font-style:italic;">  //此时元素下标代表元素，而元素值代表应该放置的位置</span></span>
<span class="line"><span style="color:#ABB2BF;">    }  </span></span>
<span class="line"><span style="color:#ABB2BF;">      </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 反向遍历输入数组，以便稳定排序  </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">result</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resize</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">nums</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">size</span><span style="color:#ABB2BF;">());  </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">nums</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">size</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">; i </span><span style="color:#C678DD;">&gt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; </span><span style="color:#C678DD;">--</span><span style="color:#ABB2BF;">i) {  </span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">result</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">countVec</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">nums</span><span style="color:#ABB2BF;">[i] </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> minNum] </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">nums</span><span style="color:#ABB2BF;">[i];</span><span style="color:#7F848E;font-style:italic;"> // 特别注意索引调整  </span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">--</span><span style="color:#E5C07B;">countVec</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">nums</span><span style="color:#ABB2BF;">[i] </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> minNum];</span><span style="color:#7F848E;font-style:italic;"> // 递减计数  </span></span>
<span class="line"><span style="color:#ABB2BF;">    }  </span></span>
<span class="line"><span style="color:#ABB2BF;">}  </span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">printVec</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">vector</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">nums</span><span style="color:#ABB2BF;">) {  </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> num : nums) {  </span></span>
<span class="line"><span style="color:#ABB2BF;">        cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> num </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39; &#39;</span><span style="color:#ABB2BF;">;  </span></span>
<span class="line"><span style="color:#ABB2BF;">    }  </span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;  </span></span>
<span class="line"><span style="color:#ABB2BF;">}  </span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">() {  </span></span>
<span class="line"><span style="color:#ABB2BF;">    vector</span><span style="color:#C678DD;">&lt;int&gt;</span><span style="color:#ABB2BF;"> nums </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {</span><span style="color:#D19A66;">22</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">22</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">21</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">16</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">29</span><span style="color:#ABB2BF;">};  </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">printVec</span><span style="color:#ABB2BF;">(nums);  </span></span>
<span class="line"><span style="color:#ABB2BF;">      </span></span>
<span class="line"><span style="color:#ABB2BF;">    vector</span><span style="color:#C678DD;">&lt;int&gt;</span><span style="color:#ABB2BF;"> result;  </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">countSort</span><span style="color:#ABB2BF;">(nums, result);  </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">printVec</span><span style="color:#ABB2BF;">(result);  </span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;  </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间复杂度：O ( N + r a n g e ) 空间复杂度：O ( r a n g e ) 。</p>`,3);function C(b,E){const l=e("font");return B(),c("div",null,[i,y,s("p",null,[n("计数排序只适用于**"),a(l,{color:"red"},{default:p(()=>[n("数据范围较集中")]),_:1}),n("的序列的排序**，若待排序列的数据较分散，则会造成空间浪费，并且计数排序只适用于"),F,n("，不适用与浮点型排序。")]),A,s("ol",null,[d,u,m,s("li",null,[n("倒叙遍历序列，查找该元素存放的位置（"),a(l,{color:"red"},{default:p(()=>[v]),_:1}),n("）")])]),D])}const h=o(r,[["render",C],["__file","计数排序.html.vue"]]);export{h as default};
