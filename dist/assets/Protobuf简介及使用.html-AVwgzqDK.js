import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as c,c as r,d as n,e as s,f as a,w as e,a as i}from"./app--8O2lHwG.js";const B="/assets/0cb8b4f6b4ab45f5a7a2246a96ae540a-OJbxOmeu.png",d="/assets/18eb7f35fbe24104b9c83e9bf6aa13c3-vuNgL8Rr.png",y="/assets/5644afa66fd74cf1a267ba526fec4424-dzaL5M-f.png",u={},F=n("h1",{id:"protobuf简介及使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#protobuf简介及使用","aria-hidden":"true"},"#"),s(" Protobuf简介及使用")],-1),b=n("h2",{id:"一、protobuf简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、protobuf简介","aria-hidden":"true"},"#"),s(" 一、Protobuf简介")],-1),v=n("strong",null,"Protobuf(protocol buffer)：是google 的一种数据交换的格式，它独立于平台语言",-1),A=n("u",null,"java、c#、c++、go 和 python，每一种实现都包含了相应语言的编译器以及库文件",-1),m=n("u",null,"用于诸如网络传输、配置文件、数据存储等诸多领域。",-1),f=n("h2",{id:"二、protobuf语法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二、protobuf语法","aria-hidden":"true"},"#"),s(" 二、Protobuf语法")],-1),g=n("p",null,"使用protobuf前需要先进行安装",-1),_={href:"https://blog.csdn.net/m0_46392035/article/details/124697124",target:"_blank",rel:"noopener noreferrer"},D={href:"https://www.cnblogs.com/fnlingnzb-learner/p/10534038.html",target:"_blank",rel:"noopener noreferrer"},h=i(`<p>1、对于普通单个成员变量，设置方法为set成员变量名()；读取值为实例化对象.成员变量名()； 2、对于一个消息类型里成员变量本身又是一个对象，利用mutable成员变量名()获取相应成员对象的指针，然后使用该指针修改成员数据。 3、对于列表类型，调用add_成员变量名()获取列表所管理的对象的指针，然后使用该指针修改成员数据。</p><h2 id="三、protobuf简单使用实例" tabindex="-1"><a class="header-anchor" href="#三、protobuf简单使用实例" aria-hidden="true">#</a> 三、protobuf简单使用实例</h2><p>1、先创建xxx.proto文件，然后在xxx.proto配置文件定义好消息类型，消息类型存储的为简单类型。</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">syntax </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;proto3&quot;</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> //声明了protobuf版本</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">package fixbug;</span><span style="color:#7F848E;font-style:italic;"> //声明代码所在的包(类似于C++的namespace)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//定义登录请求消息类型:name、pwd</span></span>
<span class="line"><span style="color:#ABB2BF;">message LoginRequest</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    string name </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> //表示name为LoginRequest类型的第一个字段  实际此处使用bytes更常见</span></span>
<span class="line"><span style="color:#ABB2BF;">    string pwd </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> //表示pwd为LoginRequest类型的第二个字段</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//定义登录响应消息类型:errcpde、errmsg、success</span></span>
<span class="line"><span style="color:#ABB2BF;">message LoginResponse</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    int32 errcode </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> //错误码</span></span>
<span class="line"><span style="color:#ABB2BF;">    string errmsg </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> //错误信息</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> success </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> //是否登录成功</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、执行<code>protoc xxx.proto --cpp_out=OUT_DIR(指定的目录)</code>，在当前目录下生成相应的.cc与.h文件。</p><figure><img src="`+B+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>3、我们打开.cc与.h发现，实际上我们刚才的配置文件自动生成了对应的类代码。</p><figure><img src="'+d+`" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><p>4、我们在main.cc中测试一下，注意要链接protobuf动态库。 main.cc代码：</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;test.pb.h&quot;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;string&gt;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">fixbug</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    LoginRequest req;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set_name</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;zhang san&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set_pwd</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;123456&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //数据序列化 =&gt; char*:调用SerializeToString方法</span></span>
<span class="line"><span style="color:#ABB2BF;">    std::string send_str;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">SerializeToString</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">send_str))</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        std::cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;序列化后数据: &quot;</span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">send_str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">c_str</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //反序列化数据 =&gt; login登录请求对象</span></span>
<span class="line"><span style="color:#ABB2BF;">    LoginRequest reqB;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">reqB</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">LoginRequest</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">ParseFromString</span><span style="color:#ABB2BF;">(send_str))</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        std::cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;反序列化后数据: &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">name</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">        std::cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;反序列化后数据: &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pwd</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',11);function C(x,E){const l=p("font"),o=p("ExternalLinkIcon");return c(),r("div",null,[F,b,n("p",null,[v,s("。 google 提供了protobuf多种语言的实现："),A,s("。"),n("strong",null,[s("它是一种"),a(l,{color:"green"},{default:e(()=>[s("二进制的格式")]),_:1}),s("，网络传输时"),a(l,{color:"green"},{default:e(()=>[s("节省带宽资源")]),_:1}),s("，而且它"),a(l,{color:"green"},{default:e(()=>[s("只存储有效数据")]),_:1}),s("，比使用xml、json进行数据交换"),a(l,{color:"green"},{default:e(()=>[s("快")]),_:1}),s("许多，用protobuf序列化后的大"),a(l,{color:"green"},{default:e(()=>[s("小")]),_:1}),s("是json的10分之一，xml格式的20分之一，是二进制序列化的10分之一")]),s("。 可以把它用于分布式应用之间的数据通信或者异构环境下的数据交换。作为一种效率和兼容性都很优秀的二进制数据传输格式，可以"),m]),f,g,n("p",null,[n("a",_,[s("ubuntu下protobuf安装使用（详解）_ubuntu protobuf-CSDN博客"),a(o)])]),n("p",null,[n("a",D,[s("Centos 7安装protobuf3.6.1 - Boblim - 博客园 (cnblogs.com)"),a(o)])]),h])}const L=t(u,[["render",C],["__file","Protobuf简介及使用.html.vue"]]);export{L as default};
