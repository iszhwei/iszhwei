import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as c,c as B,d as n,e as s,f as a,w as p,a as o}from"./app-9OmaxHRC.js";const r={},i=o(`<h1 id="复数类ccomplex" tabindex="-1"><a class="header-anchor" href="#复数类ccomplex" aria-hidden="true">#</a> 复数类CComplex</h1><p>运算符重载：运算符<u>不仅能实现原有的功能，而且能实现在函数中指定的新的功能</u>。本质还是<strong>函数重载</strong>或<strong>函数多态</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//格式</span></span>
<span class="line"><span style="color:#ABB2BF;">函数类型 operator 运算符名称(形参表) {</span></span>
<span class="line"><span style="color:#ABB2BF;">	对运算符的重载处理</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>operator</code>是关键字，是专门用于定义重载运算符的函数的，运算符名就是C++已有的运算符。</p><h2 id="运算符重载的规则" tabindex="-1"><a class="header-anchor" href="#运算符重载的规则" aria-hidden="true">#</a> 运算符重载的规则</h2>`,5),y=o("<ol><li><code>.</code>　 　成员访问运算符</li><li><code>.*</code> 　　成员指针访问运算符</li><li><code>::</code> 　　域运算符</li><li><code>sizeof</code> 长度运算符</li><li><code>?:</code> 　 条件运算符</li></ol>",1),d=n("u",null,"其参数至少有一个是类对象(或类对象的引用)",-1),F=n("li",null,"用于类对象的运算符一般必须重载，但有两个例外，“=”和“&”不必用户重载",-1),A=o(`<h3 id="测试sizeof是运算符" tabindex="-1"><a class="header-anchor" href="#测试sizeof是运算符" aria-hidden="true">#</a> 测试sizeof是运算符</h3><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//测试sizeof是运算符</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> number </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(number)</span></span>
<span class="line"><span style="color:#ABB2BF;">sizeof number</span><span style="color:#7F848E;font-style:italic;">//ok</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="究竟把运算符重载作为类的成员函数好-还是友元函数好" tabindex="-1"><a class="header-anchor" href="#究竟把运算符重载作为类的成员函数好-还是友元函数好" aria-hidden="true">#</a> 究竟把运算符重载作为类的成员函数好，还是友元函数好？</h2>`,3),C=n("code",null,"=",-1),m=n("code",null,"[]",-1),v=n("code",null,"()",-1),D=n("code",null,"->",-1),u=n("code",null,"<<",-1),b=n("code",null,">>",-1),E=n("em",null,"= , &= , != , ^= , %= , >>= , <<= )重载为成员函数 。 (4）一般将",-1),_=n("strong",null,"重载为",-1),h=o(`<h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h2><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CComplex</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">CComplex</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">r</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		:</span><span style="color:#61AFEF;">_mreal</span><span style="color:#ABB2BF;">(r)</span></span>
<span class="line"><span style="color:#ABB2BF;">		,</span><span style="color:#61AFEF;">_mimage</span><span style="color:#ABB2BF;">(i)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">=(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CComplex</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">_mreal</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_mreal</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">_mimage</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_mimage</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//指导编译器怎么做CComplex类对象的加法操作</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/*CComplex operator+(const CComplex&amp;com)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		return CComplex(this-&gt;_mreal + com._mreal,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			this-&gt;_mimage + com._mimage);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	}*/</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">CComplex</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">++(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">CComplex</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">_mreal</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">_mimage</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*CComplex comp = *this;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		this-&gt;_mimage++;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		this-&gt;_mreal++;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		return comp;*/</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">CComplex</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">++()</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		_mreal </span><span style="color:#C678DD;">+=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		_mimage </span><span style="color:#C678DD;">+=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">+=(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CComplex</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">rhs</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">_mreal</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">+=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">rhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_mreal</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">_mimage</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">+=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">rhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_mimage</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">() { cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;real:&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> _mreal </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;image:&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> _mimage </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> _mreal;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> _mimage;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">friend</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CComplex</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">+(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CComplex</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">lhs</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CComplex</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">rhs</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">friend</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ostream</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">&lt;&lt;(</span><span style="color:#E5C07B;">ostream</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">out</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CComplex</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">friend</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">istream</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">&gt;&gt;(</span><span style="color:#E5C07B;">istream</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">in</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">CComplex</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">istream</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">&gt;&gt;(</span><span style="color:#E5C07B;">istream</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">in</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">CComplex</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a, b;</span></span>
<span class="line"><span style="color:#ABB2BF;">	in </span><span style="color:#C678DD;">&gt;&gt;</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">&gt;&gt;</span><span style="color:#ABB2BF;"> b;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_mreal</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> a;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_mimage</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> b;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> in;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">ostream</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">&lt;&lt;(</span><span style="color:#E5C07B;">ostream</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">out</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CComplex</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	out </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;real:&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_mreal</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;image:&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">src</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_mimage</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> out;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">CComplex</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">operator</span><span style="color:#ABB2BF;">+(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CComplex</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">lhs</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CComplex</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">rhs</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">CComplex</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">lhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_mreal</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">rhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_mreal</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">lhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_mimage</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">rhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_mimage</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	CComplex </span><span style="color:#61AFEF;">c1</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	CComplex </span><span style="color:#61AFEF;">c2</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	CComplex c4;</span></span>
<span class="line"><span style="color:#ABB2BF;">	c4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> c1</span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;">c2;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">c4</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	c4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> c1 </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">c4</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	c4 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> c2;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">c4</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	CComplex c5;</span></span>
<span class="line"><span style="color:#ABB2BF;">	c5 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> c4</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">c5</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">	c5 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">c4;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">c5</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">	c5 </span><span style="color:#C678DD;">+=</span><span style="color:#ABB2BF;"> c4;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">c5</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;++++++++++++++++++++++++++++++&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> c5;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">	CComplex c6;</span></span>
<span class="line"><span style="color:#ABB2BF;">	cin </span><span style="color:#C678DD;">&gt;&gt;</span><span style="color:#ABB2BF;"> c6;</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> c6;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function f(g,x){const l=t("font");return c(),B("div",null,[i,n("ol",null,[n("li",null,[s("C++"),a(l,{color:"red"},{default:p(()=>[s("不允许")]),_:1}),s("用户"),a(l,{color:"red"},{default:p(()=>[s("自己定义新的运算符")]),_:1}),s("，只能对已有的C++运算符进行重载。")]),n("li",null,[a(l,{color:"red"},{default:p(()=>[s("**不能重载重载的运算符**")]),_:1}),s("只有5个："),y]),n("li",null,[s("重载"),a(l,{color:"red"},{default:p(()=>[s("不能改变")]),_:1}),s("运算符运算对象(即操作数)的"),a(l,{color:"red"},{default:p(()=>[s("个数")]),_:1})]),n("li",null,[s("重载不能改变运算符的"),a(l,{color:"red"},{default:p(()=>[s("优先级")]),_:1}),s("别")]),n("li",null,[s("重载不能改变运算符的"),a(l,{color:"red"},{default:p(()=>[s("结合性")]),_:1})]),n("li",null,[s("重载不能改变"),a(l,{color:"red"},{default:p(()=>[s("默认的参数")]),_:1})]),n("li",null,[s("重载的运算符必须"),a(l,{color:"orange"},{default:p(()=>[s("和用户自定义类型的对象一起使用")]),_:1}),s("，"),d]),F]),A,n("p",null,[s("(1)C++规定，"),n("strong",null,[a(l,{color:"green"},{default:p(()=>[s("赋值运算符"),C,s("、下标运算符"),m,s("、函数调用运算符"),v,s("、成员运算符"),D]),_:1}),a(l,{color:"red"},{default:p(()=>[s("必须作为成员函数重载")]),_:1})]),s("。 (2)"),n("strong",null,[a(l,{color:"green"},{default:p(()=>[s("流插入"),u]),_:1}),s("和"),a(l,{color:"green"},{default:p(()=>[s("流提取运算符"),b]),_:1}),s("、"),a(l,{color:"green"},{default:p(()=>[s("类型转换运算符函数")]),_:1}),s("不能定义为类的成员函数，"),a(l,{color:"red"},{default:p(()=>[s("只能作为友元函数")]),_:1}),s("。")]),s(" (3)一般将单目运算符和复合运算符( += , -= , /= , "),E,s("*"),a(l,{color:"red"},{default:p(()=>[s("双目运算符")]),_:1}),_,s("友元**函数。")]),h])}const w=e(r,[["render",f],["__file","复数类CComplex.html.vue"]]);export{w as default};
