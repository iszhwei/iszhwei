import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as s,a as t}from"./app-9OmaxHRC.js";const i="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_19_color_FFFFFF_t_70_g_se_x_16-yZpAf9Hg.png",n="/assets/e3739777ac7841489c71578be7a16557-Syz3Hcpk.png",_="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_9_color_FFFFFF_t_70_g_se_x_16-CzwNWR40.png",r="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-X-WWaLND.png",o="/assets/b86d78f4b2a04a2baf6cf21d454d84b3-j9H6Vntj.png",l="/assets/e7cbd5f7840e463c8f67c32933dcdf40-8P3wH-wl.png",p="/assets/3a632c5b18624a9c8f72cdb05fabc844-l9D1lXgI.png",c="/assets/387ffeb04e5e4ba6bc2637e16858bfc6-5nYZhfOb.png",g="/assets/bffe1282589749e4b7d7536fdf050f8e-yURCHEZs.png",d="/assets/35feb897dced41efb48ba3d421a39e37-M-pAWXXq.png",F="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-171370348983321-mfXi3sT7.png",m="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_15_color_FFFFFF_t_70_g_se_x_16-PrPTSApq.png",f="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_14_color_FFFFFF_t_70_g_se_x_16-3LDgi3TP.png",h="/assets/image-20240421204738814-RaNVDWO3.png",y="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-171370373092828-ynjTUnWR.png",b="/assets/31d80e84fccc46f1a2bd5635ce77fd55-03NJ9NoL.png",u="/assets/6b2fd89c491342b6a49b6e33889f4a00-7KEZMf1U.png",x="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-171370377845035-0JHVlRAT.png",B="/assets/40348de8057841fe96fb62efd933a9d4-2w9YvtoK.png",Q="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-171370381111540-hg0g4Am9.png",w="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-171370383100043-1w6glOcz.png",A="/assets/75dd044beae34f08afec947bfe18d8fc-rJj-jRPw.png",z="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-171370386287648-TAGbBdti.png",v="/assets/f88c9aef267b4082ba5093ec8e02bf54-4J1mr2KS.png",L="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-171370389824953-J9gQUgEN.png",T="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-171370391228256-HL_L3g_i.png",X="/assets/2474641217f548129c86427aa0102ea7-mQc4Y9YE.png",M="/assets/b510e1bd6d954d4fa8a05307e8a2b374-8xKZ85BD.png",C="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-171370396046363-889zEAAw.png",D="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-171370447483366-qIW5aiZz.png",S="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_19_color_FFFFFF_t_70_g_se_x_16-171370449643169-1e972WZs.png",k="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_10_color_FFFFFF_t_70_g_se_x_16-9RG8gO6j.png",W="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-171370455119274-x7w-U7Kp.png",E="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_12_color_FFFFFF_t_70_g_se_x_16-g4Gs0Oui.png",N="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_13_color_FFFFFF_t_70_g_se_x_16-Q8DspPLm.png",Z="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_10_color_FFFFFF_t_70_g_se_x_16-171370459043481-lbn4KBRr.png",V="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-171370460483884-83V5dAub.png",I="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-171370462502587-xf6uyl8a.png",H="/assets/b4420c5ccc16474ab6a527dc56b92479-JM5cnZAw.png",q="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-171370467435792-KePN_VKK.png",K="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-171370468784095-Ihj8dchY.png",R="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-171370470770398-AZHGrj1_.png",j="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-1713704720451101-5IKEFVT8.png",J="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_13_color_FFFFFF_t_70_g_se_x_16-1713704734278104-xSsYeDIt.png",O="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-1713704746548107-_vb7-O-3.png",P={},U=t('<h1 id="读写分离配置实践" tabindex="-1"><a class="header-anchor" href="#读写分离配置实践" aria-hidden="true">#</a> 读写分离配置实践</h1><h2 id="一、环境准备" tabindex="-1"><a class="header-anchor" href="#一、环境准备" aria-hidden="true">#</a> 一、环境准备</h2><p>master（虚拟机centos7，NAT模式，固定ip）：192.168.131.129 slave（win10，路由器局域网，DHCP协议）：192.168.31.27</p><p>由于MyCat是用Java写的，需要JDK1.7版本以上 MySQL的root账户有远程访问权限</p><h3 id="_1-查看主从复制状态" tabindex="-1"><a class="header-anchor" href="#_1-查看主从复制状态" aria-hidden="true">#</a> 1.查看主从复制状态</h3><p>读写分离基于主从复制，查看主从复制状态</p><figure><img src="'+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-查看jdk版本" tabindex="-1"><a class="header-anchor" href="#_2-查看jdk版本" aria-hidden="true">#</a> 2. 查看JDK版本</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">java -version</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-打开root的远程连接权限" tabindex="-1"><a class="header-anchor" href="#_3-打开root的远程连接权限" aria-hidden="true">#</a> 3. 打开root的远程连接权限</h3><figure><img src="'+_+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>一般MySQL Server和代理中间件是不在一台机器上的，涉及数据库的远程访问和连接</p><p>我们可以拿root进行连接，也可以创建新的用户进行连接</p><p>root用户默认是localhost，只能本地连接，不支持远程连接，所以需要root远程连接的权限打开。%表示允许任意地址连接，如果缩小权限，写成MyCat所在机器的ip地址就可以，用root连接MySQL服务器</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">mysql</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">grant</span><span style="color:#ABB2BF;"> all privileges </span><span style="color:#C678DD;">on</span><span style="color:#ABB2BF;"> *.* </span><span style="color:#C678DD;">to</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;root&#39;</span><span style="color:#ABB2BF;">@</span><span style="color:#98C379;">&#39;%&#39;</span><span style="color:#ABB2BF;"> identified </span><span style="color:#C678DD;">by</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;123456&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">with</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">grant</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">option</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">Query OK, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">rows</span><span style="color:#ABB2BF;"> affected, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> warning (</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;"> sec)</span></span>
<span class="line"><span style="color:#ABB2BF;">mysql</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> flush privileges;</span></span>
<span class="line"><span style="color:#ABB2BF;">Query OK, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">rows</span><span style="color:#ABB2BF;"> affected (</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;"> sec)</span></span>
<span class="line"><span style="color:#ABB2BF;">mysql</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> quit</span></span>
<span class="line"><span style="color:#ABB2BF;">Bye</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">[root@localhost Downloads]</span><span style="color:#ABB2BF;"># </span><span style="color:#C678DD;">service</span><span style="color:#ABB2BF;"> mysqld </span><span style="color:#C678DD;">restart</span><span style="color:#ABB2BF;">          # 若服务不存在，可尝试使用service mysql </span><span style="color:#C678DD;">restart</span></span>
<span class="line"><span style="color:#ABB2BF;">Redirecting </span><span style="color:#C678DD;">to</span><span style="color:#ABB2BF;"> /bin/systemctl </span><span style="color:#C678DD;">restart</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">mysqld</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">service</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的MyCat和主库跑在同一台Linux上</p><h4 id="_4-安装mycat" tabindex="-1"><a class="header-anchor" href="#_4-安装mycat" aria-hidden="true">#</a> 4. 安装MyCat</h4><p>安装<code>lrzsz</code>，用于windows和Linux传输文件（xftp也行）</p><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>用<code>rz</code>命令将MyCat包传输到Linux</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Linux上的文件上传到Windows：<code>sz+文件路径</code></p><p>解压MyCat包放到合适的目录下，可以放到<code>/usr/local</code>下</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>mycat/bin</code>：放的是可执行文件</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>mycat/conf</code>：放的MyCat的配置文件</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>mycat/logs</code>：放的MyCat的日志文件</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>wrapper.log：记录启动过程中遇到的错误</li><li>mycat.log：记录运行过程中遇到的错误</li></ul><p>由于我们是直接解压的，没有安装，为了不用手动指定mycat的路径，我们 在<code>/usr/bin</code>下建立软连接，连接用户目录下的mycat和我们解压路径下的mycat</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这样就不用指定路径，直接使用mycat</p><figure><img src="'+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="二、配置文件" tabindex="-1"><a class="header-anchor" href="#二、配置文件" aria-hidden="true">#</a> 二、配置文件</h2><blockquote><p><strong>配置文件在<code>mycat/conf</code>下</strong></p></blockquote><h3 id="_1-server-xml" tabindex="-1"><a class="header-anchor" href="#_1-server-xml" aria-hidden="true">#</a> 1. server.xml</h3><p>用于配置client登录Mycat的账号密码，还可以配置白名单黑名单，限制客户的连接等</p><p><strong>用户配置</strong></p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>不需要和MySQL的账号密码一样</strong>，因为我们的MySQL Client直接访问的是MyCat，再由MyCat登录MySQL Server，这里设置的用户、密码都是用来登录MyCat的</p><p><strong>USERDB是给客户端操作的逻辑库</strong>，由于MySQL Client访问的是MyCat，在MyCat上直接操作USERDB这个库即可，<strong>这个库其实是不存在的，这个库最终会映射到MySQL Server真实的MySQL库表上</strong></p><p>这个逻辑库看起来好像在MyCat一台机器上，实际上经过分库分表操作可能分配在不同的机器上，我们只需要操作这个逻辑库就可以，其他的不用关心。多个逻辑库的话，在标签schemas中间，用逗号分隔开即可</p><p><strong>防火墙配置</strong></p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-schema-xml" tabindex="-1"><a class="header-anchor" href="#_2-schema-xml" aria-hidden="true">#</a> 2.schema.xml</h3><p>schema.xml用于配置逻辑库和数据源、读写分离、分库分表信息等</p><p>schema.xml配置以下三点：</p><ul><li>逻辑库和逻辑表：MySQL Client都是操作的MyCat上的逻辑库（schema）和逻辑表</li><li>数据节点：这个库或者表的内容放在哪个节点（dataNode）上，这个节点对应具体的物理机器叫dataHost</li></ul><p>逻辑库、数据节点以及数据库主机名称都可以随便取，但以下地方需要保持相同</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>maxCon、minCon：MyCat内置连接池的最大、最小连接量</p></li><li><p>balance： 0：不开启读写分离 1：全部的readHost和stand by writeHost参与读操作的负载 ，比如2套1主2从，M1叫做writeHost，S1、S2、S3、S4 叫做readHost，M2叫做stand by writeHost 2：所有读操作随机在readHost和writeHost上分发（少用） 3：所有读请求随机分发到writeHost对应的readHost上执行（最常使用，所有的select操作都在slave上执行，master库只做写操作）</p></li><li><p>writeType=0： 表示所有写操作发送到配置的第一个writeHost，第一个挂掉切换到还在的第二个 writeHost</p></li><li><p>switchType（切换的类型，当一个master挂了，切换到另一个master上）： -1：不自动切换 1：根据心跳select user()自动切换 2：基于MySQL的主从同步状态决定是否进行切换，即MyCat发送show slave status给MySQL Server</p></li><li><p>writeHost、readHost：配置写服务器（master）和读服务器（slave），readHost标签在writeHost内，表示读服务器是slave，图中黄色框中是配置了一个一主一从，嵌套多个readHost标签就是配置一主多从。图中并列的writeHost标签表示备份的写库，当master宕机后，slave也将无法和master配合工作，会切换到备份的写库继续工作。其实图中配置的是多主多从</p></li><li><p>heartbeat：MyCat定时发送指定语句给MySQL Server，如果能正常返回数据，则表示正常工作；若不能正常返回数据，则表示机器故障，MyCat需要进行容灾切换</p></li></ul><p>如果slave有问题，master是正常，就会在master上做读和写操作 如果master有问题，slave是正常，此时slave是没法单独使用的，它会在多主多从的配置中找下一套主从配置来使用 如果主从都正常，master做写操作，slave做读操作</p><h2 id="三、启动服务" tabindex="-1"><a class="header-anchor" href="#三、启动服务" aria-hidden="true">#</a> 三、启动服务</h2><p>查看配置文件mycat/conf/schema.xml</p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>启动MyCat服务</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查看端口</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这表示mycat正常监听8066和9066端口</p><h3 id="_1-配置文件问题一" tabindex="-1"><a class="header-anchor" href="#_1-配置文件问题一" aria-hidden="true">#</a> 1. 配置文件问题一</h3><p><code>mycat/schema.xml</code>中备份的主库没有结束标签</p><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>配置好后，我们重启mycat程序</p><figure><img src="'+B+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查看<code>mycat/logs/wrapper.log</code>，记录了mycat启动过程中的错误</p><figure><img src="'+Q+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-配置文件问题二" tabindex="-1"><a class="header-anchor" href="#_2-配置文件问题二" aria-hidden="true">#</a> 2. 配置文件问题二</h3><p><code>mycat/schema.xml</code>中读库的端口出错</p><figure><img src="'+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>配置好后，我们重启mycat程序</p><figure><img src="'+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查看<code>mycat/logs/wrapper.log</code>，记录了mycat启动过程中的错误</p><figure><img src="'+z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们看到心跳不成功了，就应该判断是网络原因，或者是ip:port配置原因，于是我们看到了3309端口，就知道是配置的端口错误</p><h2 id="四、mycat-9066端口和8066端口" tabindex="-1"><a class="header-anchor" href="#四、mycat-9066端口和8066端口" aria-hidden="true">#</a> 四、MyCat 9066端口和8066端口</h2><p>我们开启MyCat后台服务</p><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-9066管理端口" tabindex="-1"><a class="header-anchor" href="#_1-9066管理端口" aria-hidden="true">#</a> 1. 9066管理端口</h3><p>在Linux Shell下登录MyCat的9066端口（使用<code>mycat/conf/server.xml</code>中配置的登录用户名和密码登录）</p><p>登录MyCat后也是进入了一个MySQL Shell，monitor表示状态监控</p><figure><img src="'+L+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>show @@help</code>显示mycat支持的命令</p><figure><img src="'+T+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查看逻辑库：<code>show @@database</code></p><figure><img src="'+X+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查看逻辑节点和真实库的映射关系<code>show @@datanode</code></p><figure><img src="'+M+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查看数据源<code>show @@datasource</code></p><figure><img src="'+C+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>M2是我们配置的备用的第二套写库，这种情况下，还要配置M2为M1的从，需要同步数据</p><h3 id="_2-8066数据端口" tabindex="-1"><a class="header-anchor" href="#_2-8066数据端口" aria-hidden="true">#</a> 2.8066数据端口</h3><p>在Linux Shell下登录mycat的8066端口（使用mycat/conf/server.xml中配置的登录用户名和密码登录）</p><p>OpenCloundDB表示我们看到的是一个云状数据库，云后面是如何提供的库表的服务能力，我们是不知道的。mycat就是云DB，把后端所有的细节给客户端隐藏了，客户端只需要去处理代理服务器上的DB就可以了。可以看作一个反向代理服务器</p><figure><img src="'+D+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查看数据库</p><figure><img src="'+S+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个逻辑库USERDB对应的就是真实库mytest</p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="五、验证读写分离" tabindex="-1"><a class="header-anchor" href="#五、验证读写分离" aria-hidden="true">#</a> 五、验证读写分离</h2><p>查看查询日志general_log，这个日志记录了MySQL Server收到的所有SQL语句</p><h3 id="_1-打开查询日志general-log" tabindex="-1"><a class="header-anchor" href="#_1-打开查询日志general-log" aria-hidden="true">#</a> 1. 打开查询日志general_log</h3><p>打开windows从库上的general_log</p><figure><img src="'+W+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+E+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在Linux下的MySQL Server中也打开一下查询日志</p><figure><img src="'+N+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-验证读操作在slave" tabindex="-1"><a class="header-anchor" href="#_2-验证读操作在slave" aria-hidden="true">#</a> 2. 验证读操作在slave</h3><p>我们现在登录MyCat 8066数据端口，查询user表</p><figure><img src="'+Z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在Linux下的master服务器查看general_log，我们只看见了mycat发送的心跳包，并没有看见查询user表的SQL</p><figure><img src="'+V+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在windows下的slave服务器中查看general_log，看到了mycat发送的查询user表的SQL</p><figure><img src="'+I+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>没有问题，现在读操作是正确发送给了slave</p><h3 id="_3-验证写操作在master" tabindex="-1"><a class="header-anchor" href="#_3-验证写操作在master" aria-hidden="true">#</a> 3. 验证写操作在master</h3><p>我们现在登录MyCat 8066数据端口，给user表insert一条数据</p><figure><img src="'+H+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在Linux下的master服务器查看general_log，我们看见了insert数据的SQL</p><figure><img src="'+q+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在windows下的slave服务器中查看general_log，没有发现insert数据的SQL</p><figure><img src="'+K+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>没有问题，写操作正确发送给了master</p><h3 id="验证容灾功能" tabindex="-1"><a class="header-anchor" href="#验证容灾功能" aria-hidden="true">#</a> 验证容灾功能</h3><p>我们在mycat/conf/schema.xml中配置的是多住多从，M1挂了，读写操作会全部转发到M2</p><p>在我们当前环境中，就是Linux上的MySQL Server挂了，所有的读写操作都会转发给Windows上的MySQL Server</p><figure><img src="'+R+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>关闭Linux的mysqld服务，相当于关闭了master</p><figure><img src="'+j+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们现在登录MyCat 8066数据端口，对user表分别读写操作</p><figure><img src="'+J+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查看我们多主多从中备用系统的general_log，即Windows上的MySQL Server的general_log</p><figure><img src="'+O+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看见，由于master挂了，读写操作都被转发到了备用的Windows上的MySQL Server，证明容灾没有问题</p>',138),Y=[U];function G($,aa){return e(),s("div",null,Y)}const ta=a(P,[["render",G],["__file","读写分离配置实践.html.vue"]]);export{ta as default};
