import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as t,c as r,b as i,d as s,e as n,f as l,w as p,a as e}from"./app--8O2lHwG.js";const B="/assets/1681303724894-c2b6298e-b0b1-45b9-9d98-ca51a663bc46-o_3LrCT_.png",y="/assets/image-20240201150931334-X_hkAOHl.png",d={},F=s("h1",{id:"函数重载",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#函数重载","aria-hidden":"true"},"#"),n(" 函数重载")],-1),u=s("figure",null,[s("img",{src:B,alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1),A=e(`<p>在实际开发中，有时候需要实现几个功能类似的函数，只是细节有所不同。如交换两个变量的值，但这两种变量可以有多种类型，short, int, float等。<u>在C语言中</u>，必须要设计出不同名的函数，其原型类似于：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">swap1</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">short</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">short</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">swap2</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">swap3</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">float</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">float</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),v=s("u",null,"借助重载，一个函数名可以有多种用途",-1),D=s("strong",null,"同一作用域内",-1),C=s("strong",null,"具有相同函数名",-1),b=s("strong",null,"不同参数列表",-1),m=s("strong",null,"重载函数",-1),h=s("strong",null,"名字改编",-1),f=s("li",null,[s("mark",null,"函数名称必须相同 。")],-1),E=s("li",null,[s("mark",null,[n("参数列表必须不同（参数的"),s("strong",null,"类型"),n("不同、"),s("strong",null,"个数"),n("不同、"),s("strong",null,"顺序"),n("不同）。")])],-1),g=s("li",null,[s("mark",null,"仅仅返回类型不同不足以成为函数的重载。")],-1),_=s("h2",{id:"关注重点🍖🍖🍖",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#关注重点🍖🍖🍖","aria-hidden":"true"},"#"),n(" 关注重点🍖🍖🍖")],-1),x=s("h3",{id:"c-为什么支持函数重载-c语言不支持函数重载",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#c-为什么支持函数重载-c语言不支持函数重载","aria-hidden":"true"},"#"),n(),s("strong",null,"c++为什么支持函数重载，c语言不支持函数重载？")],-1),k=s("li",null,[n("由于编译产生符号的规则不同，因此c语言不支持函数重载 "),s("ul",null,[s("li",null,[n("c++代码用c语言编译器编译会出现"),s("strong",null,"链接错误")])])],-1),q=s("u",null,"编译器产生代码的规则不同",-1),L=s("u",null,"C++代码在产生函数符号时候，由函数名 + 参数列表类型组成的",-1),U=s("u",null,"C代码在产生函数符号时，符号只由函数名决定",-1),z=e(`<h3 id="函数重载需要注意什么" tabindex="-1"><a class="header-anchor" href="#函数重载需要注意什么" aria-hidden="true">#</a> <strong>函数重载需要注意什么？</strong></h3><ol><li>函数重载一定要先处于<strong>同一作用域</strong>中</li></ol><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">  // compare_int_int</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;compare_int_int&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> b;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;"> // compare_double_double</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;compare_double_double&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> b;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;"> // compare_const char*_const char*</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;compare_char*_char*&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">strcmp</span><span style="color:#ABB2BF;">(a, b) </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> b);</span><span style="color:#7F848E;font-style:italic;"> // 函数的声明,导致编译器不会去外面找别的compare定义，</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // call compare_int_int</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10.0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20.0</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // double -&gt; int</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;aaa&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;bbb&quot;</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // const char* =&gt; int，error！！！</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>函数名称必须相同 ，参数列表必须不同（参数的<strong>类型</strong>不同、<strong>个数</strong>不同、<strong>顺序</strong>不同）</li><li><strong><code>const</code> 和<code>volatile</code></strong> 的情况会影响形参类型(后面会涉及 )</li></ol><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;typeinfo&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">//typeid()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//虽然第二个函数的参数中包含了const修饰符，但是在函数参数中const修饰符并不影响函数的签名，因此两个函数的参数列表是相同的，会被视为重定义</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">func</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">) {}</span><span style="color:#7F848E;font-style:italic;">  // int</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">func</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">) {}</span><span style="color:#7F848E;font-style:italic;">  // 错误，重定义</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//下面的是函数重载，因为参数列表不同</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//虽然都是指向int类型的指针，但第二个函数的参数是指向常量int的指针，因此参数列表不同</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">func</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">	//_Z4funcPi</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">func</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">	//_Z4funcPKi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> b </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> typeid(a).</span><span style="color:#61AFEF;">name</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span><span style="color:#7F848E;font-style:italic;">  // int	</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> typeid(b).</span><span style="color:#61AFEF;">name</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span><span style="color:#7F848E;font-style:italic;"> // int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><u>仅仅返回类型不同不是函数重载</u><ul><li>因为函数符号的生成与返回值没有关系</li></ul></li></ol><h3 id="什么是多态-一个东西有多种多样的形态-怎么理解多态" tabindex="-1"><a class="header-anchor" href="#什么是多态-一个东西有多种多样的形态-怎么理解多态" aria-hidden="true">#</a> <strong>什么是多态（一个东西有多种多样的形态）/怎么理解多态？</strong></h3><ul><li><p>静态多态（编译时）：函数重载、模板</p></li><li><p>动态多态（运行时）</p></li></ul><h3 id="c-和c语言代码之间如何相互调用" tabindex="-1"><a class="header-anchor" href="#c-和c语言代码之间如何相互调用" aria-hidden="true">#</a> <strong>c++和c语言代码之间如何相互调用？</strong></h3><p>在linux上测试时，c文件链接用<code>gcc</code>,c++文件用<code>g++</code>，不然没效果</p><h4 id="c-调用c函数" tabindex="-1"><a class="header-anchor" href="#c-调用c函数" aria-hidden="true">#</a> C++调用C函数</h4><h5 id="如果c代码明确表示用c方式编译" tabindex="-1"><a class="header-anchor" href="#如果c代码明确表示用c方式编译" aria-hidden="true">#</a> 如果c代码明确表示用c方式编译</h5><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// main.cpp</span></span>
<span class="line"><span style="color:#C678DD;">extern</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;C&quot;</span><span style="color:#ABB2BF;">{	</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> ret </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;ret = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> ret </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// test.c</span></span>
<span class="line"><span style="color:#C678DD;">extern</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;C&quot;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> a </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> b;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">g++</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">test.c</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">main.cc</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-o</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">main</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="已经使用c编译方式编译成了可重定向的文件" tabindex="-1"><a class="header-anchor" href="#已经使用c编译方式编译成了可重定向的文件" aria-hidden="true">#</a> 已经使用c编译方式编译成了可重定向的文件</h5><p>因为C++中函数声明生成符号带参数类型，而C文件中函数生成符号不带参数类型，两者不匹配，故在<u>函数声明处加extern &quot;C &quot;：</u></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// main.cpp</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">extern</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;C&quot;</span><span style="color:#ABB2BF;">{	</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> ret </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;ret = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> ret </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// test.c</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> a </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> b;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可看出此时以C方式生成符号。再对<code>test.c</code> 编译得到目标文件并查看目标文件符号表</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">g++</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-c</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">main.cpp</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">#main.o</span></span>
<span class="line"><span style="color:#61AFEF;">gcc</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-c</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">test.c</span><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">#test.o</span></span>
<span class="line"><span style="color:#61AFEF;">g++</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">mian.o</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">test.o</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-o</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">main</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">#使用g++链接</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">g++</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-c</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">main.cpp</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">test.c</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">#这样写会导致test.c会按照c++方式编译成test.o</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="直接使用c-兼容c" tabindex="-1"><a class="header-anchor" href="#直接使用c-兼容c" aria-hidden="true">#</a> 直接使用c++兼容c</h5><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// main.cc</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::cout;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // 去掉extern &quot;C&quot;声明</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> ret </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;ret = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> ret </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// test.c</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> a </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> b;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">g++</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">test.c</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">main.cc</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-o</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">main</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="c调用c-的函数代码" tabindex="-1"><a class="header-anchor" href="#c调用c-的函数代码" aria-hidden="true">#</a> C调用C++的函数代码</h4><p>即函数定义写在cpp文件中</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// main.cpp</span></span>
<span class="line"><span style="color:#C678DD;">extern</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;C&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> a </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> b;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// test.c</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> ret </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ret = </span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, ret);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译执行成功：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">gcc</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-o</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">main</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">main.cpp</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">test.c</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果不把定义放在extern &quot;C&quot;中则提示：</p><figure><img src="`+y+`" alt="image-20240201150931334" tabindex="0" loading="lazy"><figcaption>image-20240201150931334</figcaption></figure><p><u><strong>注意</strong>：这个<code>extern &quot;C&quot;</code>是写在<code>cpp</code>文件中的！！！！</u></p><p><strong>补充</strong>：</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#ifdef</span><span style="color:#ABB2BF;"> __cplusplus</span></span>
<span class="line"><span style="color:#C678DD;">extern</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;C&quot;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">#endif</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;"> // sum  .text</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> a </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> b;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">#ifdef</span><span style="color:#ABB2BF;"> __cplusplus</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">#endif</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><u>C++编译器都内置了<code>__cplusplus</code>宏名，保证了若是以C++编译该该代码，可以保证以C方式生成符号，<strong>使得不管是在C还是C++文件中定义该函数，都能够在C文件中使用该函数。</strong></u></p><h2 id="课堂代码" tabindex="-1"><a class="header-anchor" href="#课堂代码" aria-hidden="true">#</a> 课堂代码</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;stdlib.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;string.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::cout;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//C++支持函数重载，C语言不支持函数重载</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//函数重载原理：对函数名字做了改编(name mangling)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//函数重载步骤：在同一个作用域中，当函数名字相同的时候，根据参数的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//个数、顺序、类型对函数名字进行改编</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#ifdef</span><span style="color:#ABB2BF;"> __cplusplus</span><span style="color:#7F848E;font-style:italic;">//C和C++的混合编程</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">extern</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;C&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> x </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> y;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#ifdef</span><span style="color:#ABB2BF;"> __cplusplus</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span><span style="color:#7F848E;font-style:italic;">//end of extern &quot;C&quot;</span></span>
<span class="line"><span style="color:#C678DD;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">z</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> x </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> y </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> z;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">float</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">float</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">float</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> x </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> y;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">float</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">float</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">float</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">float</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">z</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> x </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> y </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> z;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">float</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">float</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">float</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">z</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> x </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> y </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> z;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">argc</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">**</span><span style="color:#E06C75;font-style:italic;">argv</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">pInt </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> static_cast</span><span style="color:#C678DD;">&lt;int</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">malloc</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">)));</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">memset</span><span style="color:#ABB2BF;">(pInt, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">free</span><span style="color:#ABB2BF;">(pInt);</span></span>
<span class="line"><span style="color:#ABB2BF;">    pInt </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">nullptr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nm查看二进制文件" tabindex="-1"><a class="header-anchor" href="#nm查看二进制文件" aria-hidden="true">#</a> <code>nm</code>查看二进制文件</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">$gcc</span><span style="color:#ABB2BF;"> -c add.cc </span><span style="color:#7F848E;font-style:italic;">#生成add.o的二进制文件</span></span>
<span class="line"><span style="color:#E06C75;">$file</span><span style="color:#ABB2BF;"> add.o#查看文件信息</span></span>
<span class="line"><span style="color:#61AFEF;">add.o:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">ELF</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">64</span><span style="color:#98C379;">-bit</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">LSB</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">relocatable,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">x86-64,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">version</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> (SYSV), not stripped#ELF 二进制文件</span></span>
<span class="line"><span style="color:#E06C75;">$file</span><span style="color:#ABB2BF;"> add.cc</span></span>
<span class="line"><span style="color:#61AFEF;">add.cc:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">C++</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">source,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">UTF-8</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Unicode</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">text</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#对于二进制文件不能用vi看（看不懂），需要用nm查看</span></span>
<span class="line"><span style="color:#E06C75;">$nm</span><span style="color:#ABB2BF;"> add.o</span></span>
<span class="line"><span style="color:#61AFEF;">0000000000000000</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">add</span><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">#以c语言的方式编译的int add(int x, int y)</span></span>
<span class="line"><span style="color:#ABB2BF;">                 </span><span style="color:#61AFEF;">U</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">__cxa_atexit</span></span>
<span class="line"><span style="color:#ABB2BF;">                 </span><span style="color:#61AFEF;">U</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">__dso_handle</span></span>
<span class="line"><span style="color:#ABB2BF;">                 </span><span style="color:#61AFEF;">U</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">free</span></span>
<span class="line"><span style="color:#ABB2BF;">                 </span><span style="color:#61AFEF;">U</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">_GLOBAL_OFFSET_TABLE_</span></span>
<span class="line"><span style="color:#61AFEF;">0000000000000127</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">t</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">_GLOBAL__sub_I_add</span></span>
<span class="line"><span style="color:#61AFEF;">0000000000000090</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">main</span></span>
<span class="line"><span style="color:#ABB2BF;">                 </span><span style="color:#61AFEF;">U</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">malloc</span></span>
<span class="line"><span style="color:#ABB2BF;">                 </span><span style="color:#61AFEF;">U</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">memset</span></span>
<span class="line"><span style="color:#61AFEF;">0000000000000030</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">_Z3addff</span><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">#c++,根据参数的个数、顺序、类型对函数名字进行改编</span></span>
<span class="line"><span style="color:#61AFEF;">000000000000004a</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">_Z3addfff</span></span>
<span class="line"><span style="color:#61AFEF;">000000000000006e</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">_Z3addfif</span></span>
<span class="line"><span style="color:#61AFEF;">0000000000000014</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">_Z3addiii</span></span>
<span class="line"><span style="color:#61AFEF;">00000000000000de</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">t</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">_Z41__static_initialization_and_destruction_0ii</span></span>
<span class="line"><span style="color:#ABB2BF;">                 </span><span style="color:#61AFEF;">U</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">_ZNSt8ios_base4InitC1Ev</span></span>
<span class="line"><span style="color:#ABB2BF;">                 </span><span style="color:#61AFEF;">U</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">_ZNSt8ios_base4InitD1Ev</span></span>
<span class="line"><span style="color:#61AFEF;">0000000000000000</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">r</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">_ZStL19piecewise_construct</span></span>
<span class="line"><span style="color:#61AFEF;">0000000000000000</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">b</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">_ZStL8__ioinit</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="extern-和extern-c-关键字" tabindex="-1"><a class="header-anchor" href="#extern-和extern-c-关键字" aria-hidden="true">#</a> extern 和extern&quot;C&quot;关键字</h2><h3 id="extern关键字" tabindex="-1"><a class="header-anchor" href="#extern关键字" aria-hidden="true">#</a> extern关键字</h3><p>外部变量（全局变量）extern----全局静态存储区</p><p>extern 可以<strong>声明</strong>一个变量，作用是用来说明“<strong>此变量/函数是在别处定义的，要在此处引用</strong>”</p><p><strong>定义</strong>：表示创建变量或分配存储单元</p><p><strong>声明</strong>：说明变量的性质，但并<u>不分配存储单元</u></p>`,45),T=s("p",null,[s("code",null,"int a = 10;"),n("如果这个头文件被多次引用的话，a会被重复定义")],-1),Z=s("ul",null,[s("li",null,[s("strong",null,"也不要在头文件中定义函数，只写函数声明"),n("；")])],-1),I=e(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">extern</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i;</span><span style="color:#7F848E;font-style:italic;"> //用于变量的声明，没有分配内存</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i;</span><span style="color:#7F848E;font-style:italic;"> //注意，这是定义</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="extern-的使用场景1" tabindex="-1"><a class="header-anchor" href="#extern-的使用场景1" aria-hidden="true">#</a> extern 的使用场景1</h4><p>比如：创建两个文件 test.c 和 main.c文件；在test.c文件中定义一个全局变量：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//test.c</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> //定义一个全局变量</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//main.c文件</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">extern</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i;</span><span style="color:#7F848E;font-style:italic;"> //声明变量i，当编译链接时候，main.c文件就可以访问到test.c文件的i的值了；</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;</span><span style="color:#D19A66;">%d</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,i);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="extern-的使用场景2" tabindex="-1"><a class="header-anchor" href="#extern-的使用场景2" aria-hidden="true">#</a> extern 的使用场景2</h4>`,6),N=s("strong",null,"书写难度很繁琐，并且维护成本也大",-1),S=e(`<p>所以一般，我们都<strong>把声明语句放到头文件使用</strong>，即我定义一个test.h的头文件；</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//test.h</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">extern</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i;</span></span>
<span class="line"><span style="color:#C678DD;">extern</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> j;</span></span>
<span class="line"><span style="color:#C678DD;">extern</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> k;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//...</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//声明很多很多变量</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，假如你在其他文件要使用改变量i，<strong>直接包含该头文件即可</strong>，</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;"># include</span><span style="color:#98C379;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;"># include</span><span style="color:#98C379;">&quot;test.h&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//extern int i; 不用写了</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//extern int j;不用写了</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//extern int k;不用写了</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//...</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//声明很多很多变量,都不用写了，因为包含了头文件，声明都在头文件中</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;</span><span style="color:#D19A66;">%d</span><span style="color:#98C379;"> </span><span style="color:#D19A66;">%d</span><span style="color:#98C379;"> </span><span style="color:#D19A66;">%d</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,i,j,k);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="extern-c-的理解和用法" tabindex="-1"><a class="header-anchor" href="#extern-c-的理解和用法" aria-hidden="true">#</a> extern “C” 的理解和用法</h3>`,5),w=e(`<p><strong>这个功能主要用在下面的情况：</strong></p><ol><li><strong>C++代码调用C语言代码</strong></li><li><strong>在C++的头文件中使用</strong></li><li><strong>在多个人协同开发时，可能有的人比较擅长C语言，而有的人擅长C++，这样的情况下也会有用到</strong></li></ol><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#ifndef</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">__INCvxWorksh</span><span style="color:#7F848E;font-style:italic;"> /*防止该头文件被重复引用*/</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">__INCvxWorksh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#ifdef</span><span style="color:#ABB2BF;"> __cplusplus</span><span style="color:#7F848E;font-style:italic;">   //告诉编译器，这部分代码按C语言的格式进行编译，而不是C++的</span></span>
<span class="line"><span style="color:#C678DD;">extern</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;C&quot;</span><span style="color:#ABB2BF;">{</span><span style="color:#7F848E;font-style:italic;"> //C要大写</span></span>
<span class="line"><span style="color:#C678DD;">#endif</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;">&quot;test.h&quot;</span><span style="color:#7F848E;font-style:italic;">//c编写的代码</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*…*/	//被extern &quot;C&quot;限定的函数或变量是extern类型的</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;">#ifdef</span><span style="color:#ABB2BF;"> __cplusplus</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#endif</span><span style="color:#7F848E;font-style:italic;"> /*end of __INCvxWorksh*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p>`,4),O=e(`<h4 id="未加extern-c-声明" tabindex="-1"><a class="header-anchor" href="#未加extern-c-声明" aria-hidden="true">#</a> 未加extern &quot;C&quot;声明</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//模块A头文件 moduleA.h</span></span>
<span class="line"><span style="color:#ABB2BF;">#idndef _MODULE_A_H</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">_MODULE_A_H</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#FFFFFF;">#endif</span><span style="color:#ABB2BF;">　</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//模块B实现文件 moduleB.cpp</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;">&quot;moduleA.h&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);　</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),V=s("strong",null,"在链接阶段，链接器会从模块A生成的目标文件moduleA.obj中找_foo_int_int这样的符号，显然这是不可能找到的，因为foo()函数被编译成了_foo的符号",-1),j=s("strong",null,"链接错误",-1),$=e("<blockquote><p>在C++代码中，包含纯C的头文件而没有显式使用 <code>extern &quot;C&quot;</code> 并不一定会导致编译错误。这是因为C++编译器通常能够正确处理C语言的函数声明，即便缺少 <code>extern &quot;C&quot;</code> 包装。</p><p>C++编译器在处理纯C头文件时，会默认按照C的链接规范进行处理。这是因为C++的链接规范与C的规范在很多方面是相似的。因此，对于纯C的函数声明，通常不需要显式使用 <code>extern &quot;C&quot;</code>。</p><p>然而，显式地使用 <code>extern &quot;C&quot;</code> 是为了确保在更多情况下的兼容性。特别是在一些复杂的场景或者涉及到C++和C混合编程的时候，最好添加 <code>extern &quot;C&quot;</code> 来确保正确的链接规范。</p><p><strong>总的来说，虽然未加 <code>extern &quot;C&quot;</code> 声明不会导致编译错误，但在混合使用C和C++的情况下，最好使用 <code>extern &quot;C&quot;</code> 来确保正确的链接规范，以避免潜在的问题。</strong></p></blockquote>",1);function H(W,G){const a=c("font");return t(),r("div",null,[F,u,i("more"),A,s("p",null,[n("但在C++中，这完全没有必要。C++ 允许多个函数拥有相同的名字，只要它们的参数列表不同就可以，这就是函数重载（Function Overloading）。"),v,n("。 函数重载是指在"),l(a,{color:"green"},{default:p(()=>[D]),_:1}),n("，可以有一组"),l(a,{color:"cornflowerblue"},{default:p(()=>[C]),_:1}),n("，"),l(a,{color:"red"},{default:p(()=>[b]),_:1}),n("的函数，这组函数被称为"),m,n("。重载函数通常用来命名一组功能相似的函数，这样做减少了函数名的数量，避免了名字空间的污染，对于程序的可读性有很大的好处。 "),s("u",null,[n("C++进行"),l(a,{color:"red"},{default:p(()=>[n("函数重载的实现原理")]),_:1}),n("叫"),h,n("（name mangling）")]),n("，具体的规则是：")]),s("ol",null,[f,E,s("li",null,[s("mark",null,[n("函数的**"),l(a,{color:"red"},{default:p(()=>[n("返回类型可以相同也可以不相同")]),_:1}),n("**。")])]),g]),_,x,s("ul",null,[s("li",null,[n("c++代码在产生函数符号的时候，是由"),l(a,{color:"red"},{default:p(()=>[n("函数名+参数列表")]),_:1}),n("组成的")]),s("li",null,[n("c代码产生函数符号的时候，仅由"),l(a,{color:"red"},{default:p(()=>[n("函数名")]),_:1}),n("决定！")]),k]),s("blockquote",null,[s("p",null,[n("其最主要原因是"),q,n("。C++下我们可以编译通过它，但是C下面却不行。主要原因是"),L,n("，参数列表不同，编译时产生不同的符号；"),U,n("，链接时会产生链接错误，"),l(a,{color:"red"},{default:p(()=>[n("找到多个符号定义")]),_:1}),n("。")])]),z,s("blockquote",null,[s("p",null,[s("strong",null,[n("头文件中只存放“"),l(a,{color:"red"},{default:p(()=>[n("声明")]),_:1}),n("”，而不存放“定义”")])]),s("ul",null,[s("li",null,[s("strong",null,[l(a,{color:"red"},{default:p(()=>[n("最好不要在头文件中定义变量，例如全局变量")]),_:1})])])]),T,Z]),I,s("p",null,[n("但是上述的使用方式并不好，假如我一个大工程，"),s("u",null,[n("多个文件都要访问test.c文件的变量 i，只能在这些文件的"),l(a,{color:"red"},{default:p(()=>[n("开头")]),_:1}),n("都声明变量 i")]),n("，有好多其他变量呢？这会使得"),N,n("；")]),S,s("p",null,[s("strong",null,[n('加上extern "C"后，会指示编译器这部分代码按C语言（而不是C++）的方式进行编译。'),s("u",null,[n("由于C++支持函数重载，因此编译器编译函数的过程中"),l(a,{color:"red"},{default:p(()=>[n("会将函数的参数类型也加到编译后的代码中，而不仅仅是函数名")]),_:1}),n("；而C语言并不支持函数重载，因此"),l(a,{color:"red"},{default:p(()=>[n("编译C语言代码的函数时不会带上函数的参数类型，一般只包括函数名")]),_:1})]),n("。")])]),w,s("ul",null,[s("li",null,[l(a,{color:"red"},{default:p(()=>[n('不可以将extern "C" 添加在函数内部')]),_:1})]),s("li",null,[l(a,{color:"red"},{default:p(()=>[n('如果函数有多个声明，可以都加extern "C", 也可以只出现在第一次声明中，后面的声明会接受第一个链接指示符的规则。')]),_:1})])]),O,s("p",null,[n("实际上，"),l(a,{color:"red"},{default:p(()=>[V]),_:1}),n("，因此会出现"),j,n("（g++不会报错）。")]),$])}const K=o(d,[["render",H],["__file","函数重载.html.vue"]]);export{K as default};
