const e=JSON.parse('{"key":"v-6a78bf1e","path":"/ccpp/05%20%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/%E5%89%96%E6%9E%90new%E5%92%8Cdelete%E5%AE%9E%E4%B9%A0%E5%8E%9F%E7%90%86.html","title":"剖析new和delete实现原理","lang":"zh-CN","frontmatter":{"title":"剖析new和delete实现原理","icon":"file","order":7,"headerDepth":4,"category":["使用指南"],"tag":["运算符重载","new/delete"],"description":"剖析new与delete实现原理 [new/delete关键字 | 张威的编程学习笔记 (gitee.io)](https://iszhwei.gitee.io/ccpp/02 c__基础/new、delete.html) 我们先来看一下：malloc与new、delete与free区别 malloc与new的区别： ①malloc按字节开辟内存的；new开辟内存时需要指定类型； ②malloc开辟内存返回的都是void *** ，new相当于运算符重载函数，返回值自动转为指定的类型的指针。** ③malloc只负责开辟内存空间，new不仅仅也有malloc功能，还可以进行数据的初始化。 ④malloc开辟内存失败返回nullptr指针；new抛出的是bad_alloc类型的异常。 ⑤malloc开辟单个元素内存与数组内存是一样的，都是给字节数；new开辟时对单个元素内存后面不需要[]，而数组需要[]并给上元素个数。","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/05%20%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/%E5%89%96%E6%9E%90new%E5%92%8Cdelete%E5%AE%9E%E4%B9%A0%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"剖析new和delete实现原理"}],["meta",{"property":"og:description","content":"剖析new与delete实现原理 [new/delete关键字 | 张威的编程学习笔记 (gitee.io)](https://iszhwei.gitee.io/ccpp/02 c__基础/new、delete.html) 我们先来看一下：malloc与new、delete与free区别 malloc与new的区别： ①malloc按字节开辟内存的；new开辟内存时需要指定类型； ②malloc开辟内存返回的都是void *** ，new相当于运算符重载函数，返回值自动转为指定的类型的指针。** ③malloc只负责开辟内存空间，new不仅仅也有malloc功能，还可以进行数据的初始化。 ④malloc开辟内存失败返回nullptr指针；new抛出的是bad_alloc类型的异常。 ⑤malloc开辟单个元素内存与数组内存是一样的，都是给字节数；new开辟时对单个元素内存后面不需要[]，而数组需要[]并给上元素个数。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"运算符重载"}],["meta",{"property":"article:tag","content":"new/delete"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"剖析new和delete实现原理\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[{"level":2,"title":"我们先来看一下：malloc与new、delete与free区别","slug":"我们先来看一下-malloc与new、delete与free区别","link":"#我们先来看一下-malloc与new、delete与free区别","children":[]},{"level":2,"title":"new与delete实现原理进行剖析","slug":"new与delete实现原理进行剖析","link":"#new与delete实现原理进行剖析","children":[{"level":3,"title":"operator new的实现：","slug":"operator-new的实现","link":"#operator-new的实现","children":[]},{"level":3,"title":"operator delete的实现：","slug":"operator-delete的实现","link":"#operator-delete的实现","children":[]}]},{"level":2,"title":"问题一：平常我们new与delete都是正常使用的，但是new与delete能混用吗？C++为什么区分单个元素和数组的内存分配和释放呢？","slug":"问题一-平常我们new与delete都是正常使用的-但是new与delete能混用吗-c-为什么区分单个元素和数组的内存分配和释放呢","link":"#问题一-平常我们new与delete都是正常使用的-但是new与delete能混用吗-c-为什么区分单个元素和数组的内存分配和释放呢","children":[{"level":3,"title":"情况1：int类型下将其混用","slug":"情况1-int类型下将其混用","link":"#情况1-int类型下将其混用","children":[]},{"level":3,"title":"情况2：类类型下将其混用","slug":"情况2-类类型下将其混用","link":"#情况2-类类型下将其混用","children":[]},{"level":3,"title":"分析","slug":"分析","link":"#分析","children":[]}]},{"level":2,"title":"问题二：C++中如何设计一个程序检查内训泄露问题？","slug":"问题二-c-中如何设计一个程序检查内训泄露问题","link":"#问题二-c-中如何设计一个程序检查内训泄露问题","children":[]},{"level":2,"title":"要求一个类只能创建栈对象","slug":"要求一个类只能创建栈对象","link":"#要求一个类只能创建栈对象","children":[]},{"level":2,"title":"要求一个类只能创建堆对象","slug":"要求一个类只能创建堆对象","link":"#要求一个类只能创建堆对象","children":[]}],"git":{},"readingTime":{"minutes":5.66,"words":1698},"filePathRelative":"ccpp/05 运算符重载/剖析new和delete实习原理.md","excerpt":"<h1> 剖析new与delete实现原理</h1>\\n<p>[new/delete关键字 | 张威的编程学习笔记 (gitee.io)](https://iszhwei.gitee.io/ccpp/02 c__基础/new、delete.html)</p>\\n<h2> 我们先来看一下：malloc与new、delete与free区别</h2>\\n<ol>\\n<li>malloc与new的区别：</li>\\n</ol>\\n<p>①malloc<strong>按字节</strong>开辟内存的；new开辟内存时需要指定类型；\\n②malloc开辟内存<strong>返回的都是void *** ，new相当于运算符重载函数，返回值自动转为</strong>指定的类型的指针。**\\n③malloc<strong>只负责开辟内存</strong>空间，new不仅仅也有malloc功能，<strong>还可以进行数据的初始化</strong>。\\n④malloc开辟内存<strong>失败返回nullptr</strong>指针；new<strong>抛出的是bad_alloc类型的异常</strong>。\\n⑤malloc开辟<strong>单个元素内存与数组内存是一样的，都是给字节数</strong>；new开辟时对<strong>单个元素内存后面不需要[]，而数组需要[]并给上元素个数</strong>。</p>","autoDesc":true}');export{e as data};
