const s=JSON.parse('{"key":"v-e3980572","path":"/ccpp/07%20%E5%A4%9A%E6%80%81/%E5%B8%A6%E8%99%9A%E5%87%BD%E6%95%B0%E7%9A%84%E5%A4%9A%E5%9F%BA%E6%B4%BE%E7%94%9F.html","title":"带虚函数的多基派生","lang":"zh-CN","frontmatter":{"title":"带虚函数的多基派生","icon":"file","order":14,"headerDepth":4,"category":["c/c++"],"tag":["多态"],"description":"带虚函数的多基派生 #include &lt;iostream&gt; using std::cout; using std::endl; class Base1 { public: Base1() : _iBase1(10) { } virtual void f() { cout &lt;&lt; \\"Base1::f()\\" &lt;&lt; endl; } virtual void g() { cout &lt;&lt; \\"Base1::g()\\" &lt;&lt; endl; } virtual void h() { cout &lt;&lt; \\"Base1::h()\\" &lt;&lt; endl; } private: int _iBase1; }; class Base2 { public: Base2() : _iBase2(100) { } virtual void f() { cout &lt;&lt; \\"Base2::f()\\" &lt;&lt; endl; } virtual void g() { cout &lt;&lt; \\"Base2::g()\\" &lt;&lt; endl; } virtual void h() { cout &lt;&lt; \\"Base2::h()\\" &lt;&lt; endl; } private: int _iBase2; }; class Base3 { public: Base3() : _iBase3(1000) { } virtual void f() { cout &lt;&lt; \\"Base3::f()\\" &lt;&lt; endl; } virtual void g() { cout &lt;&lt; \\"Base3::g()\\" &lt;&lt; endl; } virtual void h() { cout &lt;&lt; \\"Base3::h()\\" &lt;&lt; endl; } private: int _iBase3; }; class Derived : public Base1 , public Base2 , public Base3 { public: Derived() : _iDerived(10000) { } void f() { cout &lt;&lt; \\"Derived::f()\\" &lt;&lt; endl; } virtual void g1() { cout &lt;&lt; \\"Derived::g1()\\" &lt;&lt; endl; } private: int _iDerived; }; int main() { Derived d; Base2 *pBase2 = &amp;d; Base3 *pBase3 = &amp;d; Derived *pDerived = &amp;d; pBase2-&gt;f(); cout &lt;&lt; \\"sizeof(d) = \\" &lt;&lt; sizeof(d) &lt;&lt; endl; cout &lt;&lt; \\"&amp;Derived = \\" &lt;&lt; &amp;d &lt;&lt; endl; cout &lt;&lt; \\"pBase2 = \\" &lt;&lt; pBase2 &lt;&lt; endl; cout &lt;&lt; \\"pBase3 = \\" &lt;&lt; pBase3 &lt;&lt; endl; return 0; } //结论：多重继承（带虚函数） //1. 每个基类都有自己的虚函数表 //2. 派生类如果有自己的虚函数，会被加入到第一个虚函数表之中 //3. 内存布局中，其基类的布局按照基类被声明时的顺序进行排列 //4. 派生类会覆盖基类的虚函数，只有第一个虚函数表中存放的是 // 真实的被覆盖的函数的地址；其它的虚函数表中存放的并不是真实的 // 对应的虚函数的地址，而只是一条跳转指令","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/07%20%E5%A4%9A%E6%80%81/%E5%B8%A6%E8%99%9A%E5%87%BD%E6%95%B0%E7%9A%84%E5%A4%9A%E5%9F%BA%E6%B4%BE%E7%94%9F.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"带虚函数的多基派生"}],["meta",{"property":"og:description","content":"带虚函数的多基派生 #include &lt;iostream&gt; using std::cout; using std::endl; class Base1 { public: Base1() : _iBase1(10) { } virtual void f() { cout &lt;&lt; \\"Base1::f()\\" &lt;&lt; endl; } virtual void g() { cout &lt;&lt; \\"Base1::g()\\" &lt;&lt; endl; } virtual void h() { cout &lt;&lt; \\"Base1::h()\\" &lt;&lt; endl; } private: int _iBase1; }; class Base2 { public: Base2() : _iBase2(100) { } virtual void f() { cout &lt;&lt; \\"Base2::f()\\" &lt;&lt; endl; } virtual void g() { cout &lt;&lt; \\"Base2::g()\\" &lt;&lt; endl; } virtual void h() { cout &lt;&lt; \\"Base2::h()\\" &lt;&lt; endl; } private: int _iBase2; }; class Base3 { public: Base3() : _iBase3(1000) { } virtual void f() { cout &lt;&lt; \\"Base3::f()\\" &lt;&lt; endl; } virtual void g() { cout &lt;&lt; \\"Base3::g()\\" &lt;&lt; endl; } virtual void h() { cout &lt;&lt; \\"Base3::h()\\" &lt;&lt; endl; } private: int _iBase3; }; class Derived : public Base1 , public Base2 , public Base3 { public: Derived() : _iDerived(10000) { } void f() { cout &lt;&lt; \\"Derived::f()\\" &lt;&lt; endl; } virtual void g1() { cout &lt;&lt; \\"Derived::g1()\\" &lt;&lt; endl; } private: int _iDerived; }; int main() { Derived d; Base2 *pBase2 = &amp;d; Base3 *pBase3 = &amp;d; Derived *pDerived = &amp;d; pBase2-&gt;f(); cout &lt;&lt; \\"sizeof(d) = \\" &lt;&lt; sizeof(d) &lt;&lt; endl; cout &lt;&lt; \\"&amp;Derived = \\" &lt;&lt; &amp;d &lt;&lt; endl; cout &lt;&lt; \\"pBase2 = \\" &lt;&lt; pBase2 &lt;&lt; endl; cout &lt;&lt; \\"pBase3 = \\" &lt;&lt; pBase3 &lt;&lt; endl; return 0; } //结论：多重继承（带虚函数） //1. 每个基类都有自己的虚函数表 //2. 派生类如果有自己的虚函数，会被加入到第一个虚函数表之中 //3. 内存布局中，其基类的布局按照基类被声明时的顺序进行排列 //4. 派生类会覆盖基类的虚函数，只有第一个虚函数表中存放的是 // 真实的被覆盖的函数的地址；其它的虚函数表中存放的并不是真实的 // 对应的虚函数的地址，而只是一条跳转指令"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"多态"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"带虚函数的多基派生\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[{"level":2,"title":"多基派生的二义性","slug":"多基派生的二义性","link":"#多基派生的二义性","children":[]},{"level":2,"title":"菱形继承","slug":"菱形继承","link":"#菱形继承","children":[]}],"git":{},"readingTime":{"minutes":3.95,"words":1186},"filePathRelative":"ccpp/07 多态/带虚函数的多基派生.md","excerpt":"<h1> 带虚函数的多基派生</h1>\\n<div class=\\"language-c++ line-numbers-mode\\" data-ext=\\"c++\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;iostream&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">using</span><span style=\\"color: #ABB2BF\\"> std::cout;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">using</span><span style=\\"color: #ABB2BF\\"> std::endl;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Base1</span><span style=\\"color: #ABB2BF\\"> </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">public:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">Base1</span><span style=\\"color: #ABB2BF\\">() </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    : </span><span style=\\"color: #61AFEF\\">_iBase1</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #D19A66\\">10</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">virtual</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">f</span><span style=\\"color: #ABB2BF\\">() </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {   </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"Base1::f()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;   </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">virtual</span><span style=\\"color: #ABB2BF\\"> </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">g</span><span style=\\"color: #ABB2BF\\">() </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"Base1::g()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">virtual</span><span style=\\"color: #ABB2BF\\"> </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">h</span><span style=\\"color: #ABB2BF\\">() </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {   </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"Base1::h()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">private:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> _iBase1;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Base2</span><span style=\\"color: #ABB2BF\\"> </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">public:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">Base2</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    : </span><span style=\\"color: #61AFEF\\">_iBase2</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #D19A66\\">100</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">virtual</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">f</span><span style=\\"color: #ABB2BF\\">() </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {   </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"Base2::f()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">virtual</span><span style=\\"color: #ABB2BF\\"> </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">g</span><span style=\\"color: #ABB2BF\\">() </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {   </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"Base2::g()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">virtual</span><span style=\\"color: #ABB2BF\\"> </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">h</span><span style=\\"color: #ABB2BF\\">() </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {   </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"Base2::h()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;   </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">private:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> _iBase2;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Base3</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">public:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">Base3</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    : </span><span style=\\"color: #61AFEF\\">_iBase3</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #D19A66\\">1000</span><span style=\\"color: #ABB2BF\\">) </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">virtual</span><span style=\\"color: #ABB2BF\\"> </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">f</span><span style=\\"color: #ABB2BF\\">() </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {   </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"Base3::f()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">virtual</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">g</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {   </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"Base3::g()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">virtual</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">h</span><span style=\\"color: #ABB2BF\\">() </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {   </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"Base3::h()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">private:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> _iBase3;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Derived</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">: </span><span style=\\"color: #C678DD\\">public</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Base1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">public</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Base2</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">public</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Base3</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">public:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">Derived</span><span style=\\"color: #ABB2BF\\">() </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    : </span><span style=\\"color: #61AFEF\\">_iDerived</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #D19A66\\">10000</span><span style=\\"color: #ABB2BF\\">) </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">f</span><span style=\\"color: #ABB2BF\\">() </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {   </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"Derived::f()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">virtual</span><span style=\\"color: #ABB2BF\\"> </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">g1</span><span style=\\"color: #ABB2BF\\">() </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"Derived::g1()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;    </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">private:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> _iDerived;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">main</span><span style=\\"color: #ABB2BF\\">() </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    Derived d;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    Base2 </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">pBase2 </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\">d;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    Base3 </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">pBase3 </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\">d;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    Derived </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">pDerived </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\">d;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">pBase2</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #61AFEF\\">f</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"sizeof(d) = \\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">sizeof</span><span style=\\"color: #ABB2BF\\">(d) </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"&amp;Derived = \\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\">d </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"pBase2 = \\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> pBase2 </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"pBase3 = \\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> pBase3 </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">//结论：多重继承（带虚函数）</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">//1. 每个基类都有自己的虚函数表</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">//2. 派生类如果有自己的虚函数，会被加入到第一个虚函数表之中</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">//3. 内存布局中，其基类的布局按照基类被声明时的顺序进行排列</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">//4. 派生类会覆盖基类的虚函数，只有第一个虚函数表中存放的是</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">//   真实的被覆盖的函数的地址；其它的虚函数表中存放的并不是真实的</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">//   对应的虚函数的地址，而只是一条跳转指令</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{s as data};
