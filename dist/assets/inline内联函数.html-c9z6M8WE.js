import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as t,c,b as r,d as s,e as n,f as l,w as e,a as p}from"./app--8O2lHwG.js";const B="/assets/1681304109194-2447f7ce-8687-48ed-932c-a4679599e78c-f7sJqBwl.png",d={},y=s("h1",{id:"inline内联函数",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#inline内联函数","aria-hidden":"true"},"#"),n(" inline内联函数")],-1),u=s("figure",null,[s("img",{src:B,alt:"1681304109194-2447f7ce-8687-48ed-932c-a4679599e78c",tabindex:"0",loading:"lazy"}),s("figcaption",null,"1681304109194-2447f7ce-8687-48ed-932c-a4679599e78c")],-1),v=p(`<p>在C++中，通常定义以下函数来求取两个整数的最大值</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">max</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> x </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> y </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> x </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> y;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为这么<strong>一个小的操作定义一个函数的好处</strong>有：</p><ul><li><strong>阅读时好理解</strong>：阅读和理解函数 max 的调用，要比读一条等价的条件表达式并解释它的含义要容易得多;</li><li><strong>修改时好找</strong>：如果需要做任何修改，修改函数要比找出并修改每一处等价表达式容易得多;</li><li><strong>使用函数可以确保统一的行为，每个测试都保证以相同的方式实现</strong>;</li><li><strong>方便重用</strong>：函数可以重用，不必为其他应用程序重写代码。</li></ul>`,4),m=s("strong",null,"缺点",-1),F=p(`<blockquote><p><strong>函数调用过程</strong>(函数调用过程也被称为<strong>函数的开销</strong>)：</p><p><strong>从右向左先压实参，然后执行call指令，call指令先把call指令的下一行指令的地址入栈，然后进入被调函数，被调函数左括号{先把调用方的栈底地址入栈，然后再给被调函数开辟栈帧，对被调函数的栈帧初始化（gcc/g++只负责开辟栈帧不进行初始化！！！汇编指令可以看到），......</strong></p></blockquote><p><u>在C语言中，我们使用<strong>带参数的宏定义</strong>这种借助编译器的优化技术来减少程序的执行时间</u>，那么在<u>C++中有</u>没有相同的技术或者更好的实现方法呢？答案是有的，那就是**<u>内联(inline)函数</u>**。内联函数作为编译器优化手段的一种技术，在降低运行时间上非常有用。</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::cout;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">multiply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) ((x) * (y))//带参数宏定义，x,y要看成表达式加(),否则容易出错</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* #define multiply(x, y) x * y */ //a + c * b + d = 3 + 5 * 4 + 6会出错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//普通函数会有参数入栈出栈的开销</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//现代的编译器可以自动识别一个函数是不是内联函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//特点：在函数调用的时候，用函数体去代替函数的调用</span></span>
<span class="line"><span style="color:#C678DD;">inline</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> x </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> y;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">argc</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">**</span><span style="color:#E06C75;font-style:italic;">argv</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, b </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, c </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, d </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;multiply(a, b) = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">multiply</span><span style="color:#ABB2BF;">(a, b) </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //a + c * b + d = 3 + 5 * 4 + 6</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;multiply(a + c, b + d) = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">multiply</span><span style="color:#ABB2BF;">(a </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> c, b </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> d) </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;add(a, b) = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(a, b) </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="什么是内联函数" tabindex="-1"><a class="header-anchor" href="#什么是内联函数" aria-hidden="true">#</a> 什么是内联函数？</h2><p><u>内联函数是C++的增强特性之一，用来<strong>降低程序的运行时间</strong>。</u></p><p><mark>内联函数：在<strong>编译过程</strong>（非程序运行阶段）中，就没了函数的调用开销了，<u><strong>在函数的调用点直接把函数的代码进行展开处理</strong></u></mark></p>`,6),A=p(`<li><p><strong>inline函数不再生成相应的函数符号</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">gcc</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-c</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">main</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">main.cpp</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-O2</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#61AFEF;">objdump</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-t</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">main.o</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),D=p(`<p>定义函数时，<u>在函数的最前面以关键字“inline”声明函数，即可使函数称为内联声明函数</u>。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">inline</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">max</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">y</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> x </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> y </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> x </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> y;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="inline内联函数和普通函数的区别🍗🍗🍗" tabindex="-1"><a class="header-anchor" href="#inline内联函数和普通函数的区别🍗🍗🍗" aria-hidden="true">#</a> inline内联函数和普通函数的区别🍗🍗🍗</h2><blockquote><p>面试中，简单问题不要只回答定义，要从原理上解释</p></blockquote><ul><li>函数调用参数压栈，栈帧的开辟和回退过程，函数调用开销大</li><li>inline函数在编译过程中，<strong>没有函数调用开销了，在调用点直接把函数代码展开处理了</strong></li><li><strong>inline函数不再生成相应的函数符号</strong></li><li>inline只是对编译器<strong>建议</strong>把函数处理成内联函数， 不是所有inline都会被编译器处理成内联函数，如递归，因为不知道展开几次</li><li><strong>debug版本（-g）上inline无效，只在release版本可用</strong></li></ul><blockquote><p>普通函数调用需要标准开销，但是内联函数不需要开销；如果这个函数在短时间内大量调用并且这个函数十分简单，我们尽量将其设置为内联函数；内联函数如果内联成功，不会在符号表生成符号。内联函数并不一定能够内联，最终由编译器决定</p></blockquote><h2 id="内联函数和带参数的宏定义" tabindex="-1"><a class="header-anchor" href="#内联函数和带参数的宏定义" aria-hidden="true">#</a> 内联函数和带参数的宏定义</h2>`,7),b=s("u",null,"调试时没有内联，发行版才会内敛",-1),g=s("li",null,[s("strong",null,"宏定义没有类型检查")],-1),C=p('<p>无论是《Effective C++》中的 “Prefer consts，enums，and inlines to #defines” 条款，还是《高质量程序设计指南——C++/C语言》中的“用函数内联取代宏”。在书《高质量程序设计指南——C++/c语言》中这样解释到： <img src="https://cdn.nlark.com/yuque/0/2023/png/32745296/1681301375845-81af8c0e-0676-4fc4-8fe7-7d335c492c25.png#averageHue=%23f3f2f2&amp;clientId=u45f72a84-247e-4&amp;from=paste&amp;height=822&amp;id=ubaa3e701&amp;originHeight=822&amp;originWidth=875&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=263748&amp;status=done&amp;style=none&amp;taskId=u3943ca1e-61dc-4ee2-adcb-47607d4f7eb&amp;title=&amp;width=875" alt="image.png" loading="lazy"><img src="https://cdn.nlark.com/yuque/0/2023/png/32745296/1681301385480-987da474-1382-4079-91aa-8a1ac68c0d48.png#averageHue=%23e1dede&amp;clientId=u45f72a84-247e-4&amp;from=paste&amp;height=701&amp;id=u7cac5840&amp;originHeight=701&amp;originWidth=1063&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=594378&amp;status=done&amp;style=none&amp;taskId=ub6c2528d-f71b-461b-8d86-3ddeb7e18df&amp;title=&amp;width=1063" alt="image.png" loading="lazy"><img src="https://cdn.nlark.com/yuque/0/2023/png/32745296/1681301399027-9b897cb9-7325-410f-84ba-c6cbdeaacfdd.png#averageHue=%23e8e6e6&amp;clientId=u45f72a84-247e-4&amp;from=paste&amp;height=631&amp;id=u3aa28459&amp;originHeight=631&amp;originWidth=1078&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=379828&amp;status=done&amp;style=none&amp;taskId=u3648ad06-24ab-46c7-9c04-d2260feebd9&amp;title=&amp;width=1078" alt="image.png" loading="lazy"></p><h2 id="将内联函数放入头文件" tabindex="-1"><a class="header-anchor" href="#将内联函数放入头文件" aria-hidden="true">#</a> 将内联函数放入头文件</h2>',2),f=s("strong",null,"关键字",-1),h=p(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">inline</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//该语句在头文件中</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//实现在.cpp文件中</span></span>
<span class="line"><span style="color:#ABB2BF;">{   </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //...   </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而正确的姿势如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">inline</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bar</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//该语句在头文件中</span></span>
<span class="line"><span style="color:#ABB2BF;">{   </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //...   </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以说，C++ inline函数是一种“用于实现的关键字”，而不是一种“用于声明的关键字”。<strong>一般地，用户可以阅读函数的声明，但是看不到函数的定义</strong>。<u>尽管在大多数教科书中内联函数的声明、定义体前面都加了 inline 关键字，但我认为 inline 不应该出现在函数的声明中</u>。这个细节虽然不会影响函数的功能，但是体现了高质量C++/C 程序设计风格的一个基本原则：声明与定义不可混为一谈，用户没有必要、也不应该知道函数是否需要内联。 <strong>内联函数应该在头文件中定义</strong>，这一点不同于其他函数。编译器在调用点内联展开函数的代码时，必须能够找到 inline函数的定义才能将调用函数替换为函数代码，而对于在头文件中仅有函数声明是不够的。 当然内联函数定义也可以放在源文件中，但此时只有定义的那个源文件可以用它，而且必须为每个源文件拷贝一份定义(即每个源文件里的定义必须是完全相同的)，当然即使是放在头文件中，也是对每个定义做一份拷贝，只不过是编译器替你完成这种拷贝罢了。但相比于放在源文件中，放在头文件中既能够确保调用函数是定义是相同的，又能够保证在调用点能够找到函数定义从而完成内联(替换)。</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//add.h</span></span>
<span class="line"><span style="color:#C678DD;">#ifndef</span><span style="color:#ABB2BF;"> __ADD_H__</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">__ADD_H__</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//对于内联函数（inline函数）而言，不要分成头文件与实现文件的形式，不能将声明与实现分开</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//内联函数一般都是一些小函数，不要去写for/while这些复杂的语句</span></span>
<span class="line"><span style="color:#C678DD;">inline</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;add.cc&quot;</span><span style="color:#7F848E;font-style:italic;">//可以使用#include进行包含实现文件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#endif</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="谨慎地使用内联" tabindex="-1"><a class="header-anchor" href="#谨慎地使用内联" aria-hidden="true">#</a> 谨慎地使用内联</h2><p>内联能提高函数的执行效率，**为什么不把所有的函数都定义成内联函数？**以下摘自《高质量程序设计指南----C/C++语言》： <img src="https://cdn.nlark.com/yuque/0/2023/png/32745296/1681302175870-fdef0e9a-4713-4e81-b115-887ead73bc10.png#averageHue=%23e9e2e2&amp;clientId=u45f72a84-247e-4&amp;from=paste&amp;height=696&amp;id=u813d46dd&amp;originHeight=696&amp;originWidth=873&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=473815&amp;status=done&amp;style=none&amp;taskId=uc0c6b076-4caa-41d5-9562-bfbdb1909e4&amp;title=&amp;width=873" alt="image.png" loading="lazy"></p><h2 id="课堂代码" tabindex="-1"><a class="header-anchor" href="#课堂代码" aria-hidden="true">#</a> 课堂代码</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//#include &quot;add.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">inline</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> x </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> y;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//#include &quot;add.h&quot;</span></span>
<span class="line"><span style="color:#C678DD;">#ifndef</span><span style="color:#ABB2BF;"> __ADD_H__</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">__ADD_H__</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//对于内联函数（inline函数）而言，不要分成头文件与实现文件的形式</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//不能将声明与实现分开</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//可以使用#include进行包含实现文件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//内联函数一般都是一些小函数，不要去写for/while这些复杂的语句</span></span>
<span class="line"><span style="color:#C678DD;">inline</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;add.cc&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#endif</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;add.h&quot;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::cout;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> std::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">argc</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">**</span><span style="color:#E06C75;font-style:italic;">argv</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, b </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;add(a, b) = &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(a, b) </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function _(E,x){const a=i("font");return t(),c("div",null,[y,u,r("more"),v,s("p",null,[n("虽然有这么多好处，但是写成函数有一个潜在的"),l(a,{color:"red"},{default:e(()=>[m]),_:1}),n("："),s("u",null,[n("调用函数比求解等价表达式要"),l(a,{color:"red"},{default:e(()=>[n("慢")]),_:1}),n("得多")]),n("。在大多数的机器上，调用函数都要做很多工作"),s("u",null,[n("："),s("strong",null,[l(a,{color:"red"},{default:e(()=>[n("调用前要先保存寄存器，并在返回时恢复，复制实参，程序还必须转向一个新位置执行")]),_:1})]),n("。即对于这种简短的语句使用函数**"),l(a,{color:"red"},{default:e(()=>[n("开销太大")]),_:1}),n("**。")])]),F,s("ul",null,[A,s("li",null,[s("p",null,[s("u",null,[n("所以可以通过判断有没有生成函数符号，"),l(a,{color:"gree"},{default:e(()=>[n("判断是不是内联函数")]),_:1})])])])]),D,s("ol",null,[s("li",null,[s("strong",null,[l(a,{color:"red"},{default:e(()=>[n("带参数的宏定义容易出错，要把参数看成表达式加（），只有运行时才会报错")]),_:1})])]),s("li",null,[s("strong",null,[l(a,{color:"red"},{default:e(()=>[n("宏定义不可调试，内联函数可以调试（"),b,n("）")]),_:1})])]),s("li",null,[s("strong",null,[l(a,{color:"red"},{default:e(()=>[n("宏定义无法操控类的私有成员")]),_:1})])]),g]),C,s("p",null,[f,n(" inline 必须与函数定义体放在一起才能使函数成为内联，仅将 inline 放在函数声明前面不起任何作用。下面的foo函数"),l(a,{color:"red"},{default:e(()=>[n("不能成为内联函数")]),_:1}),n("：")]),h])}const w=o(d,[["render",_],["__file","inline内联函数.html.vue"]]);export{w as default};
