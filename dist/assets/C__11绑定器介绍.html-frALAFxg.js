const s=JSON.parse('{"key":"v-cf2f50ee","path":"/ccpp/17%20bind%E7%BB%91%E5%AE%9A%E5%99%A8%E5%92%8Cfunction%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/C__11%E7%BB%91%E5%AE%9A%E5%99%A8%E4%BB%8B%E7%BB%8D.html","title":"C++11绑定器介绍","lang":"zh-CN","frontmatter":{"title":"C++11绑定器介绍","icon":"file","order":3,"headerDepth":4,"category":["使用指南"],"tag":["页面配置","使用指南"],"description":"C++11绑定器介绍 C++ STL的bind只能用于二元的绑定器 C++11 bind绑定器 =&gt; 返回的结果还是一个，可以 。 C++11的bind和function比较： function可以直接将函数类型留下来。 bind绑定器可以给函数绑定固定的参数。 #include &lt;iostream&gt; #include &lt;typeinfo&gt; #include &lt;string&gt; #include &lt;memory&gt; #include &lt;vector&gt; #include &lt;functional&gt; #include &lt;thread&gt; using namespace std; /* C++11 bind绑定器 =&gt; 返回的结果还是一个函数对象 */ void hello(string str) { cout &lt;&lt; str &lt;&lt; endl; } int sum(int a, int b) { return a + b; } class Test { public: \\tint sum(int a, int b) { return a + b; } }; int main() { \\t//bind是函数模板 可以自动推演模板类型参数 \\tbind(hello, \\"hello bind!\\")();//bind绑定了一个\\"hello bind!\\"参数， \\t//返回的结果是绑定器，也就是函数对象, 需要调用它的()重载符号 \\tcout &lt;&lt; bind(sum, 10, 20)() &lt;&lt; endl; \\tcout &lt;&lt; bind(&amp;Test::sum, Test(), 20, 30)() &lt;&lt; endl; \\treturn 0; }","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/17%20bind%E7%BB%91%E5%AE%9A%E5%99%A8%E5%92%8Cfunction%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/C__11%E7%BB%91%E5%AE%9A%E5%99%A8%E4%BB%8B%E7%BB%8D.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"C++11绑定器介绍"}],["meta",{"property":"og:description","content":"C++11绑定器介绍 C++ STL的bind只能用于二元的绑定器 C++11 bind绑定器 =&gt; 返回的结果还是一个，可以 。 C++11的bind和function比较： function可以直接将函数类型留下来。 bind绑定器可以给函数绑定固定的参数。 #include &lt;iostream&gt; #include &lt;typeinfo&gt; #include &lt;string&gt; #include &lt;memory&gt; #include &lt;vector&gt; #include &lt;functional&gt; #include &lt;thread&gt; using namespace std; /* C++11 bind绑定器 =&gt; 返回的结果还是一个函数对象 */ void hello(string str) { cout &lt;&lt; str &lt;&lt; endl; } int sum(int a, int b) { return a + b; } class Test { public: \\tint sum(int a, int b) { return a + b; } }; int main() { \\t//bind是函数模板 可以自动推演模板类型参数 \\tbind(hello, \\"hello bind!\\")();//bind绑定了一个\\"hello bind!\\"参数， \\t//返回的结果是绑定器，也就是函数对象, 需要调用它的()重载符号 \\tcout &lt;&lt; bind(sum, 10, 20)() &lt;&lt; endl; \\tcout &lt;&lt; bind(&amp;Test::sum, Test(), 20, 30)() &lt;&lt; endl; \\treturn 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"页面配置"}],["meta",{"property":"article:tag","content":"使用指南"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++11绑定器介绍\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[{"level":2,"title":"参数占位符","slug":"参数占位符","link":"#参数占位符","children":[]}],"git":{},"readingTime":{"minutes":2.29,"words":686},"filePathRelative":"ccpp/17 bind绑定器和function函数对象/C++11绑定器介绍.md","excerpt":"<h1> C++11绑定器介绍</h1>\\n<p>C++ STL的bind只能用于二元的绑定器</p>\\n<p><strong>C++11 bind绑定器 =&gt; 返回的结果还是一个</strong>，可以\\n<strong>。</strong></p>\\n<p><strong>C++11的bind和function比较：</strong></p>\\n<ul>\\n<li><strong>function可以直接将函数类型留下来</strong>。</li>\\n<li><strong>bind绑定器可以给函数绑定固定的参数。</strong></li>\\n</ul>\\n<div class=\\"language-c++ line-numbers-mode\\" data-ext=\\"c++\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;iostream&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;typeinfo&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;string&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;memory&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;vector&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;functional&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;thread&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">using</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">namespace</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">std</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">/*</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">C++11 bind绑定器 =&gt; 返回的结果还是一个函数对象</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">*/</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">hello</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">string</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">str</span><span style=\\"color: #ABB2BF\\">) { cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> str </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl; }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">sum</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">a</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">b</span><span style=\\"color: #ABB2BF\\">) { </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> a </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> b; }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Test</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">public:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">sum</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">a</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">b</span><span style=\\"color: #ABB2BF\\">) { </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> a </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> b; }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">main</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t//bind是函数模板 可以自动推演模板类型参数 </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #61AFEF\\">bind</span><span style=\\"color: #ABB2BF\\">(hello, </span><span style=\\"color: #98C379\\">\\"hello bind!\\"</span><span style=\\"color: #ABB2BF\\">)();</span><span style=\\"color: #7F848E; font-style: italic\\">//bind绑定了一个\\"hello bind!\\"参数，</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t//返回的结果是绑定器，也就是函数对象, 需要调用它的()重载符号</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tcout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">bind</span><span style=\\"color: #ABB2BF\\">(sum, </span><span style=\\"color: #D19A66\\">10</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #D19A66\\">20</span><span style=\\"color: #ABB2BF\\">)() </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tcout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">bind</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\">Test::sum, </span><span style=\\"color: #61AFEF\\">Test</span><span style=\\"color: #ABB2BF\\">(), </span><span style=\\"color: #D19A66\\">20</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #D19A66\\">30</span><span style=\\"color: #ABB2BF\\">)() </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{s as data};
