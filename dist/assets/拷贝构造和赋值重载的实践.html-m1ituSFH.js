const s=JSON.parse(`{"key":"v-3bc3bfaf","path":"/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%92%8C%E8%B5%8B%E5%80%BC%E9%87%8D%E8%BD%BD%E7%9A%84%E5%AE%9E%E8%B7%B5.html","title":"拷贝构造和赋值重载的实践","lang":"zh-CN","frontmatter":{"title":"拷贝构造和赋值重载的实践","icon":"file","order":6,"headerDepth":4,"category":["c/c++"],"tag":["类和对象"],"description":"拷贝构造和赋值重载的实践 这个类的对象的成员变量有占用外部资源，所以我们要重写它的拷贝构造函数和赋值函数。 实现String类型 #include &lt;iostream&gt; using namespace std; class String { public: \\tString(const char* str = nullptr)//普通构造函数 \\t{ \\t\\tif (str != nullptr) \\t\\t{ \\t\\t\\tm_data = new char[strlen(str) + 1];//'\\\\0'要算上 \\t\\t\\tstrcpy(this-&gt;m_data, str); \\t\\t} \\t\\telse//用户传进来的字符串是空的话 ，为了让其他方法不用判空 \\t\\t{ \\t\\t\\tm_data = new char[1];//new char;开辟1个字节大小的空间 \\t\\t\\t*m_data = '\\\\0';//0 \\t\\t} \\t} \\tString(const String&amp; other)//拷贝构造函数，深拷贝 \\t{ \\t\\tm_data = new char[strlen(other.m_data) + 1]; \\t\\tstrcpy(m_data, other.m_data); \\t} \\t~String(void)//析构函数 \\t{ \\t\\tdelete[]m_data; \\t\\tm_data = nullptr;//防止野指针的出现 \\t} \\t//使用String&amp;是为了支持连续的operator=赋值操作 \\tString&amp; operator=(const String&amp; other)//赋值重载函数，深拷贝 \\t{ \\t\\tif (this == &amp;other)//防止自赋值 \\t\\t{ \\t\\t\\treturn *this;//str1 \\t\\t} \\t\\tdelete[]m_data;//释放当前的外部资源 \\t\\tm_data = new char[strlen(other.m_data) + 1]; \\t\\tstrcpy(m_data, other.m_data); \\t\\treturn *this;//str1 \\t} private: \\tchar* m_data;//用于保存字符串 }; int main() { \\t//用带const char*参数的构造函数 \\tString str1;//调用默认的构造，形参是nullptr \\tString str2(\\"hello\\"); \\tString str3 = \\"world\\";//str2 \\t//调用拷贝构造函数 \\tString str4 = str3; \\tString str5(str3); \\t//调用赋值重载函数 \\t/* \\tstr1 = str2 \\tstr1.operator=(str2) =&gt; str1 \\tstr3 = str1 \\t*/ \\tstr3 = str1 = str2; \\treturn 0; }","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/03%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%92%8C%E8%B5%8B%E5%80%BC%E9%87%8D%E8%BD%BD%E7%9A%84%E5%AE%9E%E8%B7%B5.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"拷贝构造和赋值重载的实践"}],["meta",{"property":"og:description","content":"拷贝构造和赋值重载的实践 这个类的对象的成员变量有占用外部资源，所以我们要重写它的拷贝构造函数和赋值函数。 实现String类型 #include &lt;iostream&gt; using namespace std; class String { public: \\tString(const char* str = nullptr)//普通构造函数 \\t{ \\t\\tif (str != nullptr) \\t\\t{ \\t\\t\\tm_data = new char[strlen(str) + 1];//'\\\\0'要算上 \\t\\t\\tstrcpy(this-&gt;m_data, str); \\t\\t} \\t\\telse//用户传进来的字符串是空的话 ，为了让其他方法不用判空 \\t\\t{ \\t\\t\\tm_data = new char[1];//new char;开辟1个字节大小的空间 \\t\\t\\t*m_data = '\\\\0';//0 \\t\\t} \\t} \\tString(const String&amp; other)//拷贝构造函数，深拷贝 \\t{ \\t\\tm_data = new char[strlen(other.m_data) + 1]; \\t\\tstrcpy(m_data, other.m_data); \\t} \\t~String(void)//析构函数 \\t{ \\t\\tdelete[]m_data; \\t\\tm_data = nullptr;//防止野指针的出现 \\t} \\t//使用String&amp;是为了支持连续的operator=赋值操作 \\tString&amp; operator=(const String&amp; other)//赋值重载函数，深拷贝 \\t{ \\t\\tif (this == &amp;other)//防止自赋值 \\t\\t{ \\t\\t\\treturn *this;//str1 \\t\\t} \\t\\tdelete[]m_data;//释放当前的外部资源 \\t\\tm_data = new char[strlen(other.m_data) + 1]; \\t\\tstrcpy(m_data, other.m_data); \\t\\treturn *this;//str1 \\t} private: \\tchar* m_data;//用于保存字符串 }; int main() { \\t//用带const char*参数的构造函数 \\tString str1;//调用默认的构造，形参是nullptr \\tString str2(\\"hello\\"); \\tString str3 = \\"world\\";//str2 \\t//调用拷贝构造函数 \\tString str4 = str3; \\tString str5(str3); \\t//调用赋值重载函数 \\t/* \\tstr1 = str2 \\tstr1.operator=(str2) =&gt; str1 \\tstr3 = str1 \\t*/ \\tstr3 = str1 = str2; \\treturn 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"类和对象"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"拷贝构造和赋值重载的实践\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[{"level":2,"title":"实现String类型","slug":"实现string类型","link":"#实现string类型","children":[]},{"level":2,"title":"实现循环队列queue","slug":"实现循环队列queue","link":"#实现循环队列queue","children":[]}],"git":{},"readingTime":{"minutes":2.79,"words":836},"filePathRelative":"ccpp/03 类和对象/拷贝构造和赋值重载的实践.md","excerpt":"<h1> 拷贝构造和赋值重载的实践</h1>\\n<p><strong>这个类的对象的成员变量有占用外部资源，所以我们要重写它的拷贝构造函数和赋值函数。</strong></p>\\n<h2> 实现String类型</h2>\\n<div class=\\"language-c++ line-numbers-mode\\" data-ext=\\"c++\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;iostream&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">using</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">namespace</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">std</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">String</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">public:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #61AFEF\\">String</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">char*</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">str</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">nullptr</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #7F848E; font-style: italic\\">//普通构造函数</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (str </span><span style=\\"color: #C678DD\\">!=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">nullptr</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\tm_data </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">new</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">char</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #61AFEF\\">strlen</span><span style=\\"color: #ABB2BF\\">(str) </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">];</span><span style=\\"color: #7F848E; font-style: italic\\">//'\\\\0'要算上 </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #61AFEF\\">strcpy</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">this</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #E06C75\\">m_data</span><span style=\\"color: #ABB2BF\\">, str);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">else</span><span style=\\"color: #7F848E; font-style: italic\\">//用户传进来的字符串是空的话 ，为了让其他方法不用判空 </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\tm_data </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">new</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">char</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">];</span><span style=\\"color: #7F848E; font-style: italic\\">//new char;开辟1个字节大小的空间 </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">m_data </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">'</span><span style=\\"color: #56B6C2\\">\\\\0</span><span style=\\"color: #98C379\\">'</span><span style=\\"color: #ABB2BF\\">;</span><span style=\\"color: #7F848E; font-style: italic\\">//0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #61AFEF\\">String</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">String</span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">other</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #7F848E; font-style: italic\\">//拷贝构造函数，深拷贝 </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\tm_data </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">new</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">char</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #61AFEF\\">strlen</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">other</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">m_data</span><span style=\\"color: #ABB2BF\\">) </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #61AFEF\\">strcpy</span><span style=\\"color: #ABB2BF\\">(m_data, </span><span style=\\"color: #E5C07B\\">other</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">m_data</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #61AFEF\\">~String</span><span style=\\"color: #ABB2BF\\">(void)</span><span style=\\"color: #7F848E; font-style: italic\\">//析构函数</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">delete</span><span style=\\"color: #ABB2BF\\">[]m_data;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\tm_data </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">nullptr</span><span style=\\"color: #ABB2BF\\">;</span><span style=\\"color: #7F848E; font-style: italic\\">//防止野指针的出现 </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t//使用String&amp;是为了支持连续的operator=赋值操作</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #E5C07B\\">String</span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">operator</span><span style=\\"color: #ABB2BF\\">=(</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">String</span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">other</span><span style=\\"color: #ABB2BF\\">)</span><span style=\\"color: #7F848E; font-style: italic\\">//赋值重载函数，深拷贝 </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E5C07B\\">this</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">==</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\">other)</span><span style=\\"color: #7F848E; font-style: italic\\">//防止自赋值 </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #E5C07B\\">this</span><span style=\\"color: #ABB2BF\\">;</span><span style=\\"color: #7F848E; font-style: italic\\">//str1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">delete</span><span style=\\"color: #ABB2BF\\">[]m_data;</span><span style=\\"color: #7F848E; font-style: italic\\">//释放当前的外部资源 </span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\tm_data </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">new</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">char</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #61AFEF\\">strlen</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">other</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">m_data</span><span style=\\"color: #ABB2BF\\">) </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #61AFEF\\">strcpy</span><span style=\\"color: #ABB2BF\\">(m_data, </span><span style=\\"color: #E5C07B\\">other</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">m_data</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #E5C07B\\">this</span><span style=\\"color: #ABB2BF\\">;</span><span style=\\"color: #7F848E; font-style: italic\\">//str1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">private:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">char</span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\"> m_data;</span><span style=\\"color: #7F848E; font-style: italic\\">//用于保存字符串</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">main</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t//用带const char*参数的构造函数</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tString str1;</span><span style=\\"color: #7F848E; font-style: italic\\">//调用默认的构造，形参是nullptr </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tString </span><span style=\\"color: #61AFEF\\">str2</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"hello\\"</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tString str3 </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"world\\"</span><span style=\\"color: #ABB2BF\\">;</span><span style=\\"color: #7F848E; font-style: italic\\">//str2 </span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t//调用拷贝构造函数</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tString str4 </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> str3;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tString </span><span style=\\"color: #61AFEF\\">str5</span><span style=\\"color: #ABB2BF\\">(str3);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t//调用赋值重载函数</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t/*</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\tstr1 = str2</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\tstr1.operator=(str2) =&gt; str1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\tstr3 = str1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">\\t*/</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tstr3 </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> str1 </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> str2;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{s as data};
