const t=JSON.parse('{"key":"v-b30276bc","path":"/mysql/04%20MYSQL%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html","title":"索引的底层实现原理","lang":"zh-CN","frontmatter":{"title":"索引的底层实现原理","icon":"file","order":3,"headerDepth":4,"category":["mysql"],"tag":["mysql索引"],"description":"索引的底层实现原理 数据库索引是存储在磁盘上的，当数据量大时，就不能把整个索引全部加载到内存了，只能逐一加载每一个磁盘块（对应索引树的节点），索引树越低，越“矮胖”，磁盘IO次数就少 AVL平衡二叉树索引 不管是，增加，删除，还是等值查找，时间复杂度都是O(logn)，n 是数据页的数目。并且支持范围查找。","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/mysql/04%20MYSQL%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"索引的底层实现原理"}],["meta",{"property":"og:description","content":"索引的底层实现原理 数据库索引是存储在磁盘上的，当数据量大时，就不能把整个索引全部加载到内存了，只能逐一加载每一个磁盘块（对应索引树的节点），索引树越低，越“矮胖”，磁盘IO次数就少 AVL平衡二叉树索引 不管是，增加，删除，还是等值查找，时间复杂度都是O(logn)，n 是数据页的数目。并且支持范围查找。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"mysql索引"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"索引的底层实现原理\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[{"level":2,"title":"AVL平衡二叉树索引","slug":"avl平衡二叉树索引","link":"#avl平衡二叉树索引","children":[]},{"level":2,"title":"B树索引","slug":"b树索引","link":"#b树索引","children":[{"level":3,"title":"data：存储的是数据本身内容？还是磁盘上的地址？？","slug":"data-存储的是数据本身内容-还是磁盘上的地址","link":"#data-存储的是数据本身内容-还是磁盘上的地址","children":[]}]},{"level":2,"title":"B+树","slug":"b-树","link":"#b-树","children":[{"level":3,"title":"为什么MySQL(MyISAM和InnoDB)索引底层选择B+树而不是B树呢？？？","slug":"为什么mysql-myisam和innodb-索引底层选择b-树而不是b树呢","link":"#为什么mysql-myisam和innodb-索引底层选择b-树而不是b树呢","children":[]},{"level":3,"title":"总结回答为什么使用B+树构建索引？","slug":"总结回答为什么使用b-树构建索引","link":"#总结回答为什么使用b-树构建索引","children":[]}]}],"git":{},"readingTime":{"minutes":7.02,"words":2106},"filePathRelative":"mysql/04 MYSQL索引/索引的底层实现原理.md","excerpt":"<h1> 索引的底层实现原理</h1>\\n<p><mark>数据库索引是<strong>存储在磁盘上</strong>的，当数据量大时，就不能把整个索引全部加载到内存了，只能<strong>逐一加载每一个磁盘块（对应索引树的节点</strong>），<u>索引树越低，越“矮胖”，磁盘IO次数就少</u></mark></p>\\n<h2> AVL平衡二叉树索引</h2>\\n<figure><figcaption></figcaption></figure>\\n<p>不管是，增加，删除，还是等值查找，<strong>时间复杂度都是O(logn)</strong>，n 是数据页的数目。并且<strong>支持范围查找</strong>。</p>","autoDesc":true}');export{t as data};
