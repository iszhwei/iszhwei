const s=JSON.parse(`{"key":"v-53acd735","path":"/algo/04%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F.html","title":"基数排序","lang":"zh-CN","frontmatter":{"title":"基数排序","icon":"file","order":8,"category":["数据结构与算法"],"tag":["排序算法"],"description":"基数排序 将整数按位数切割成不同的数字，然后按每个位数分别比较,从最低位开始排序。 #include &lt;iostream&gt; #include &lt;vector&gt; #include &lt;string&gt; #include &lt;cstdlib&gt; #include &lt;ctime&gt; #include &lt;climits&gt; using std::cout; using std::endl; using std::vector; //只有正整数和0 void radixSort(vector&lt;int&gt;&amp; nums) { if(nums.empty()) { return; } int maxNum = INT_MIN; for(int num : nums) { if(num &gt; maxNum) { maxNum = num; } } int maxNunLen = std::to_string(maxNum).size(); int mod = 10; int div = 1; vector&lt;vector&lt;int&gt;&gt; bucket; for(int i = 0; i &lt; maxNunLen; ++i, mod *= 10, div *= 10) { bucket.resize(10); for(size_t j = 0; j &lt; nums.size(); ++j) { int index = (nums[j] % mod) / div; bucket[index].push_back(nums[j]); } int count = 0; for(auto vec : bucket) { for(int num : vec) { nums[count++] = num; } } bucket.clear(); } } //nums含有负数 void radixSort2(vector&lt;int&gt;&amp; nums) { int maxNum = INT_MIN; for(int num : nums) { if(abs(num) &gt; maxNum) { //正负数中长的数字 maxNum = abs(num); } } int maxNunLen = std::to_string(maxNum).size(); int mod = 10; int div = 1; vector&lt;vector&lt;int&gt;&gt; bucket; for(int i = 0; i &lt; maxNunLen; ++i, mod *= 10, div *= 10) { bucket.resize(20); //更改桶的数量 for(int j = 0; j &lt; nums.size(); ++j) { int index = (nums[j] % mod) / div + 10; //-10~9 映射到下标0~19 bucket[index].push_back(nums[j]); } int count = 0; for(auto vec : bucket) { for(int num : vec) { nums[count++] = num; } } bucket.clear(); } } void print(const vector&lt;int&gt;&amp; nums) { for(int num : nums) { cout &lt;&lt; num &lt;&lt; ' '; } cout &lt;&lt; endl; } void getTestDate(vector&lt;int&gt;&amp; nums) { srand(time(nullptr)); for(int i = 0; i &lt; 10; ++i) { nums.push_back(rand()%99); } } void getTestDate2(vector&lt;int&gt;&amp; nums) { srand(time(nullptr)); for(int i = 0; i &lt; 10; ++i) { nums.push_back(rand()%199 - 100); } } int main() { vector&lt;int&gt; nums1; getTestDate(nums1); print(nums1); radixSort(nums1); print(nums1); vector&lt;int&gt; nums2 = {-1234,7, -89, 256}; print(nums2); radixSort2(nums2); print(nums2); }","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/algo/04%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"基数排序"}],["meta",{"property":"og:description","content":"基数排序 将整数按位数切割成不同的数字，然后按每个位数分别比较,从最低位开始排序。 #include &lt;iostream&gt; #include &lt;vector&gt; #include &lt;string&gt; #include &lt;cstdlib&gt; #include &lt;ctime&gt; #include &lt;climits&gt; using std::cout; using std::endl; using std::vector; //只有正整数和0 void radixSort(vector&lt;int&gt;&amp; nums) { if(nums.empty()) { return; } int maxNum = INT_MIN; for(int num : nums) { if(num &gt; maxNum) { maxNum = num; } } int maxNunLen = std::to_string(maxNum).size(); int mod = 10; int div = 1; vector&lt;vector&lt;int&gt;&gt; bucket; for(int i = 0; i &lt; maxNunLen; ++i, mod *= 10, div *= 10) { bucket.resize(10); for(size_t j = 0; j &lt; nums.size(); ++j) { int index = (nums[j] % mod) / div; bucket[index].push_back(nums[j]); } int count = 0; for(auto vec : bucket) { for(int num : vec) { nums[count++] = num; } } bucket.clear(); } } //nums含有负数 void radixSort2(vector&lt;int&gt;&amp; nums) { int maxNum = INT_MIN; for(int num : nums) { if(abs(num) &gt; maxNum) { //正负数中长的数字 maxNum = abs(num); } } int maxNunLen = std::to_string(maxNum).size(); int mod = 10; int div = 1; vector&lt;vector&lt;int&gt;&gt; bucket; for(int i = 0; i &lt; maxNunLen; ++i, mod *= 10, div *= 10) { bucket.resize(20); //更改桶的数量 for(int j = 0; j &lt; nums.size(); ++j) { int index = (nums[j] % mod) / div + 10; //-10~9 映射到下标0~19 bucket[index].push_back(nums[j]); } int count = 0; for(auto vec : bucket) { for(int num : vec) { nums[count++] = num; } } bucket.clear(); } } void print(const vector&lt;int&gt;&amp; nums) { for(int num : nums) { cout &lt;&lt; num &lt;&lt; ' '; } cout &lt;&lt; endl; } void getTestDate(vector&lt;int&gt;&amp; nums) { srand(time(nullptr)); for(int i = 0; i &lt; 10; ++i) { nums.push_back(rand()%99); } } void getTestDate2(vector&lt;int&gt;&amp; nums) { srand(time(nullptr)); for(int i = 0; i &lt; 10; ++i) { nums.push_back(rand()%199 - 100); } } int main() { vector&lt;int&gt; nums1; getTestDate(nums1); print(nums1); radixSort(nums1); print(nums1); vector&lt;int&gt; nums2 = {-1234,7, -89, 256}; print(nums2); radixSort2(nums2); print(nums2); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"排序算法"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基数排序\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":1.36,"words":407},"filePathRelative":"algo/04 排序算法/基数排序.md","excerpt":"<h1> 基数排序</h1>\\n<p>将整数按位数切割成不同的数字，然后按每个位数分别比较,从最低位开始排序。</p>\\n<div class=\\"language-c++ line-numbers-mode\\" data-ext=\\"c++\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;iostream&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;vector&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;string&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;cstdlib&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;ctime&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">#include</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">&lt;climits&gt;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">using</span><span style=\\"color: #ABB2BF\\"> std::cout;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">using</span><span style=\\"color: #ABB2BF\\"> std::endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">using</span><span style=\\"color: #ABB2BF\\"> std::vector;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">//只有正整数和0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">radixSort</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">vector</span><span style=\\"color: #ABB2BF\\">&lt;</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\">&gt;</span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">nums</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">nums</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">empty</span><span style=\\"color: #ABB2BF\\">()) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> maxNum </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> INT_MIN;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> num : nums) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\">(num </span><span style=\\"color: #C678DD\\">&gt;</span><span style=\\"color: #ABB2BF\\"> maxNum) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            maxNum </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> num;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> maxNunLen </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> std::</span><span style=\\"color: #61AFEF\\">to_string</span><span style=\\"color: #ABB2BF\\">(maxNum).</span><span style=\\"color: #61AFEF\\">size</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> mod </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">10</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> div </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    vector</span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\">vector</span><span style=\\"color: #C678DD\\">&lt;int&gt;&gt;</span><span style=\\"color: #ABB2BF\\"> bucket;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> i </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">; i </span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\"> maxNunLen; </span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">i, mod </span><span style=\\"color: #C678DD\\">*=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">10</span><span style=\\"color: #ABB2BF\\">, div </span><span style=\\"color: #C678DD\\">*=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">10</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">bucket</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">resize</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #D19A66\\">10</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">size_t</span><span style=\\"color: #ABB2BF\\"> j </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">; j </span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">nums</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">size</span><span style=\\"color: #ABB2BF\\">(); </span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">j) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> index </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E5C07B\\">nums</span><span style=\\"color: #ABB2BF\\">[j] </span><span style=\\"color: #56B6C2\\">%</span><span style=\\"color: #ABB2BF\\"> mod) </span><span style=\\"color: #56B6C2\\">/</span><span style=\\"color: #ABB2BF\\"> div;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #E5C07B\\">bucket</span><span style=\\"color: #ABB2BF\\">[index].</span><span style=\\"color: #61AFEF\\">push_back</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">nums</span><span style=\\"color: #ABB2BF\\">[j]);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> count </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">auto</span><span style=\\"color: #ABB2BF\\"> vec : bucket) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> num : vec) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">                </span><span style=\\"color: #E5C07B\\">nums</span><span style=\\"color: #ABB2BF\\">[count</span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">] </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> num;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">bucket</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">clear</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">//nums含有负数</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">radixSort2</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">vector</span><span style=\\"color: #ABB2BF\\">&lt;</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\">&gt;</span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">nums</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> maxNum </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> INT_MIN;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> num : nums) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #61AFEF\\">abs</span><span style=\\"color: #ABB2BF\\">(num) </span><span style=\\"color: #C678DD\\">&gt;</span><span style=\\"color: #ABB2BF\\"> maxNum) {</span><span style=\\"color: #7F848E; font-style: italic\\">     //正负数中长的数字</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            maxNum </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">abs</span><span style=\\"color: #ABB2BF\\">(num);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> maxNunLen </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> std::</span><span style=\\"color: #61AFEF\\">to_string</span><span style=\\"color: #ABB2BF\\">(maxNum).</span><span style=\\"color: #61AFEF\\">size</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> mod </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">10</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> div </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    vector</span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\">vector</span><span style=\\"color: #C678DD\\">&lt;int&gt;&gt;</span><span style=\\"color: #ABB2BF\\"> bucket;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> i </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">; i </span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\"> maxNunLen; </span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">i, mod </span><span style=\\"color: #C678DD\\">*=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">10</span><span style=\\"color: #ABB2BF\\">, div </span><span style=\\"color: #C678DD\\">*=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">10</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">bucket</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">resize</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #D19A66\\">20</span><span style=\\"color: #ABB2BF\\">);</span><span style=\\"color: #7F848E; font-style: italic\\">  //更改桶的数量</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> j </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">; j </span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">nums</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">size</span><span style=\\"color: #ABB2BF\\">(); </span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">j) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> index </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E5C07B\\">nums</span><span style=\\"color: #ABB2BF\\">[j] </span><span style=\\"color: #56B6C2\\">%</span><span style=\\"color: #ABB2BF\\"> mod) </span><span style=\\"color: #56B6C2\\">/</span><span style=\\"color: #ABB2BF\\"> div </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">10</span><span style=\\"color: #ABB2BF\\">;</span><span style=\\"color: #7F848E; font-style: italic\\"> //-10~9 映射到下标0~19</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #E5C07B\\">bucket</span><span style=\\"color: #ABB2BF\\">[index].</span><span style=\\"color: #61AFEF\\">push_back</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">nums</span><span style=\\"color: #ABB2BF\\">[j]);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> count </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">auto</span><span style=\\"color: #ABB2BF\\"> vec : bucket) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> num : vec) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">                </span><span style=\\"color: #E5C07B\\">nums</span><span style=\\"color: #ABB2BF\\">[count</span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">] </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> num;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">bucket</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">clear</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">print</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">vector</span><span style=\\"color: #ABB2BF\\">&lt;</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\">&gt;</span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">nums</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> num : nums) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> num </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">' '</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    cout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">getTestDate</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">vector</span><span style=\\"color: #ABB2BF\\">&lt;</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\">&gt;</span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">nums</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">srand</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #61AFEF\\">time</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #D19A66\\">nullptr</span><span style=\\"color: #ABB2BF\\">));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> i </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">; i </span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">10</span><span style=\\"color: #ABB2BF\\">; </span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">i) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">nums</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">push_back</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #61AFEF\\">rand</span><span style=\\"color: #ABB2BF\\">()</span><span style=\\"color: #56B6C2\\">%</span><span style=\\"color: #D19A66\\">99</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">getTestDate2</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">vector</span><span style=\\"color: #ABB2BF\\">&lt;</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\">&gt;</span><span style=\\"color: #C678DD\\">&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">nums</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">srand</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #61AFEF\\">time</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #D19A66\\">nullptr</span><span style=\\"color: #ABB2BF\\">));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> i </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">; i </span><span style=\\"color: #C678DD\\">&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">10</span><span style=\\"color: #ABB2BF\\">; </span><span style=\\"color: #C678DD\\">++</span><span style=\\"color: #ABB2BF\\">i) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">nums</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">push_back</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #61AFEF\\">rand</span><span style=\\"color: #ABB2BF\\">()</span><span style=\\"color: #56B6C2\\">%</span><span style=\\"color: #D19A66\\">199</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">100</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">main</span><span style=\\"color: #ABB2BF\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    vector</span><span style=\\"color: #C678DD\\">&lt;int&gt;</span><span style=\\"color: #ABB2BF\\"> nums1;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">getTestDate</span><span style=\\"color: #ABB2BF\\">(nums1);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">print</span><span style=\\"color: #ABB2BF\\">(nums1);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">radixSort</span><span style=\\"color: #ABB2BF\\">(nums1);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">print</span><span style=\\"color: #ABB2BF\\">(nums1);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    vector</span><span style=\\"color: #C678DD\\">&lt;int&gt;</span><span style=\\"color: #ABB2BF\\"> nums2 </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> {</span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #D19A66\\">1234</span><span style=\\"color: #ABB2BF\\">,</span><span style=\\"color: #D19A66\\">7</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #D19A66\\">89</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #D19A66\\">256</span><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">print</span><span style=\\"color: #ABB2BF\\">(nums2);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">radixSort2</span><span style=\\"color: #ABB2BF\\">(nums2);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">print</span><span style=\\"color: #ABB2BF\\">(nums2);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{s as data};
