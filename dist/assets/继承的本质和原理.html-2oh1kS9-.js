import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as r,c,d as s,f as l,w as e,e as n,a as o}from"./app-9OmaxHRC.js";const t="/assets/watermark_type_ZmFuZ3poZW5naGVpdGk_shadow_10_text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDQxNjkz_size_16_color_FFFFFF_t_70-wOlTM98K.png",d="/assets/watermark_type_ZmFuZ3poZW5naGVpdGk_shadow_10_text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDQxNjkz_size_16_color_FFFFFF_t_70-17129929830513-3Rl99sGW.png",B={},u=s("h1",{id:"继承的本质和原理",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#继承的本质和原理","aria-hidden":"true"},"#"),n(" 继承的本质和原理")],-1),_=s("h2",{id:"继承的本质",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#继承的本质","aria-hidden":"true"},"#"),n(" 继承的本质")],-1),y=s("li",null,[s("p",null,"代码复用")],-1),v=o(`<p>类和类的关系：</p><p>组合： a part of ... ... 一部分的关系</p><p>继承： a kind of ... ... 一种的关系</p><h2 id="形式" tabindex="-1"><a class="header-anchor" href="#形式" aria-hidden="true">#</a> 形式</h2><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> 派生类 </span></span>
<span class="line"><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;">/</span><span style="color:#C678DD;">protected</span><span style="color:#ABB2BF;">/</span><span style="color:#C678DD;">private</span><span style="color:#ABB2BF;"> 基类</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="派生类的生成过程包含3个步骤" tabindex="-1"><a class="header-anchor" href="#派生类的生成过程包含3个步骤" aria-hidden="true">#</a> 派生类的生成过程包含3个步骤:</h2><ol><li>吸收基类的成员</li><li>改造基类的成员</li><li>添加自己新的成员</li></ol><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">A</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> ma;</span></span>
<span class="line"><span style="color:#C678DD;">protected:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> mb;</span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> mc;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">B</span><span style="color:#ABB2BF;"> : </span><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">A</span><span style="color:#7F848E;font-style:italic;">//继承:A 基类/父类  B派生类/子类</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">public:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> md;</span></span>
<span class="line"><span style="color:#C678DD;">protected:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> me;</span></span>
<span class="line"><span style="color:#C678DD;">private:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> mf;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>继承之后：继承基类的成员，基类是12字节，派生类为24字节。</p><figure><img src="`+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',10),m=o('<figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="不能从基类继承下来的" tabindex="-1"><a class="header-anchor" href="#不能从基类继承下来的" aria-hidden="true">#</a> 不能从基类继承下来的</h2><p>不论何种继承方式，下面这些基类的特征是不能从基类继承下来的：</p><ol><li><strong>构造函数</strong>（包括拷贝构造）</li><li><strong>析构函数</strong></li><li><strong>用户重载的operator new/delete运算符</strong></li><li><strong>用户重载的operator=运算符</strong></li><li><strong>友元关系</strong></li></ol>',4);function b(F,h){const a=p("font");return r(),c("div",null,[u,_,s("p",null,[s("strong",null,[l(a,{color:"red"},{default:e(()=>[n("继承的本质")]),_:1}),n("：")])]),s("ol",null,[y,s("li",null,[s("p",null,[s("strong",null,[l(a,{color:"red"},{default:e(()=>[n("a kind of")]),_:1})])])])]),v,s("p",null,[s("strong",null,[n("继承之后，还附带了"),l(a,{color:"green"},{default:e(()=>[n("基类的作用域")]),_:1}),n("：")]),n(" 若在派生类中加一个ma，成员名字**"),l(a,{color:"red"},{default:e(()=>[n("不会冲突")]),_:1}),n("**，内存是28字节。")]),m])}const f=i(B,[["render",b],["__file","继承的本质和原理.html.vue"]]);export{f as default};
