import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r,o as l,c,d as a,e as s,f as n,w as t,a as i}from"./app--8O2lHwG.js";const g="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-pt3xVWOj.png",d="/assets/e1d5cb0067fa419388b6aabb8b2d9087-gekttwOk.png",_="/assets/7e0cb3f5b1ba45ea80b6ae874a04cdfc-Se2VqEEf.png",p="/assets/8d0ba8281e0b43a88e836d5857209166-WzBJBoc1.png",f="/assets/9a9899dee01d4b11a286d9aaf47a9dd1-OXv-Q13P.png",u="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-171344797647311-YiLQKB-C.png",h="/assets/image-20240418214848908-KkWmtJH0.png",m="/assets/1c20284e38b24da7a6daf9d64a519944-q4HdJaCD.png",y="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-171344824443616-y90hkZmd.png",b="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-171344884446119-Bmurat_X.png",B="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_19_color_FFFFFF_t_70_g_se_x_16-bBbK5iFp.png",F="/assets/image-20240418220258482-dggO6DrH.png",x="/assets/image-20240418220937458-bl2Q7wcZ.png",z="/assets/image-20240418221031216-8Loz4PZf.png",A="/assets/image-20240418222036042-TUcjkSuq.png",D="/assets/image-20240418222256251-Vc-Z8YKg.png",Q="/assets/image-20240418223534192-wIWvt4k4.png",k="/assets/image-20240418223940225-sYUWN_j4.png",w="/assets/image-20240418224237616-xaJOq55S.png",v="/assets/image-20240418224353378-M7YttRe6.png",C="/assets/image-20240418224554236-ccba3-qI.png",T="/assets/image-20240418225716933-ykm20jp3.png",q="/assets/image-20240418230102002-Ayx-xUkq.png",X="/assets/image-20240418225822837-uSOIZTXg.png",L="/assets/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAQnVnTWFrZXItc2hlbg___size_20_color_FFFFFF_t_70_g_se_x_16-171345251885224-EtyoqXAv.png",V={},E=i('<h1 id="mysql索引常见问题" tabindex="-1"><a class="header-anchor" href="#mysql索引常见问题" aria-hidden="true">#</a> MySQL索引常见问题</h1><h2 id="问题1-用联合索引优化using-filesort" tabindex="-1"><a class="header-anchor" href="#问题1-用联合索引优化using-filesort" aria-hidden="true">#</a> 问题1：用联合索引优化using filesort</h2><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',3),N=a("strong",null,"一般过滤条件的字段需要加索引",-1),W=a("strong",null,"回表",-1),Z=a("strong",null,"文件排序",-1),I=a("p",null,[s("这样的话，"),a("u",null,"在二级索引树上用userid过滤出来的数据中，addtime就已经是有序的了")],-1),S=a("figure",null,[a("img",{src:d,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),M=i('<strong>选择出来的数据越多，耗费的排序性能差的越大</strong><figure><img src="'+_+'" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><p><strong>addTime有索引，那索引树上的数据就是按照addTime排好序的</strong></p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="问题2-给区分度高的字段加索引" tabindex="-1"><a class="header-anchor" href="#问题2-给区分度高的字段加索引" aria-hidden="true">#</a> 问题2：给区分度高的字段加索引</h2><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>比如我们给sex建立索引，而sex就两种，所以用sex过滤出来的数据可能会占到整张表的一大部分，可能不会用到索引</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="问题3-select的字段会导致回表" tabindex="-1"><a class="header-anchor" href="#问题3-select的字段会导致回表" aria-hidden="true">#</a> 问题3：select的字段会导致回表</h2><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',11),O=a("strong",null,"不需要那么多的字段，就不要select太多",-1),j=a("h2",{id:"问题4-多个字段有索引-使用哪个索引",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#问题4-多个字段有索引-使用哪个索引","aria-hidden":"true"},"#"),s(" 问题4：多个字段有索引，使用哪个索引？")],-1),J=a("figure",null,[a("img",{src:y,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),K=a("strong",null,"比较",-1),Y=i('<figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+B+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+F+'" alt="image-20240418220258482" tabindex="0" loading="lazy"><figcaption>image-20240418220258482</figcaption></figure><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="问题5-内连接之大表和小表" tabindex="-1"><a class="header-anchor" href="#问题5-内连接之大表和小表" aria-hidden="true">#</a> 问题5：内连接之大表和小表</h2><figure><img src="'+z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>内连接的时候，小表是整表扫描，每一个都要用到，<u>大表相关联的字段没有索引的话，小表的每一个uid在大表中搜索都是<strong>整表搜索</strong>。如果大表相关联的字段有索引，小表的每一个uid在大表中就是走索引，搜的非常快。</u></p>',7),H=a("figure",null,[a("img",{src:A,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),U=a("h2",{id:"问题6-模糊搜索-范围搜索使用索引",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#问题6-模糊搜索-范围搜索使用索引","aria-hidden":"true"},"#"),s(" 问题6：模糊搜索/范围搜索使用索引")],-1),P=a("figure",null,[a("img",{src:D,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),R=a("code",null,"zhang%",-1),G=a("strong",null,"通配符在后面",-1),$=a("strong",null,"字符串类型",-1),aa=i('<p>第二个<code>%zhang%</code><strong>通配符在前面，可以匹配任意的数据，所以只能整张表搜索</strong>。<u>如果不扫描完整张表，也不知道到底还有没有含有zhang的数据</u></p><h2 id="问题7-in和not-in是否能用到索引-not-in优化成range范围搜索" tabindex="-1"><a class="header-anchor" href="#问题7-in和not-in是否能用到索引-not-in优化成range范围搜索" aria-hidden="true">#</a> 问题7：in和not in是否能用到索引？not in优化成range范围搜索</h2><figure><img src="'+Q+'" alt="image-20240418223534192" tabindex="0" loading="lazy"><figcaption>image-20240418223534192</figcaption></figure><figure><img src="'+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>mysql8.0 in 会使用索引</li></ul><p>实际上，MySQL做了如下优化：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> age </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> student </span><span style="color:#C678DD;">where</span><span style="color:#ABB2BF;"> age </span><span style="color:#C678DD;">not</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> age </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> student </span><span style="color:#C678DD;">where</span><span style="color:#ABB2BF;"> age </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">or</span><span style="color:#ABB2BF;"> age </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">;  </span><span style="color:#7F848E;font-style:italic;">-- 优化成了range范围搜索</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',8),sa=i('<h2 id="问题8-索引字段涉及函数以及类型转换-无法用到索引" tabindex="-1"><a class="header-anchor" href="#问题8-索引字段涉及函数以及类型转换-无法用到索引" aria-hidden="true">#</a> 问题8：索引字段涉及<strong>函数</strong>以及<strong>类型转换</strong>，无法用到索引</h2><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>本来是按照password排序作为索引的，<strong>经过函数计算之后就成为了另外的值，所以无法使用索引</strong></p><figure><img src="'+C+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',4),ea=i(`<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> ... </span><span style="color:#C678DD;">where</span><span style="color:#ABB2BF;"> mobile</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;13711112222&#39;</span><span style="color:#ABB2BF;">; #存储是字符型，输入字符型就可以使用索引了</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="问题9-or不能使用索引" tabindex="-1"><a class="header-anchor" href="#问题9-or不能使用索引" aria-hidden="true">#</a> 问题9：or不能使用索引？</h2><p>or 实际上也可以用到索引，<strong>MySQL 5.7 会对or进行优化成union all联合查询</strong></p><figure><img src="`+T+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+q+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>优化成union后的两个select应该是都可以使用索引的，<strong>究竟用不用，还得看使用索引是否能带来效率的提升</strong></li></ul><figure><img src="'+X+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>Mysql8.0 or可以用索引了</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><figure><img src="'+L+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',10);function na(ta,ia){const e=r("font");return l(),c("div",null,[E,a("p",null,[s("首先，要给userid加索引（"),N,s("），"),n(e,{color:"red"},{default:t(()=>[s("此时创建的是二级索引树，select *涉及"),W,s("。而且还有order by addtime，如果addtime没有建索引的话，explain分析时会出现using filesort，涉及addtime的"),Z]),_:1}),s("！")]),n(e,{color:"green"},{default:t(()=>[s("我们可以添加联合索引（多列索引）：userid+addtime")]),_:1}),I,S,n(e,{color:"red"},{default:t(()=>[s("addtime不建立索引，就有using filesort，数据的外排序")]),_:1}),s("。用userid"),M,a("p",null,[s("如果"),n(e,{color:"red"},{default:t(()=>[O,s("，这会导致回表")]),_:1}),s("，影响效率。能直接在二级索引树上取的就直接取，避免回表！")]),j,J,a("p",null,[a("strong",null,[n(e,{color:"red"},{default:t(()=>[s("一张表的一次查询只能用到1个索引")]),_:1})]),s("，数据库引擎会"),K,s("用a=1过滤的数据和b=2过滤的数据，"),n(e,{color:"green"},{default:t(()=>[s("哪个索引过滤出来的数据少，就用哪个索引")]),_:1})]),Y,n(e,{color:"red"},{default:t(()=>[s("**确定大表还是小表：先用where进行数据过滤，谁的数据少谁就是小表**")]),_:1}),H,U,P,a("p",null,[s("第一个"),R,G,s("，"),a("strong",null,[s("可以利用索引进行"),n(e,{color:"green"},{default:t(()=>[s("前缀搜索")]),_:1})]),s("，可以根据前缀的匹配缩小搜索范围。对于"),$,s("来说，"),n(e,{color:"red"},{default:t(()=>[s("索引长度（key_len）不需要很长，只需要能区分每个字符串数据即可，索引过长，导致索引文件变大，创建索引树的时候花费的磁盘I/O也就多了")]),_:1})]),aa,n(e,{color:"red"},{default:t(()=>[s("**not in 可以转化为范围range搜索查询**")]),_:1}),sa,a("p",null,[a("strong",null,[s("索引字段涉及"),n(e,{color:"red"},{default:t(()=>[s("类型强转、mysql聚合函数调用、表达式计算")]),_:1}),s("等，不会使用索引")])]),ea])}const la=o(V,[["render",na],["__file","MySQL索引常见问题.html.vue"]]);export{la as default};
