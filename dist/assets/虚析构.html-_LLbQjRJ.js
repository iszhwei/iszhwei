const s=JSON.parse('{"key":"v-600c7550","path":"/ccpp/07%20%E5%A4%9A%E6%80%81/%E8%99%9A%E6%9E%90%E6%9E%84.html","title":"虚析构","lang":"zh-CN","frontmatter":{"title":"虚析构","icon":"file","order":5,"headerDepth":4,"category":["c/c++"],"tag":["多态"],"description":"虚析构 虽然构造函数不能被定义成虚函数，但析构函数可以定义为虚函数，一般来说，如果类中定义了虚函数，析构函数也应被定义为虚析构函数，尤其是类内有申请的动态内存，需要清理和释放的时候。 什么时候需要把基类的析构函数必须实现成虚函数？ 示例一：基类的指针(引用)指向的时候 基类的指针(引用)指向的时候，delete调用析构函数的时候，必须发生动态绑定，否则会导致派生类的析构函数无法调用。 class Base { public: \\tBase(int data) :ma(data) \\t{ \\t\\tcout &lt;&lt; \\"Base()\\" &lt;&lt; endl; \\t} \\t~Base() \\t{ \\t\\tcout &lt;&lt; \\"~Base()\\" &lt;&lt; endl; \\t} \\tvirtual void show() \\t{ \\t\\tcout &lt;&lt; \\"call Base::show()\\" &lt;&lt; endl; \\t} protected: \\tint ma; }; class Derive : public Base { public: \\tDerive(int data):Base(data), mb(data),ptr(new int(data)) \\t{ \\t\\tcout &lt;&lt; \\"Derive()\\" &lt;&lt; endl; \\t} \\t~Derive() \\t{ \\t\\tdelete ptr; \\t\\tcout &lt;&lt; \\"~Derive() \\" &lt;&lt; endl; \\t} private: \\tint mb; \\tint *ptr; }; int main() { \\tBase *pb = new Derive(10); \\tpb-&gt;show();//动态绑定pb Base* *pb Derive \\tdelete pb; \\treturn 0; }","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/07%20%E5%A4%9A%E6%80%81/%E8%99%9A%E6%9E%90%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"虚析构"}],["meta",{"property":"og:description","content":"虚析构 虽然构造函数不能被定义成虚函数，但析构函数可以定义为虚函数，一般来说，如果类中定义了虚函数，析构函数也应被定义为虚析构函数，尤其是类内有申请的动态内存，需要清理和释放的时候。 什么时候需要把基类的析构函数必须实现成虚函数？ 示例一：基类的指针(引用)指向的时候 基类的指针(引用)指向的时候，delete调用析构函数的时候，必须发生动态绑定，否则会导致派生类的析构函数无法调用。 class Base { public: \\tBase(int data) :ma(data) \\t{ \\t\\tcout &lt;&lt; \\"Base()\\" &lt;&lt; endl; \\t} \\t~Base() \\t{ \\t\\tcout &lt;&lt; \\"~Base()\\" &lt;&lt; endl; \\t} \\tvirtual void show() \\t{ \\t\\tcout &lt;&lt; \\"call Base::show()\\" &lt;&lt; endl; \\t} protected: \\tint ma; }; class Derive : public Base { public: \\tDerive(int data):Base(data), mb(data),ptr(new int(data)) \\t{ \\t\\tcout &lt;&lt; \\"Derive()\\" &lt;&lt; endl; \\t} \\t~Derive() \\t{ \\t\\tdelete ptr; \\t\\tcout &lt;&lt; \\"~Derive() \\" &lt;&lt; endl; \\t} private: \\tint mb; \\tint *ptr; }; int main() { \\tBase *pb = new Derive(10); \\tpb-&gt;show();//动态绑定pb Base* *pb Derive \\tdelete pb; \\treturn 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"多态"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"虚析构\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[{"level":2,"title":"什么时候需要把基类的析构函数必须实现成虚函数？","slug":"什么时候需要把基类的析构函数必须实现成虚函数","link":"#什么时候需要把基类的析构函数必须实现成虚函数","children":[{"level":3,"title":"示例一：基类的指针(引用)指向堆上new出来的派生类对象的时候","slug":"示例一-基类的指针-引用-指向堆上new出来的派生类对象的时候","link":"#示例一-基类的指针-引用-指向堆上new出来的派生类对象的时候","children":[]},{"level":3,"title":"示例二：类内有申请的动态内存，需要清理和释放的时候","slug":"示例二-类内有申请的动态内存-需要清理和释放的时候","link":"#示例二-类内有申请的动态内存-需要清理和释放的时候","children":[]}]}],"git":{},"readingTime":{"minutes":3.32,"words":997},"filePathRelative":"ccpp/07 多态/虚析构.md","excerpt":"<h1> 虚析构</h1>\\n<p>虽然构造函数不能被定义成虚函数，但<strong>析构函数可以定义为虚函数</strong>，一般来说，如果类中定义了虚函数，析构函数也应被定义为虚析构函数，尤其是类内有申请的动态内存，需要清理和释放的时候。</p>\\n<h2> <strong>什么时候需要把基类的析构函数必须实现成虚函数？</strong></h2>\\n<h3> 示例一：基类的指针(引用)指向的时候</h3>\\n<p>基类的指针(引用)指向的时候，delete调用析构函数的时候，必须发生动态绑定，<u>否则会导致派生类的析构函数无法调用</u>。</p>\\n<div class=\\"language-c++ line-numbers-mode\\" data-ext=\\"c++\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Base</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">public:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #61AFEF\\">Base</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">data</span><span style=\\"color: #ABB2BF\\">) :</span><span style=\\"color: #61AFEF\\">ma</span><span style=\\"color: #ABB2BF\\">(data)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\tcout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"Base()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #61AFEF\\">~Base</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\tcout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"~Base()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">virtual</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">void</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">show</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\tcout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"call Base::show()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">protected:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> ma;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Derive</span><span style=\\"color: #ABB2BF\\"> : </span><span style=\\"color: #C678DD\\">public</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Base</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">public:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #61AFEF\\">Derive</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75; font-style: italic\\">data</span><span style=\\"color: #ABB2BF\\">):</span><span style=\\"color: #61AFEF\\">Base</span><span style=\\"color: #ABB2BF\\">(data), </span><span style=\\"color: #61AFEF\\">mb</span><span style=\\"color: #ABB2BF\\">(data),</span><span style=\\"color: #61AFEF\\">ptr</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #C678DD\\">new</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\">(data))</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\tcout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"Derive()\\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #61AFEF\\">~Derive</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\t</span><span style=\\"color: #C678DD\\">delete</span><span style=\\"color: #ABB2BF\\"> ptr;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t\\tcout </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"~Derive() \\"</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">&lt;&lt;</span><span style=\\"color: #ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">private:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> mb;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">ptr;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">};</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">int</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">main</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\tBase </span><span style=\\"color: #56B6C2\\">*</span><span style=\\"color: #ABB2BF\\">pb </span><span style=\\"color: #C678DD\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">new</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">Derive</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #D19A66\\">10</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #E5C07B\\">pb</span><span style=\\"color: #ABB2BF\\">-&gt;</span><span style=\\"color: #61AFEF\\">show</span><span style=\\"color: #ABB2BF\\">();</span><span style=\\"color: #7F848E; font-style: italic\\">//动态绑定pb Base*   *pb Derive</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">delete</span><span style=\\"color: #ABB2BF\\"> pb;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">\\t</span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{s as data};
