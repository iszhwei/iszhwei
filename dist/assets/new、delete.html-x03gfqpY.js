const e=JSON.parse('{"key":"v-c97d844a","path":"/ccpp/02%20c__%E5%9F%BA%E7%A1%80/new%E3%80%81delete.html","title":"new/delete关键字","lang":"zh-CN","frontmatter":{"title":"new/delete关键字","icon":"file","order":4,"headerDepth":4,"category":["c/c++"],"tag":["c++基础"],"description":"new/delete关键字 1681303112683-41ec0262-0bfb-46e8-a571-0e4cd626492a 在C语言中，我们写程序时，总是会有动态开辟内存的需求，每到这个时候我们就会想到用malloc/free 去从堆里面动态申请出来一段内存给我们用。但对这一块申请出来的内存，往往还需要我们对它进行稍许的“加工”后即初始化 才能为我们所用，虽然C语言为我们提供了calloc来开辟一段初始化好（0)的一段内存，但，它同样束手无策。同时，为了保持良好的编程习惯，我们也都应该对申请出来的内存作手动进行初始化。于是到了C++中就有了new/delete, new []/delete[] 。用它们便可实现动态的内存管理。","head":[["meta",{"property":"og:url","content":"https://iszhwei.gitee.io/ccpp/02%20c__%E5%9F%BA%E7%A1%80/new%E3%80%81delete.html"}],["meta",{"property":"og:site_name","content":"张威的编程学习笔记"}],["meta",{"property":"og:title","content":"new/delete关键字"}],["meta",{"property":"og:description","content":"new/delete关键字 1681303112683-41ec0262-0bfb-46e8-a571-0e4cd626492a 在C语言中，我们写程序时，总是会有动态开辟内存的需求，每到这个时候我们就会想到用malloc/free 去从堆里面动态申请出来一段内存给我们用。但对这一块申请出来的内存，往往还需要我们对它进行稍许的“加工”后即初始化 才能为我们所用，虽然C语言为我们提供了calloc来开辟一段初始化好（0)的一段内存，但，它同样束手无策。同时，为了保持良好的编程习惯，我们也都应该对申请出来的内存作手动进行初始化。于是到了C++中就有了new/delete, new []/delete[] 。用它们便可实现动态的内存管理。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"张威"}],["meta",{"property":"article:tag","content":"c++基础"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"new/delete关键字\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张威\\",\\"url\\":\\"https://iszhwei.gitee.io\\"}]}"]]},"headers":[{"level":2,"title":"开辟一个元素的空间","slug":"开辟一个元素的空间","link":"#开辟一个元素的空间","children":[]},{"level":2,"title":"有几种new的方式","slug":"有几种new的方式","link":"#有几种new的方式","children":[]},{"level":2,"title":"开辟一个数组的空间","slug":"开辟一个数组的空间","link":"#开辟一个数组的空间","children":[{"level":3,"title":"常考题：new/delete表达式与malloc/free的区别是？","slug":"常考题-new-delete表达式与malloc-free的区别是","link":"#常考题-new-delete表达式与malloc-free的区别是","children":[]},{"level":3,"title":"既然new/delete的功能完全覆盖了malloc/free，为什么C++还保留malloc/free呢？","slug":"既然new-delete的功能完全覆盖了malloc-free-为什么c-还保留malloc-free呢","link":"#既然new-delete的功能完全覆盖了malloc-free-为什么c-还保留malloc-free呢","children":[]}]},{"level":2,"title":"课堂代码","slug":"课堂代码","link":"#课堂代码","children":[]},{"level":2,"title":"new和deletea原理","slug":"new和deletea原理","link":"#new和deletea原理","children":[]},{"level":2,"title":"new[] 和delete 或者说new和delete[]能混用吗？C++如何区分单个元素和数组内存分配和释放","slug":"new-和delete-或者说new和delete-能混用吗-c-如何区分单个元素和数组内存分配和释放","link":"#new-和delete-或者说new和delete-能混用吗-c-如何区分单个元素和数组内存分配和释放","children":[]},{"level":2,"title":"[深入理解C++ new/delete, new ]/delete[]动态内存管理","slug":"深入理解c-new-delete-new-delete-动态内存管理","link":"#深入理解c-new-delete-new-delete-动态内存管理","children":[{"level":3,"title":"delete[]实际做了这样几件事情：","slug":"delete-实际做了这样几件事情","link":"#delete-实际做了这样几件事情","children":[]},{"level":3,"title":"new最后将开辟好内存用指针p返回，pA接收它。可为什么p 和pA 会差上4字节？","slug":"new最后将开辟好内存用指针p返回-pa接收它。可为什么p-和pa-会差上4字节","link":"#new最后将开辟好内存用指针p返回-pa接收它。可为什么p-和pa-会差上4字节","children":[]},{"level":3,"title":"new/delete, new []/delete[], malloc/free配套使用！","slug":"new-delete-new-delete-malloc-free配套使用","link":"#new-delete-new-delete-malloc-free配套使用","children":[]}]},{"level":2,"title":"NULL、0、nullptr 区别分析","slug":"null、0、nullptr-区别分析","link":"#null、0、nullptr-区别分析","children":[{"level":3,"title":"C的NULL","slug":"c的null","link":"#c的null","children":[]},{"level":3,"title":"C++的0","slug":"c-的0","link":"#c-的0","children":[]},{"level":3,"title":"C++ 11的nullptr","slug":"c-11的nullptr","link":"#c-11的nullptr","children":[]}]},{"level":2,"title":"内存溢出、踩内存、内存越界、野指针、悬空指针","slug":"内存溢出、踩内存、内存越界、野指针、悬空指针","link":"#内存溢出、踩内存、内存越界、野指针、悬空指针","children":[]}],"git":{},"readingTime":{"minutes":15.07,"words":4520},"filePathRelative":"ccpp/02 c++基础/new、delete.md","excerpt":"<h1> new/delete关键字</h1>\\n<figure><figcaption>1681303112683-41ec0262-0bfb-46e8-a571-0e4cd626492a</figcaption></figure>\\n<!--more-->\\n<p>在C语言中，我们写程序时，总是会有动态开辟内存的需求，每到这个时候我们就会想到用<code>malloc/free </code>去从堆里面动态申请出来一段内存给我们用。但对这一块申请出来的内存，往往还需要我们对它进行稍许的“加工”后<strong>即初始化</strong> 才能为我们所用，<u>虽然C语言为我们提供了<code>calloc</code>来开辟一段初始化好（0)的一段内存，但，它同样束手无策</u>。同时，为了保持良好的编程习惯，我们也都应该对申请出来的内存作<u>手动进行初始化</u>。于是到了C++中就有了new/delete, new []/delete[] 。用它们便可实现动态的内存管理。</p>","autoDesc":true}');export{e as data};
